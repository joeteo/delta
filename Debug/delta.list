
delta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000edf4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000790  0800efa8  0800efa8  0001efa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f738  0800f738  00020230  2**0
                  CONTENTS
  4 .ARM          00000008  0800f738  0800f738  0001f738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f740  0800f740  00020230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f740  0800f740  0001f740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f744  0800f744  0001f744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  0800f748  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020230  2**0
                  CONTENTS
 10 .bss          00004270  20000230  20000230  00020230  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200044a0  200044a0  00020230  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c763  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000045a4  00000000  00000000  0003c9c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b8  00000000  00000000  00040f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014d0  00000000  00000000  00042620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000290cb  00000000  00000000  00043af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cd81  00000000  00000000  0006cbbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ebdd8  00000000  00000000  0008993c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00175714  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000723c  00000000  00000000  00175764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000230 	.word	0x20000230
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ef8c 	.word	0x0800ef8c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000234 	.word	0x20000234
 80001ec:	0800ef8c 	.word	0x0800ef8c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b974 	b.w	8000f08 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468e      	mov	lr, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d14d      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c46:	428a      	cmp	r2, r1
 8000c48:	4694      	mov	ip, r2
 8000c4a:	d969      	bls.n	8000d20 <__udivmoddi4+0xe8>
 8000c4c:	fab2 f282 	clz	r2, r2
 8000c50:	b152      	cbz	r2, 8000c68 <__udivmoddi4+0x30>
 8000c52:	fa01 f302 	lsl.w	r3, r1, r2
 8000c56:	f1c2 0120 	rsb	r1, r2, #32
 8000c5a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c5e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c62:	ea41 0e03 	orr.w	lr, r1, r3
 8000c66:	4094      	lsls	r4, r2
 8000c68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c6c:	0c21      	lsrs	r1, r4, #16
 8000c6e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c72:	fa1f f78c 	uxth.w	r7, ip
 8000c76:	fb08 e316 	mls	r3, r8, r6, lr
 8000c7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c7e:	fb06 f107 	mul.w	r1, r6, r7
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8e:	f080 811f 	bcs.w	8000ed0 <__udivmoddi4+0x298>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 811c 	bls.w	8000ed0 <__udivmoddi4+0x298>
 8000c98:	3e02      	subs	r6, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a5b      	subs	r3, r3, r1
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cac:	fb00 f707 	mul.w	r7, r0, r7
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	d90a      	bls.n	8000cca <__udivmoddi4+0x92>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cbc:	f080 810a 	bcs.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	f240 8107 	bls.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc6:	4464      	add	r4, ip
 8000cc8:	3802      	subs	r0, #2
 8000cca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cce:	1be4      	subs	r4, r4, r7
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	b11d      	cbz	r5, 8000cdc <__udivmoddi4+0xa4>
 8000cd4:	40d4      	lsrs	r4, r2
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cdc:	4631      	mov	r1, r6
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0xc2>
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	f000 80ef 	beq.w	8000eca <__udivmoddi4+0x292>
 8000cec:	2600      	movs	r6, #0
 8000cee:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf2:	4630      	mov	r0, r6
 8000cf4:	4631      	mov	r1, r6
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	fab3 f683 	clz	r6, r3
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	d14a      	bne.n	8000d98 <__udivmoddi4+0x160>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0xd4>
 8000d06:	4282      	cmp	r2, r0
 8000d08:	f200 80f9 	bhi.w	8000efe <__udivmoddi4+0x2c6>
 8000d0c:	1a84      	subs	r4, r0, r2
 8000d0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	469e      	mov	lr, r3
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	d0e0      	beq.n	8000cdc <__udivmoddi4+0xa4>
 8000d1a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d1e:	e7dd      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000d20:	b902      	cbnz	r2, 8000d24 <__udivmoddi4+0xec>
 8000d22:	deff      	udf	#255	; 0xff
 8000d24:	fab2 f282 	clz	r2, r2
 8000d28:	2a00      	cmp	r2, #0
 8000d2a:	f040 8092 	bne.w	8000e52 <__udivmoddi4+0x21a>
 8000d2e:	eba1 010c 	sub.w	r1, r1, ip
 8000d32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d36:	fa1f fe8c 	uxth.w	lr, ip
 8000d3a:	2601      	movs	r6, #1
 8000d3c:	0c20      	lsrs	r0, r4, #16
 8000d3e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d42:	fb07 1113 	mls	r1, r7, r3, r1
 8000d46:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d4a:	fb0e f003 	mul.w	r0, lr, r3
 8000d4e:	4288      	cmp	r0, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x12c>
 8000d52:	eb1c 0101 	adds.w	r1, ip, r1
 8000d56:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x12a>
 8000d5c:	4288      	cmp	r0, r1
 8000d5e:	f200 80cb 	bhi.w	8000ef8 <__udivmoddi4+0x2c0>
 8000d62:	4643      	mov	r3, r8
 8000d64:	1a09      	subs	r1, r1, r0
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d6c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d70:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d74:	fb0e fe00 	mul.w	lr, lr, r0
 8000d78:	45a6      	cmp	lr, r4
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x156>
 8000d7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d84:	d202      	bcs.n	8000d8c <__udivmoddi4+0x154>
 8000d86:	45a6      	cmp	lr, r4
 8000d88:	f200 80bb 	bhi.w	8000f02 <__udivmoddi4+0x2ca>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	eba4 040e 	sub.w	r4, r4, lr
 8000d92:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d96:	e79c      	b.n	8000cd2 <__udivmoddi4+0x9a>
 8000d98:	f1c6 0720 	rsb	r7, r6, #32
 8000d9c:	40b3      	lsls	r3, r6
 8000d9e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000da2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000da6:	fa20 f407 	lsr.w	r4, r0, r7
 8000daa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dae:	431c      	orrs	r4, r3
 8000db0:	40f9      	lsrs	r1, r7
 8000db2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000db6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dba:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dbe:	0c20      	lsrs	r0, r4, #16
 8000dc0:	fa1f fe8c 	uxth.w	lr, ip
 8000dc4:	fb09 1118 	mls	r1, r9, r8, r1
 8000dc8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dcc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dd0:	4288      	cmp	r0, r1
 8000dd2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd6:	d90b      	bls.n	8000df0 <__udivmoddi4+0x1b8>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de0:	f080 8088 	bcs.w	8000ef4 <__udivmoddi4+0x2bc>
 8000de4:	4288      	cmp	r0, r1
 8000de6:	f240 8085 	bls.w	8000ef4 <__udivmoddi4+0x2bc>
 8000dea:	f1a8 0802 	sub.w	r8, r8, #2
 8000dee:	4461      	add	r1, ip
 8000df0:	1a09      	subs	r1, r1, r0
 8000df2:	b2a4      	uxth	r4, r4
 8000df4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000df8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dfc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e00:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e04:	458e      	cmp	lr, r1
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x1e2>
 8000e08:	eb1c 0101 	adds.w	r1, ip, r1
 8000e0c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e10:	d26c      	bcs.n	8000eec <__udivmoddi4+0x2b4>
 8000e12:	458e      	cmp	lr, r1
 8000e14:	d96a      	bls.n	8000eec <__udivmoddi4+0x2b4>
 8000e16:	3802      	subs	r0, #2
 8000e18:	4461      	add	r1, ip
 8000e1a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e1e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e22:	eba1 010e 	sub.w	r1, r1, lr
 8000e26:	42a1      	cmp	r1, r4
 8000e28:	46c8      	mov	r8, r9
 8000e2a:	46a6      	mov	lr, r4
 8000e2c:	d356      	bcc.n	8000edc <__udivmoddi4+0x2a4>
 8000e2e:	d053      	beq.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e30:	b15d      	cbz	r5, 8000e4a <__udivmoddi4+0x212>
 8000e32:	ebb3 0208 	subs.w	r2, r3, r8
 8000e36:	eb61 010e 	sbc.w	r1, r1, lr
 8000e3a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e3e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e42:	40f1      	lsrs	r1, r6
 8000e44:	431f      	orrs	r7, r3
 8000e46:	e9c5 7100 	strd	r7, r1, [r5]
 8000e4a:	2600      	movs	r6, #0
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	f1c2 0320 	rsb	r3, r2, #32
 8000e56:	40d8      	lsrs	r0, r3
 8000e58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e5c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e60:	4091      	lsls	r1, r2
 8000e62:	4301      	orrs	r1, r0
 8000e64:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e68:	fa1f fe8c 	uxth.w	lr, ip
 8000e6c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e70:	fb07 3610 	mls	r6, r7, r0, r3
 8000e74:	0c0b      	lsrs	r3, r1, #16
 8000e76:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e7a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	fa04 f402 	lsl.w	r4, r4, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x260>
 8000e86:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e8e:	d22f      	bcs.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e90:	429e      	cmp	r6, r3
 8000e92:	d92d      	bls.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e94:	3802      	subs	r0, #2
 8000e96:	4463      	add	r3, ip
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	b289      	uxth	r1, r1
 8000e9c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ea0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ea4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x28a>
 8000eb0:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000eb8:	d216      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d914      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000ebe:	3e02      	subs	r6, #2
 8000ec0:	4461      	add	r1, ip
 8000ec2:	1ac9      	subs	r1, r1, r3
 8000ec4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ec8:	e738      	b.n	8000d3c <__udivmoddi4+0x104>
 8000eca:	462e      	mov	r6, r5
 8000ecc:	4628      	mov	r0, r5
 8000ece:	e705      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000ed0:	4606      	mov	r6, r0
 8000ed2:	e6e3      	b.n	8000c9c <__udivmoddi4+0x64>
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	e6f8      	b.n	8000cca <__udivmoddi4+0x92>
 8000ed8:	454b      	cmp	r3, r9
 8000eda:	d2a9      	bcs.n	8000e30 <__udivmoddi4+0x1f8>
 8000edc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ee4:	3801      	subs	r0, #1
 8000ee6:	e7a3      	b.n	8000e30 <__udivmoddi4+0x1f8>
 8000ee8:	4646      	mov	r6, r8
 8000eea:	e7ea      	b.n	8000ec2 <__udivmoddi4+0x28a>
 8000eec:	4620      	mov	r0, r4
 8000eee:	e794      	b.n	8000e1a <__udivmoddi4+0x1e2>
 8000ef0:	4640      	mov	r0, r8
 8000ef2:	e7d1      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ef4:	46d0      	mov	r8, sl
 8000ef6:	e77b      	b.n	8000df0 <__udivmoddi4+0x1b8>
 8000ef8:	3b02      	subs	r3, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	e732      	b.n	8000d64 <__udivmoddi4+0x12c>
 8000efe:	4630      	mov	r0, r6
 8000f00:	e709      	b.n	8000d16 <__udivmoddi4+0xde>
 8000f02:	4464      	add	r4, ip
 8000f04:	3802      	subs	r0, #2
 8000f06:	e742      	b.n	8000d8e <__udivmoddi4+0x156>

08000f08 <__aeabi_idiv0>:
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	0000      	movs	r0, r0
	...

08000f10 <ServoConversion>:

uint16_t GP[3];

double coord[3];

void ServoConversion() {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
    GP[0] = (uint16_t)(((ThetaA + 147.9) / 0.29)+0.5);
 8000f14:	4b3a      	ldr	r3, [pc, #232]	; (8001000 <ServoConversion+0xf0>)
 8000f16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f1a:	a335      	add	r3, pc, #212	; (adr r3, 8000ff0 <ServoConversion+0xe0>)
 8000f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f20:	f7ff f9c4 	bl	80002ac <__adddf3>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4610      	mov	r0, r2
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	a332      	add	r3, pc, #200	; (adr r3, 8000ff8 <ServoConversion+0xe8>)
 8000f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f32:	f7ff fc9b 	bl	800086c <__aeabi_ddiv>
 8000f36:	4602      	mov	r2, r0
 8000f38:	460b      	mov	r3, r1
 8000f3a:	4610      	mov	r0, r2
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f04f 0200 	mov.w	r2, #0
 8000f42:	4b30      	ldr	r3, [pc, #192]	; (8001004 <ServoConversion+0xf4>)
 8000f44:	f7ff f9b2 	bl	80002ac <__adddf3>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f7ff fe3a 	bl	8000bc8 <__aeabi_d2uiz>
 8000f54:	4603      	mov	r3, r0
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	4b2b      	ldr	r3, [pc, #172]	; (8001008 <ServoConversion+0xf8>)
 8000f5a:	801a      	strh	r2, [r3, #0]
    GP[1] = (uint16_t)(((ThetaB + 147.9) / 0.29)+0.5);
 8000f5c:	4b2b      	ldr	r3, [pc, #172]	; (800100c <ServoConversion+0xfc>)
 8000f5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f62:	a323      	add	r3, pc, #140	; (adr r3, 8000ff0 <ServoConversion+0xe0>)
 8000f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f68:	f7ff f9a0 	bl	80002ac <__adddf3>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	4610      	mov	r0, r2
 8000f72:	4619      	mov	r1, r3
 8000f74:	a320      	add	r3, pc, #128	; (adr r3, 8000ff8 <ServoConversion+0xe8>)
 8000f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7a:	f7ff fc77 	bl	800086c <__aeabi_ddiv>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	4610      	mov	r0, r2
 8000f84:	4619      	mov	r1, r3
 8000f86:	f04f 0200 	mov.w	r2, #0
 8000f8a:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <ServoConversion+0xf4>)
 8000f8c:	f7ff f98e 	bl	80002ac <__adddf3>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	4610      	mov	r0, r2
 8000f96:	4619      	mov	r1, r3
 8000f98:	f7ff fe16 	bl	8000bc8 <__aeabi_d2uiz>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	4b19      	ldr	r3, [pc, #100]	; (8001008 <ServoConversion+0xf8>)
 8000fa2:	805a      	strh	r2, [r3, #2]
    GP[2] = (uint16_t)(((ThetaC + 147.9) / 0.29)+0.5);
 8000fa4:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <ServoConversion+0x100>)
 8000fa6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000faa:	a311      	add	r3, pc, #68	; (adr r3, 8000ff0 <ServoConversion+0xe0>)
 8000fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb0:	f7ff f97c 	bl	80002ac <__adddf3>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	4610      	mov	r0, r2
 8000fba:	4619      	mov	r1, r3
 8000fbc:	a30e      	add	r3, pc, #56	; (adr r3, 8000ff8 <ServoConversion+0xe8>)
 8000fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc2:	f7ff fc53 	bl	800086c <__aeabi_ddiv>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	4610      	mov	r0, r2
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <ServoConversion+0xf4>)
 8000fd4:	f7ff f96a 	bl	80002ac <__adddf3>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	4610      	mov	r0, r2
 8000fde:	4619      	mov	r1, r3
 8000fe0:	f7ff fdf2 	bl	8000bc8 <__aeabi_d2uiz>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	4b07      	ldr	r3, [pc, #28]	; (8001008 <ServoConversion+0xf8>)
 8000fea:	809a      	strh	r2, [r3, #4]
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	cccccccd 	.word	0xcccccccd
 8000ff4:	40627ccc 	.word	0x40627ccc
 8000ff8:	28f5c28f 	.word	0x28f5c28f
 8000ffc:	3fd28f5c 	.word	0x3fd28f5c
 8001000:	20000268 	.word	0x20000268
 8001004:	3fe00000 	.word	0x3fe00000
 8001008:	20000280 	.word	0x20000280
 800100c:	20000270 	.word	0x20000270
 8001010:	20000278 	.word	0x20000278
 8001014:	00000000 	.word	0x00000000

08001018 <ConversionFromServo>:

double* ConversionFromServo(uint16_t PP0, uint16_t PP1, uint16_t PP2) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	80fb      	strh	r3, [r7, #6]
 8001022:	460b      	mov	r3, r1
 8001024:	80bb      	strh	r3, [r7, #4]
 8001026:	4613      	mov	r3, r2
 8001028:	807b      	strh	r3, [r7, #2]
	static double theta[3];

	theta[0]=0.0;
 800102a:	4933      	ldr	r1, [pc, #204]	; (80010f8 <ConversionFromServo+0xe0>)
 800102c:	f04f 0200 	mov.w	r2, #0
 8001030:	f04f 0300 	mov.w	r3, #0
 8001034:	e9c1 2300 	strd	r2, r3, [r1]
	theta[1]=0.0;
 8001038:	492f      	ldr	r1, [pc, #188]	; (80010f8 <ConversionFromServo+0xe0>)
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	f04f 0300 	mov.w	r3, #0
 8001042:	e9c1 2302 	strd	r2, r3, [r1, #8]
	theta[2]=0.0;
 8001046:	492c      	ldr	r1, [pc, #176]	; (80010f8 <ConversionFromServo+0xe0>)
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	e9c1 2304 	strd	r2, r3, [r1, #16]

	theta[0]=(PP0*0.29)-147.9;
 8001054:	88fb      	ldrh	r3, [r7, #6]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fa74 	bl	8000544 <__aeabi_i2d>
 800105c:	a322      	add	r3, pc, #136	; (adr r3, 80010e8 <ConversionFromServo+0xd0>)
 800105e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001062:	f7ff fad9 	bl	8000618 <__aeabi_dmul>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4610      	mov	r0, r2
 800106c:	4619      	mov	r1, r3
 800106e:	a320      	add	r3, pc, #128	; (adr r3, 80010f0 <ConversionFromServo+0xd8>)
 8001070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001074:	f7ff f918 	bl	80002a8 <__aeabi_dsub>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	491e      	ldr	r1, [pc, #120]	; (80010f8 <ConversionFromServo+0xe0>)
 800107e:	e9c1 2300 	strd	r2, r3, [r1]
	theta[1]=(PP1*0.29)-147.9;
 8001082:	88bb      	ldrh	r3, [r7, #4]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fa5d 	bl	8000544 <__aeabi_i2d>
 800108a:	a317      	add	r3, pc, #92	; (adr r3, 80010e8 <ConversionFromServo+0xd0>)
 800108c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001090:	f7ff fac2 	bl	8000618 <__aeabi_dmul>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	4610      	mov	r0, r2
 800109a:	4619      	mov	r1, r3
 800109c:	a314      	add	r3, pc, #80	; (adr r3, 80010f0 <ConversionFromServo+0xd8>)
 800109e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a2:	f7ff f901 	bl	80002a8 <__aeabi_dsub>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	4913      	ldr	r1, [pc, #76]	; (80010f8 <ConversionFromServo+0xe0>)
 80010ac:	e9c1 2302 	strd	r2, r3, [r1, #8]
	theta[2]=(PP2*0.29)-147.9;
 80010b0:	887b      	ldrh	r3, [r7, #2]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fa46 	bl	8000544 <__aeabi_i2d>
 80010b8:	a30b      	add	r3, pc, #44	; (adr r3, 80010e8 <ConversionFromServo+0xd0>)
 80010ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010be:	f7ff faab 	bl	8000618 <__aeabi_dmul>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	4610      	mov	r0, r2
 80010c8:	4619      	mov	r1, r3
 80010ca:	a309      	add	r3, pc, #36	; (adr r3, 80010f0 <ConversionFromServo+0xd8>)
 80010cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d0:	f7ff f8ea 	bl	80002a8 <__aeabi_dsub>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4907      	ldr	r1, [pc, #28]	; (80010f8 <ConversionFromServo+0xe0>)
 80010da:	e9c1 2304 	strd	r2, r3, [r1, #16]

	return theta;
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <ConversionFromServo+0xe0>)

}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	28f5c28f 	.word	0x28f5c28f
 80010ec:	3fd28f5c 	.word	0x3fd28f5c
 80010f0:	cccccccd 	.word	0xcccccccd
 80010f4:	40627ccc 	.word	0x40627ccc
 80010f8:	200002a0 	.word	0x200002a0

080010fc <setCoordinates>:

void setCoordinates(double x, double y, double z) {
 80010fc:	b480      	push	{r7}
 80010fe:	b087      	sub	sp, #28
 8001100:	af00      	add	r7, sp, #0
 8001102:	ed87 0b04 	vstr	d0, [r7, #16]
 8001106:	ed87 1b02 	vstr	d1, [r7, #8]
 800110a:	ed87 2b00 	vstr	d2, [r7]
    C.x = x;
 800110e:	490a      	ldr	r1, [pc, #40]	; (8001138 <setCoordinates+0x3c>)
 8001110:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001114:	e9c1 2300 	strd	r2, r3, [r1]
    C.y = y;
 8001118:	4907      	ldr	r1, [pc, #28]	; (8001138 <setCoordinates+0x3c>)
 800111a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800111e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    C.z = z;
 8001122:	4905      	ldr	r1, [pc, #20]	; (8001138 <setCoordinates+0x3c>)
 8001124:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001128:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 800112c:	bf00      	nop
 800112e:	371c      	adds	r7, #28
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	20000250 	.word	0x20000250
 800113c:	00000000 	.word	0x00000000

08001140 <delta_calcAngleYZ>:


// inverse kinematics
// helper functions, calculates angle thetaA (for YZ-pane)
int delta_calcAngleYZ(double* Angle, double x0, double y0, double z0)
{
 8001140:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001144:	b096      	sub	sp, #88	; 0x58
 8001146:	af00      	add	r7, sp, #0
 8001148:	6278      	str	r0, [r7, #36]	; 0x24
 800114a:	ed87 0b06 	vstr	d0, [r7, #24]
 800114e:	ed87 1b04 	vstr	d1, [r7, #16]
 8001152:	ed87 2b02 	vstr	d2, [r7, #8]
    double y1 = -0.5 * 0.57735 * BaseRadius;  // f/2 * tan(30 deg)
 8001156:	a1d2      	add	r1, pc, #840	; (adr r1, 80014a0 <delta_calcAngleYZ+0x360>)
 8001158:	e9d1 0100 	ldrd	r0, r1, [r1]
 800115c:	a3d2      	add	r3, pc, #840	; (adr r3, 80014a8 <delta_calcAngleYZ+0x368>)
 800115e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001162:	f7ff fa59 	bl	8000618 <__aeabi_dmul>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    y0 -= 0.5 * 0.57735 * EndEffectorRadius;  // shift center to edge
 800116e:	f04f 0000 	mov.w	r0, #0
 8001172:	49c7      	ldr	r1, [pc, #796]	; (8001490 <delta_calcAngleYZ+0x350>)
 8001174:	a3c2      	add	r3, pc, #776	; (adr r3, 8001480 <delta_calcAngleYZ+0x340>)
 8001176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117a:	f7ff fa4d 	bl	8000618 <__aeabi_dmul>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001186:	f7ff f88f 	bl	80002a8 <__aeabi_dsub>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	e9c7 2304 	strd	r2, r3, [r7, #16]

// z = a + b*y
    double aV = (x0 * x0 + y0 * y0 + z0 * z0 + BicepLength * BicepLength - ForearmLength * ForearmLength - y1 * y1) / (2.0 * z0);
 8001192:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001196:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800119a:	f7ff fa3d 	bl	8000618 <__aeabi_dmul>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4690      	mov	r8, r2
 80011a4:	4699      	mov	r9, r3
 80011a6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011ae:	f7ff fa33 	bl	8000618 <__aeabi_dmul>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	4640      	mov	r0, r8
 80011b8:	4649      	mov	r1, r9
 80011ba:	f7ff f877 	bl	80002ac <__adddf3>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4690      	mov	r8, r2
 80011c4:	4699      	mov	r9, r3
 80011c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011ce:	f7ff fa23 	bl	8000618 <__aeabi_dmul>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4640      	mov	r0, r8
 80011d8:	4649      	mov	r1, r9
 80011da:	f7ff f867 	bl	80002ac <__adddf3>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4690      	mov	r8, r2
 80011e4:	4699      	mov	r9, r3
 80011e6:	f04f 0000 	mov.w	r0, #0
 80011ea:	49aa      	ldr	r1, [pc, #680]	; (8001494 <delta_calcAngleYZ+0x354>)
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	4ba8      	ldr	r3, [pc, #672]	; (8001494 <delta_calcAngleYZ+0x354>)
 80011f2:	f7ff fa11 	bl	8000618 <__aeabi_dmul>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4640      	mov	r0, r8
 80011fc:	4649      	mov	r1, r9
 80011fe:	f7ff f855 	bl	80002ac <__adddf3>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4690      	mov	r8, r2
 8001208:	4699      	mov	r9, r3
 800120a:	f04f 0000 	mov.w	r0, #0
 800120e:	49a2      	ldr	r1, [pc, #648]	; (8001498 <delta_calcAngleYZ+0x358>)
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	4ba0      	ldr	r3, [pc, #640]	; (8001498 <delta_calcAngleYZ+0x358>)
 8001216:	f7ff f9ff 	bl	8000618 <__aeabi_dmul>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4640      	mov	r0, r8
 8001220:	4649      	mov	r1, r9
 8001222:	f7ff f841 	bl	80002a8 <__aeabi_dsub>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4690      	mov	r8, r2
 800122c:	4699      	mov	r9, r3
 800122e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001232:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001236:	f7ff f9ef 	bl	8000618 <__aeabi_dmul>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	4640      	mov	r0, r8
 8001240:	4649      	mov	r1, r9
 8001242:	f7ff f831 	bl	80002a8 <__aeabi_dsub>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4690      	mov	r8, r2
 800124c:	4699      	mov	r9, r3
 800124e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	f7ff f829 	bl	80002ac <__adddf3>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4640      	mov	r0, r8
 8001260:	4649      	mov	r1, r9
 8001262:	f7ff fb03 	bl	800086c <__aeabi_ddiv>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double bV = (y1 - y0) / z0;
 800126e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001272:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001276:	f7ff f817 	bl	80002a8 <__aeabi_dsub>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4610      	mov	r0, r2
 8001280:	4619      	mov	r1, r3
 8001282:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001286:	f7ff faf1 	bl	800086c <__aeabi_ddiv>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

    // discriminant
    double dV = -(aV + bV * y1) * (aV + bV * y1) + BicepLength * (bV * bV * BicepLength + BicepLength);
 8001292:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001296:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800129a:	f7ff f9bd 	bl	8000618 <__aeabi_dmul>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80012aa:	f7fe ffff 	bl	80002ac <__adddf3>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4614      	mov	r4, r2
 80012b4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80012b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80012bc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80012c0:	f7ff f9aa 	bl	8000618 <__aeabi_dmul>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80012d0:	f7fe ffec 	bl	80002ac <__adddf3>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4620      	mov	r0, r4
 80012da:	4629      	mov	r1, r5
 80012dc:	f7ff f99c 	bl	8000618 <__aeabi_dmul>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4614      	mov	r4, r2
 80012e6:	461d      	mov	r5, r3
 80012e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80012ec:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80012f0:	f7ff f992 	bl	8000618 <__aeabi_dmul>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4610      	mov	r0, r2
 80012fa:	4619      	mov	r1, r3
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	4b64      	ldr	r3, [pc, #400]	; (8001494 <delta_calcAngleYZ+0x354>)
 8001302:	f7ff f989 	bl	8000618 <__aeabi_dmul>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4610      	mov	r0, r2
 800130c:	4619      	mov	r1, r3
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	4b60      	ldr	r3, [pc, #384]	; (8001494 <delta_calcAngleYZ+0x354>)
 8001314:	f7fe ffca 	bl	80002ac <__adddf3>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4610      	mov	r0, r2
 800131e:	4619      	mov	r1, r3
 8001320:	f04f 0200 	mov.w	r2, #0
 8001324:	4b5b      	ldr	r3, [pc, #364]	; (8001494 <delta_calcAngleYZ+0x354>)
 8001326:	f7ff f977 	bl	8000618 <__aeabi_dmul>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4620      	mov	r0, r4
 8001330:	4629      	mov	r1, r5
 8001332:	f7fe ffbb 	bl	80002ac <__adddf3>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    if (dV < 0)
 800133e:	f04f 0200 	mov.w	r2, #0
 8001342:	f04f 0300 	mov.w	r3, #0
 8001346:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800134a:	f7ff fbd7 	bl	8000afc <__aeabi_dcmplt>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <delta_calcAngleYZ+0x21a>
    {
        return non_existing_povar_error; // non-existing povar.  return error, theta
 8001354:	f06f 0301 	mvn.w	r3, #1
 8001358:	e08d      	b.n	8001476 <delta_calcAngleYZ+0x336>
    }

    double yj = (y1 - aV * bV - sqrt(dV)) / (bV * bV + 1); // choosing outer povar
 800135a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800135e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001362:	f7ff f959 	bl	8000618 <__aeabi_dmul>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800136e:	f7fe ff9b 	bl	80002a8 <__aeabi_dsub>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4614      	mov	r4, r2
 8001378:	461d      	mov	r5, r3
 800137a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800137e:	f00c fac1 	bl	800d904 <sqrt>
 8001382:	ec53 2b10 	vmov	r2, r3, d0
 8001386:	4620      	mov	r0, r4
 8001388:	4629      	mov	r1, r5
 800138a:	f7fe ff8d 	bl	80002a8 <__aeabi_dsub>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4614      	mov	r4, r2
 8001394:	461d      	mov	r5, r3
 8001396:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800139a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800139e:	f7ff f93b 	bl	8000618 <__aeabi_dmul>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	4610      	mov	r0, r2
 80013a8:	4619      	mov	r1, r3
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	4b3b      	ldr	r3, [pc, #236]	; (800149c <delta_calcAngleYZ+0x35c>)
 80013b0:	f7fe ff7c 	bl	80002ac <__adddf3>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	4620      	mov	r0, r4
 80013ba:	4629      	mov	r1, r5
 80013bc:	f7ff fa56 	bl	800086c <__aeabi_ddiv>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    double zj = aV + bV * yj;
 80013c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80013cc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80013d0:	f7ff f922 	bl	8000618 <__aeabi_dmul>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80013dc:	f7fe ff66 	bl	80002ac <__adddf3>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    *Angle = atan2(-zj, (y1 - yj)) * 180.0 / pi + ((yj > y1) ? 180.0 : 0.0);
 80013e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ee:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80013f8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80013fc:	f7fe ff54 	bl	80002a8 <__aeabi_dsub>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	ec43 2b17 	vmov	d7, r2, r3
 8001408:	eeb0 1a47 	vmov.f32	s2, s14
 800140c:	eef0 1a67 	vmov.f32	s3, s15
 8001410:	ed97 0b00 	vldr	d0, [r7]
 8001414:	f00c fa74 	bl	800d900 <atan2>
 8001418:	ec51 0b10 	vmov	r0, r1, d0
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <delta_calcAngleYZ+0x354>)
 8001422:	f7ff f8f9 	bl	8000618 <__aeabi_dmul>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4610      	mov	r0, r2
 800142c:	4619      	mov	r1, r3
 800142e:	a316      	add	r3, pc, #88	; (adr r3, 8001488 <delta_calcAngleYZ+0x348>)
 8001430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001434:	f7ff fa1a 	bl	800086c <__aeabi_ddiv>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4614      	mov	r4, r2
 800143e:	461d      	mov	r5, r3
 8001440:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001444:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001448:	f7ff fb76 	bl	8000b38 <__aeabi_dcmpgt>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <delta_calcAngleYZ+0x31a>
 8001452:	f04f 0000 	mov.w	r0, #0
 8001456:	490f      	ldr	r1, [pc, #60]	; (8001494 <delta_calcAngleYZ+0x354>)
 8001458:	e003      	b.n	8001462 <delta_calcAngleYZ+0x322>
 800145a:	f04f 0000 	mov.w	r0, #0
 800145e:	f04f 0100 	mov.w	r1, #0
 8001462:	4622      	mov	r2, r4
 8001464:	462b      	mov	r3, r5
 8001466:	f7fe ff21 	bl	80002ac <__adddf3>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001470:	e9c1 2300 	strd	r2, r3, [r1]

    return no_error;  // return error, theta
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3758      	adds	r7, #88	; 0x58
 800147a:	46bd      	mov	sp, r7
 800147c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001480:	b50b0f28 	.word	0xb50b0f28
 8001484:	3fd279a6 	.word	0x3fd279a6
 8001488:	54442d18 	.word	0x54442d18
 800148c:	400921fb 	.word	0x400921fb
 8001490:	403e0000 	.word	0x403e0000
 8001494:	40668000 	.word	0x40668000
 8001498:	40740000 	.word	0x40740000
 800149c:	3ff00000 	.word	0x3ff00000
 80014a0:	00000000 	.word	0x00000000
 80014a4:	4050c000 	.word	0x4050c000
 80014a8:	b50b0f28 	.word	0xb50b0f28
 80014ac:	bfd279a6 	.word	0xbfd279a6

080014b0 <inverse>:


// inverse kinematics: (x0, y0, z0) -> (thetaA, thetaB, thetaC)

int inverse()
{
 80014b0:	b5b0      	push	{r4, r5, r7, lr}
 80014b2:	ed2d 8b02 	vpush	{d8}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
    ThetaA = 0;
 80014ba:	4985      	ldr	r1, [pc, #532]	; (80016d0 <inverse+0x220>)
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	f04f 0300 	mov.w	r3, #0
 80014c4:	e9c1 2300 	strd	r2, r3, [r1]
    ThetaB = 0;
 80014c8:	4982      	ldr	r1, [pc, #520]	; (80016d4 <inverse+0x224>)
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	f04f 0300 	mov.w	r3, #0
 80014d2:	e9c1 2300 	strd	r2, r3, [r1]
    ThetaC = 0;
 80014d6:	4980      	ldr	r1, [pc, #512]	; (80016d8 <inverse+0x228>)
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	f04f 0300 	mov.w	r3, #0
 80014e0:	e9c1 2300 	strd	r2, r3, [r1]

    int error = delta_calcAngleYZ(&ThetaA, C.x, C.y, C.z);
 80014e4:	4b7d      	ldr	r3, [pc, #500]	; (80016dc <inverse+0x22c>)
 80014e6:	ed93 7b00 	vldr	d7, [r3]
 80014ea:	4b7c      	ldr	r3, [pc, #496]	; (80016dc <inverse+0x22c>)
 80014ec:	ed93 6b02 	vldr	d6, [r3, #8]
 80014f0:	4b7a      	ldr	r3, [pc, #488]	; (80016dc <inverse+0x22c>)
 80014f2:	ed93 5b04 	vldr	d5, [r3, #16]
 80014f6:	eeb0 2a45 	vmov.f32	s4, s10
 80014fa:	eef0 2a65 	vmov.f32	s5, s11
 80014fe:	eeb0 1a46 	vmov.f32	s2, s12
 8001502:	eef0 1a66 	vmov.f32	s3, s13
 8001506:	eeb0 0a47 	vmov.f32	s0, s14
 800150a:	eef0 0a67 	vmov.f32	s1, s15
 800150e:	4870      	ldr	r0, [pc, #448]	; (80016d0 <inverse+0x220>)
 8001510:	f7ff fe16 	bl	8001140 <delta_calcAngleYZ>
 8001514:	6078      	str	r0, [r7, #4]
    if (error != no_error)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <inverse+0x70>
        return no_error;
 800151c:	2300      	movs	r3, #0
 800151e:	e0cb      	b.n	80016b8 <inverse+0x208>
    error = delta_calcAngleYZ(&ThetaB, C.x * cos120 + C.y * sin120, C.y * cos120 - C.x * sin120, C.z);
 8001520:	4b6e      	ldr	r3, [pc, #440]	; (80016dc <inverse+0x22c>)
 8001522:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	4b6d      	ldr	r3, [pc, #436]	; (80016e0 <inverse+0x230>)
 800152c:	f7ff f874 	bl	8000618 <__aeabi_dmul>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4614      	mov	r4, r2
 8001536:	461d      	mov	r5, r3
 8001538:	4b68      	ldr	r3, [pc, #416]	; (80016dc <inverse+0x22c>)
 800153a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800153e:	a362      	add	r3, pc, #392	; (adr r3, 80016c8 <inverse+0x218>)
 8001540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001544:	f7ff f868 	bl	8000618 <__aeabi_dmul>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4610      	mov	r0, r2
 800154e:	4619      	mov	r1, r3
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001558:	f7ff f988 	bl	800086c <__aeabi_ddiv>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4620      	mov	r0, r4
 8001562:	4629      	mov	r1, r5
 8001564:	f7fe fea2 	bl	80002ac <__adddf3>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	ec43 2b18 	vmov	d8, r2, r3
 8001570:	4b5a      	ldr	r3, [pc, #360]	; (80016dc <inverse+0x22c>)
 8001572:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	4b59      	ldr	r3, [pc, #356]	; (80016e0 <inverse+0x230>)
 800157c:	f7ff f84c 	bl	8000618 <__aeabi_dmul>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4614      	mov	r4, r2
 8001586:	461d      	mov	r5, r3
 8001588:	4b54      	ldr	r3, [pc, #336]	; (80016dc <inverse+0x22c>)
 800158a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800158e:	a34e      	add	r3, pc, #312	; (adr r3, 80016c8 <inverse+0x218>)
 8001590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001594:	f7ff f840 	bl	8000618 <__aeabi_dmul>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4610      	mov	r0, r2
 800159e:	4619      	mov	r1, r3
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015a8:	f7ff f960 	bl	800086c <__aeabi_ddiv>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4620      	mov	r0, r4
 80015b2:	4629      	mov	r1, r5
 80015b4:	f7fe fe78 	bl	80002a8 <__aeabi_dsub>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	ec43 2b16 	vmov	d6, r2, r3
 80015c0:	4b46      	ldr	r3, [pc, #280]	; (80016dc <inverse+0x22c>)
 80015c2:	ed93 7b04 	vldr	d7, [r3, #16]
 80015c6:	eeb0 2a47 	vmov.f32	s4, s14
 80015ca:	eef0 2a67 	vmov.f32	s5, s15
 80015ce:	eeb0 1a46 	vmov.f32	s2, s12
 80015d2:	eef0 1a66 	vmov.f32	s3, s13
 80015d6:	eeb0 0a48 	vmov.f32	s0, s16
 80015da:	eef0 0a68 	vmov.f32	s1, s17
 80015de:	483d      	ldr	r0, [pc, #244]	; (80016d4 <inverse+0x224>)
 80015e0:	f7ff fdae 	bl	8001140 <delta_calcAngleYZ>
 80015e4:	6078      	str	r0, [r7, #4]
    if (error != no_error)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <inverse+0x140>
        return no_error;
 80015ec:	2300      	movs	r3, #0
 80015ee:	e063      	b.n	80016b8 <inverse+0x208>
    error = delta_calcAngleYZ(&ThetaC, C.x * cos120 - C.y * sin120, C.y * cos120 + C.x * sin120, C.z);
 80015f0:	4b3a      	ldr	r3, [pc, #232]	; (80016dc <inverse+0x22c>)
 80015f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	4b39      	ldr	r3, [pc, #228]	; (80016e0 <inverse+0x230>)
 80015fc:	f7ff f80c 	bl	8000618 <__aeabi_dmul>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4614      	mov	r4, r2
 8001606:	461d      	mov	r5, r3
 8001608:	4b34      	ldr	r3, [pc, #208]	; (80016dc <inverse+0x22c>)
 800160a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800160e:	a32e      	add	r3, pc, #184	; (adr r3, 80016c8 <inverse+0x218>)
 8001610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001614:	f7ff f800 	bl	8000618 <__aeabi_dmul>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4610      	mov	r0, r2
 800161e:	4619      	mov	r1, r3
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001628:	f7ff f920 	bl	800086c <__aeabi_ddiv>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4620      	mov	r0, r4
 8001632:	4629      	mov	r1, r5
 8001634:	f7fe fe38 	bl	80002a8 <__aeabi_dsub>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	ec43 2b18 	vmov	d8, r2, r3
 8001640:	4b26      	ldr	r3, [pc, #152]	; (80016dc <inverse+0x22c>)
 8001642:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	4b25      	ldr	r3, [pc, #148]	; (80016e0 <inverse+0x230>)
 800164c:	f7fe ffe4 	bl	8000618 <__aeabi_dmul>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4614      	mov	r4, r2
 8001656:	461d      	mov	r5, r3
 8001658:	4b20      	ldr	r3, [pc, #128]	; (80016dc <inverse+0x22c>)
 800165a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800165e:	a31a      	add	r3, pc, #104	; (adr r3, 80016c8 <inverse+0x218>)
 8001660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001664:	f7fe ffd8 	bl	8000618 <__aeabi_dmul>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4610      	mov	r0, r2
 800166e:	4619      	mov	r1, r3
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001678:	f7ff f8f8 	bl	800086c <__aeabi_ddiv>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4620      	mov	r0, r4
 8001682:	4629      	mov	r1, r5
 8001684:	f7fe fe12 	bl	80002ac <__adddf3>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	ec43 2b16 	vmov	d6, r2, r3
 8001690:	4b12      	ldr	r3, [pc, #72]	; (80016dc <inverse+0x22c>)
 8001692:	ed93 7b04 	vldr	d7, [r3, #16]
 8001696:	eeb0 2a47 	vmov.f32	s4, s14
 800169a:	eef0 2a67 	vmov.f32	s5, s15
 800169e:	eeb0 1a46 	vmov.f32	s2, s12
 80016a2:	eef0 1a66 	vmov.f32	s3, s13
 80016a6:	eeb0 0a48 	vmov.f32	s0, s16
 80016aa:	eef0 0a68 	vmov.f32	s1, s17
 80016ae:	480a      	ldr	r0, [pc, #40]	; (80016d8 <inverse+0x228>)
 80016b0:	f7ff fd46 	bl	8001140 <delta_calcAngleYZ>
 80016b4:	6078      	str	r0, [r7, #4]

    return no_error;
 80016b6:	2300      	movs	r3, #0


}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	ecbd 8b02 	vpop	{d8}
 80016c2:	bdb0      	pop	{r4, r5, r7, pc}
 80016c4:	f3af 8000 	nop.w
 80016c8:	e8584caa 	.word	0xe8584caa
 80016cc:	3ffbb67a 	.word	0x3ffbb67a
 80016d0:	20000268 	.word	0x20000268
 80016d4:	20000270 	.word	0x20000270
 80016d8:	20000278 	.word	0x20000278
 80016dc:	20000250 	.word	0x20000250
 80016e0:	bfe00000 	.word	0xbfe00000
 80016e4:	00000000 	.word	0x00000000

080016e8 <forward>:

//forward kinematics: (thetaA, thetaB, thetaC) -> (x0, y0, z0)
int forward(double theta1, double theta2, double theta3)
{
 80016e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016ec:	b0b8      	sub	sp, #224	; 0xe0
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 80016f4:	ed87 1b08 	vstr	d1, [r7, #32]
 80016f8:	ed87 2b06 	vstr	d2, [r7, #24]

	  coord[0]=0.0;
 80016fc:	49c4      	ldr	r1, [pc, #784]	; (8001a10 <forward+0x328>)
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	f04f 0300 	mov.w	r3, #0
 8001706:	e9c1 2300 	strd	r2, r3, [r1]
	  coord[1]=0.0;
 800170a:	49c1      	ldr	r1, [pc, #772]	; (8001a10 <forward+0x328>)
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	f04f 0300 	mov.w	r3, #0
 8001714:	e9c1 2302 	strd	r2, r3, [r1, #8]
	  coord[2]=0.0;
 8001718:	49bd      	ldr	r1, [pc, #756]	; (8001a10 <forward+0x328>)
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	f04f 0300 	mov.w	r3, #0
 8001722:	e9c1 2304 	strd	r2, r3, [r1, #16]

	  double t = (BaseRadius-EndEffectorRadius)*tan30/2.0;
 8001726:	a1b4      	add	r1, pc, #720	; (adr r1, 80019f8 <forward+0x310>)
 8001728:	e9d1 0100 	ldrd	r0, r1, [r1]
 800172c:	f04f 0200 	mov.w	r2, #0
 8001730:	4bb8      	ldr	r3, [pc, #736]	; (8001a14 <forward+0x32c>)
 8001732:	f7fe fdb9 	bl	80002a8 <__aeabi_dsub>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4610      	mov	r0, r2
 800173c:	4619      	mov	r1, r3
 800173e:	a3b0      	add	r3, pc, #704	; (adr r3, 8001a00 <forward+0x318>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	f7ff f892 	bl	800086c <__aeabi_ddiv>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4610      	mov	r0, r2
 800174e:	4619      	mov	r1, r3
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001758:	f7ff f888 	bl	800086c <__aeabi_ddiv>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	  double dtr = pi/180.0;
 8001764:	a3a8      	add	r3, pc, #672	; (adr r3, 8001a08 <forward+0x320>)
 8001766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176a:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

	  theta1 *= dtr;
 800176e:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8001772:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001776:	f7fe ff4f 	bl	8000618 <__aeabi_dmul>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	  theta2 *= dtr;
 8001782:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8001786:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800178a:	f7fe ff45 	bl	8000618 <__aeabi_dmul>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	e9c7 2308 	strd	r2, r3, [r7, #32]
	  theta3 *= dtr;
 8001796:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800179a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800179e:	f7fe ff3b 	bl	8000618 <__aeabi_dmul>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	e9c7 2306 	strd	r2, r3, [r7, #24]

	  double y1 = -(t + BicepLength*cos(theta1));
 80017aa:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 80017ae:	f00b fffb 	bl	800d7a8 <cos>
 80017b2:	ec51 0b10 	vmov	r0, r1, d0
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	4b97      	ldr	r3, [pc, #604]	; (8001a18 <forward+0x330>)
 80017bc:	f7fe ff2c 	bl	8000618 <__aeabi_dmul>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4610      	mov	r0, r2
 80017c6:	4619      	mov	r1, r3
 80017c8:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80017cc:	f7fe fd6e 	bl	80002ac <__adddf3>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4611      	mov	r1, r2
 80017d6:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80017da:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80017de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	  double z1 = -BicepLength*sin(theta1);
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	4b8c      	ldr	r3, [pc, #560]	; (8001a18 <forward+0x330>)
 80017e8:	4690      	mov	r8, r2
 80017ea:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80017ee:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 80017f2:	f00c f82d 	bl	800d850 <sin>
 80017f6:	ec53 2b10 	vmov	r2, r3, d0
 80017fa:	4640      	mov	r0, r8
 80017fc:	4649      	mov	r1, r9
 80017fe:	f7fe ff0b 	bl	8000618 <__aeabi_dmul>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0

	  double y2 = (t + BicepLength*cos(theta2))*sin30;
 800180a:	ed97 0b08 	vldr	d0, [r7, #32]
 800180e:	f00b ffcb 	bl	800d7a8 <cos>
 8001812:	ec51 0b10 	vmov	r0, r1, d0
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	4b7f      	ldr	r3, [pc, #508]	; (8001a18 <forward+0x330>)
 800181c:	f7fe fefc 	bl	8000618 <__aeabi_dmul>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800182c:	f7fe fd3e 	bl	80002ac <__adddf3>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	f04f 0200 	mov.w	r2, #0
 800183c:	4b77      	ldr	r3, [pc, #476]	; (8001a1c <forward+0x334>)
 800183e:	f7fe feeb 	bl	8000618 <__aeabi_dmul>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	  double x2 = y2*tan60;
 800184a:	a36d      	add	r3, pc, #436	; (adr r3, 8001a00 <forward+0x318>)
 800184c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001850:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001854:	f7fe fee0 	bl	8000618 <__aeabi_dmul>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	  double z2 = -BicepLength*sin(theta2);
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	4b6c      	ldr	r3, [pc, #432]	; (8001a18 <forward+0x330>)
 8001866:	4692      	mov	sl, r2
 8001868:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800186c:	ed97 0b08 	vldr	d0, [r7, #32]
 8001870:	f00b ffee 	bl	800d850 <sin>
 8001874:	ec53 2b10 	vmov	r2, r3, d0
 8001878:	4650      	mov	r0, sl
 800187a:	4659      	mov	r1, fp
 800187c:	f7fe fecc 	bl	8000618 <__aeabi_dmul>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8

	  double y3 = (t + BicepLength*cos(theta3))*sin30;
 8001888:	ed97 0b06 	vldr	d0, [r7, #24]
 800188c:	f00b ff8c 	bl	800d7a8 <cos>
 8001890:	ec51 0b10 	vmov	r0, r1, d0
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	4b5f      	ldr	r3, [pc, #380]	; (8001a18 <forward+0x330>)
 800189a:	f7fe febd 	bl	8000618 <__aeabi_dmul>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4610      	mov	r0, r2
 80018a4:	4619      	mov	r1, r3
 80018a6:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80018aa:	f7fe fcff 	bl	80002ac <__adddf3>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4610      	mov	r0, r2
 80018b4:	4619      	mov	r1, r3
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	4b58      	ldr	r3, [pc, #352]	; (8001a1c <forward+0x334>)
 80018bc:	f7fe feac 	bl	8000618 <__aeabi_dmul>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	  double x3 = -y3*tan60;
 80018c8:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80018cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80018d0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80018d4:	a34a      	add	r3, pc, #296	; (adr r3, 8001a00 <forward+0x318>)
 80018d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018da:	4620      	mov	r0, r4
 80018dc:	4629      	mov	r1, r5
 80018de:	f7fe fe9b 	bl	8000618 <__aeabi_dmul>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	  double z3 = -BicepLength*sin(theta3);
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	4b4a      	ldr	r3, [pc, #296]	; (8001a18 <forward+0x330>)
 80018f0:	613a      	str	r2, [r7, #16]
 80018f2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	ed97 0b06 	vldr	d0, [r7, #24]
 80018fc:	f00b ffa8 	bl	800d850 <sin>
 8001900:	ec53 2b10 	vmov	r2, r3, d0
 8001904:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001908:	f7fe fe86 	bl	8000618 <__aeabi_dmul>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

	  double dnm = (y2-y1)*x3-(y3-y1)*x2;
 8001914:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8001918:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800191c:	f7fe fcc4 	bl	80002a8 <__aeabi_dsub>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4610      	mov	r0, r2
 8001926:	4619      	mov	r1, r3
 8001928:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800192c:	f7fe fe74 	bl	8000618 <__aeabi_dmul>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4614      	mov	r4, r2
 8001936:	461d      	mov	r5, r3
 8001938:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800193c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001940:	f7fe fcb2 	bl	80002a8 <__aeabi_dsub>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8001950:	f7fe fe62 	bl	8000618 <__aeabi_dmul>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4620      	mov	r0, r4
 800195a:	4629      	mov	r1, r5
 800195c:	f7fe fca4 	bl	80002a8 <__aeabi_dsub>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88

	  double w1 = y1*y1 + z1*z1;
 8001968:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800196c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001970:	f7fe fe52 	bl	8000618 <__aeabi_dmul>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4614      	mov	r4, r2
 800197a:	461d      	mov	r5, r3
 800197c:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001980:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8001984:	f7fe fe48 	bl	8000618 <__aeabi_dmul>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4620      	mov	r0, r4
 800198e:	4629      	mov	r1, r5
 8001990:	f7fe fc8c 	bl	80002ac <__adddf3>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	  double w2 = x2*x2 + y2*y2 + z2*z2;
 800199c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80019a0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80019a4:	f7fe fe38 	bl	8000618 <__aeabi_dmul>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4614      	mov	r4, r2
 80019ae:	461d      	mov	r5, r3
 80019b0:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80019b4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80019b8:	f7fe fe2e 	bl	8000618 <__aeabi_dmul>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4620      	mov	r0, r4
 80019c2:	4629      	mov	r1, r5
 80019c4:	f7fe fc72 	bl	80002ac <__adddf3>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4614      	mov	r4, r2
 80019ce:	461d      	mov	r5, r3
 80019d0:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80019d4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80019d8:	f7fe fe1e 	bl	8000618 <__aeabi_dmul>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4620      	mov	r0, r4
 80019e2:	4629      	mov	r1, r5
 80019e4:	f7fe fc62 	bl	80002ac <__adddf3>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	  double w3 = x3*x3 + y3*y3 + z3*z3;
 80019f0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80019f4:	e014      	b.n	8001a20 <forward+0x338>
 80019f6:	bf00      	nop
 80019f8:	00000000 	.word	0x00000000
 80019fc:	4050c000 	.word	0x4050c000
 8001a00:	e8584caa 	.word	0xe8584caa
 8001a04:	3ffbb67a 	.word	0x3ffbb67a
 8001a08:	a2529d39 	.word	0xa2529d39
 8001a0c:	3f91df46 	.word	0x3f91df46
 8001a10:	20000288 	.word	0x20000288
 8001a14:	403e0000 	.word	0x403e0000
 8001a18:	40668000 	.word	0x40668000
 8001a1c:	3fe00000 	.word	0x3fe00000
 8001a20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001a24:	f7fe fdf8 	bl	8000618 <__aeabi_dmul>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4614      	mov	r4, r2
 8001a2e:	461d      	mov	r5, r3
 8001a30:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001a34:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001a38:	f7fe fdee 	bl	8000618 <__aeabi_dmul>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4620      	mov	r0, r4
 8001a42:	4629      	mov	r1, r5
 8001a44:	f7fe fc32 	bl	80002ac <__adddf3>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4614      	mov	r4, r2
 8001a4e:	461d      	mov	r5, r3
 8001a50:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001a54:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001a58:	f7fe fdde 	bl	8000618 <__aeabi_dmul>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4620      	mov	r0, r4
 8001a62:	4629      	mov	r1, r5
 8001a64:	f7fe fc22 	bl	80002ac <__adddf3>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

	  // x = (a1*z + b1)/dnm
	  double a1 = (z2-z1)*(y3-y1)-(z3-z1)*(y2-y1);
 8001a70:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001a74:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001a78:	f7fe fc16 	bl	80002a8 <__aeabi_dsub>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4614      	mov	r4, r2
 8001a82:	461d      	mov	r5, r3
 8001a84:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8001a88:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001a8c:	f7fe fc0c 	bl	80002a8 <__aeabi_dsub>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4620      	mov	r0, r4
 8001a96:	4629      	mov	r1, r5
 8001a98:	f7fe fdbe 	bl	8000618 <__aeabi_dmul>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4614      	mov	r4, r2
 8001aa2:	461d      	mov	r5, r3
 8001aa4:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001aa8:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001aac:	f7fe fbfc 	bl	80002a8 <__aeabi_dsub>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4690      	mov	r8, r2
 8001ab6:	4699      	mov	r9, r3
 8001ab8:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8001abc:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001ac0:	f7fe fbf2 	bl	80002a8 <__aeabi_dsub>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4640      	mov	r0, r8
 8001aca:	4649      	mov	r1, r9
 8001acc:	f7fe fda4 	bl	8000618 <__aeabi_dmul>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	4629      	mov	r1, r5
 8001ad8:	f7fe fbe6 	bl	80002a8 <__aeabi_dsub>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	  double b1 = -((w2-w1)*(y3-y1)-(w3-w1)*(y2-y1))/2.0;
 8001ae4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001ae8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001aec:	f7fe fbdc 	bl	80002a8 <__aeabi_dsub>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4614      	mov	r4, r2
 8001af6:	461d      	mov	r5, r3
 8001af8:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8001afc:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001b00:	f7fe fbd2 	bl	80002a8 <__aeabi_dsub>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4620      	mov	r0, r4
 8001b0a:	4629      	mov	r1, r5
 8001b0c:	f7fe fd84 	bl	8000618 <__aeabi_dmul>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4614      	mov	r4, r2
 8001b16:	461d      	mov	r5, r3
 8001b18:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001b1c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001b20:	f7fe fbc2 	bl	80002a8 <__aeabi_dsub>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4690      	mov	r8, r2
 8001b2a:	4699      	mov	r9, r3
 8001b2c:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8001b30:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001b34:	f7fe fbb8 	bl	80002a8 <__aeabi_dsub>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4640      	mov	r0, r8
 8001b3e:	4649      	mov	r1, r9
 8001b40:	f7fe fd6a 	bl	8000618 <__aeabi_dmul>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4620      	mov	r0, r4
 8001b4a:	4629      	mov	r1, r5
 8001b4c:	f7fe fbac 	bl	80002a8 <__aeabi_dsub>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	60ba      	str	r2, [r7, #8]
 8001b56:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b64:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b68:	f7fe fe80 	bl	800086c <__aeabi_ddiv>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	  // y = (a2*z + b2)/dnm;
	  double a2 = -(z2-z1)*x3+(z3-z1)*x2;
 8001b74:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001b78:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001b7c:	f7fe fb94 	bl	80002a8 <__aeabi_dsub>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	603a      	str	r2, [r7, #0]
 8001b86:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8001b90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b94:	f7fe fd40 	bl	8000618 <__aeabi_dmul>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4614      	mov	r4, r2
 8001b9e:	461d      	mov	r5, r3
 8001ba0:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001ba4:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001ba8:	f7fe fb7e 	bl	80002a8 <__aeabi_dsub>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8001bb8:	f7fe fd2e 	bl	8000618 <__aeabi_dmul>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4620      	mov	r0, r4
 8001bc2:	4629      	mov	r1, r5
 8001bc4:	f7fe fb72 	bl	80002ac <__adddf3>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	  double b2 = ((w2-w1)*x3 - (w3-w1)*x2)/2.0;
 8001bd0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001bd4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001bd8:	f7fe fb66 	bl	80002a8 <__aeabi_dsub>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4610      	mov	r0, r2
 8001be2:	4619      	mov	r1, r3
 8001be4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8001be8:	f7fe fd16 	bl	8000618 <__aeabi_dmul>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4614      	mov	r4, r2
 8001bf2:	461d      	mov	r5, r3
 8001bf4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001bf8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001bfc:	f7fe fb54 	bl	80002a8 <__aeabi_dsub>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4610      	mov	r0, r2
 8001c06:	4619      	mov	r1, r3
 8001c08:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8001c0c:	f7fe fd04 	bl	8000618 <__aeabi_dmul>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4620      	mov	r0, r4
 8001c16:	4629      	mov	r1, r5
 8001c18:	f7fe fb46 	bl	80002a8 <__aeabi_dsub>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4610      	mov	r0, r2
 8001c22:	4619      	mov	r1, r3
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c2c:	f7fe fe1e 	bl	800086c <__aeabi_ddiv>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	  // a*z^2 + b*z + c = 0
	  double a = a1*a1 + a2*a2 + dnm*dnm;
 8001c38:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001c3c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001c40:	f7fe fcea 	bl	8000618 <__aeabi_dmul>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4614      	mov	r4, r2
 8001c4a:	461d      	mov	r5, r3
 8001c4c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c50:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001c54:	f7fe fce0 	bl	8000618 <__aeabi_dmul>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	4629      	mov	r1, r5
 8001c60:	f7fe fb24 	bl	80002ac <__adddf3>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4614      	mov	r4, r2
 8001c6a:	461d      	mov	r5, r3
 8001c6c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001c70:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8001c74:	f7fe fcd0 	bl	8000618 <__aeabi_dmul>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4620      	mov	r0, r4
 8001c7e:	4629      	mov	r1, r5
 8001c80:	f7fe fb14 	bl	80002ac <__adddf3>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	  double b = 2.0*(a1*b1 + a2*(b2-y1*dnm) - z1*dnm*dnm);
 8001c8c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001c90:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001c94:	f7fe fcc0 	bl	8000618 <__aeabi_dmul>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4614      	mov	r4, r2
 8001c9e:	461d      	mov	r5, r3
 8001ca0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001ca4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001ca8:	f7fe fcb6 	bl	8000618 <__aeabi_dmul>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001cb4:	f7fe faf8 	bl	80002a8 <__aeabi_dsub>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001cc4:	f7fe fca8 	bl	8000618 <__aeabi_dmul>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4620      	mov	r0, r4
 8001cce:	4629      	mov	r1, r5
 8001cd0:	f7fe faec 	bl	80002ac <__adddf3>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4614      	mov	r4, r2
 8001cda:	461d      	mov	r5, r3
 8001cdc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001ce0:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8001ce4:	f7fe fc98 	bl	8000618 <__aeabi_dmul>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4610      	mov	r0, r2
 8001cee:	4619      	mov	r1, r3
 8001cf0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001cf4:	f7fe fc90 	bl	8000618 <__aeabi_dmul>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4620      	mov	r0, r4
 8001cfe:	4629      	mov	r1, r5
 8001d00:	f7fe fad2 	bl	80002a8 <__aeabi_dsub>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	4610      	mov	r0, r2
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	f7fe facc 	bl	80002ac <__adddf3>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	  double c = (b2-y1*dnm)*(b2-y1*dnm) + b1*b1 + dnm*dnm*(z1*z1 - ForearmLength*ForearmLength);
 8001d1c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001d20:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001d24:	f7fe fc78 	bl	8000618 <__aeabi_dmul>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001d30:	f7fe faba 	bl	80002a8 <__aeabi_dsub>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4614      	mov	r4, r2
 8001d3a:	461d      	mov	r5, r3
 8001d3c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001d40:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001d44:	f7fe fc68 	bl	8000618 <__aeabi_dmul>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001d50:	f7fe faaa 	bl	80002a8 <__aeabi_dsub>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4620      	mov	r0, r4
 8001d5a:	4629      	mov	r1, r5
 8001d5c:	f7fe fc5c 	bl	8000618 <__aeabi_dmul>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4614      	mov	r4, r2
 8001d66:	461d      	mov	r5, r3
 8001d68:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001d6c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001d70:	f7fe fc52 	bl	8000618 <__aeabi_dmul>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4620      	mov	r0, r4
 8001d7a:	4629      	mov	r1, r5
 8001d7c:	f7fe fa96 	bl	80002ac <__adddf3>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4614      	mov	r4, r2
 8001d86:	461d      	mov	r5, r3
 8001d88:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001d8c:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8001d90:	f7fe fc42 	bl	8000618 <__aeabi_dmul>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4690      	mov	r8, r2
 8001d9a:	4699      	mov	r9, r3
 8001d9c:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001da0:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8001da4:	f7fe fc38 	bl	8000618 <__aeabi_dmul>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4692      	mov	sl, r2
 8001dae:	469b      	mov	fp, r3
 8001db0:	f04f 0000 	mov.w	r0, #0
 8001db4:	4955      	ldr	r1, [pc, #340]	; (8001f0c <forward+0x824>)
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	4b54      	ldr	r3, [pc, #336]	; (8001f0c <forward+0x824>)
 8001dbc:	f7fe fc2c 	bl	8000618 <__aeabi_dmul>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4650      	mov	r0, sl
 8001dc6:	4659      	mov	r1, fp
 8001dc8:	f7fe fa6e 	bl	80002a8 <__aeabi_dsub>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4640      	mov	r0, r8
 8001dd2:	4649      	mov	r1, r9
 8001dd4:	f7fe fc20 	bl	8000618 <__aeabi_dmul>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4620      	mov	r0, r4
 8001dde:	4629      	mov	r1, r5
 8001de0:	f7fe fa64 	bl	80002ac <__adddf3>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	  // discriminant
	  double d = b*b - 4.0*a*c;
 8001dec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001df0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001df4:	f7fe fc10 	bl	8000618 <__aeabi_dmul>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4614      	mov	r4, r2
 8001dfe:	461d      	mov	r5, r3
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	4b42      	ldr	r3, [pc, #264]	; (8001f10 <forward+0x828>)
 8001e06:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001e0a:	f7fe fc05 	bl	8000618 <__aeabi_dmul>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4610      	mov	r0, r2
 8001e14:	4619      	mov	r1, r3
 8001e16:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001e1a:	f7fe fbfd 	bl	8000618 <__aeabi_dmul>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	4620      	mov	r0, r4
 8001e24:	4629      	mov	r1, r5
 8001e26:	f7fe fa3f 	bl	80002a8 <__aeabi_dsub>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	  if (d < 0.0) return non_existing_povar_error; // non-existing povar. return error,x,y,z
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	f04f 0300 	mov.w	r3, #0
 8001e3a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001e3e:	f7fe fe5d 	bl	8000afc <__aeabi_dcmplt>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d002      	beq.n	8001e4e <forward+0x766>
 8001e48:	f06f 0301 	mvn.w	r3, #1
 8001e4c:	e058      	b.n	8001f00 <forward+0x818>



	  coord[2] = -0.5*(b+sqrt(d))/a;
 8001e4e:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8001e52:	f00b fd57 	bl	800d904 <sqrt>
 8001e56:	ec51 0b10 	vmov	r0, r1, d0
 8001e5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001e5e:	f7fe fa25 	bl	80002ac <__adddf3>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4610      	mov	r0, r2
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	4b29      	ldr	r3, [pc, #164]	; (8001f14 <forward+0x82c>)
 8001e70:	f7fe fbd2 	bl	8000618 <__aeabi_dmul>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4610      	mov	r0, r2
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001e80:	f7fe fcf4 	bl	800086c <__aeabi_ddiv>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4923      	ldr	r1, [pc, #140]	; (8001f18 <forward+0x830>)
 8001e8a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	  coord[0] = (a1*coord[2] + b1)/dnm;
 8001e8e:	4b22      	ldr	r3, [pc, #136]	; (8001f18 <forward+0x830>)
 8001e90:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001e94:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001e98:	f7fe fbbe 	bl	8000618 <__aeabi_dmul>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001ea8:	f7fe fa00 	bl	80002ac <__adddf3>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001eb8:	f7fe fcd8 	bl	800086c <__aeabi_ddiv>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	4915      	ldr	r1, [pc, #84]	; (8001f18 <forward+0x830>)
 8001ec2:	e9c1 2300 	strd	r2, r3, [r1]
	  coord[1] = (a2*coord[2] + b2)/dnm;
 8001ec6:	4b14      	ldr	r3, [pc, #80]	; (8001f18 <forward+0x830>)
 8001ec8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001ecc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001ed0:	f7fe fba2 	bl	8000618 <__aeabi_dmul>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001ee0:	f7fe f9e4 	bl	80002ac <__adddf3>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4610      	mov	r0, r2
 8001eea:	4619      	mov	r1, r3
 8001eec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001ef0:	f7fe fcbc 	bl	800086c <__aeabi_ddiv>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4907      	ldr	r1, [pc, #28]	; (8001f18 <forward+0x830>)
 8001efa:	e9c1 2302 	strd	r2, r3, [r1, #8]

	  return no_error;
 8001efe:	2300      	movs	r3, #0
//    C.x = -0.5 * (bV + sqrt(dV)) / aV;
//    C.y = (a1 * C.z + b1) / dnm;
//
//
//    return no_error;
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	37e0      	adds	r7, #224	; 0xe0
 8001f04:	46bd      	mov	sp, r7
 8001f06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40740000 	.word	0x40740000
 8001f10:	40100000 	.word	0x40100000
 8001f14:	bfe00000 	.word	0xbfe00000
 8001f18:	20000288 	.word	0x20000288

08001f1c <_write>:

extern osMessageQId setQueueHandle;

extern uint16_t GP[3];

int _write(int file, char* p, int len){
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)p, len, 10);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	230a      	movs	r3, #10
 8001f2e:	68b9      	ldr	r1, [r7, #8]
 8001f30:	4803      	ldr	r0, [pc, #12]	; (8001f40 <_write+0x24>)
 8001f32:	f004 fa84 	bl	800643e <HAL_UART_Transmit>
	return len;
 8001f36:	687b      	ldr	r3, [r7, #4]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	20000694 	.word	0x20000694

08001f44 <cmd_torque>:
};



int cmd_torque(int len, char* cmd, queueMessage* smsg)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]

	if(len == 1) {
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d10f      	bne.n	8001f76 <cmd_torque+0x32>
		if (*cmd=='1') {
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b31      	cmp	r3, #49	; 0x31
 8001f5c:	d103      	bne.n	8001f66 <cmd_torque+0x22>
			syncWriteTorqueOnOff(ON);
 8001f5e:	2001      	movs	r0, #1
 8001f60:	f000 fdcd 	bl	8002afe <syncWriteTorqueOnOff>
 8001f64:	e00a      	b.n	8001f7c <cmd_torque+0x38>
		}
		else if (*cmd=='0') {
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b30      	cmp	r3, #48	; 0x30
 8001f6c:	d106      	bne.n	8001f7c <cmd_torque+0x38>
			syncWriteTorqueOnOff(OFF);
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f000 fdc5 	bl	8002afe <syncWriteTorqueOnOff>
 8001f74:	e002      	b.n	8001f7c <cmd_torque+0x38>
		}
	}else {
		printf("wrong command pattern!");
 8001f76:	4804      	ldr	r0, [pc, #16]	; (8001f88 <cmd_torque+0x44>)
 8001f78:	f009 fa30 	bl	800b3dc <iprintf>
	}

	return 0;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	0800efa8 	.word	0x0800efa8

08001f8c <cmd_pump>:

int cmd_pump(int len, char* cmd, queueMessage* smsg)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
	if(len == 1) {
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d10d      	bne.n	8001fba <cmd_pump+0x2e>
		if (*cmd=='1') {
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b31      	cmp	r3, #49	; 0x31
 8001fa4:	d102      	bne.n	8001fac <cmd_pump+0x20>
			pumpOn();
 8001fa6:	f000 f9e9 	bl	800237c <pumpOn>
 8001faa:	e009      	b.n	8001fc0 <cmd_pump+0x34>
		}
		else if (*cmd=='0') {
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b30      	cmp	r3, #48	; 0x30
 8001fb2:	d105      	bne.n	8001fc0 <cmd_pump+0x34>
			pumpOff();
 8001fb4:	f000 f9ee 	bl	8002394 <pumpOff>
 8001fb8:	e002      	b.n	8001fc0 <cmd_pump+0x34>
		}
	}else {
		printf("wrong command pattern!");
 8001fba:	4804      	ldr	r0, [pc, #16]	; (8001fcc <cmd_pump+0x40>)
 8001fbc:	f009 fa0e 	bl	800b3dc <iprintf>
	}

	return 0;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	0800efa8 	.word	0x0800efa8

08001fd0 <cmd_conveyorBelt>:

int cmd_conveyorBelt(int len, char* cmd, queueMessage* smsg)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
	if(len == 2) {
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d113      	bne.n	800200a <cmd_conveyorBelt+0x3a>
		if (*cmd=='1') {
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b31      	cmp	r3, #49	; 0x31
 8001fe8:	d11c      	bne.n	8002024 <cmd_conveyorBelt+0x54>
			if (cmd[1]=='R') {
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	3301      	adds	r3, #1
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b52      	cmp	r3, #82	; 0x52
 8001ff2:	d102      	bne.n	8001ffa <cmd_conveyorBelt+0x2a>
				cvbeltTurnRight();
 8001ff4:	f000 f9da 	bl	80023ac <cvbeltTurnRight>
 8001ff8:	e014      	b.n	8002024 <cmd_conveyorBelt+0x54>
			} else if (cmd[1]=='L'){
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b4c      	cmp	r3, #76	; 0x4c
 8002002:	d10f      	bne.n	8002024 <cmd_conveyorBelt+0x54>
				cvbeltTurnLeft();
 8002004:	f000 f9e0 	bl	80023c8 <cvbeltTurnLeft>
 8002008:	e00c      	b.n	8002024 <cmd_conveyorBelt+0x54>
			}
		}
	}else if(len == 1){
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d106      	bne.n	800201e <cmd_conveyorBelt+0x4e>
		if (*cmd=='0') {
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b30      	cmp	r3, #48	; 0x30
 8002016:	d105      	bne.n	8002024 <cmd_conveyorBelt+0x54>
				cvbeltStop();
 8002018:	f000 f9e4 	bl	80023e4 <cvbeltStop>
 800201c:	e002      	b.n	8002024 <cmd_conveyorBelt+0x54>
		}
	}else {
		printf("wrong command pattern!");
 800201e:	4804      	ldr	r0, [pc, #16]	; (8002030 <cmd_conveyorBelt+0x60>)
 8002020:	f009 f9dc 	bl	800b3dc <iprintf>
	}

	return 0;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	0800efa8 	.word	0x0800efa8

08002034 <cmd_pick>:

int cmd_pick(int len, char* cmd, queueMessage* smsg)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
	downEndEffector(smsg);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 f979 	bl	8002338 <downEndEffector>
	pumpOn();
 8002046:	f000 f999 	bl	800237c <pumpOn>
	servoDelay(1000);
 800204a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800204e:	f000 fa1d 	bl	800248c <servoDelay>
	upEndEffector(smsg);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f94e 	bl	80022f4 <upEndEffector>
	return 0;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <cmd_throw>:

int cmd_throw(int len, char* cmd, queueMessage* smsg)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]

	smsg->mX=0;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
	smsg->mY=-140;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a0b      	ldr	r2, [pc, #44]	; (80020a8 <cmd_throw+0x44>)
 800207c:	605a      	str	r2, [r3, #4]
	smsg->mZ=-230;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a0a      	ldr	r2, [pc, #40]	; (80020ac <cmd_throw+0x48>)
 8002082:	609a      	str	r2, [r3, #8]
	smsg->maxSpeed=1000;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800208a:	60da      	str	r2, [r3, #12]

	osMessagePut(setQueueHandle, (uint32_t)smsg, 100);
 800208c:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <cmd_throw+0x4c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	2264      	movs	r2, #100	; 0x64
 8002094:	4618      	mov	r0, r3
 8002096:	f005 fdaf 	bl	8007bf8 <osMessagePut>
	pumpOff();
 800209a:	f000 f97b 	bl	8002394 <pumpOff>


	return 0;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	c30c0000 	.word	0xc30c0000
 80020ac:	c3660000 	.word	0xc3660000
 80020b0:	200002c4 	.word	0x200002c4

080020b4 <cmd_defaultPos>:

int cmd_defaultPos(int len, char* cmd, queueMessage* smsg)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
	upEndEffector(smsg);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 f917 	bl	80022f4 <upEndEffector>
	return 0;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <cmd_moveTo>:

int cmd_moveTo(int len, char* cmd, queueMessage* smsg)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b088      	sub	sp, #32
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]

	if(len == 12){
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2b0c      	cmp	r3, #12
 80020e0:	f040 8087 	bne.w	80021f2 <cmd_moveTo+0x122>

		float tempX = (cmd[1]-'0')*100 + (cmd[2]-'0')*10 + (cmd[3]-'0')*1 ;
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	3301      	adds	r3, #1
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	3b30      	subs	r3, #48	; 0x30
 80020ec:	2264      	movs	r2, #100	; 0x64
 80020ee:	fb02 f103 	mul.w	r1, r2, r3
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	3302      	adds	r3, #2
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	18ca      	adds	r2, r1, r3
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	3303      	adds	r3, #3
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	3b30      	subs	r3, #48	; 0x30
 800210e:	4413      	add	r3, r2
 8002110:	ee07 3a90 	vmov	s15, r3
 8002114:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002118:	edc7 7a07 	vstr	s15, [r7, #28]
		if(cmd[0]=='-'){
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b2d      	cmp	r3, #45	; 0x2d
 8002122:	d105      	bne.n	8002130 <cmd_moveTo+0x60>
			tempX = -tempX;
 8002124:	edd7 7a07 	vldr	s15, [r7, #28]
 8002128:	eef1 7a67 	vneg.f32	s15, s15
 800212c:	edc7 7a07 	vstr	s15, [r7, #28]
		}
		float tempY = (cmd[5]-'0')*100 + (cmd[6]-'0')*10 + (cmd[7]-'0')*1 ;
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	3305      	adds	r3, #5
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	3b30      	subs	r3, #48	; 0x30
 8002138:	2264      	movs	r2, #100	; 0x64
 800213a:	fb02 f103 	mul.w	r1, r2, r3
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	3306      	adds	r3, #6
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	18ca      	adds	r2, r1, r3
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	3307      	adds	r3, #7
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	3b30      	subs	r3, #48	; 0x30
 800215a:	4413      	add	r3, r2
 800215c:	ee07 3a90 	vmov	s15, r3
 8002160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002164:	edc7 7a06 	vstr	s15, [r7, #24]
		if(cmd[4]=='-'){
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	3304      	adds	r3, #4
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b2d      	cmp	r3, #45	; 0x2d
 8002170:	d105      	bne.n	800217e <cmd_moveTo+0xae>
			tempY = -tempY;
 8002172:	edd7 7a06 	vldr	s15, [r7, #24]
 8002176:	eef1 7a67 	vneg.f32	s15, s15
 800217a:	edc7 7a06 	vstr	s15, [r7, #24]
		}
		float tempZ = (cmd[9]-'0')*100 + (cmd[10]-'0')*10 + (cmd[11]-'0')*1 ;
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	3309      	adds	r3, #9
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	3b30      	subs	r3, #48	; 0x30
 8002186:	2264      	movs	r2, #100	; 0x64
 8002188:	fb02 f103 	mul.w	r1, r2, r3
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	330a      	adds	r3, #10
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002196:	4613      	mov	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	18ca      	adds	r2, r1, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	330b      	adds	r3, #11
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	3b30      	subs	r3, #48	; 0x30
 80021a8:	4413      	add	r3, r2
 80021aa:	ee07 3a90 	vmov	s15, r3
 80021ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021b2:	edc7 7a05 	vstr	s15, [r7, #20]
		if(cmd[8]=='-'){
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	3308      	adds	r3, #8
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b2d      	cmp	r3, #45	; 0x2d
 80021be:	d105      	bne.n	80021cc <cmd_moveTo+0xfc>
			tempZ = -tempZ;
 80021c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80021c4:	eef1 7a67 	vneg.f32	s15, s15
 80021c8:	edc7 7a05 	vstr	s15, [r7, #20]
		}

		smsg->mX=tempX;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69fa      	ldr	r2, [r7, #28]
 80021d0:	601a      	str	r2, [r3, #0]
		smsg->mY=tempY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	605a      	str	r2, [r3, #4]
		smsg->mZ=tempZ;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	609a      	str	r2, [r3, #8]

		smsg->maxSpeed=100;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2264      	movs	r2, #100	; 0x64
 80021e2:	60da      	str	r2, [r3, #12]


		osMessagePut(setQueueHandle, (uint32_t)smsg, 100);
 80021e4:	4b05      	ldr	r3, [pc, #20]	; (80021fc <cmd_moveTo+0x12c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	2264      	movs	r2, #100	; 0x64
 80021ec:	4618      	mov	r0, r3
 80021ee:	f005 fd03 	bl	8007bf8 <osMessagePut>
	}

	return 0;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3720      	adds	r7, #32
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	200002c4 	.word	0x200002c4

08002200 <cmd_wait>:


int cmd_wait(int len, char* cmd, queueMessage* smsg)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]

	if(len == 4){
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2b04      	cmp	r3, #4
 8002210:	d122      	bne.n	8002258 <cmd_wait+0x58>
		int time = (cmd[0]-'0')*1000 + (cmd[1]-'0')*100 + (cmd[2]-'0')*10 + (cmd[3]-'0')*1 ;
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	3b30      	subs	r3, #48	; 0x30
 8002218:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800221c:	fb03 f202 	mul.w	r2, r3, r2
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	3301      	adds	r3, #1
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	3b30      	subs	r3, #48	; 0x30
 8002228:	2164      	movs	r1, #100	; 0x64
 800222a:	fb01 f303 	mul.w	r3, r1, r3
 800222e:	18d1      	adds	r1, r2, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	3302      	adds	r3, #2
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	18ca      	adds	r2, r1, r3
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	3303      	adds	r3, #3
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	3b30      	subs	r3, #48	; 0x30
 800224c:	4413      	add	r3, r2
 800224e:	617b      	str	r3, [r7, #20]
		servoDelay(time);
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	4618      	mov	r0, r3
 8002254:	f000 f91a 	bl	800248c <servoDelay>
	}

	return 0;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <cmd_read>:



int cmd_read(int len, char* cmd, queueMessage* smsg)
{
 8002262:	b480      	push	{r7}
 8002264:	b085      	sub	sp, #20
 8002266:	af00      	add	r7, sp, #0
 8002268:	60f8      	str	r0, [r7, #12]
 800226a:	60b9      	str	r1, [r7, #8]
 800226c:	607a      	str	r2, [r7, #4]
	return 1;
 800226e:	2301      	movs	r3, #1
}
 8002270:	4618      	mov	r0, r3
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <cmd_handler>:


int cmd_handler(char* cmd, queueMessage* smsg)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
	struct Command_List* pCmdList = CmdList;
 8002286:	4b19      	ldr	r3, [pc, #100]	; (80022ec <cmd_handler+0x70>)
 8002288:	617b      	str	r3, [r7, #20]

	uint8_t command_found = 0;
 800228a:	2300      	movs	r3, #0
 800228c:	74fb      	strb	r3, [r7, #19]
	int read_command_found = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]

	int len = strlen(cmd)-1;
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7fd ffac 	bl	80001f0 <strlen>
 8002298:	4603      	mov	r3, r0
 800229a:	3b01      	subs	r3, #1
 800229c:	60bb      	str	r3, [r7, #8]


	while (pCmdList->cmd)
 800229e:	e015      	b.n	80022cc <cmd_handler+0x50>
	{
		if (pCmdList->cmd==cmd[0])
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	781a      	ldrb	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d10c      	bne.n	80022c6 <cmd_handler+0x4a>
		{
			command_found = 1;
 80022ac:	2301      	movs	r3, #1
 80022ae:	74fb      	strb	r3, [r7, #19]
			read_command_found = pCmdList->func(len, ++cmd, smsg);
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	3201      	adds	r2, #1
 80022b8:	607a      	str	r2, [r7, #4]
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	68b8      	ldr	r0, [r7, #8]
 80022c0:	4798      	blx	r3
 80022c2:	60f8      	str	r0, [r7, #12]
			break;
 80022c4:	e006      	b.n	80022d4 <cmd_handler+0x58>
		}
		++pCmdList;
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	3308      	adds	r3, #8
 80022ca:	617b      	str	r3, [r7, #20]
	while (pCmdList->cmd)
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1e5      	bne.n	80022a0 <cmd_handler+0x24>
	}

	if (command_found == 0) printf("command not found!\n");
 80022d4:	7cfb      	ldrb	r3, [r7, #19]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d102      	bne.n	80022e0 <cmd_handler+0x64>
 80022da:	4805      	ldr	r0, [pc, #20]	; (80022f0 <cmd_handler+0x74>)
 80022dc:	f009 f904 	bl	800b4e8 <puts>

	return read_command_found;
 80022e0:	68fb      	ldr	r3, [r7, #12]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000000 	.word	0x20000000
 80022f0:	0800efc0 	.word	0x0800efc0

080022f4 <upEndEffector>:



void upEndEffector(queueMessage* smsg){
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]

	smsg->mX=0;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
	smsg->mY=0;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	605a      	str	r2, [r3, #4]
	smsg->mZ=-256.984;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a08      	ldr	r2, [pc, #32]	; (8002330 <upEndEffector+0x3c>)
 8002310:	609a      	str	r2, [r3, #8]

	smsg->maxSpeed=100;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2264      	movs	r2, #100	; 0x64
 8002316:	60da      	str	r2, [r3, #12]

	osMessagePut(setQueueHandle, (uint32_t)smsg, 100);
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <upEndEffector+0x40>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	2264      	movs	r2, #100	; 0x64
 8002320:	4618      	mov	r0, r3
 8002322:	f005 fc69 	bl	8007bf8 <osMessagePut>

//	setGoalPosition(AX_BROADCAST_ID, 510);
//	servoDelay(1000);
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	c3807df4 	.word	0xc3807df4
 8002334:	200002c4 	.word	0x200002c4

08002338 <downEndEffector>:

void downEndEffector(queueMessage* smsg){
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]


	smsg->mX=0;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
	smsg->mY=0;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f04f 0200 	mov.w	r2, #0
 800234e:	605a      	str	r2, [r3, #4]
	smsg->mZ=-407.891;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a08      	ldr	r2, [pc, #32]	; (8002374 <downEndEffector+0x3c>)
 8002354:	609a      	str	r2, [r3, #8]

	smsg->maxSpeed=100;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2264      	movs	r2, #100	; 0x64
 800235a:	60da      	str	r2, [r3, #12]

	osMessagePut(setQueueHandle, (uint32_t)smsg, 100);
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <downEndEffector+0x40>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	2264      	movs	r2, #100	; 0x64
 8002364:	4618      	mov	r0, r3
 8002366:	f005 fc47 	bl	8007bf8 <osMessagePut>
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	c3cbf20c 	.word	0xc3cbf20c
 8002378:	200002c4 	.word	0x200002c4

0800237c <pumpOn>:
}
void torqueOff(){
	syncWriteTorqueOnOff(OFF);
}

void pumpOn(){
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 0);
 8002380:	2200      	movs	r2, #0
 8002382:	2101      	movs	r1, #1
 8002384:	4802      	ldr	r0, [pc, #8]	; (8002390 <pumpOn+0x14>)
 8002386:	f002 fdb1 	bl	8004eec <HAL_GPIO_WritePin>
}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40021800 	.word	0x40021800

08002394 <pumpOff>:

void pumpOff(){
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 1);
 8002398:	2201      	movs	r2, #1
 800239a:	2101      	movs	r1, #1
 800239c:	4802      	ldr	r0, [pc, #8]	; (80023a8 <pumpOff+0x14>)
 800239e:	f002 fda5 	bl	8004eec <HAL_GPIO_WritePin>
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40021800 	.word	0x40021800

080023ac <cvbeltTurnRight>:

void cvbeltTurnRight(){
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
	setEndless(AX_CONVEYOR_ID, ON);
 80023b0:	2101      	movs	r1, #1
 80023b2:	2003      	movs	r0, #3
 80023b4:	f000 fc37 	bl	8002c26 <setEndless>
	turn(AX_CONVEYOR_ID, RIGHT, 1000);
 80023b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023bc:	2101      	movs	r1, #1
 80023be:	2003      	movs	r0, #3
 80023c0:	f000 fd24 	bl	8002e0c <turn>
}
 80023c4:	bf00      	nop
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <cvbeltTurnLeft>:

void cvbeltTurnLeft(){
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
	setEndless(AX_CONVEYOR_ID, ON);
 80023cc:	2101      	movs	r1, #1
 80023ce:	2003      	movs	r0, #3
 80023d0:	f000 fc29 	bl	8002c26 <setEndless>
	turn(AX_CONVEYOR_ID, LEFT, 1000);
 80023d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023d8:	2100      	movs	r1, #0
 80023da:	2003      	movs	r0, #3
 80023dc:	f000 fd16 	bl	8002e0c <turn>
}
 80023e0:	bf00      	nop
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <cvbeltStop>:

void cvbeltStop(){
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
	onOffTorque(AX_CONVEYOR_ID, OFF);
 80023e8:	2100      	movs	r1, #0
 80023ea:	2003      	movs	r0, #3
 80023ec:	f000 fb1a 	bl	8002a24 <onOffTorque>
}
 80023f0:	bf00      	nop
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	0000      	movs	r0, r0
	...

080023f8 <deltaInit>:


void deltaInit(){
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
	setMovingSpeed(AX_BROADCAST_ID, 100);
 80023fc:	2164      	movs	r1, #100	; 0x64
 80023fe:	20fe      	movs	r0, #254	; 0xfe
 8002400:	f000 f870 	bl	80024e4 <setMovingSpeed>
	cvbeltStop();
 8002404:	f7ff ffee 	bl	80023e4 <cvbeltStop>
	//upEndEffector();

	setCoordinates(0,0,-256.984);
 8002408:	ed9f 2b0b 	vldr	d2, [pc, #44]	; 8002438 <deltaInit+0x40>
 800240c:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 8002440 <deltaInit+0x48>
 8002410:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8002440 <deltaInit+0x48>
 8002414:	f7fe fe72 	bl	80010fc <setCoordinates>
	inverse();
 8002418:	f7ff f84a 	bl	80014b0 <inverse>
	ServoConversion();
 800241c:	f7fe fd78 	bl	8000f10 <ServoConversion>

	setGoalPosition(AX_BROADCAST_ID, GP[0]);
 8002420:	4b09      	ldr	r3, [pc, #36]	; (8002448 <deltaInit+0x50>)
 8002422:	881b      	ldrh	r3, [r3, #0]
 8002424:	4619      	mov	r1, r3
 8002426:	20fe      	movs	r0, #254	; 0xfe
 8002428:	f000 f8d6 	bl	80025d8 <setGoalPosition>
	servoDelay(1000);
 800242c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002430:	f000 f82c 	bl	800248c <servoDelay>

//	uint8_t str[] = "******* CONTROL MENU *******\r\n 1. UP\r\n 2. DOWN\r\n 3. Read Position\r\n 4. Torque Off\r\n 5. Torque On\r\n 6 : Throw(temp)\r\n****************************\r\n";
//	HAL_UART_Transmit(&huart3, str, sizeof(str), 1000);
}
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}
 8002438:	76c8b439 	.word	0x76c8b439
 800243c:	c0700fbe 	.word	0xc0700fbe
	...
 8002448:	20000280 	.word	0x20000280

0800244c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	607b      	str	r3, [r7, #4]
 8002456:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <MX_DMA_Init+0x3c>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	4a0b      	ldr	r2, [pc, #44]	; (8002488 <MX_DMA_Init+0x3c>)
 800245c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002460:	6313      	str	r3, [r2, #48]	; 0x30
 8002462:	4b09      	ldr	r3, [pc, #36]	; (8002488 <MX_DMA_Init+0x3c>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800246a:	607b      	str	r3, [r7, #4]
 800246c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800246e:	2200      	movs	r2, #0
 8002470:	2105      	movs	r1, #5
 8002472:	2010      	movs	r0, #16
 8002474:	f001 ff62 	bl	800433c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002478:	2010      	movs	r0, #16
 800247a:	f001 ff7b 	bl	8004374 <HAL_NVIC_EnableIRQ>

}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40023800 	.word	0x40023800

0800248c <servoDelay>:
extern uint8_t rx2_Buf[RxBuf_SIZE];

char buffer[10]={0,};


void servoDelay(uint32_t millisec){
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
	osDelay(millisec);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f005 faaf 	bl	80079f8 <osDelay>
}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <sendInstPacket>:

void sendInstPacket(uint8_t* packet, uint8_t length)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(Direction_GPIO_Port, Direction_Pin, TX_MODE); // Switch to Transmission  Mode
 80024b0:	2201      	movs	r2, #1
 80024b2:	2180      	movs	r1, #128	; 0x80
 80024b4:	4809      	ldr	r0, [pc, #36]	; (80024dc <sendInstPacket+0x38>)
 80024b6:	f002 fd19 	bl	8004eec <HAL_GPIO_WritePin>

	HAL_UART_Transmit(&huart2, packet, length, 1000);
 80024ba:	78fb      	ldrb	r3, [r7, #3]
 80024bc:	b29a      	uxth	r2, r3
 80024be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	4806      	ldr	r0, [pc, #24]	; (80024e0 <sendInstPacket+0x3c>)
 80024c6:	f003 ffba 	bl	800643e <HAL_UART_Transmit>
	//servoDelay(25);

	HAL_GPIO_WritePin(Direction_GPIO_Port, Direction_Pin, RX_MODE); 	// Switch back to Reception Mode
 80024ca:	2200      	movs	r2, #0
 80024cc:	2180      	movs	r1, #128	; 0x80
 80024ce:	4803      	ldr	r0, [pc, #12]	; (80024dc <sendInstPacket+0x38>)
 80024d0:	f002 fd0c 	bl	8004eec <HAL_GPIO_WritePin>

}
 80024d4:	bf00      	nop
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40020c00 	.word	0x40020c00
 80024e0:	20000650 	.word	0x20000650

080024e4 <setMovingSpeed>:

void setMovingSpeed(uint8_t ID, uint16_t Speed)
{
 80024e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80024e8:	b087      	sub	sp, #28
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	4603      	mov	r3, r0
 80024ee:	460a      	mov	r2, r1
 80024f0:	71fb      	strb	r3, [r7, #7]
 80024f2:	4613      	mov	r3, r2
 80024f4:	80bb      	strh	r3, [r7, #4]
 80024f6:	466b      	mov	r3, sp
 80024f8:	461e      	mov	r6, r3
    uint8_t Speed_L = Speed;
 80024fa:	88bb      	ldrh	r3, [r7, #4]
 80024fc:	75fb      	strb	r3, [r7, #23]
    uint8_t Speed_H = Speed >> 8;
 80024fe:	88bb      	ldrh	r3, [r7, #4]
 8002500:	0a1b      	lsrs	r3, r3, #8
 8002502:	b29b      	uxth	r3, r3
 8002504:	75bb      	strb	r3, [r7, #22]
    // 16 bits -> 2 x 8 bits

    uint8_t length = 9;
 8002506:	2309      	movs	r3, #9
 8002508:	757b      	strb	r3, [r7, #21]
    uint8_t packet[length];
 800250a:	7d79      	ldrb	r1, [r7, #21]
 800250c:	460b      	mov	r3, r1
 800250e:	3b01      	subs	r3, #1
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	b2cb      	uxtb	r3, r1
 8002514:	2200      	movs	r2, #0
 8002516:	4698      	mov	r8, r3
 8002518:	4691      	mov	r9, r2
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	f04f 0300 	mov.w	r3, #0
 8002522:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002526:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800252a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800252e:	b2cb      	uxtb	r3, r1
 8002530:	2200      	movs	r2, #0
 8002532:	461c      	mov	r4, r3
 8002534:	4615      	mov	r5, r2
 8002536:	f04f 0200 	mov.w	r2, #0
 800253a:	f04f 0300 	mov.w	r3, #0
 800253e:	00eb      	lsls	r3, r5, #3
 8002540:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002544:	00e2      	lsls	r2, r4, #3
 8002546:	460b      	mov	r3, r1
 8002548:	3307      	adds	r3, #7
 800254a:	08db      	lsrs	r3, r3, #3
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	ebad 0d03 	sub.w	sp, sp, r3
 8002552:	466b      	mov	r3, sp
 8002554:	3300      	adds	r3, #0
 8002556:	60fb      	str	r3, [r7, #12]

    packet[0] = AX_HEADER;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	22ff      	movs	r2, #255	; 0xff
 800255c:	701a      	strb	r2, [r3, #0]
    packet[1] = AX_HEADER;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	22ff      	movs	r2, #255	; 0xff
 8002562:	705a      	strb	r2, [r3, #1]
    packet[2] = ID;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	79fa      	ldrb	r2, [r7, #7]
 8002568:	709a      	strb	r2, [r3, #2]
    packet[3] = length-4;
 800256a:	7d7b      	ldrb	r3, [r7, #21]
 800256c:	3b04      	subs	r3, #4
 800256e:	b2da      	uxtb	r2, r3
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	70da      	strb	r2, [r3, #3]
    packet[4] = AX_WRITE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2203      	movs	r2, #3
 8002578:	711a      	strb	r2, [r3, #4]
    packet[5] = ADDR_GOAL_SPEED_L;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2220      	movs	r2, #32
 800257e:	715a      	strb	r2, [r3, #5]
    packet[6] = Speed_L;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	7dfa      	ldrb	r2, [r7, #23]
 8002584:	719a      	strb	r2, [r3, #6]
    packet[7] = Speed_H;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	7dba      	ldrb	r2, [r7, #22]
 800258a:	71da      	strb	r2, [r3, #7]
    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6] + packet[7])) & 0xFF;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	789a      	ldrb	r2, [r3, #2]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	78db      	ldrb	r3, [r3, #3]
 8002594:	4413      	add	r3, r2
 8002596:	b2da      	uxtb	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	791b      	ldrb	r3, [r3, #4]
 800259c:	4413      	add	r3, r2
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	795b      	ldrb	r3, [r3, #5]
 80025a4:	4413      	add	r3, r2
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	799b      	ldrb	r3, [r3, #6]
 80025ac:	4413      	add	r3, r2
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	79db      	ldrb	r3, [r3, #7]
 80025b4:	4413      	add	r3, r2
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	72fb      	strb	r3, [r7, #11]
    packet[8] = Checksum;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	7afa      	ldrb	r2, [r7, #11]
 80025c0:	721a      	strb	r2, [r3, #8]

    sendInstPacket(packet, length);
 80025c2:	7d7b      	ldrb	r3, [r7, #21]
 80025c4:	4619      	mov	r1, r3
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f7ff ff6c 	bl	80024a4 <sendInstPacket>
 80025cc:	46b5      	mov	sp, r6

}
 80025ce:	bf00      	nop
 80025d0:	371c      	adds	r7, #28
 80025d2:	46bd      	mov	sp, r7
 80025d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080025d8 <setGoalPosition>:

void setGoalPosition(uint8_t ID, uint16_t Position)
{
 80025d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025dc:	b087      	sub	sp, #28
 80025de:	af00      	add	r7, sp, #0
 80025e0:	4603      	mov	r3, r0
 80025e2:	460a      	mov	r2, r1
 80025e4:	71fb      	strb	r3, [r7, #7]
 80025e6:	4613      	mov	r3, r2
 80025e8:	80bb      	strh	r3, [r7, #4]
 80025ea:	466b      	mov	r3, sp
 80025ec:	461e      	mov	r6, r3
    uint8_t Position_L = Position;
 80025ee:	88bb      	ldrh	r3, [r7, #4]
 80025f0:	75fb      	strb	r3, [r7, #23]
    uint8_t Position_H = Position >> 8;
 80025f2:	88bb      	ldrh	r3, [r7, #4]
 80025f4:	0a1b      	lsrs	r3, r3, #8
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	75bb      	strb	r3, [r7, #22]
    // 16 bits -> 2 x 8 bits

    uint8_t length = 9;
 80025fa:	2309      	movs	r3, #9
 80025fc:	757b      	strb	r3, [r7, #21]
    uint8_t packet[length];
 80025fe:	7d79      	ldrb	r1, [r7, #21]
 8002600:	460b      	mov	r3, r1
 8002602:	3b01      	subs	r3, #1
 8002604:	613b      	str	r3, [r7, #16]
 8002606:	b2cb      	uxtb	r3, r1
 8002608:	2200      	movs	r2, #0
 800260a:	4698      	mov	r8, r3
 800260c:	4691      	mov	r9, r2
 800260e:	f04f 0200 	mov.w	r2, #0
 8002612:	f04f 0300 	mov.w	r3, #0
 8002616:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800261a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800261e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002622:	b2cb      	uxtb	r3, r1
 8002624:	2200      	movs	r2, #0
 8002626:	461c      	mov	r4, r3
 8002628:	4615      	mov	r5, r2
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	f04f 0300 	mov.w	r3, #0
 8002632:	00eb      	lsls	r3, r5, #3
 8002634:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002638:	00e2      	lsls	r2, r4, #3
 800263a:	460b      	mov	r3, r1
 800263c:	3307      	adds	r3, #7
 800263e:	08db      	lsrs	r3, r3, #3
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	ebad 0d03 	sub.w	sp, sp, r3
 8002646:	466b      	mov	r3, sp
 8002648:	3300      	adds	r3, #0
 800264a:	60fb      	str	r3, [r7, #12]

    packet[0] = AX_HEADER;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	22ff      	movs	r2, #255	; 0xff
 8002650:	701a      	strb	r2, [r3, #0]
    packet[1] = AX_HEADER;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	22ff      	movs	r2, #255	; 0xff
 8002656:	705a      	strb	r2, [r3, #1]
    packet[2] = ID;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	79fa      	ldrb	r2, [r7, #7]
 800265c:	709a      	strb	r2, [r3, #2]
    packet[3] = length-4;
 800265e:	7d7b      	ldrb	r3, [r7, #21]
 8002660:	3b04      	subs	r3, #4
 8002662:	b2da      	uxtb	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	70da      	strb	r2, [r3, #3]
    packet[4] = AX_WRITE;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2203      	movs	r2, #3
 800266c:	711a      	strb	r2, [r3, #4]
    packet[5] = ADDR_GOAL_POSITION_L;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	221e      	movs	r2, #30
 8002672:	715a      	strb	r2, [r3, #5]
    packet[6] = Position_L;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	7dfa      	ldrb	r2, [r7, #23]
 8002678:	719a      	strb	r2, [r3, #6]
    packet[7] = Position_H;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	7dba      	ldrb	r2, [r7, #22]
 800267e:	71da      	strb	r2, [r3, #7]
    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6] + packet[7])) & 0xFF;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	789a      	ldrb	r2, [r3, #2]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	78db      	ldrb	r3, [r3, #3]
 8002688:	4413      	add	r3, r2
 800268a:	b2da      	uxtb	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	791b      	ldrb	r3, [r3, #4]
 8002690:	4413      	add	r3, r2
 8002692:	b2da      	uxtb	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	795b      	ldrb	r3, [r3, #5]
 8002698:	4413      	add	r3, r2
 800269a:	b2da      	uxtb	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	799b      	ldrb	r3, [r3, #6]
 80026a0:	4413      	add	r3, r2
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	79db      	ldrb	r3, [r3, #7]
 80026a8:	4413      	add	r3, r2
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	43db      	mvns	r3, r3
 80026ae:	72fb      	strb	r3, [r7, #11]
    packet[8] = Checksum;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	7afa      	ldrb	r2, [r7, #11]
 80026b4:	721a      	strb	r2, [r3, #8]

    sendInstPacket(packet, length);
 80026b6:	7d7b      	ldrb	r3, [r7, #21]
 80026b8:	4619      	mov	r1, r3
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f7ff fef2 	bl	80024a4 <sendInstPacket>
 80026c0:	46b5      	mov	sp, r6

}
 80026c2:	bf00      	nop
 80026c4:	371c      	adds	r7, #28
 80026c6:	46bd      	mov	sp, r7
 80026c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080026cc <syncWriteGoalPosition>:

void syncWriteGoalPosition(uint16_t P0, uint16_t S0, uint16_t P1, uint16_t S1, uint16_t P2, uint16_t S2){
 80026cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026d0:	b08b      	sub	sp, #44	; 0x2c
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	4606      	mov	r6, r0
 80026d6:	4608      	mov	r0, r1
 80026d8:	4611      	mov	r1, r2
 80026da:	461a      	mov	r2, r3
 80026dc:	4633      	mov	r3, r6
 80026de:	80fb      	strh	r3, [r7, #6]
 80026e0:	4603      	mov	r3, r0
 80026e2:	80bb      	strh	r3, [r7, #4]
 80026e4:	460b      	mov	r3, r1
 80026e6:	807b      	strh	r3, [r7, #2]
 80026e8:	4613      	mov	r3, r2
 80026ea:	803b      	strh	r3, [r7, #0]
 80026ec:	466b      	mov	r3, sp
 80026ee:	461e      	mov	r6, r3

    uint8_t P0_L = P0;
 80026f0:	88fb      	ldrh	r3, [r7, #6]
 80026f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t P0_H = P0 >> 8;
 80026f6:	88fb      	ldrh	r3, [r7, #6]
 80026f8:	0a1b      	lsrs	r3, r3, #8
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    uint8_t P1_L = P1;
 8002700:	887b      	ldrh	r3, [r7, #2]
 8002702:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    uint8_t P1_H = P1 >> 8;
 8002706:	887b      	ldrh	r3, [r7, #2]
 8002708:	0a1b      	lsrs	r3, r3, #8
 800270a:	b29b      	uxth	r3, r3
 800270c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    uint8_t P2_L = P2;
 8002710:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002714:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint8_t P2_H = P2 >> 8;
 8002718:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800271c:	0a1b      	lsrs	r3, r3, #8
 800271e:	b29b      	uxth	r3, r3
 8002720:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

    uint8_t S0_L = S0;
 8002724:	88bb      	ldrh	r3, [r7, #4]
 8002726:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    uint8_t S0_H = S0 >> 8;
 800272a:	88bb      	ldrh	r3, [r7, #4]
 800272c:	0a1b      	lsrs	r3, r3, #8
 800272e:	b29b      	uxth	r3, r3
 8002730:	f887 3020 	strb.w	r3, [r7, #32]

    uint8_t S1_L = S1;
 8002734:	883b      	ldrh	r3, [r7, #0]
 8002736:	77fb      	strb	r3, [r7, #31]
    uint8_t S1_H = S1 >> 8;
 8002738:	883b      	ldrh	r3, [r7, #0]
 800273a:	0a1b      	lsrs	r3, r3, #8
 800273c:	b29b      	uxth	r3, r3
 800273e:	77bb      	strb	r3, [r7, #30]

    uint8_t S2_L = S2;
 8002740:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002744:	777b      	strb	r3, [r7, #29]
    uint8_t S2_H = S2 >> 8;
 8002746:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800274a:	0a1b      	lsrs	r3, r3, #8
 800274c:	b29b      	uxth	r3, r3
 800274e:	773b      	strb	r3, [r7, #28]

    uint8_t length = 23;
 8002750:	2317      	movs	r3, #23
 8002752:	76fb      	strb	r3, [r7, #27]
    uint8_t packet[length];
 8002754:	7ef9      	ldrb	r1, [r7, #27]
 8002756:	460b      	mov	r3, r1
 8002758:	3b01      	subs	r3, #1
 800275a:	617b      	str	r3, [r7, #20]
 800275c:	b2cb      	uxtb	r3, r1
 800275e:	2200      	movs	r2, #0
 8002760:	4698      	mov	r8, r3
 8002762:	4691      	mov	r9, r2
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	f04f 0300 	mov.w	r3, #0
 800276c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002770:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002774:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002778:	b2cb      	uxtb	r3, r1
 800277a:	2200      	movs	r2, #0
 800277c:	461c      	mov	r4, r3
 800277e:	4615      	mov	r5, r2
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	00eb      	lsls	r3, r5, #3
 800278a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800278e:	00e2      	lsls	r2, r4, #3
 8002790:	460b      	mov	r3, r1
 8002792:	3307      	adds	r3, #7
 8002794:	08db      	lsrs	r3, r3, #3
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	ebad 0d03 	sub.w	sp, sp, r3
 800279c:	466b      	mov	r3, sp
 800279e:	3300      	adds	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]

    packet[0] = AX_HEADER;
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	22ff      	movs	r2, #255	; 0xff
 80027a6:	701a      	strb	r2, [r3, #0]
    packet[1] = AX_HEADER;
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	22ff      	movs	r2, #255	; 0xff
 80027ac:	705a      	strb	r2, [r3, #1]
    packet[2] = AX_BROADCAST_ID;
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	22fe      	movs	r2, #254	; 0xfe
 80027b2:	709a      	strb	r2, [r3, #2]
    packet[3] = length-4;
 80027b4:	7efb      	ldrb	r3, [r7, #27]
 80027b6:	3b04      	subs	r3, #4
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	70da      	strb	r2, [r3, #3]
    packet[4] = AX_SYNC_WRITE;
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	2283      	movs	r2, #131	; 0x83
 80027c2:	711a      	strb	r2, [r3, #4]
    packet[5] = ADDR_GOAL_POSITION_L;
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	221e      	movs	r2, #30
 80027c8:	715a      	strb	r2, [r3, #5]
    packet[6] = 0x04;		// length of data to access
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	2204      	movs	r2, #4
 80027ce:	719a      	strb	r2, [r3, #6]

    packet[7] = 0;			// ID 0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	2200      	movs	r2, #0
 80027d4:	71da      	strb	r2, [r3, #7]
    packet[8] = P0_L;
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80027dc:	721a      	strb	r2, [r3, #8]
    packet[9] = P0_H;
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80027e4:	725a      	strb	r2, [r3, #9]
    packet[10] = S0_L;
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80027ec:	729a      	strb	r2, [r3, #10]
    packet[11] = S0_H;
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80027f4:	72da      	strb	r2, [r3, #11]

    packet[12] = 1;			// ID 1
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	2201      	movs	r2, #1
 80027fa:	731a      	strb	r2, [r3, #12]
    packet[13] = P1_L;
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8002802:	735a      	strb	r2, [r3, #13]
    packet[14] = P1_H;
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800280a:	739a      	strb	r2, [r3, #14]
    packet[15] = S1_L;
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	7ffa      	ldrb	r2, [r7, #31]
 8002810:	73da      	strb	r2, [r3, #15]
    packet[16] = S1_H;
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	7fba      	ldrb	r2, [r7, #30]
 8002816:	741a      	strb	r2, [r3, #16]

    packet[17] = 2;			// ID 2
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	2202      	movs	r2, #2
 800281c:	745a      	strb	r2, [r3, #17]
    packet[18] = P2_L;
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002824:	749a      	strb	r2, [r3, #18]
    packet[19] = P2_H;
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800282c:	74da      	strb	r2, [r3, #19]
    packet[20] = S2_L;
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	7f7a      	ldrb	r2, [r7, #29]
 8002832:	751a      	strb	r2, [r3, #20]
    packet[21] = S2_H;
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	7f3a      	ldrb	r2, [r7, #28]
 8002838:	755a      	strb	r2, [r3, #21]
    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6] + packet[7]
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	789a      	ldrb	r2, [r3, #2]
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	78db      	ldrb	r3, [r3, #3]
 8002842:	4413      	add	r3, r2
 8002844:	b2da      	uxtb	r2, r3
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	791b      	ldrb	r3, [r3, #4]
 800284a:	4413      	add	r3, r2
 800284c:	b2da      	uxtb	r2, r3
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	795b      	ldrb	r3, [r3, #5]
 8002852:	4413      	add	r3, r2
 8002854:	b2da      	uxtb	r2, r3
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	799b      	ldrb	r3, [r3, #6]
 800285a:	4413      	add	r3, r2
 800285c:	b2da      	uxtb	r2, r3
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	79db      	ldrb	r3, [r3, #7]
 8002862:	4413      	add	r3, r2
 8002864:	b2da      	uxtb	r2, r3
						+ packet[8] + packet[9] + packet[10] + packet[11] + packet[12] + packet[13]
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	7a1b      	ldrb	r3, [r3, #8]
 800286a:	4413      	add	r3, r2
 800286c:	b2da      	uxtb	r2, r3
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	7a5b      	ldrb	r3, [r3, #9]
 8002872:	4413      	add	r3, r2
 8002874:	b2da      	uxtb	r2, r3
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	7a9b      	ldrb	r3, [r3, #10]
 800287a:	4413      	add	r3, r2
 800287c:	b2da      	uxtb	r2, r3
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	7adb      	ldrb	r3, [r3, #11]
 8002882:	4413      	add	r3, r2
 8002884:	b2da      	uxtb	r2, r3
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	7b1b      	ldrb	r3, [r3, #12]
 800288a:	4413      	add	r3, r2
 800288c:	b2da      	uxtb	r2, r3
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	7b5b      	ldrb	r3, [r3, #13]
 8002892:	4413      	add	r3, r2
 8002894:	b2da      	uxtb	r2, r3
						+ packet[14] + packet[15] + packet[16] + packet[17] + packet[18] + packet[19]
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	7b9b      	ldrb	r3, [r3, #14]
 800289a:	4413      	add	r3, r2
 800289c:	b2da      	uxtb	r2, r3
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	7bdb      	ldrb	r3, [r3, #15]
 80028a2:	4413      	add	r3, r2
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	7c1b      	ldrb	r3, [r3, #16]
 80028aa:	4413      	add	r3, r2
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	7c5b      	ldrb	r3, [r3, #17]
 80028b2:	4413      	add	r3, r2
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	7c9b      	ldrb	r3, [r3, #18]
 80028ba:	4413      	add	r3, r2
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	7cdb      	ldrb	r3, [r3, #19]
 80028c2:	4413      	add	r3, r2
 80028c4:	b2da      	uxtb	r2, r3
						+ packet[20] + packet[21])) & 0xFF;
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	7d1b      	ldrb	r3, [r3, #20]
 80028ca:	4413      	add	r3, r2
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	7d5b      	ldrb	r3, [r3, #21]
 80028d2:	4413      	add	r3, r2
 80028d4:	b2db      	uxtb	r3, r3
    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6] + packet[7]
 80028d6:	43db      	mvns	r3, r3
 80028d8:	73fb      	strb	r3, [r7, #15]
    packet[22] = Checksum;
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	7bfa      	ldrb	r2, [r7, #15]
 80028de:	759a      	strb	r2, [r3, #22]

    sendInstPacket(packet, length);
 80028e0:	7efb      	ldrb	r3, [r7, #27]
 80028e2:	4619      	mov	r1, r3
 80028e4:	6938      	ldr	r0, [r7, #16]
 80028e6:	f7ff fddd 	bl	80024a4 <sendInstPacket>
 80028ea:	46b5      	mov	sp, r6
}
 80028ec:	bf00      	nop
 80028ee:	372c      	adds	r7, #44	; 0x2c
 80028f0:	46bd      	mov	sp, r7
 80028f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080028f8 <getPresentPosition>:

uint16_t getPresentPosition(uint8_t ID)
{
 80028f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80028fc:	b087      	sub	sp, #28
 80028fe:	af00      	add	r7, sp, #0
 8002900:	4603      	mov	r3, r0
 8002902:	71fb      	strb	r3, [r7, #7]
 8002904:	466b      	mov	r3, sp
 8002906:	461e      	mov	r6, r3

    uint8_t length = 8;
 8002908:	2308      	movs	r3, #8
 800290a:	75fb      	strb	r3, [r7, #23]
    uint8_t packet[length];
 800290c:	7df9      	ldrb	r1, [r7, #23]
 800290e:	460b      	mov	r3, r1
 8002910:	3b01      	subs	r3, #1
 8002912:	613b      	str	r3, [r7, #16]
 8002914:	b2cb      	uxtb	r3, r1
 8002916:	2200      	movs	r2, #0
 8002918:	4698      	mov	r8, r3
 800291a:	4691      	mov	r9, r2
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	f04f 0300 	mov.w	r3, #0
 8002924:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002928:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800292c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002930:	b2cb      	uxtb	r3, r1
 8002932:	2200      	movs	r2, #0
 8002934:	461c      	mov	r4, r3
 8002936:	4615      	mov	r5, r2
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	f04f 0300 	mov.w	r3, #0
 8002940:	00eb      	lsls	r3, r5, #3
 8002942:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002946:	00e2      	lsls	r2, r4, #3
 8002948:	460b      	mov	r3, r1
 800294a:	3307      	adds	r3, #7
 800294c:	08db      	lsrs	r3, r3, #3
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	ebad 0d03 	sub.w	sp, sp, r3
 8002954:	466b      	mov	r3, sp
 8002956:	3300      	adds	r3, #0
 8002958:	60fb      	str	r3, [r7, #12]

    packet[0] = AX_HEADER;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	22ff      	movs	r2, #255	; 0xff
 800295e:	701a      	strb	r2, [r3, #0]
    packet[1] = AX_HEADER;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	22ff      	movs	r2, #255	; 0xff
 8002964:	705a      	strb	r2, [r3, #1]
    packet[2] = ID;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	79fa      	ldrb	r2, [r7, #7]
 800296a:	709a      	strb	r2, [r3, #2]
    packet[3] = length-4;
 800296c:	7dfb      	ldrb	r3, [r7, #23]
 800296e:	3b04      	subs	r3, #4
 8002970:	b2da      	uxtb	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	70da      	strb	r2, [r3, #3]
    packet[4] = AX_READ;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2202      	movs	r2, #2
 800297a:	711a      	strb	r2, [r3, #4]
    packet[5] = ADDR_PRESENT_POSITION_L;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2224      	movs	r2, #36	; 0x24
 8002980:	715a      	strb	r2, [r3, #5]
    packet[6] = AX_READ_TWO_BYTE;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2202      	movs	r2, #2
 8002986:	719a      	strb	r2, [r3, #6]
    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6])) & 0xFF;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	789a      	ldrb	r2, [r3, #2]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	78db      	ldrb	r3, [r3, #3]
 8002990:	4413      	add	r3, r2
 8002992:	b2da      	uxtb	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	791b      	ldrb	r3, [r3, #4]
 8002998:	4413      	add	r3, r2
 800299a:	b2da      	uxtb	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	795b      	ldrb	r3, [r3, #5]
 80029a0:	4413      	add	r3, r2
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	799b      	ldrb	r3, [r3, #6]
 80029a8:	4413      	add	r3, r2
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	72fb      	strb	r3, [r7, #11]
    packet[7] = Checksum;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	7afa      	ldrb	r2, [r7, #11]
 80029b4:	71da      	strb	r2, [r3, #7]

    sendInstPacket(packet, length);
 80029b6:	7dfb      	ldrb	r3, [r7, #23]
 80029b8:	4619      	mov	r1, r3
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f7ff fd72 	bl	80024a4 <sendInstPacket>

    servoDelay(10);
 80029c0:	200a      	movs	r0, #10
 80029c2:	f7ff fd63 	bl	800248c <servoDelay>
    Checksum = (~(rx2_Buf[2] + rx2_Buf[3] + rx2_Buf[4] + rx2_Buf[5] + rx2_Buf[6])) & 0xFF;
 80029c6:	4b16      	ldr	r3, [pc, #88]	; (8002a20 <getPresentPosition+0x128>)
 80029c8:	789a      	ldrb	r2, [r3, #2]
 80029ca:	4b15      	ldr	r3, [pc, #84]	; (8002a20 <getPresentPosition+0x128>)
 80029cc:	78db      	ldrb	r3, [r3, #3]
 80029ce:	4413      	add	r3, r2
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	4b13      	ldr	r3, [pc, #76]	; (8002a20 <getPresentPosition+0x128>)
 80029d4:	791b      	ldrb	r3, [r3, #4]
 80029d6:	4413      	add	r3, r2
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <getPresentPosition+0x128>)
 80029dc:	795b      	ldrb	r3, [r3, #5]
 80029de:	4413      	add	r3, r2
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	4b0f      	ldr	r3, [pc, #60]	; (8002a20 <getPresentPosition+0x128>)
 80029e4:	799b      	ldrb	r3, [r3, #6]
 80029e6:	4413      	add	r3, r2
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	43db      	mvns	r3, r3
 80029ec:	72fb      	strb	r3, [r7, #11]
    uint16_t presentPosition = rx2_Buf[5] + (rx2_Buf[6]<<8);
 80029ee:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <getPresentPosition+0x128>)
 80029f0:	795b      	ldrb	r3, [r3, #5]
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <getPresentPosition+0x128>)
 80029f6:	799b      	ldrb	r3, [r3, #6]
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	021b      	lsls	r3, r3, #8
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	4413      	add	r3, r2
 8002a00:	813b      	strh	r3, [r7, #8]

    if(Checksum==rx2_Buf[7]){
 8002a02:	4b07      	ldr	r3, [pc, #28]	; (8002a20 <getPresentPosition+0x128>)
 8002a04:	79db      	ldrb	r3, [r3, #7]
 8002a06:	7afa      	ldrb	r2, [r7, #11]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d101      	bne.n	8002a10 <getPresentPosition+0x118>
    	return presentPosition;
 8002a0c:	893b      	ldrh	r3, [r7, #8]
 8002a0e:	e000      	b.n	8002a12 <getPresentPosition+0x11a>
    }else {
    	return 0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	46b5      	mov	sp, r6
    }

}
 8002a14:	4618      	mov	r0, r3
 8002a16:	371c      	adds	r7, #28
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002a1e:	bf00      	nop
 8002a20:	2000060c 	.word	0x2000060c

08002a24 <onOffTorque>:


void onOffTorque(uint8_t ID, uint8_t State){
 8002a24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a28:	b087      	sub	sp, #28
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	460a      	mov	r2, r1
 8002a30:	71fb      	strb	r3, [r7, #7]
 8002a32:	4613      	mov	r3, r2
 8002a34:	71bb      	strb	r3, [r7, #6]
 8002a36:	466b      	mov	r3, sp
 8002a38:	461e      	mov	r6, r3

    uint8_t length = 8;
 8002a3a:	2308      	movs	r3, #8
 8002a3c:	75fb      	strb	r3, [r7, #23]
    uint8_t packet[length];
 8002a3e:	7df9      	ldrb	r1, [r7, #23]
 8002a40:	460b      	mov	r3, r1
 8002a42:	3b01      	subs	r3, #1
 8002a44:	613b      	str	r3, [r7, #16]
 8002a46:	b2cb      	uxtb	r3, r1
 8002a48:	2200      	movs	r2, #0
 8002a4a:	4698      	mov	r8, r3
 8002a4c:	4691      	mov	r9, r2
 8002a4e:	f04f 0200 	mov.w	r2, #0
 8002a52:	f04f 0300 	mov.w	r3, #0
 8002a56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a62:	b2cb      	uxtb	r3, r1
 8002a64:	2200      	movs	r2, #0
 8002a66:	461c      	mov	r4, r3
 8002a68:	4615      	mov	r5, r2
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	f04f 0300 	mov.w	r3, #0
 8002a72:	00eb      	lsls	r3, r5, #3
 8002a74:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a78:	00e2      	lsls	r2, r4, #3
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	3307      	adds	r3, #7
 8002a7e:	08db      	lsrs	r3, r3, #3
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	ebad 0d03 	sub.w	sp, sp, r3
 8002a86:	466b      	mov	r3, sp
 8002a88:	3300      	adds	r3, #0
 8002a8a:	60fb      	str	r3, [r7, #12]

    packet[0] = AX_HEADER;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	22ff      	movs	r2, #255	; 0xff
 8002a90:	701a      	strb	r2, [r3, #0]
    packet[1] = AX_HEADER;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	22ff      	movs	r2, #255	; 0xff
 8002a96:	705a      	strb	r2, [r3, #1]
    packet[2] = ID;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	79fa      	ldrb	r2, [r7, #7]
 8002a9c:	709a      	strb	r2, [r3, #2]
    packet[3] = length-4;
 8002a9e:	7dfb      	ldrb	r3, [r7, #23]
 8002aa0:	3b04      	subs	r3, #4
 8002aa2:	b2da      	uxtb	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	70da      	strb	r2, [r3, #3]
    packet[4] = AX_WRITE;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2203      	movs	r2, #3
 8002aac:	711a      	strb	r2, [r3, #4]
    packet[5] = ADDR_TORQUE_ENABLE;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2218      	movs	r2, #24
 8002ab2:	715a      	strb	r2, [r3, #5]
    packet[6] = State;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	79ba      	ldrb	r2, [r7, #6]
 8002ab8:	719a      	strb	r2, [r3, #6]
    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6])) & 0xFF;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	789a      	ldrb	r2, [r3, #2]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	78db      	ldrb	r3, [r3, #3]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	791b      	ldrb	r3, [r3, #4]
 8002aca:	4413      	add	r3, r2
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	795b      	ldrb	r3, [r3, #5]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	799b      	ldrb	r3, [r3, #6]
 8002ada:	4413      	add	r3, r2
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	72fb      	strb	r3, [r7, #11]
    packet[7] = Checksum;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	7afa      	ldrb	r2, [r7, #11]
 8002ae6:	71da      	strb	r2, [r3, #7]

    sendInstPacket(packet, length);
 8002ae8:	7dfb      	ldrb	r3, [r7, #23]
 8002aea:	4619      	mov	r1, r3
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f7ff fcd9 	bl	80024a4 <sendInstPacket>
 8002af2:	46b5      	mov	sp, r6

}
 8002af4:	bf00      	nop
 8002af6:	371c      	adds	r7, #28
 8002af8:	46bd      	mov	sp, r7
 8002afa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002afe <syncWriteTorqueOnOff>:

void syncWriteTorqueOnOff(uint8_t State){
 8002afe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b02:	b087      	sub	sp, #28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	71fb      	strb	r3, [r7, #7]
 8002b0a:	466b      	mov	r3, sp
 8002b0c:	461e      	mov	r6, r3

    uint8_t length = 14;
 8002b0e:	230e      	movs	r3, #14
 8002b10:	75fb      	strb	r3, [r7, #23]
    uint8_t packet[length];
 8002b12:	7df9      	ldrb	r1, [r7, #23]
 8002b14:	460b      	mov	r3, r1
 8002b16:	3b01      	subs	r3, #1
 8002b18:	613b      	str	r3, [r7, #16]
 8002b1a:	b2cb      	uxtb	r3, r1
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	4698      	mov	r8, r3
 8002b20:	4691      	mov	r9, r2
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b36:	b2cb      	uxtb	r3, r1
 8002b38:	2200      	movs	r2, #0
 8002b3a:	461c      	mov	r4, r3
 8002b3c:	4615      	mov	r5, r2
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	00eb      	lsls	r3, r5, #3
 8002b48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b4c:	00e2      	lsls	r2, r4, #3
 8002b4e:	460b      	mov	r3, r1
 8002b50:	3307      	adds	r3, #7
 8002b52:	08db      	lsrs	r3, r3, #3
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	ebad 0d03 	sub.w	sp, sp, r3
 8002b5a:	466b      	mov	r3, sp
 8002b5c:	3300      	adds	r3, #0
 8002b5e:	60fb      	str	r3, [r7, #12]

    packet[0] = AX_HEADER;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	22ff      	movs	r2, #255	; 0xff
 8002b64:	701a      	strb	r2, [r3, #0]
    packet[1] = AX_HEADER;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	22ff      	movs	r2, #255	; 0xff
 8002b6a:	705a      	strb	r2, [r3, #1]
    packet[2] = AX_BROADCAST_ID;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	22fe      	movs	r2, #254	; 0xfe
 8002b70:	709a      	strb	r2, [r3, #2]
    packet[3] = length-4;
 8002b72:	7dfb      	ldrb	r3, [r7, #23]
 8002b74:	3b04      	subs	r3, #4
 8002b76:	b2da      	uxtb	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	70da      	strb	r2, [r3, #3]
    packet[4] = AX_SYNC_WRITE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2283      	movs	r2, #131	; 0x83
 8002b80:	711a      	strb	r2, [r3, #4]
    packet[5] = ADDR_TORQUE_ENABLE;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2218      	movs	r2, #24
 8002b86:	715a      	strb	r2, [r3, #5]
    packet[6] = 0x01;		// length of data to access
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	719a      	strb	r2, [r3, #6]

    packet[7] = 0;			// ID 0
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	71da      	strb	r2, [r3, #7]
    packet[8] = State;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	79fa      	ldrb	r2, [r7, #7]
 8002b98:	721a      	strb	r2, [r3, #8]

    packet[9] = 1;			// ID 1
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	725a      	strb	r2, [r3, #9]
    packet[10] = State;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	79fa      	ldrb	r2, [r7, #7]
 8002ba4:	729a      	strb	r2, [r3, #10]

    packet[11] = 2;			// ID 2
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2202      	movs	r2, #2
 8002baa:	72da      	strb	r2, [r3, #11]
    packet[12] = State;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	79fa      	ldrb	r2, [r7, #7]
 8002bb0:	731a      	strb	r2, [r3, #12]
    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6] + packet[7]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	789a      	ldrb	r2, [r3, #2]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	78db      	ldrb	r3, [r3, #3]
 8002bba:	4413      	add	r3, r2
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	791b      	ldrb	r3, [r3, #4]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	795b      	ldrb	r3, [r3, #5]
 8002bca:	4413      	add	r3, r2
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	799b      	ldrb	r3, [r3, #6]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	79db      	ldrb	r3, [r3, #7]
 8002bda:	4413      	add	r3, r2
 8002bdc:	b2da      	uxtb	r2, r3
						+ packet[8] + packet[9] + packet[10] + packet[11] + packet[12])) & 0xFF;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	7a1b      	ldrb	r3, [r3, #8]
 8002be2:	4413      	add	r3, r2
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	7a5b      	ldrb	r3, [r3, #9]
 8002bea:	4413      	add	r3, r2
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	7a9b      	ldrb	r3, [r3, #10]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	7adb      	ldrb	r3, [r3, #11]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	7b1b      	ldrb	r3, [r3, #12]
 8002c02:	4413      	add	r3, r2
 8002c04:	b2db      	uxtb	r3, r3
    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6] + packet[7]
 8002c06:	43db      	mvns	r3, r3
 8002c08:	72fb      	strb	r3, [r7, #11]
    packet[13] = Checksum;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	7afa      	ldrb	r2, [r7, #11]
 8002c0e:	735a      	strb	r2, [r3, #13]

    sendInstPacket(packet, length);
 8002c10:	7dfb      	ldrb	r3, [r7, #23]
 8002c12:	4619      	mov	r1, r3
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f7ff fc45 	bl	80024a4 <sendInstPacket>
 8002c1a:	46b5      	mov	sp, r6
}
 8002c1c:	bf00      	nop
 8002c1e:	371c      	adds	r7, #28
 8002c20:	46bd      	mov	sp, r7
 8002c22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002c26 <setEndless>:


void setEndless(uint8_t ID, uint8_t State)
{
 8002c26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c2a:	b08d      	sub	sp, #52	; 0x34
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	460a      	mov	r2, r1
 8002c32:	73fb      	strb	r3, [r7, #15]
 8002c34:	4613      	mov	r3, r2
 8002c36:	73bb      	strb	r3, [r7, #14]
	if ( State )
 8002c38:	7bbb      	ldrb	r3, [r7, #14]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d06f      	beq.n	8002d1e <setEndless+0xf8>
	{
 8002c3e:	466b      	mov	r3, sp
 8002c40:	461c      	mov	r4, r3
		uint8_t length = 9;
 8002c42:	2309      	movs	r3, #9
 8002c44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		uint8_t packet[length];
 8002c48:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	61fb      	str	r3, [r7, #28]
 8002c52:	b2cb      	uxtb	r3, r1
 8002c54:	2200      	movs	r2, #0
 8002c56:	603b      	str	r3, [r7, #0]
 8002c58:	607a      	str	r2, [r7, #4]
 8002c5a:	f04f 0200 	mov.w	r2, #0
 8002c5e:	f04f 0300 	mov.w	r3, #0
 8002c62:	e9d7 5600 	ldrd	r5, r6, [r7]
 8002c66:	4630      	mov	r0, r6
 8002c68:	00c3      	lsls	r3, r0, #3
 8002c6a:	4628      	mov	r0, r5
 8002c6c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002c70:	4628      	mov	r0, r5
 8002c72:	00c2      	lsls	r2, r0, #3
 8002c74:	b2cb      	uxtb	r3, r1
 8002c76:	2200      	movs	r2, #0
 8002c78:	469a      	mov	sl, r3
 8002c7a:	4693      	mov	fp, r2
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c90:	460b      	mov	r3, r1
 8002c92:	3307      	adds	r3, #7
 8002c94:	08db      	lsrs	r3, r3, #3
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	ebad 0d03 	sub.w	sp, sp, r3
 8002c9c:	466b      	mov	r3, sp
 8002c9e:	3300      	adds	r3, #0
 8002ca0:	61bb      	str	r3, [r7, #24]

	    packet[0] = AX_HEADER;
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	22ff      	movs	r2, #255	; 0xff
 8002ca6:	701a      	strb	r2, [r3, #0]
	    packet[1] = AX_HEADER;
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	22ff      	movs	r2, #255	; 0xff
 8002cac:	705a      	strb	r2, [r3, #1]
	    packet[2] = ID;
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	7bfa      	ldrb	r2, [r7, #15]
 8002cb2:	709a      	strb	r2, [r3, #2]
	    packet[3] = length-4;
 8002cb4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002cb8:	3b04      	subs	r3, #4
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	70da      	strb	r2, [r3, #3]
	    packet[4] = AX_WRITE;
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	2203      	movs	r2, #3
 8002cc4:	711a      	strb	r2, [r3, #4]
	    packet[5] = ADDR_CCW_ANGLE_LIMIT_L;
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	2208      	movs	r2, #8
 8002cca:	715a      	strb	r2, [r3, #5]
	    packet[6] = 0; 						// full rotation
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	719a      	strb	r2, [r3, #6]
	    packet[7] = 0;						// full rotation
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	71da      	strb	r2, [r3, #7]
	    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6] + packet[7])) & 0xFF;
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	789a      	ldrb	r2, [r3, #2]
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	78db      	ldrb	r3, [r3, #3]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	791b      	ldrb	r3, [r3, #4]
 8002ce8:	4413      	add	r3, r2
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	795b      	ldrb	r3, [r3, #5]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	799b      	ldrb	r3, [r3, #6]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	79db      	ldrb	r3, [r3, #7]
 8002d00:	4413      	add	r3, r2
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	43db      	mvns	r3, r3
 8002d06:	75fb      	strb	r3, [r7, #23]
	    packet[8] = Checksum;
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	7dfa      	ldrb	r2, [r7, #23]
 8002d0c:	721a      	strb	r2, [r3, #8]

	    sendInstPacket(packet, length);
 8002d0e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002d12:	4619      	mov	r1, r3
 8002d14:	69b8      	ldr	r0, [r7, #24]
 8002d16:	f7ff fbc5 	bl	80024a4 <sendInstPacket>
 8002d1a:	46a5      	mov	sp, r4
	    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6] + packet[7])) & 0xFF;
	    packet[8] = Checksum;

	    sendInstPacket(packet, length);
	}
}
 8002d1c:	e071      	b.n	8002e02 <setEndless+0x1dc>
	{
 8002d1e:	466b      	mov	r3, sp
 8002d20:	461e      	mov	r6, r3
		turn(ID,0,0);
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
 8002d24:	2200      	movs	r2, #0
 8002d26:	2100      	movs	r1, #0
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f000 f86f 	bl	8002e0c <turn>
		uint8_t length = 9;
 8002d2e:	2309      	movs	r3, #9
 8002d30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		uint8_t packet[length];
 8002d34:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8002d38:	460b      	mov	r3, r1
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d3e:	b2cb      	uxtb	r3, r1
 8002d40:	2200      	movs	r2, #0
 8002d42:	4698      	mov	r8, r3
 8002d44:	4691      	mov	r9, r2
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	f04f 0300 	mov.w	r3, #0
 8002d4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d5a:	b2cb      	uxtb	r3, r1
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	461c      	mov	r4, r3
 8002d60:	4615      	mov	r5, r2
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	f04f 0300 	mov.w	r3, #0
 8002d6a:	00eb      	lsls	r3, r5, #3
 8002d6c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d70:	00e2      	lsls	r2, r4, #3
 8002d72:	460b      	mov	r3, r1
 8002d74:	3307      	adds	r3, #7
 8002d76:	08db      	lsrs	r3, r3, #3
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	ebad 0d03 	sub.w	sp, sp, r3
 8002d7e:	466b      	mov	r3, sp
 8002d80:	3300      	adds	r3, #0
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24
	    packet[0] = AX_HEADER;
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	22ff      	movs	r2, #255	; 0xff
 8002d88:	701a      	strb	r2, [r3, #0]
	    packet[1] = AX_HEADER;
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8c:	22ff      	movs	r2, #255	; 0xff
 8002d8e:	705a      	strb	r2, [r3, #1]
	    packet[2] = ID;
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	7bfa      	ldrb	r2, [r7, #15]
 8002d94:	709a      	strb	r2, [r3, #2]
	    packet[3] = length-4;
 8002d96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d9a:	3b04      	subs	r3, #4
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	70da      	strb	r2, [r3, #3]
	    packet[4] = AX_WRITE;
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	2203      	movs	r2, #3
 8002da6:	711a      	strb	r2, [r3, #4]
	    packet[5] = ADDR_CCW_ANGLE_LIMIT_L;
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	2208      	movs	r2, #8
 8002dac:	715a      	strb	r2, [r3, #5]
	    packet[6] = 255;					// 1023 low
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	22ff      	movs	r2, #255	; 0xff
 8002db2:	719a      	strb	r2, [r3, #6]
	    packet[7] = 3;						// 1023 high
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	2203      	movs	r2, #3
 8002db8:	71da      	strb	r2, [r3, #7]
	    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6] + packet[7])) & 0xFF;
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	789a      	ldrb	r2, [r3, #2]
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	78db      	ldrb	r3, [r3, #3]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	791b      	ldrb	r3, [r3, #4]
 8002dca:	4413      	add	r3, r2
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	795b      	ldrb	r3, [r3, #5]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	799b      	ldrb	r3, [r3, #6]
 8002dda:	4413      	add	r3, r2
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	79db      	ldrb	r3, [r3, #7]
 8002de2:	4413      	add	r3, r2
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	43db      	mvns	r3, r3
 8002de8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	    packet[8] = Checksum;
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002df2:	721a      	strb	r2, [r3, #8]
	    sendInstPacket(packet, length);
 8002df4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002df8:	4619      	mov	r1, r3
 8002dfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002dfc:	f7ff fb52 	bl	80024a4 <sendInstPacket>
 8002e00:	46b5      	mov	sp, r6
}
 8002e02:	bf00      	nop
 8002e04:	3734      	adds	r7, #52	; 0x34
 8002e06:	46bd      	mov	sp, r7
 8002e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002e0c <turn>:

void turn(uint8_t ID, uint8_t SIDE, uint16_t Speed)
{
 8002e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e10:	b08d      	sub	sp, #52	; 0x34
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	4603      	mov	r3, r0
 8002e16:	73fb      	strb	r3, [r7, #15]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	73bb      	strb	r3, [r7, #14]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	81bb      	strh	r3, [r7, #12]
		if (SIDE == LEFT)
 8002e20:	7bbb      	ldrb	r3, [r7, #14]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d179      	bne.n	8002f1a <turn+0x10e>
		{
 8002e26:	466b      	mov	r3, sp
 8002e28:	461c      	mov	r4, r3

		    uint8_t Speed_L = Speed;
 8002e2a:	89bb      	ldrh	r3, [r7, #12]
 8002e2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		    uint8_t Speed_H = Speed >> 8;		// 16 bits - 2 x 8 bits variables
 8002e30:	89bb      	ldrh	r3, [r7, #12]
 8002e32:	0a1b      	lsrs	r3, r3, #8
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

			uint8_t length = 9;
 8002e3a:	2309      	movs	r3, #9
 8002e3c:	f887 3020 	strb.w	r3, [r7, #32]
			uint8_t packet[length];
 8002e40:	f897 1020 	ldrb.w	r1, [r7, #32]
 8002e44:	460b      	mov	r3, r1
 8002e46:	3b01      	subs	r3, #1
 8002e48:	61fb      	str	r3, [r7, #28]
 8002e4a:	b2cb      	uxtb	r3, r1
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	603b      	str	r3, [r7, #0]
 8002e50:	607a      	str	r2, [r7, #4]
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	f04f 0300 	mov.w	r3, #0
 8002e5a:	e9d7 5600 	ldrd	r5, r6, [r7]
 8002e5e:	4630      	mov	r0, r6
 8002e60:	00c3      	lsls	r3, r0, #3
 8002e62:	4628      	mov	r0, r5
 8002e64:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002e68:	4628      	mov	r0, r5
 8002e6a:	00c2      	lsls	r2, r0, #3
 8002e6c:	b2cb      	uxtb	r3, r1
 8002e6e:	2200      	movs	r2, #0
 8002e70:	469a      	mov	sl, r3
 8002e72:	4693      	mov	fp, r2
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e88:	460b      	mov	r3, r1
 8002e8a:	3307      	adds	r3, #7
 8002e8c:	08db      	lsrs	r3, r3, #3
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	ebad 0d03 	sub.w	sp, sp, r3
 8002e94:	466b      	mov	r3, sp
 8002e96:	3300      	adds	r3, #0
 8002e98:	61bb      	str	r3, [r7, #24]

		    packet[0] = AX_HEADER;
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	22ff      	movs	r2, #255	; 0xff
 8002e9e:	701a      	strb	r2, [r3, #0]
		    packet[1] = AX_HEADER;
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	22ff      	movs	r2, #255	; 0xff
 8002ea4:	705a      	strb	r2, [r3, #1]
		    packet[2] = ID;
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	7bfa      	ldrb	r2, [r7, #15]
 8002eaa:	709a      	strb	r2, [r3, #2]
		    packet[3] = length-4;
 8002eac:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002eb0:	3b04      	subs	r3, #4
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	70da      	strb	r2, [r3, #3]
		    packet[4] = AX_WRITE;
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	2203      	movs	r2, #3
 8002ebc:	711a      	strb	r2, [r3, #4]
		    packet[5] = ADDR_GOAL_SPEED_L;
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	715a      	strb	r2, [r3, #5]
		    packet[6] = Speed_L;
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8002eca:	719a      	strb	r2, [r3, #6]
		    packet[7] = Speed_H;
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8002ed2:	71da      	strb	r2, [r3, #7]
		    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6] + packet[7])) & 0xFF;
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	789a      	ldrb	r2, [r3, #2]
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	78db      	ldrb	r3, [r3, #3]
 8002edc:	4413      	add	r3, r2
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	791b      	ldrb	r3, [r3, #4]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	795b      	ldrb	r3, [r3, #5]
 8002eec:	4413      	add	r3, r2
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	799b      	ldrb	r3, [r3, #6]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	b2da      	uxtb	r2, r3
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	79db      	ldrb	r3, [r3, #7]
 8002efc:	4413      	add	r3, r2
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	43db      	mvns	r3, r3
 8002f02:	75fb      	strb	r3, [r7, #23]
		    packet[8] = Checksum;
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	7dfa      	ldrb	r2, [r7, #23]
 8002f08:	721a      	strb	r2, [r3, #8]

		    sendInstPacket(packet, length);
 8002f0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f0e:	4619      	mov	r1, r3
 8002f10:	69b8      	ldr	r0, [r7, #24]
 8002f12:	f7ff fac7 	bl	80024a4 <sendInstPacket>
 8002f16:	46a5      	mov	sp, r4
		    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6] + packet[7])) & 0xFF;
		    packet[8] = Checksum;

		    sendInstPacket(packet, length);
		}
}
 8002f18:	e077      	b.n	800300a <turn+0x1fe>
		{
 8002f1a:	466b      	mov	r3, sp
 8002f1c:	461e      	mov	r6, r3
		    uint8_t Speed_L = Speed;
 8002f1e:	89bb      	ldrh	r3, [r7, #12]
 8002f20:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		    uint8_t Speed_H = (Speed >> 8) + 4;		// 16 bits - 2 x 8 bits variables
 8002f24:	89bb      	ldrh	r3, [r7, #12]
 8002f26:	0a1b      	lsrs	r3, r3, #8
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			uint8_t length = 9;
 8002f32:	2309      	movs	r3, #9
 8002f34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint8_t packet[length];
 8002f38:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f42:	b2cb      	uxtb	r3, r1
 8002f44:	2200      	movs	r2, #0
 8002f46:	4698      	mov	r8, r3
 8002f48:	4691      	mov	r9, r2
 8002f4a:	f04f 0200 	mov.w	r2, #0
 8002f4e:	f04f 0300 	mov.w	r3, #0
 8002f52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f5e:	b2cb      	uxtb	r3, r1
 8002f60:	2200      	movs	r2, #0
 8002f62:	461c      	mov	r4, r3
 8002f64:	4615      	mov	r5, r2
 8002f66:	f04f 0200 	mov.w	r2, #0
 8002f6a:	f04f 0300 	mov.w	r3, #0
 8002f6e:	00eb      	lsls	r3, r5, #3
 8002f70:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f74:	00e2      	lsls	r2, r4, #3
 8002f76:	460b      	mov	r3, r1
 8002f78:	3307      	adds	r3, #7
 8002f7a:	08db      	lsrs	r3, r3, #3
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	ebad 0d03 	sub.w	sp, sp, r3
 8002f82:	466b      	mov	r3, sp
 8002f84:	3300      	adds	r3, #0
 8002f86:	627b      	str	r3, [r7, #36]	; 0x24
		    packet[0] = AX_HEADER;
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	22ff      	movs	r2, #255	; 0xff
 8002f8c:	701a      	strb	r2, [r3, #0]
		    packet[1] = AX_HEADER;
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	22ff      	movs	r2, #255	; 0xff
 8002f92:	705a      	strb	r2, [r3, #1]
		    packet[2] = ID;
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	7bfa      	ldrb	r2, [r7, #15]
 8002f98:	709a      	strb	r2, [r3, #2]
		    packet[3] = length-4;
 8002f9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f9e:	3b04      	subs	r3, #4
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	70da      	strb	r2, [r3, #3]
		    packet[4] = AX_WRITE;
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	2203      	movs	r2, #3
 8002faa:	711a      	strb	r2, [r3, #4]
		    packet[5] = ADDR_GOAL_SPEED_L;
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	2220      	movs	r2, #32
 8002fb0:	715a      	strb	r2, [r3, #5]
		    packet[6] = Speed_L;
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002fb8:	719a      	strb	r2, [r3, #6]
		    packet[7] = Speed_H;
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8002fc0:	71da      	strb	r2, [r3, #7]
		    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6] + packet[7])) & 0xFF;
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	789a      	ldrb	r2, [r3, #2]
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	78db      	ldrb	r3, [r3, #3]
 8002fca:	4413      	add	r3, r2
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	791b      	ldrb	r3, [r3, #4]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	795b      	ldrb	r3, [r3, #5]
 8002fda:	4413      	add	r3, r2
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	799b      	ldrb	r3, [r3, #6]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	79db      	ldrb	r3, [r3, #7]
 8002fea:	4413      	add	r3, r2
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		    packet[8] = Checksum;
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002ffa:	721a      	strb	r2, [r3, #8]
		    sendInstPacket(packet, length);
 8002ffc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003000:	4619      	mov	r1, r3
 8003002:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003004:	f7ff fa4e 	bl	80024a4 <sendInstPacket>
 8003008:	46b5      	mov	sp, r6
}
 800300a:	bf00      	nop
 800300c:	3734      	adds	r7, #52	; 0x34
 800300e:	46bd      	mov	sp, r7
 8003010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003014 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4a07      	ldr	r2, [pc, #28]	; (8003040 <vApplicationGetIdleTaskMemory+0x2c>)
 8003024:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	4a06      	ldr	r2, [pc, #24]	; (8003044 <vApplicationGetIdleTaskMemory+0x30>)
 800302a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2280      	movs	r2, #128	; 0x80
 8003030:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003032:	bf00      	nop
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	200002d0 	.word	0x200002d0
 8003044:	20000384 	.word	0x20000384

08003048 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8003048:	b5b0      	push	{r4, r5, r7, lr}
 800304a:	b0a0      	sub	sp, #128	; 0x80
 800304c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	deltaInit();
 800304e:	f7ff f9d3 	bl	80023f8 <deltaInit>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of ReadPosSem */
  osSemaphoreDef(ReadPosSem);
 8003052:	2300      	movs	r3, #0
 8003054:	67bb      	str	r3, [r7, #120]	; 0x78
 8003056:	2300      	movs	r3, #0
 8003058:	67fb      	str	r3, [r7, #124]	; 0x7c
  ReadPosSemHandle = osSemaphoreCreate(osSemaphore(ReadPosSem), 1);
 800305a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800305e:	2101      	movs	r1, #1
 8003060:	4618      	mov	r0, r3
 8003062:	f004 fcdd 	bl	8007a20 <osSemaphoreCreate>
 8003066:	4603      	mov	r3, r0
 8003068:	4a30      	ldr	r2, [pc, #192]	; (800312c <MX_FREERTOS_Init+0xe4>)
 800306a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */


	osSemaphoreWait(ReadPosSemHandle, 0);
 800306c:	4b2f      	ldr	r3, [pc, #188]	; (800312c <MX_FREERTOS_Init+0xe4>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2100      	movs	r1, #0
 8003072:	4618      	mov	r0, r3
 8003074:	f004 fd14 	bl	8007aa0 <osSemaphoreWait>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of setQueue */
  osMessageQDef(setQueue, 10, queueMessage);
 8003078:	4b2d      	ldr	r3, [pc, #180]	; (8003130 <MX_FREERTOS_Init+0xe8>)
 800307a:	f107 0468 	add.w	r4, r7, #104	; 0x68
 800307e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003080:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  setQueueHandle = osMessageCreate(osMessageQ(setQueue), NULL);
 8003084:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003088:	2100      	movs	r1, #0
 800308a:	4618      	mov	r0, r3
 800308c:	f004 fd8c 	bl	8007ba8 <osMessageCreate>
 8003090:	4603      	mov	r3, r0
 8003092:	4a28      	ldr	r2, [pc, #160]	; (8003134 <MX_FREERTOS_Init+0xec>)
 8003094:	6013      	str	r3, [r2, #0]

  /* definition and creation of cmdQueue */
  osMessageQDef(cmdQueue, 10, 20);
 8003096:	4b28      	ldr	r3, [pc, #160]	; (8003138 <MX_FREERTOS_Init+0xf0>)
 8003098:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800309c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800309e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  cmdQueueHandle = osMessageCreate(osMessageQ(cmdQueue), NULL);
 80030a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80030a6:	2100      	movs	r1, #0
 80030a8:	4618      	mov	r0, r3
 80030aa:	f004 fd7d 	bl	8007ba8 <osMessageCreate>
 80030ae:	4603      	mov	r3, r0
 80030b0:	4a22      	ldr	r2, [pc, #136]	; (800313c <MX_FREERTOS_Init+0xf4>)
 80030b2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of readPosTask */
  osThreadDef(readPosTask, read_Pos_Task, osPriorityNormal, 0, 512);
 80030b4:	4b22      	ldr	r3, [pc, #136]	; (8003140 <MX_FREERTOS_Init+0xf8>)
 80030b6:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80030ba:	461d      	mov	r5, r3
 80030bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80030c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readPosTaskHandle = osThreadCreate(osThread(readPosTask), NULL);
 80030c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80030cc:	2100      	movs	r1, #0
 80030ce:	4618      	mov	r0, r3
 80030d0:	f004 fc31 	bl	8007936 <osThreadCreate>
 80030d4:	4603      	mov	r3, r0
 80030d6:	4a1b      	ldr	r2, [pc, #108]	; (8003144 <MX_FREERTOS_Init+0xfc>)
 80030d8:	6013      	str	r3, [r2, #0]

  /* definition and creation of calWritePosTask */
  osThreadDef(calWritePosTask, cal_Write_Pos_Task, osPriorityNormal, 0, 512);
 80030da:	4b1b      	ldr	r3, [pc, #108]	; (8003148 <MX_FREERTOS_Init+0x100>)
 80030dc:	f107 0420 	add.w	r4, r7, #32
 80030e0:	461d      	mov	r5, r3
 80030e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80030ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  calWritePosTaskHandle = osThreadCreate(osThread(calWritePosTask), NULL);
 80030ee:	f107 0320 	add.w	r3, r7, #32
 80030f2:	2100      	movs	r1, #0
 80030f4:	4618      	mov	r0, r3
 80030f6:	f004 fc1e 	bl	8007936 <osThreadCreate>
 80030fa:	4603      	mov	r3, r0
 80030fc:	4a13      	ldr	r2, [pc, #76]	; (800314c <MX_FREERTOS_Init+0x104>)
 80030fe:	6013      	str	r3, [r2, #0]

  /* definition and creation of cmdHandleTask */
  osThreadDef(cmdHandleTask, cmd_Handle_Task, osPriorityNormal, 0, 512);
 8003100:	4b13      	ldr	r3, [pc, #76]	; (8003150 <MX_FREERTOS_Init+0x108>)
 8003102:	1d3c      	adds	r4, r7, #4
 8003104:	461d      	mov	r5, r3
 8003106:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003108:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800310a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800310e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  cmdHandleTaskHandle = osThreadCreate(osThread(cmdHandleTask), NULL);
 8003112:	1d3b      	adds	r3, r7, #4
 8003114:	2100      	movs	r1, #0
 8003116:	4618      	mov	r0, r3
 8003118:	f004 fc0d 	bl	8007936 <osThreadCreate>
 800311c:	4603      	mov	r3, r0
 800311e:	4a0d      	ldr	r2, [pc, #52]	; (8003154 <MX_FREERTOS_Init+0x10c>)
 8003120:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8003122:	bf00      	nop
 8003124:	3780      	adds	r7, #128	; 0x80
 8003126:	46bd      	mov	sp, r7
 8003128:	bdb0      	pop	{r4, r5, r7, pc}
 800312a:	bf00      	nop
 800312c:	200002cc 	.word	0x200002cc
 8003130:	0800f004 	.word	0x0800f004
 8003134:	200002c4 	.word	0x200002c4
 8003138:	0800f014 	.word	0x0800f014
 800313c:	200002c8 	.word	0x200002c8
 8003140:	0800f024 	.word	0x0800f024
 8003144:	200002b8 	.word	0x200002b8
 8003148:	0800f040 	.word	0x0800f040
 800314c:	200002bc 	.word	0x200002bc
 8003150:	0800f05c 	.word	0x0800f05c
 8003154:	200002c0 	.word	0x200002c0

08003158 <read_Pos_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_read_Pos_Task */
void read_Pos_Task(void const * argument)
{
 8003158:	b590      	push	{r4, r7, lr}
 800315a:	b08d      	sub	sp, #52	; 0x34
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN read_Pos_Task */
	/* Infinite loop */
	for(;;)
	{
		if(osSemaphoreWait(ReadPosSemHandle, osWaitForever) == osOK)
 8003160:	4b65      	ldr	r3, [pc, #404]	; (80032f8 <read_Pos_Task+0x1a0>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f04f 31ff 	mov.w	r1, #4294967295
 8003168:	4618      	mov	r0, r3
 800316a:	f004 fc99 	bl	8007aa0 <osSemaphoreWait>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1f5      	bne.n	8003160 <read_Pos_Task+0x8>
		{
			uint16_t presentPos[3];
			for(int i = 0; i < 3; i++){
 8003174:	2300      	movs	r3, #0
 8003176:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003178:	e014      	b.n	80031a4 <read_Pos_Task+0x4c>
				presentPos[i]=getPresentPosition(i);
 800317a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317c:	b2db      	uxtb	r3, r3
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff fbba 	bl	80028f8 <getPresentPosition>
 8003184:	4603      	mov	r3, r0
 8003186:	461a      	mov	r2, r3
 8003188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	3330      	adds	r3, #48	; 0x30
 800318e:	443b      	add	r3, r7
 8003190:	f823 2c14 	strh.w	r2, [r3, #-20]
				memset(rx2_Buf, 0, sizeof(rx2_Buf));
 8003194:	2214      	movs	r2, #20
 8003196:	2100      	movs	r1, #0
 8003198:	4858      	ldr	r0, [pc, #352]	; (80032fc <read_Pos_Task+0x1a4>)
 800319a:	f007 fc18 	bl	800a9ce <memset>
			for(int i = 0; i < 3; i++){
 800319e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a0:	3301      	adds	r3, #1
 80031a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	dde7      	ble.n	800317a <read_Pos_Task+0x22>
			}
			char buf[14]="Z+999+999+999\n";
 80031aa:	4b55      	ldr	r3, [pc, #340]	; (8003300 <read_Pos_Task+0x1a8>)
 80031ac:	f107 040c 	add.w	r4, r7, #12
 80031b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031b2:	c407      	stmia	r4!, {r0, r1, r2}
 80031b4:	8023      	strh	r3, [r4, #0]
			if(presentPos[0]==0 && presentPos[1]==0 && presentPos[2]==0){
 80031b6:	8bbb      	ldrh	r3, [r7, #28]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d106      	bne.n	80031ca <read_Pos_Task+0x72>
 80031bc:	8bfb      	ldrh	r3, [r7, #30]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d103      	bne.n	80031ca <read_Pos_Task+0x72>
 80031c2:	8c3b      	ldrh	r3, [r7, #32]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 8087 	beq.w	80032d8 <read_Pos_Task+0x180>

			}else {
				double* tempTheta = ConversionFromServo(presentPos[0], presentPos[1], presentPos[2]);
 80031ca:	8bbb      	ldrh	r3, [r7, #28]
 80031cc:	8bf9      	ldrh	r1, [r7, #30]
 80031ce:	8c3a      	ldrh	r2, [r7, #32]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fd ff21 	bl	8001018 <ConversionFromServo>
 80031d6:	6278      	str	r0, [r7, #36]	; 0x24
				forward(tempTheta[0],tempTheta[1],tempTheta[2]);
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	ed93 7b00 	vldr	d7, [r3]
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	3308      	adds	r3, #8
 80031e2:	ed93 6b00 	vldr	d6, [r3]
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	3310      	adds	r3, #16
 80031ea:	ed93 5b00 	vldr	d5, [r3]
 80031ee:	eeb0 2a45 	vmov.f32	s4, s10
 80031f2:	eef0 2a65 	vmov.f32	s5, s11
 80031f6:	eeb0 1a46 	vmov.f32	s2, s12
 80031fa:	eef0 1a66 	vmov.f32	s3, s13
 80031fe:	eeb0 0a47 	vmov.f32	s0, s14
 8003202:	eef0 0a67 	vmov.f32	s1, s15
 8003206:	f7fe fa6f 	bl	80016e8 <forward>

				buf[0]='Z';
 800320a:	235a      	movs	r3, #90	; 0x5a
 800320c:	733b      	strb	r3, [r7, #12]
				buf[1]='\0';
 800320e:	2300      	movs	r3, #0
 8003210:	737b      	strb	r3, [r7, #13]
				for(int i=0; i<3; i++){
 8003212:	2300      	movs	r3, #0
 8003214:	62bb      	str	r3, [r7, #40]	; 0x28
 8003216:	e04d      	b.n	80032b4 <read_Pos_Task+0x15c>
					if((int)coord[i] >= 0){
 8003218:	4a3a      	ldr	r2, [pc, #232]	; (8003304 <read_Pos_Task+0x1ac>)
 800321a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	4413      	add	r3, r2
 8003220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003224:	4610      	mov	r0, r2
 8003226:	4619      	mov	r1, r3
 8003228:	f7fd fca6 	bl	8000b78 <__aeabi_d2iz>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	db0f      	blt.n	8003252 <read_Pos_Task+0xfa>
						strcat(buf, "+");
 8003232:	f107 030c 	add.w	r3, r7, #12
 8003236:	4618      	mov	r0, r3
 8003238:	f7fc ffda 	bl	80001f0 <strlen>
 800323c:	4603      	mov	r3, r0
 800323e:	461a      	mov	r2, r3
 8003240:	f107 030c 	add.w	r3, r7, #12
 8003244:	4413      	add	r3, r2
 8003246:	4930      	ldr	r1, [pc, #192]	; (8003308 <read_Pos_Task+0x1b0>)
 8003248:	461a      	mov	r2, r3
 800324a:	460b      	mov	r3, r1
 800324c:	881b      	ldrh	r3, [r3, #0]
 800324e:	8013      	strh	r3, [r2, #0]
 8003250:	e00e      	b.n	8003270 <read_Pos_Task+0x118>
					}else{
						strcat(buf, "-");
 8003252:	f107 030c 	add.w	r3, r7, #12
 8003256:	4618      	mov	r0, r3
 8003258:	f7fc ffca 	bl	80001f0 <strlen>
 800325c:	4603      	mov	r3, r0
 800325e:	461a      	mov	r2, r3
 8003260:	f107 030c 	add.w	r3, r7, #12
 8003264:	4413      	add	r3, r2
 8003266:	4929      	ldr	r1, [pc, #164]	; (800330c <read_Pos_Task+0x1b4>)
 8003268:	461a      	mov	r2, r3
 800326a:	460b      	mov	r3, r1
 800326c:	881b      	ldrh	r3, [r3, #0]
 800326e:	8013      	strh	r3, [r2, #0]
					}
					char temp[4]="\0";
 8003270:	2300      	movs	r3, #0
 8003272:	60bb      	str	r3, [r7, #8]
					sprintf(temp, "%03d",(int)abs(coord[i]));
 8003274:	4a23      	ldr	r2, [pc, #140]	; (8003304 <read_Pos_Task+0x1ac>)
 8003276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	4413      	add	r3, r2
 800327c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003280:	4610      	mov	r0, r2
 8003282:	4619      	mov	r1, r3
 8003284:	f7fd fc78 	bl	8000b78 <__aeabi_d2iz>
 8003288:	4603      	mov	r3, r0
 800328a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800328e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003292:	f107 0308 	add.w	r3, r7, #8
 8003296:	491e      	ldr	r1, [pc, #120]	; (8003310 <read_Pos_Task+0x1b8>)
 8003298:	4618      	mov	r0, r3
 800329a:	f008 f9a7 	bl	800b5ec <siprintf>
					strcat(buf, temp);
 800329e:	f107 0208 	add.w	r2, r7, #8
 80032a2:	f107 030c 	add.w	r3, r7, #12
 80032a6:	4611      	mov	r1, r2
 80032a8:	4618      	mov	r0, r3
 80032aa:	f008 fa02 	bl	800b6b2 <strcat>
				for(int i=0; i<3; i++){
 80032ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b0:	3301      	adds	r3, #1
 80032b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80032b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	ddae      	ble.n	8003218 <read_Pos_Task+0xc0>
				}
				strcat(buf, "\n");
 80032ba:	f107 030c 	add.w	r3, r7, #12
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fc ff96 	bl	80001f0 <strlen>
 80032c4:	4603      	mov	r3, r0
 80032c6:	461a      	mov	r2, r3
 80032c8:	f107 030c 	add.w	r3, r7, #12
 80032cc:	4413      	add	r3, r2
 80032ce:	4911      	ldr	r1, [pc, #68]	; (8003314 <read_Pos_Task+0x1bc>)
 80032d0:	461a      	mov	r2, r3
 80032d2:	460b      	mov	r3, r1
 80032d4:	881b      	ldrh	r3, [r3, #0]
 80032d6:	8013      	strh	r3, [r2, #0]
			}

			HAL_UART_Transmit(&huart3, (uint8_t*)buf, sizeof(buf), 1000);
 80032d8:	f107 010c 	add.w	r1, r7, #12
 80032dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032e0:	220e      	movs	r2, #14
 80032e2:	480d      	ldr	r0, [pc, #52]	; (8003318 <read_Pos_Task+0x1c0>)
 80032e4:	f003 f8ab 	bl	800643e <HAL_UART_Transmit>

			osThreadSetPriority(readPosTaskHandle, osPriorityNormal);
 80032e8:	4b0c      	ldr	r3, [pc, #48]	; (800331c <read_Pos_Task+0x1c4>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2100      	movs	r1, #0
 80032ee:	4618      	mov	r0, r3
 80032f0:	f004 fb6d 	bl	80079ce <osThreadSetPriority>
		if(osSemaphoreWait(ReadPosSemHandle, osWaitForever) == osOK)
 80032f4:	e734      	b.n	8003160 <read_Pos_Task+0x8>
 80032f6:	bf00      	nop
 80032f8:	200002cc 	.word	0x200002cc
 80032fc:	2000060c 	.word	0x2000060c
 8003300:	0800f08c 	.word	0x0800f08c
 8003304:	20000288 	.word	0x20000288
 8003308:	0800f078 	.word	0x0800f078
 800330c:	0800f07c 	.word	0x0800f07c
 8003310:	0800f080 	.word	0x0800f080
 8003314:	0800f088 	.word	0x0800f088
 8003318:	20000694 	.word	0x20000694
 800331c:	200002b8 	.word	0x200002b8

08003320 <cal_Write_Pos_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_cal_Write_Pos_Task */
void cal_Write_Pos_Task(void const * argument)
{
 8003320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003324:	b099      	sub	sp, #100	; 0x64
 8003326:	af02      	add	r7, sp, #8
 8003328:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN cal_Write_Pos_Task */
  /* Infinite loop */
  for(;;)
  {
	  osEvent setEvent;
	  setEvent = osMessageGet(setQueueHandle, osWaitForever);
 800332a:	4ba8      	ldr	r3, [pc, #672]	; (80035cc <cal_Write_Pos_Task+0x2ac>)
 800332c:	6819      	ldr	r1, [r3, #0]
 800332e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003332:	f04f 32ff 	mov.w	r2, #4294967295
 8003336:	4618      	mov	r0, r3
 8003338:	f004 fc9e 	bl	8007c78 <osMessageGet>
		if(setEvent.status == osEventMessage)
 800333c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800333e:	2b10      	cmp	r3, #16
 8003340:	d1f3      	bne.n	800332a <cal_Write_Pos_Task+0xa>
		{
			queueMessage *msgp;
			msgp = setEvent.value.p;
 8003342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003344:	653b      	str	r3, [r7, #80]	; 0x50
			queueMessage msg = *(msgp);
 8003346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003348:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800334c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800334e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

			printf("X : %lf \r\n",msg.mX);
 8003352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003354:	4618      	mov	r0, r3
 8003356:	f7fd f907 	bl	8000568 <__aeabi_f2d>
 800335a:	4602      	mov	r2, r0
 800335c:	460b      	mov	r3, r1
 800335e:	489c      	ldr	r0, [pc, #624]	; (80035d0 <cal_Write_Pos_Task+0x2b0>)
 8003360:	f008 f83c 	bl	800b3dc <iprintf>
			printf("Y : %lf \r\n",msg.mY);
 8003364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003366:	4618      	mov	r0, r3
 8003368:	f7fd f8fe 	bl	8000568 <__aeabi_f2d>
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	4898      	ldr	r0, [pc, #608]	; (80035d4 <cal_Write_Pos_Task+0x2b4>)
 8003372:	f008 f833 	bl	800b3dc <iprintf>
			printf("Z : %lf \r\n",msg.mZ);
 8003376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003378:	4618      	mov	r0, r3
 800337a:	f7fd f8f5 	bl	8000568 <__aeabi_f2d>
 800337e:	4602      	mov	r2, r0
 8003380:	460b      	mov	r3, r1
 8003382:	4895      	ldr	r0, [pc, #596]	; (80035d8 <cal_Write_Pos_Task+0x2b8>)
 8003384:	f008 f82a 	bl	800b3dc <iprintf>
			printf("Speed : %d \r\n",msg.maxSpeed);
 8003388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800338a:	4619      	mov	r1, r3
 800338c:	4893      	ldr	r0, [pc, #588]	; (80035dc <cal_Write_Pos_Task+0x2bc>)
 800338e:	f008 f825 	bl	800b3dc <iprintf>

			setCoordinates((double)msg.mX,(double)msg.mY,(double)msg.mZ);
 8003392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003394:	4618      	mov	r0, r3
 8003396:	f7fd f8e7 	bl	8000568 <__aeabi_f2d>
 800339a:	4604      	mov	r4, r0
 800339c:	460d      	mov	r5, r1
 800339e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7fd f8e1 	bl	8000568 <__aeabi_f2d>
 80033a6:	4680      	mov	r8, r0
 80033a8:	4689      	mov	r9, r1
 80033aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7fd f8db 	bl	8000568 <__aeabi_f2d>
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	ec43 2b12 	vmov	d2, r2, r3
 80033ba:	ec49 8b11 	vmov	d1, r8, r9
 80033be:	ec45 4b10 	vmov	d0, r4, r5
 80033c2:	f7fd fe9b 	bl	80010fc <setCoordinates>

			uint16_t GPBefore[3];
			memcpy(GPBefore, GP, sizeof(uint16_t)*3);
 80033c6:	4a86      	ldr	r2, [pc, #536]	; (80035e0 <cal_Write_Pos_Task+0x2c0>)
 80033c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033cc:	6810      	ldr	r0, [r2, #0]
 80033ce:	6018      	str	r0, [r3, #0]
 80033d0:	8892      	ldrh	r2, [r2, #4]
 80033d2:	809a      	strh	r2, [r3, #4]

			inverse();
 80033d4:	f7fe f86c 	bl	80014b0 <inverse>
			ServoConversion();
 80033d8:	f7fd fd9a 	bl	8000f10 <ServoConversion>
			uint16_t diff[3];

			diff[0]=abs(GP[0]-GPBefore[0]);
 80033dc:	4b80      	ldr	r3, [pc, #512]	; (80035e0 <cal_Write_Pos_Task+0x2c0>)
 80033de:	881b      	ldrh	r3, [r3, #0]
 80033e0:	461a      	mov	r2, r3
 80033e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	bfb8      	it	lt
 80033ea:	425b      	neglt	r3, r3
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	843b      	strh	r3, [r7, #32]
			diff[1]=abs(GP[1]-GPBefore[1]);
 80033f0:	4b7b      	ldr	r3, [pc, #492]	; (80035e0 <cal_Write_Pos_Task+0x2c0>)
 80033f2:	885b      	ldrh	r3, [r3, #2]
 80033f4:	461a      	mov	r2, r3
 80033f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	bfb8      	it	lt
 80033fe:	425b      	neglt	r3, r3
 8003400:	b29b      	uxth	r3, r3
 8003402:	847b      	strh	r3, [r7, #34]	; 0x22
			diff[2]=abs(GP[2]-GPBefore[2]);
 8003404:	4b76      	ldr	r3, [pc, #472]	; (80035e0 <cal_Write_Pos_Task+0x2c0>)
 8003406:	889b      	ldrh	r3, [r3, #4]
 8003408:	461a      	mov	r2, r3
 800340a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	bfb8      	it	lt
 8003412:	425b      	neglt	r3, r3
 8003414:	b29b      	uxth	r3, r3
 8003416:	84bb      	strh	r3, [r7, #36]	; 0x24

			uint16_t max = (diff[0] > diff[1] && diff[0] > diff[2]) ? diff[0] : (diff[1] > diff[2]) ? diff[1] : diff[2];
 8003418:	8c3a      	ldrh	r2, [r7, #32]
 800341a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800341c:	429a      	cmp	r2, r3
 800341e:	d905      	bls.n	800342c <cal_Write_Pos_Task+0x10c>
 8003420:	8c3a      	ldrh	r2, [r7, #32]
 8003422:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003424:	429a      	cmp	r2, r3
 8003426:	d901      	bls.n	800342c <cal_Write_Pos_Task+0x10c>
 8003428:	8c3b      	ldrh	r3, [r7, #32]
 800342a:	e005      	b.n	8003438 <cal_Write_Pos_Task+0x118>
 800342c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800342e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003430:	4293      	cmp	r3, r2
 8003432:	bf38      	it	cc
 8003434:	4613      	movcc	r3, r2
 8003436:	b29b      	uxth	r3, r3
 8003438:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

			double speed[3]={100,100,100};
 800343c:	4b69      	ldr	r3, [pc, #420]	; (80035e4 <cal_Write_Pos_Task+0x2c4>)
 800343e:	f107 0408 	add.w	r4, r7, #8
 8003442:	461d      	mov	r5, r3
 8003444:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003446:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003448:	e895 0003 	ldmia.w	r5, {r0, r1}
 800344c:	e884 0003 	stmia.w	r4, {r0, r1}

			if(max!=0){
 8003450:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 808c 	beq.w	8003572 <cal_Write_Pos_Task+0x252>
				speed[0]=((double)diff[0]/max)*msg.maxSpeed;
 800345a:	8c3b      	ldrh	r3, [r7, #32]
 800345c:	4618      	mov	r0, r3
 800345e:	f7fd f861 	bl	8000524 <__aeabi_ui2d>
 8003462:	4604      	mov	r4, r0
 8003464:	460d      	mov	r5, r1
 8003466:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800346a:	4618      	mov	r0, r3
 800346c:	f7fd f86a 	bl	8000544 <__aeabi_i2d>
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	4620      	mov	r0, r4
 8003476:	4629      	mov	r1, r5
 8003478:	f7fd f9f8 	bl	800086c <__aeabi_ddiv>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	4614      	mov	r4, r2
 8003482:	461d      	mov	r5, r3
 8003484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003486:	4618      	mov	r0, r3
 8003488:	f7fd f85c 	bl	8000544 <__aeabi_i2d>
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	4620      	mov	r0, r4
 8003492:	4629      	mov	r1, r5
 8003494:	f7fd f8c0 	bl	8000618 <__aeabi_dmul>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	e9c7 2302 	strd	r2, r3, [r7, #8]
				speed[1]=((double)diff[1]/max)*msg.maxSpeed;
 80034a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fd f83e 	bl	8000524 <__aeabi_ui2d>
 80034a8:	4604      	mov	r4, r0
 80034aa:	460d      	mov	r5, r1
 80034ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7fd f847 	bl	8000544 <__aeabi_i2d>
 80034b6:	4602      	mov	r2, r0
 80034b8:	460b      	mov	r3, r1
 80034ba:	4620      	mov	r0, r4
 80034bc:	4629      	mov	r1, r5
 80034be:	f7fd f9d5 	bl	800086c <__aeabi_ddiv>
 80034c2:	4602      	mov	r2, r0
 80034c4:	460b      	mov	r3, r1
 80034c6:	4614      	mov	r4, r2
 80034c8:	461d      	mov	r5, r3
 80034ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fd f839 	bl	8000544 <__aeabi_i2d>
 80034d2:	4602      	mov	r2, r0
 80034d4:	460b      	mov	r3, r1
 80034d6:	4620      	mov	r0, r4
 80034d8:	4629      	mov	r1, r5
 80034da:	f7fd f89d 	bl	8000618 <__aeabi_dmul>
 80034de:	4602      	mov	r2, r0
 80034e0:	460b      	mov	r3, r1
 80034e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
				speed[2]=((double)diff[2]/max)*msg.maxSpeed;
 80034e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7fd f81b 	bl	8000524 <__aeabi_ui2d>
 80034ee:	4604      	mov	r4, r0
 80034f0:	460d      	mov	r5, r1
 80034f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7fd f824 	bl	8000544 <__aeabi_i2d>
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	4620      	mov	r0, r4
 8003502:	4629      	mov	r1, r5
 8003504:	f7fd f9b2 	bl	800086c <__aeabi_ddiv>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	4614      	mov	r4, r2
 800350e:	461d      	mov	r5, r3
 8003510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003512:	4618      	mov	r0, r3
 8003514:	f7fd f816 	bl	8000544 <__aeabi_i2d>
 8003518:	4602      	mov	r2, r0
 800351a:	460b      	mov	r3, r1
 800351c:	4620      	mov	r0, r4
 800351e:	4629      	mov	r1, r5
 8003520:	f7fd f87a 	bl	8000618 <__aeabi_dmul>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	e9c7 2306 	strd	r2, r3, [r7, #24]
				for(int i=0; i<3; i++){
 800352c:	2300      	movs	r3, #0
 800352e:	657b      	str	r3, [r7, #84]	; 0x54
 8003530:	e01c      	b.n	800356c <cal_Write_Pos_Task+0x24c>
					if(speed[i]<1) speed[i]=10;
 8003532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	3358      	adds	r3, #88	; 0x58
 8003538:	443b      	add	r3, r7
 800353a:	3b50      	subs	r3, #80	; 0x50
 800353c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003540:	f04f 0200 	mov.w	r2, #0
 8003544:	4b28      	ldr	r3, [pc, #160]	; (80035e8 <cal_Write_Pos_Task+0x2c8>)
 8003546:	f7fd fad9 	bl	8000afc <__aeabi_dcmplt>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00a      	beq.n	8003566 <cal_Write_Pos_Task+0x246>
 8003550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	3358      	adds	r3, #88	; 0x58
 8003556:	443b      	add	r3, r7
 8003558:	f1a3 0150 	sub.w	r1, r3, #80	; 0x50
 800355c:	f04f 0200 	mov.w	r2, #0
 8003560:	4b22      	ldr	r3, [pc, #136]	; (80035ec <cal_Write_Pos_Task+0x2cc>)
 8003562:	e9c1 2300 	strd	r2, r3, [r1]
				for(int i=0; i<3; i++){
 8003566:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003568:	3301      	adds	r3, #1
 800356a:	657b      	str	r3, [r7, #84]	; 0x54
 800356c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800356e:	2b02      	cmp	r3, #2
 8003570:	dddf      	ble.n	8003532 <cal_Write_Pos_Task+0x212>
				}
			}

			syncWriteGoalPosition(GP[0],(uint16_t)speed[0],GP[1],(uint16_t)speed[1],GP[2],(uint16_t)speed[2]);
 8003572:	4b1b      	ldr	r3, [pc, #108]	; (80035e0 <cal_Write_Pos_Task+0x2c0>)
 8003574:	881d      	ldrh	r5, [r3, #0]
 8003576:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800357a:	4610      	mov	r0, r2
 800357c:	4619      	mov	r1, r3
 800357e:	f7fd fb23 	bl	8000bc8 <__aeabi_d2uiz>
 8003582:	4603      	mov	r3, r0
 8003584:	b29e      	uxth	r6, r3
 8003586:	4b16      	ldr	r3, [pc, #88]	; (80035e0 <cal_Write_Pos_Task+0x2c0>)
 8003588:	f8b3 8002 	ldrh.w	r8, [r3, #2]
 800358c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003590:	4610      	mov	r0, r2
 8003592:	4619      	mov	r1, r3
 8003594:	f7fd fb18 	bl	8000bc8 <__aeabi_d2uiz>
 8003598:	4603      	mov	r3, r0
 800359a:	fa1f f983 	uxth.w	r9, r3
 800359e:	4b10      	ldr	r3, [pc, #64]	; (80035e0 <cal_Write_Pos_Task+0x2c0>)
 80035a0:	889c      	ldrh	r4, [r3, #4]
 80035a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035a6:	4610      	mov	r0, r2
 80035a8:	4619      	mov	r1, r3
 80035aa:	f7fd fb0d 	bl	8000bc8 <__aeabi_d2uiz>
 80035ae:	4603      	mov	r3, r0
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	9301      	str	r3, [sp, #4]
 80035b4:	9400      	str	r4, [sp, #0]
 80035b6:	464b      	mov	r3, r9
 80035b8:	4642      	mov	r2, r8
 80035ba:	4631      	mov	r1, r6
 80035bc:	4628      	mov	r0, r5
 80035be:	f7ff f885 	bl	80026cc <syncWriteGoalPosition>
			servoDelay(10);
 80035c2:	200a      	movs	r0, #10
 80035c4:	f7fe ff62 	bl	800248c <servoDelay>
  {
 80035c8:	e6af      	b.n	800332a <cal_Write_Pos_Task+0xa>
 80035ca:	bf00      	nop
 80035cc:	200002c4 	.word	0x200002c4
 80035d0:	0800f09c 	.word	0x0800f09c
 80035d4:	0800f0a8 	.word	0x0800f0a8
 80035d8:	0800f0b4 	.word	0x0800f0b4
 80035dc:	0800f0c0 	.word	0x0800f0c0
 80035e0:	20000280 	.word	0x20000280
 80035e4:	0800f0d0 	.word	0x0800f0d0
 80035e8:	3ff00000 	.word	0x3ff00000
 80035ec:	40240000 	.word	0x40240000

080035f0 <cmd_Handle_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_cmd_Handle_Task */
void cmd_Handle_Task(void const * argument)
{
 80035f0:	b5b0      	push	{r4, r5, r7, lr}
 80035f2:	b08e      	sub	sp, #56	; 0x38
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN cmd_Handle_Task */
  /* Infinite loop */
  for(;;)
  {
	  osEvent setEvent;
	  setEvent = osMessageGet(cmdQueueHandle, osWaitForever);
 80035f8:	4b1b      	ldr	r3, [pc, #108]	; (8003668 <cmd_Handle_Task+0x78>)
 80035fa:	6819      	ldr	r1, [r3, #0]
 80035fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003600:	f04f 32ff 	mov.w	r2, #4294967295
 8003604:	4618      	mov	r0, r3
 8003606:	f004 fb37 	bl	8007c78 <osMessageGet>
		if(setEvent.status == osEventMessage)
 800360a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360c:	2b10      	cmp	r3, #16
 800360e:	d1f3      	bne.n	80035f8 <cmd_Handle_Task+0x8>
		{

			queueMessage msg;
			char cmd[20]={0,};
 8003610:	2300      	movs	r3, #0
 8003612:	60bb      	str	r3, [r7, #8]
 8003614:	f107 030c 	add.w	r3, r7, #12
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	605a      	str	r2, [r3, #4]
 800361e:	609a      	str	r2, [r3, #8]
 8003620:	60da      	str	r2, [r3, #12]
			memcpy(cmd, setEvent.value.p, 20);
 8003622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003624:	f107 0408 	add.w	r4, r7, #8
 8003628:	461d      	mov	r5, r3
 800362a:	6828      	ldr	r0, [r5, #0]
 800362c:	6869      	ldr	r1, [r5, #4]
 800362e:	68aa      	ldr	r2, [r5, #8]
 8003630:	68eb      	ldr	r3, [r5, #12]
 8003632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003634:	6928      	ldr	r0, [r5, #16]
 8003636:	6020      	str	r0, [r4, #0]
			if(cmd_handler(cmd, &msg)){
 8003638:	f107 021c 	add.w	r2, r7, #28
 800363c:	f107 0308 	add.w	r3, r7, #8
 8003640:	4611      	mov	r1, r2
 8003642:	4618      	mov	r0, r3
 8003644:	f7fe fe1a 	bl	800227c <cmd_handler>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0d4      	beq.n	80035f8 <cmd_Handle_Task+0x8>
				osSemaphoreRelease(ReadPosSemHandle);
 800364e:	4b07      	ldr	r3, [pc, #28]	; (800366c <cmd_Handle_Task+0x7c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f004 fa72 	bl	8007b3c <osSemaphoreRelease>
				osThreadSetPriority(readPosTaskHandle, osPriorityAboveNormal);
 8003658:	4b05      	ldr	r3, [pc, #20]	; (8003670 <cmd_Handle_Task+0x80>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2101      	movs	r1, #1
 800365e:	4618      	mov	r0, r3
 8003660:	f004 f9b5 	bl	80079ce <osThreadSetPriority>
  {
 8003664:	e7c8      	b.n	80035f8 <cmd_Handle_Task+0x8>
 8003666:	bf00      	nop
 8003668:	200002c8 	.word	0x200002c8
 800366c:	200002cc 	.word	0x200002cc
 8003670:	200002b8 	.word	0x200002b8

08003674 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b08a      	sub	sp, #40	; 0x28
 8003678:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800367a:	f107 0314 	add.w	r3, r7, #20
 800367e:	2200      	movs	r2, #0
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	605a      	str	r2, [r3, #4]
 8003684:	609a      	str	r2, [r3, #8]
 8003686:	60da      	str	r2, [r3, #12]
 8003688:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800368a:	2300      	movs	r3, #0
 800368c:	613b      	str	r3, [r7, #16]
 800368e:	4b40      	ldr	r3, [pc, #256]	; (8003790 <MX_GPIO_Init+0x11c>)
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	4a3f      	ldr	r2, [pc, #252]	; (8003790 <MX_GPIO_Init+0x11c>)
 8003694:	f043 0304 	orr.w	r3, r3, #4
 8003698:	6313      	str	r3, [r2, #48]	; 0x30
 800369a:	4b3d      	ldr	r3, [pc, #244]	; (8003790 <MX_GPIO_Init+0x11c>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	613b      	str	r3, [r7, #16]
 80036a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]
 80036aa:	4b39      	ldr	r3, [pc, #228]	; (8003790 <MX_GPIO_Init+0x11c>)
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	4a38      	ldr	r2, [pc, #224]	; (8003790 <MX_GPIO_Init+0x11c>)
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	6313      	str	r3, [r2, #48]	; 0x30
 80036b6:	4b36      	ldr	r3, [pc, #216]	; (8003790 <MX_GPIO_Init+0x11c>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036c2:	2300      	movs	r3, #0
 80036c4:	60bb      	str	r3, [r7, #8]
 80036c6:	4b32      	ldr	r3, [pc, #200]	; (8003790 <MX_GPIO_Init+0x11c>)
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	4a31      	ldr	r2, [pc, #196]	; (8003790 <MX_GPIO_Init+0x11c>)
 80036cc:	f043 0302 	orr.w	r3, r3, #2
 80036d0:	6313      	str	r3, [r2, #48]	; 0x30
 80036d2:	4b2f      	ldr	r3, [pc, #188]	; (8003790 <MX_GPIO_Init+0x11c>)
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	60bb      	str	r3, [r7, #8]
 80036dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80036de:	2300      	movs	r3, #0
 80036e0:	607b      	str	r3, [r7, #4]
 80036e2:	4b2b      	ldr	r3, [pc, #172]	; (8003790 <MX_GPIO_Init+0x11c>)
 80036e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e6:	4a2a      	ldr	r2, [pc, #168]	; (8003790 <MX_GPIO_Init+0x11c>)
 80036e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036ec:	6313      	str	r3, [r2, #48]	; 0x30
 80036ee:	4b28      	ldr	r3, [pc, #160]	; (8003790 <MX_GPIO_Init+0x11c>)
 80036f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f6:	607b      	str	r3, [r7, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80036fa:	2300      	movs	r3, #0
 80036fc:	603b      	str	r3, [r7, #0]
 80036fe:	4b24      	ldr	r3, [pc, #144]	; (8003790 <MX_GPIO_Init+0x11c>)
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	4a23      	ldr	r2, [pc, #140]	; (8003790 <MX_GPIO_Init+0x11c>)
 8003704:	f043 0308 	orr.w	r3, r3, #8
 8003708:	6313      	str	r3, [r2, #48]	; 0x30
 800370a:	4b21      	ldr	r3, [pc, #132]	; (8003790 <MX_GPIO_Init+0x11c>)
 800370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	603b      	str	r3, [r7, #0]
 8003714:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8003716:	2200      	movs	r2, #0
 8003718:	2101      	movs	r1, #1
 800371a:	481e      	ldr	r0, [pc, #120]	; (8003794 <MX_GPIO_Init+0x120>)
 800371c:	f001 fbe6 	bl	8004eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_SET);
 8003720:	2201      	movs	r2, #1
 8003722:	2101      	movs	r1, #1
 8003724:	481c      	ldr	r0, [pc, #112]	; (8003798 <MX_GPIO_Init+0x124>)
 8003726:	f001 fbe1 	bl	8004eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Direction_GPIO_Port, Direction_Pin, GPIO_PIN_RESET);
 800372a:	2200      	movs	r2, #0
 800372c:	2180      	movs	r1, #128	; 0x80
 800372e:	481b      	ldr	r0, [pc, #108]	; (800379c <MX_GPIO_Init+0x128>)
 8003730:	f001 fbdc 	bl	8004eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003734:	2301      	movs	r3, #1
 8003736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003738:	2301      	movs	r3, #1
 800373a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373c:	2300      	movs	r3, #0
 800373e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003740:	2300      	movs	r3, #0
 8003742:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003744:	f107 0314 	add.w	r3, r7, #20
 8003748:	4619      	mov	r1, r3
 800374a:	4812      	ldr	r0, [pc, #72]	; (8003794 <MX_GPIO_Init+0x120>)
 800374c:	f001 fa22 	bl	8004b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003750:	2301      	movs	r3, #1
 8003752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003754:	2301      	movs	r3, #1
 8003756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003758:	2300      	movs	r3, #0
 800375a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800375c:	2300      	movs	r3, #0
 800375e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003760:	f107 0314 	add.w	r3, r7, #20
 8003764:	4619      	mov	r1, r3
 8003766:	480c      	ldr	r0, [pc, #48]	; (8003798 <MX_GPIO_Init+0x124>)
 8003768:	f001 fa14 	bl	8004b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Direction_Pin;
 800376c:	2380      	movs	r3, #128	; 0x80
 800376e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003770:	2311      	movs	r3, #17
 8003772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003774:	2300      	movs	r3, #0
 8003776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003778:	2300      	movs	r3, #0
 800377a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Direction_GPIO_Port, &GPIO_InitStruct);
 800377c:	f107 0314 	add.w	r3, r7, #20
 8003780:	4619      	mov	r1, r3
 8003782:	4806      	ldr	r0, [pc, #24]	; (800379c <MX_GPIO_Init+0x128>)
 8003784:	f001 fa06 	bl	8004b94 <HAL_GPIO_Init>

}
 8003788:	bf00      	nop
 800378a:	3728      	adds	r7, #40	; 0x28
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40023800 	.word	0x40023800
 8003794:	40020400 	.word	0x40020400
 8003798:	40021800 	.word	0x40021800
 800379c:	40020c00 	.word	0x40020c00

080037a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037a4:	f000 fcd0 	bl	8004148 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037a8:	f000 f812 	bl	80037d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037ac:	f7ff ff62 	bl	8003674 <MX_GPIO_Init>
  MX_DMA_Init();
 80037b0:	f7fe fe4c 	bl	800244c <MX_DMA_Init>
  MX_RTC_Init();
 80037b4:	f000 f896 	bl	80038e4 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80037b8:	f000 fb68 	bl	8003e8c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80037bc:	f000 fb90 	bl	8003ee0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  UartCallback_Init();
 80037c0:	f000 fa66 	bl	8003c90 <UartCallback_Init>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80037c4:	f7ff fc40 	bl	8003048 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80037c8:	f004 f8ae 	bl	8007928 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80037cc:	e7fe      	b.n	80037cc <main+0x2c>
	...

080037d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b094      	sub	sp, #80	; 0x50
 80037d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037d6:	f107 0320 	add.w	r3, r7, #32
 80037da:	2230      	movs	r2, #48	; 0x30
 80037dc:	2100      	movs	r1, #0
 80037de:	4618      	mov	r0, r3
 80037e0:	f007 f8f5 	bl	800a9ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037e4:	f107 030c 	add.w	r3, r7, #12
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	605a      	str	r2, [r3, #4]
 80037ee:	609a      	str	r2, [r3, #8]
 80037f0:	60da      	str	r2, [r3, #12]
 80037f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80037f4:	2300      	movs	r3, #0
 80037f6:	60bb      	str	r3, [r7, #8]
 80037f8:	4b2c      	ldr	r3, [pc, #176]	; (80038ac <SystemClock_Config+0xdc>)
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	4a2b      	ldr	r2, [pc, #172]	; (80038ac <SystemClock_Config+0xdc>)
 80037fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003802:	6413      	str	r3, [r2, #64]	; 0x40
 8003804:	4b29      	ldr	r3, [pc, #164]	; (80038ac <SystemClock_Config+0xdc>)
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380c:	60bb      	str	r3, [r7, #8]
 800380e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003810:	2300      	movs	r3, #0
 8003812:	607b      	str	r3, [r7, #4]
 8003814:	4b26      	ldr	r3, [pc, #152]	; (80038b0 <SystemClock_Config+0xe0>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a25      	ldr	r2, [pc, #148]	; (80038b0 <SystemClock_Config+0xe0>)
 800381a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800381e:	6013      	str	r3, [r2, #0]
 8003820:	4b23      	ldr	r3, [pc, #140]	; (80038b0 <SystemClock_Config+0xe0>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003828:	607b      	str	r3, [r7, #4]
 800382a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800382c:	2306      	movs	r3, #6
 800382e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003830:	2301      	movs	r3, #1
 8003832:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003834:	2301      	movs	r3, #1
 8003836:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003838:	2310      	movs	r3, #16
 800383a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800383c:	2302      	movs	r3, #2
 800383e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003840:	2300      	movs	r3, #0
 8003842:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003844:	2308      	movs	r3, #8
 8003846:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003848:	23b4      	movs	r3, #180	; 0xb4
 800384a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800384c:	2302      	movs	r3, #2
 800384e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003850:	2304      	movs	r3, #4
 8003852:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003854:	f107 0320 	add.w	r3, r7, #32
 8003858:	4618      	mov	r0, r3
 800385a:	f001 fbb1 	bl	8004fc0 <HAL_RCC_OscConfig>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003864:	f000 f838 	bl	80038d8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003868:	f001 fb5a 	bl	8004f20 <HAL_PWREx_EnableOverDrive>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8003872:	f000 f831 	bl	80038d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003876:	230f      	movs	r3, #15
 8003878:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800387a:	2302      	movs	r3, #2
 800387c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800387e:	2300      	movs	r3, #0
 8003880:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003882:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003886:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800388c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800388e:	f107 030c 	add.w	r3, r7, #12
 8003892:	2105      	movs	r1, #5
 8003894:	4618      	mov	r0, r3
 8003896:	f001 fe0b 	bl	80054b0 <HAL_RCC_ClockConfig>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80038a0:	f000 f81a 	bl	80038d8 <Error_Handler>
  }
}
 80038a4:	bf00      	nop
 80038a6:	3750      	adds	r7, #80	; 0x50
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40023800 	.word	0x40023800
 80038b0:	40007000 	.word	0x40007000

080038b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a04      	ldr	r2, [pc, #16]	; (80038d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d101      	bne.n	80038ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80038c6:	f000 fc61 	bl	800418c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80038ca:	bf00      	nop
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40000800 	.word	0x40000800

080038d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038dc:	b672      	cpsid	i
}
 80038de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80038e0:	e7fe      	b.n	80038e0 <Error_Handler+0x8>
	...

080038e4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80038e8:	4b0f      	ldr	r3, [pc, #60]	; (8003928 <MX_RTC_Init+0x44>)
 80038ea:	4a10      	ldr	r2, [pc, #64]	; (800392c <MX_RTC_Init+0x48>)
 80038ec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80038ee:	4b0e      	ldr	r3, [pc, #56]	; (8003928 <MX_RTC_Init+0x44>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80038f4:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <MX_RTC_Init+0x44>)
 80038f6:	227f      	movs	r2, #127	; 0x7f
 80038f8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80038fa:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <MX_RTC_Init+0x44>)
 80038fc:	22ff      	movs	r2, #255	; 0xff
 80038fe:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003900:	4b09      	ldr	r3, [pc, #36]	; (8003928 <MX_RTC_Init+0x44>)
 8003902:	2200      	movs	r2, #0
 8003904:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003906:	4b08      	ldr	r3, [pc, #32]	; (8003928 <MX_RTC_Init+0x44>)
 8003908:	2200      	movs	r2, #0
 800390a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800390c:	4b06      	ldr	r3, [pc, #24]	; (8003928 <MX_RTC_Init+0x44>)
 800390e:	2200      	movs	r2, #0
 8003910:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003912:	4805      	ldr	r0, [pc, #20]	; (8003928 <MX_RTC_Init+0x44>)
 8003914:	f002 f99e 	bl	8005c54 <HAL_RTC_Init>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800391e:	f7ff ffdb 	bl	80038d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003922:	bf00      	nop
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	20000584 	.word	0x20000584
 800392c:	40002800 	.word	0x40002800

08003930 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b08e      	sub	sp, #56	; 0x38
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003938:	f107 0308 	add.w	r3, r7, #8
 800393c:	2230      	movs	r2, #48	; 0x30
 800393e:	2100      	movs	r1, #0
 8003940:	4618      	mov	r0, r3
 8003942:	f007 f844 	bl	800a9ce <memset>
  if(rtcHandle->Instance==RTC)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a0c      	ldr	r2, [pc, #48]	; (800397c <HAL_RTC_MspInit+0x4c>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d111      	bne.n	8003974 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003950:	2320      	movs	r3, #32
 8003952:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003954:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003958:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800395a:	f107 0308 	add.w	r3, r7, #8
 800395e:	4618      	mov	r0, r3
 8003960:	f001 ffb8 	bl	80058d4 <HAL_RCCEx_PeriphCLKConfig>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800396a:	f7ff ffb5 	bl	80038d8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800396e:	4b04      	ldr	r3, [pc, #16]	; (8003980 <HAL_RTC_MspInit+0x50>)
 8003970:	2201      	movs	r2, #1
 8003972:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003974:	bf00      	nop
 8003976:	3738      	adds	r7, #56	; 0x38
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40002800 	.word	0x40002800
 8003980:	42470e3c 	.word	0x42470e3c

08003984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800398a:	2300      	movs	r3, #0
 800398c:	607b      	str	r3, [r7, #4]
 800398e:	4b12      	ldr	r3, [pc, #72]	; (80039d8 <HAL_MspInit+0x54>)
 8003990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003992:	4a11      	ldr	r2, [pc, #68]	; (80039d8 <HAL_MspInit+0x54>)
 8003994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003998:	6453      	str	r3, [r2, #68]	; 0x44
 800399a:	4b0f      	ldr	r3, [pc, #60]	; (80039d8 <HAL_MspInit+0x54>)
 800399c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039a2:	607b      	str	r3, [r7, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039a6:	2300      	movs	r3, #0
 80039a8:	603b      	str	r3, [r7, #0]
 80039aa:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <HAL_MspInit+0x54>)
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	4a0a      	ldr	r2, [pc, #40]	; (80039d8 <HAL_MspInit+0x54>)
 80039b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039b4:	6413      	str	r3, [r2, #64]	; 0x40
 80039b6:	4b08      	ldr	r3, [pc, #32]	; (80039d8 <HAL_MspInit+0x54>)
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039be:	603b      	str	r3, [r7, #0]
 80039c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80039c2:	2200      	movs	r2, #0
 80039c4:	210f      	movs	r1, #15
 80039c6:	f06f 0001 	mvn.w	r0, #1
 80039ca:	f000 fcb7 	bl	800433c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039ce:	bf00      	nop
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40023800 	.word	0x40023800

080039dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08c      	sub	sp, #48	; 0x30
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80039e4:	2300      	movs	r3, #0
 80039e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80039e8:	2300      	movs	r3, #0
 80039ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80039ec:	2200      	movs	r2, #0
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	201e      	movs	r0, #30
 80039f2:	f000 fca3 	bl	800433c <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80039f6:	201e      	movs	r0, #30
 80039f8:	f000 fcbc 	bl	8004374 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80039fc:	2300      	movs	r3, #0
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	4b1f      	ldr	r3, [pc, #124]	; (8003a80 <HAL_InitTick+0xa4>)
 8003a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a04:	4a1e      	ldr	r2, [pc, #120]	; (8003a80 <HAL_InitTick+0xa4>)
 8003a06:	f043 0304 	orr.w	r3, r3, #4
 8003a0a:	6413      	str	r3, [r2, #64]	; 0x40
 8003a0c:	4b1c      	ldr	r3, [pc, #112]	; (8003a80 <HAL_InitTick+0xa4>)
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003a18:	f107 0210 	add.w	r2, r7, #16
 8003a1c:	f107 0314 	add.w	r3, r7, #20
 8003a20:	4611      	mov	r1, r2
 8003a22:	4618      	mov	r0, r3
 8003a24:	f001 ff24 	bl	8005870 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003a28:	f001 fefa 	bl	8005820 <HAL_RCC_GetPCLK1Freq>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a34:	4a13      	ldr	r2, [pc, #76]	; (8003a84 <HAL_InitTick+0xa8>)
 8003a36:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3a:	0c9b      	lsrs	r3, r3, #18
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8003a40:	4b11      	ldr	r3, [pc, #68]	; (8003a88 <HAL_InitTick+0xac>)
 8003a42:	4a12      	ldr	r2, [pc, #72]	; (8003a8c <HAL_InitTick+0xb0>)
 8003a44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8003a46:	4b10      	ldr	r3, [pc, #64]	; (8003a88 <HAL_InitTick+0xac>)
 8003a48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a4c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8003a4e:	4a0e      	ldr	r2, [pc, #56]	; (8003a88 <HAL_InitTick+0xac>)
 8003a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a52:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8003a54:	4b0c      	ldr	r3, [pc, #48]	; (8003a88 <HAL_InitTick+0xac>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a5a:	4b0b      	ldr	r3, [pc, #44]	; (8003a88 <HAL_InitTick+0xac>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8003a60:	4809      	ldr	r0, [pc, #36]	; (8003a88 <HAL_InitTick+0xac>)
 8003a62:	f002 f9f1 	bl	8005e48 <HAL_TIM_Base_Init>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d104      	bne.n	8003a76 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8003a6c:	4806      	ldr	r0, [pc, #24]	; (8003a88 <HAL_InitTick+0xac>)
 8003a6e:	f002 fa45 	bl	8005efc <HAL_TIM_Base_Start_IT>
 8003a72:	4603      	mov	r3, r0
 8003a74:	e000      	b.n	8003a78 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3730      	adds	r7, #48	; 0x30
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40023800 	.word	0x40023800
 8003a84:	431bde83 	.word	0x431bde83
 8003a88:	200005a4 	.word	0x200005a4
 8003a8c:	40000800 	.word	0x40000800

08003a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a94:	e7fe      	b.n	8003a94 <NMI_Handler+0x4>

08003a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a96:	b480      	push	{r7}
 8003a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a9a:	e7fe      	b.n	8003a9a <HardFault_Handler+0x4>

08003a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003aa0:	e7fe      	b.n	8003aa0 <MemManage_Handler+0x4>

08003aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003aa6:	e7fe      	b.n	8003aa6 <BusFault_Handler+0x4>

08003aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003aac:	e7fe      	b.n	8003aac <UsageFault_Handler+0x4>

08003aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ab2:	bf00      	nop
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003ac0:	4802      	ldr	r0, [pc, #8]	; (8003acc <DMA1_Stream5_IRQHandler+0x10>)
 8003ac2:	f000 fdfd 	bl	80046c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003ac6:	bf00      	nop
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	200006d8 	.word	0x200006d8

08003ad0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003ad4:	4804      	ldr	r0, [pc, #16]	; (8003ae8 <TIM4_IRQHandler+0x18>)
 8003ad6:	f002 fa81 	bl	8005fdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  TIMEOUT--;
 8003ada:	4b04      	ldr	r3, [pc, #16]	; (8003aec <TIM4_IRQHandler+0x1c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	4a02      	ldr	r2, [pc, #8]	; (8003aec <TIM4_IRQHandler+0x1c>)
 8003ae2:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM4_IRQn 1 */
}
 8003ae4:	bf00      	nop
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	200005a4 	.word	0x200005a4
 8003aec:	2000064c 	.word	0x2000064c

08003af0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003af4:	4802      	ldr	r0, [pc, #8]	; (8003b00 <USART2_IRQHandler+0x10>)
 8003af6:	f002 fdc9 	bl	800668c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003afa:	bf00      	nop
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	20000650 	.word	0x20000650

08003b04 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003b08:	4802      	ldr	r0, [pc, #8]	; (8003b14 <USART3_IRQHandler+0x10>)
 8003b0a:	f002 fdbf 	bl	800668c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003b0e:	bf00      	nop
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	20000694 	.word	0x20000694

08003b18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
	return 1;
 8003b1c:	2301      	movs	r3, #1
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <_kill>:

int _kill(int pid, int sig)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003b32:	f006 fe1b 	bl	800a76c <__errno>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2216      	movs	r2, #22
 8003b3a:	601a      	str	r2, [r3, #0]
	return -1;
 8003b3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <_exit>:

void _exit (int status)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003b50:	f04f 31ff 	mov.w	r1, #4294967295
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7ff ffe7 	bl	8003b28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003b5a:	e7fe      	b.n	8003b5a <_exit+0x12>

08003b5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b68:	2300      	movs	r3, #0
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	e00a      	b.n	8003b84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b6e:	f3af 8000 	nop.w
 8003b72:	4601      	mov	r1, r0
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	1c5a      	adds	r2, r3, #1
 8003b78:	60ba      	str	r2, [r7, #8]
 8003b7a:	b2ca      	uxtb	r2, r1
 8003b7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	3301      	adds	r3, #1
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	dbf0      	blt.n	8003b6e <_read+0x12>
	}

return len;
 8003b8c:	687b      	ldr	r3, [r7, #4]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3718      	adds	r7, #24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
	return -1;
 8003b9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bbe:	605a      	str	r2, [r3, #4]
	return 0;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <_isatty>:

int _isatty(int file)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
	return 1;
 8003bd6:	2301      	movs	r3, #1
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
	return 0;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
	...

08003c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c08:	4a14      	ldr	r2, [pc, #80]	; (8003c5c <_sbrk+0x5c>)
 8003c0a:	4b15      	ldr	r3, [pc, #84]	; (8003c60 <_sbrk+0x60>)
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c14:	4b13      	ldr	r3, [pc, #76]	; (8003c64 <_sbrk+0x64>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d102      	bne.n	8003c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c1c:	4b11      	ldr	r3, [pc, #68]	; (8003c64 <_sbrk+0x64>)
 8003c1e:	4a12      	ldr	r2, [pc, #72]	; (8003c68 <_sbrk+0x68>)
 8003c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c22:	4b10      	ldr	r3, [pc, #64]	; (8003c64 <_sbrk+0x64>)
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4413      	add	r3, r2
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d207      	bcs.n	8003c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c30:	f006 fd9c 	bl	800a76c <__errno>
 8003c34:	4603      	mov	r3, r0
 8003c36:	220c      	movs	r2, #12
 8003c38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c3e:	e009      	b.n	8003c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c40:	4b08      	ldr	r3, [pc, #32]	; (8003c64 <_sbrk+0x64>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c46:	4b07      	ldr	r3, [pc, #28]	; (8003c64 <_sbrk+0x64>)
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	4a05      	ldr	r2, [pc, #20]	; (8003c64 <_sbrk+0x64>)
 8003c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c52:	68fb      	ldr	r3, [r7, #12]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3718      	adds	r7, #24
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	20030000 	.word	0x20030000
 8003c60:	00000400 	.word	0x00000400
 8003c64:	200005ec 	.word	0x200005ec
 8003c68:	200044a0 	.word	0x200044a0

08003c6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c70:	4b06      	ldr	r3, [pc, #24]	; (8003c8c <SystemInit+0x20>)
 8003c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c76:	4a05      	ldr	r2, [pc, #20]	; (8003c8c <SystemInit+0x20>)
 8003c78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c80:	bf00      	nop
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	e000ed00 	.word	0xe000ed00

08003c90 <UartCallback_Init>:



/* Initialize the Ring Buffer */
void UartCallback_Init (void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
	memset(rx2_Buf, '\0', RxBuf_SIZE);
 8003c94:	2214      	movs	r2, #20
 8003c96:	2100      	movs	r1, #0
 8003c98:	4810      	ldr	r0, [pc, #64]	; (8003cdc <UartCallback_Init+0x4c>)
 8003c9a:	f006 fe98 	bl	800a9ce <memset>
	memset(MainBuf, '\0', MainBuf_SIZE);
 8003c9e:	2228      	movs	r2, #40	; 0x28
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	480f      	ldr	r0, [pc, #60]	; (8003ce0 <UartCallback_Init+0x50>)
 8003ca4:	f006 fe93 	bl	800a9ce <memset>

	//Head = Tail = 0;
	oldPos = 0;
 8003ca8:	4b0e      	ldr	r3, [pc, #56]	; (8003ce4 <UartCallback_Init+0x54>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	801a      	strh	r2, [r3, #0]
	newPos = 0;
 8003cae:	4b0e      	ldr	r3, [pc, #56]	; (8003ce8 <UartCallback_Init+0x58>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	801a      	strh	r2, [r3, #0]


  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rx2_Buf, RxBuf_SIZE);
 8003cb4:	2214      	movs	r2, #20
 8003cb6:	4909      	ldr	r1, [pc, #36]	; (8003cdc <UartCallback_Init+0x4c>)
 8003cb8:	480c      	ldr	r0, [pc, #48]	; (8003cec <UartCallback_Init+0x5c>)
 8003cba:	f002 fc82 	bl	80065c2 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8003cbe:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <UartCallback_Init+0x60>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	4b0a      	ldr	r3, [pc, #40]	; (8003cf0 <UartCallback_Init+0x60>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0208 	bic.w	r2, r2, #8
 8003ccc:	601a      	str	r2, [r3, #0]


  HAL_UART_Receive_IT(&huart3, &rx3_data, 1);
 8003cce:	2201      	movs	r2, #1
 8003cd0:	4908      	ldr	r1, [pc, #32]	; (8003cf4 <UartCallback_Init+0x64>)
 8003cd2:	4809      	ldr	r0, [pc, #36]	; (8003cf8 <UartCallback_Init+0x68>)
 8003cd4:	f002 fc45 	bl	8006562 <HAL_UART_Receive_IT>


}
 8003cd8:	bf00      	nop
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	2000060c 	.word	0x2000060c
 8003ce0:	20000620 	.word	0x20000620
 8003ce4:	20000648 	.word	0x20000648
 8003ce8:	2000064a 	.word	0x2000064a
 8003cec:	20000650 	.word	0x20000650
 8003cf0:	200006d8 	.word	0x200006d8
 8003cf4:	200005f0 	.word	0x200005f0
 8003cf8:	20000694 	.word	0x20000694

08003cfc <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	460b      	mov	r3, r1
 8003d06:	807b      	strh	r3, [r7, #2]
		//isDataAvailable = 1;

	if(huart->Instance==USART2){
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a29      	ldr	r2, [pc, #164]	; (8003db4 <HAL_UARTEx_RxEventCallback+0xb8>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d14b      	bne.n	8003daa <HAL_UARTEx_RxEventCallback+0xae>
		oldPos = newPos;  // Update the last position before copying new data
 8003d12:	4b29      	ldr	r3, [pc, #164]	; (8003db8 <HAL_UARTEx_RxEventCallback+0xbc>)
 8003d14:	881a      	ldrh	r2, [r3, #0]
 8003d16:	4b29      	ldr	r3, [pc, #164]	; (8003dbc <HAL_UARTEx_RxEventCallback+0xc0>)
 8003d18:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (oldPos+Size > MainBuf_SIZE)  // If the current position + new data size is greater than the main buffer
 8003d1a:	4b28      	ldr	r3, [pc, #160]	; (8003dbc <HAL_UARTEx_RxEventCallback+0xc0>)
 8003d1c:	881b      	ldrh	r3, [r3, #0]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	887b      	ldrh	r3, [r7, #2]
 8003d22:	4413      	add	r3, r2
 8003d24:	2b28      	cmp	r3, #40	; 0x28
 8003d26:	dd22      	ble.n	8003d6e <HAL_UARTEx_RxEventCallback+0x72>
		{
			uint16_t datatocopy = MainBuf_SIZE-oldPos;  // find out how much space is left in the main buffer
 8003d28:	4b24      	ldr	r3, [pc, #144]	; (8003dbc <HAL_UARTEx_RxEventCallback+0xc0>)
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8003d30:	81fb      	strh	r3, [r7, #14]
			memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)rx2_Buf, datatocopy);  // copy data in that remaining space
 8003d32:	4b22      	ldr	r3, [pc, #136]	; (8003dbc <HAL_UARTEx_RxEventCallback+0xc0>)
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	461a      	mov	r2, r3
 8003d38:	4b21      	ldr	r3, [pc, #132]	; (8003dc0 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003d3a:	4413      	add	r3, r2
 8003d3c:	89fa      	ldrh	r2, [r7, #14]
 8003d3e:	4921      	ldr	r1, [pc, #132]	; (8003dc4 <HAL_UARTEx_RxEventCallback+0xc8>)
 8003d40:	4618      	mov	r0, r3
 8003d42:	f006 fe36 	bl	800a9b2 <memcpy>

			oldPos = 0;  // point to the start of the buffer
 8003d46:	4b1d      	ldr	r3, [pc, #116]	; (8003dbc <HAL_UARTEx_RxEventCallback+0xc0>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainBuf, (uint8_t *)rx2_Buf+datatocopy, (Size-datatocopy));  // copy the remaining data
 8003d4c:	89fb      	ldrh	r3, [r7, #14]
 8003d4e:	4a1d      	ldr	r2, [pc, #116]	; (8003dc4 <HAL_UARTEx_RxEventCallback+0xc8>)
 8003d50:	1899      	adds	r1, r3, r2
 8003d52:	887a      	ldrh	r2, [r7, #2]
 8003d54:	89fb      	ldrh	r3, [r7, #14]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	461a      	mov	r2, r3
 8003d5a:	4819      	ldr	r0, [pc, #100]	; (8003dc0 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003d5c:	f006 fe29 	bl	800a9b2 <memcpy>
			newPos = (Size-datatocopy);  // update the position
 8003d60:	887a      	ldrh	r2, [r7, #2]
 8003d62:	89fb      	ldrh	r3, [r7, #14]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	4b13      	ldr	r3, [pc, #76]	; (8003db8 <HAL_UARTEx_RxEventCallback+0xbc>)
 8003d6a:	801a      	strh	r2, [r3, #0]
 8003d6c:	e010      	b.n	8003d90 <HAL_UARTEx_RxEventCallback+0x94>
		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)rx2_Buf, Size);
 8003d6e:	4b13      	ldr	r3, [pc, #76]	; (8003dbc <HAL_UARTEx_RxEventCallback+0xc0>)
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	461a      	mov	r2, r3
 8003d74:	4b12      	ldr	r3, [pc, #72]	; (8003dc0 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003d76:	4413      	add	r3, r2
 8003d78:	887a      	ldrh	r2, [r7, #2]
 8003d7a:	4912      	ldr	r1, [pc, #72]	; (8003dc4 <HAL_UARTEx_RxEventCallback+0xc8>)
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f006 fe18 	bl	800a9b2 <memcpy>
			newPos = Size+oldPos;
 8003d82:	4b0e      	ldr	r3, [pc, #56]	; (8003dbc <HAL_UARTEx_RxEventCallback+0xc0>)
 8003d84:	881a      	ldrh	r2, [r3, #0]
 8003d86:	887b      	ldrh	r3, [r7, #2]
 8003d88:	4413      	add	r3, r2
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	4b0a      	ldr	r3, [pc, #40]	; (8003db8 <HAL_UARTEx_RxEventCallback+0xbc>)
 8003d8e:	801a      	strh	r2, [r3, #0]
		 */
//		if (Head+Size < MainBuf_SIZE) Head = Head+Size;
//		else Head = Head+Size - MainBuf_SIZE;

		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) rx2_Buf, RxBuf_SIZE);
 8003d90:	2214      	movs	r2, #20
 8003d92:	490c      	ldr	r1, [pc, #48]	; (8003dc4 <HAL_UARTEx_RxEventCallback+0xc8>)
 8003d94:	480c      	ldr	r0, [pc, #48]	; (8003dc8 <HAL_UARTEx_RxEventCallback+0xcc>)
 8003d96:	f002 fc14 	bl	80065c2 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8003d9a:	4b0c      	ldr	r3, [pc, #48]	; (8003dcc <HAL_UARTEx_RxEventCallback+0xd0>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	4b0a      	ldr	r3, [pc, #40]	; (8003dcc <HAL_UARTEx_RxEventCallback+0xd0>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0208 	bic.w	r2, r2, #8
 8003da8:	601a      	str	r2, [r3, #0]
	}


}
 8003daa:	bf00      	nop
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	40004400 	.word	0x40004400
 8003db8:	2000064a 	.word	0x2000064a
 8003dbc:	20000648 	.word	0x20000648
 8003dc0:	20000620 	.word	0x20000620
 8003dc4:	2000060c 	.word	0x2000060c
 8003dc8:	20000650 	.word	0x20000650
 8003dcc:	200006d8 	.word	0x200006d8

08003dd0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dd0:	b5b0      	push	{r4, r5, r7, lr}
 8003dd2:	b088      	sub	sp, #32
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART3){
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a24      	ldr	r2, [pc, #144]	; (8003e70 <HAL_UART_RxCpltCallback+0xa0>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d142      	bne.n	8003e68 <HAL_UART_RxCpltCallback+0x98>

		if(rx_start == 0){
 8003de2:	4b24      	ldr	r3, [pc, #144]	; (8003e74 <HAL_UART_RxCpltCallback+0xa4>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10a      	bne.n	8003e00 <HAL_UART_RxCpltCallback+0x30>
			if(rx3_data == 'D'){
 8003dea:	4b23      	ldr	r3, [pc, #140]	; (8003e78 <HAL_UART_RxCpltCallback+0xa8>)
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	2b44      	cmp	r3, #68	; 0x44
 8003df0:	d135      	bne.n	8003e5e <HAL_UART_RxCpltCallback+0x8e>
				bufindex = 0;
 8003df2:	4b22      	ldr	r3, [pc, #136]	; (8003e7c <HAL_UART_RxCpltCallback+0xac>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	701a      	strb	r2, [r3, #0]
				rx_start = 1;
 8003df8:	4b1e      	ldr	r3, [pc, #120]	; (8003e74 <HAL_UART_RxCpltCallback+0xa4>)
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	701a      	strb	r2, [r3, #0]
 8003dfe:	e02e      	b.n	8003e5e <HAL_UART_RxCpltCallback+0x8e>
			}
		}
		else {
			if(rx3_data != '\n' && bufindex < RxBuf_SIZE)
 8003e00:	4b1d      	ldr	r3, [pc, #116]	; (8003e78 <HAL_UART_RxCpltCallback+0xa8>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	2b0a      	cmp	r3, #10
 8003e06:	d00f      	beq.n	8003e28 <HAL_UART_RxCpltCallback+0x58>
 8003e08:	4b1c      	ldr	r3, [pc, #112]	; (8003e7c <HAL_UART_RxCpltCallback+0xac>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b13      	cmp	r3, #19
 8003e0e:	d80b      	bhi.n	8003e28 <HAL_UART_RxCpltCallback+0x58>
				rx3_buf[bufindex++] = rx3_data;
 8003e10:	4b1a      	ldr	r3, [pc, #104]	; (8003e7c <HAL_UART_RxCpltCallback+0xac>)
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	b2d1      	uxtb	r1, r2
 8003e18:	4a18      	ldr	r2, [pc, #96]	; (8003e7c <HAL_UART_RxCpltCallback+0xac>)
 8003e1a:	7011      	strb	r1, [r2, #0]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	4b16      	ldr	r3, [pc, #88]	; (8003e78 <HAL_UART_RxCpltCallback+0xa8>)
 8003e20:	7819      	ldrb	r1, [r3, #0]
 8003e22:	4b17      	ldr	r3, [pc, #92]	; (8003e80 <HAL_UART_RxCpltCallback+0xb0>)
 8003e24:	5499      	strb	r1, [r3, r2]
 8003e26:	e01a      	b.n	8003e5e <HAL_UART_RxCpltCallback+0x8e>
			else {
				char temp_buf[20];
				memcpy(temp_buf, (char*)rx3_buf, 20);
 8003e28:	4b15      	ldr	r3, [pc, #84]	; (8003e80 <HAL_UART_RxCpltCallback+0xb0>)
 8003e2a:	f107 040c 	add.w	r4, r7, #12
 8003e2e:	461d      	mov	r5, r3
 8003e30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e34:	682b      	ldr	r3, [r5, #0]
 8003e36:	6023      	str	r3, [r4, #0]
				osMessagePut(cmdQueueHandle, (uint32_t)temp_buf, 100);
 8003e38:	4b12      	ldr	r3, [pc, #72]	; (8003e84 <HAL_UART_RxCpltCallback+0xb4>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f107 010c 	add.w	r1, r7, #12
 8003e40:	2264      	movs	r2, #100	; 0x64
 8003e42:	4618      	mov	r0, r3
 8003e44:	f003 fed8 	bl	8007bf8 <osMessagePut>
				memset(rx3_buf,0,sizeof(rx3_buf));
 8003e48:	2214      	movs	r2, #20
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	480c      	ldr	r0, [pc, #48]	; (8003e80 <HAL_UART_RxCpltCallback+0xb0>)
 8003e4e:	f006 fdbe 	bl	800a9ce <memset>
				bufindex=0;
 8003e52:	4b0a      	ldr	r3, [pc, #40]	; (8003e7c <HAL_UART_RxCpltCallback+0xac>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	701a      	strb	r2, [r3, #0]
				rx_start = 0;
 8003e58:	4b06      	ldr	r3, [pc, #24]	; (8003e74 <HAL_UART_RxCpltCallback+0xa4>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	701a      	strb	r2, [r3, #0]
			}
		}
		HAL_UART_Receive_IT(&huart3, &rx3_data, 1);
 8003e5e:	2201      	movs	r2, #1
 8003e60:	4905      	ldr	r1, [pc, #20]	; (8003e78 <HAL_UART_RxCpltCallback+0xa8>)
 8003e62:	4809      	ldr	r0, [pc, #36]	; (8003e88 <HAL_UART_RxCpltCallback+0xb8>)
 8003e64:	f002 fb7d 	bl	8006562 <HAL_UART_Receive_IT>

	}

}
 8003e68:	bf00      	nop
 8003e6a:	3720      	adds	r7, #32
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bdb0      	pop	{r4, r5, r7, pc}
 8003e70:	40004800 	.word	0x40004800
 8003e74:	20000608 	.word	0x20000608
 8003e78:	200005f0 	.word	0x200005f0
 8003e7c:	20000609 	.word	0x20000609
 8003e80:	200005f4 	.word	0x200005f4
 8003e84:	200002c8 	.word	0x200002c8
 8003e88:	20000694 	.word	0x20000694

08003e8c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003e90:	4b11      	ldr	r3, [pc, #68]	; (8003ed8 <MX_USART2_UART_Init+0x4c>)
 8003e92:	4a12      	ldr	r2, [pc, #72]	; (8003edc <MX_USART2_UART_Init+0x50>)
 8003e94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003e96:	4b10      	ldr	r3, [pc, #64]	; (8003ed8 <MX_USART2_UART_Init+0x4c>)
 8003e98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003e9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003e9e:	4b0e      	ldr	r3, [pc, #56]	; (8003ed8 <MX_USART2_UART_Init+0x4c>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003ea4:	4b0c      	ldr	r3, [pc, #48]	; (8003ed8 <MX_USART2_UART_Init+0x4c>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003eaa:	4b0b      	ldr	r3, [pc, #44]	; (8003ed8 <MX_USART2_UART_Init+0x4c>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003eb0:	4b09      	ldr	r3, [pc, #36]	; (8003ed8 <MX_USART2_UART_Init+0x4c>)
 8003eb2:	220c      	movs	r2, #12
 8003eb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003eb6:	4b08      	ldr	r3, [pc, #32]	; (8003ed8 <MX_USART2_UART_Init+0x4c>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ebc:	4b06      	ldr	r3, [pc, #24]	; (8003ed8 <MX_USART2_UART_Init+0x4c>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003ec2:	4805      	ldr	r0, [pc, #20]	; (8003ed8 <MX_USART2_UART_Init+0x4c>)
 8003ec4:	f002 fa6e 	bl	80063a4 <HAL_UART_Init>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003ece:	f7ff fd03 	bl	80038d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003ed2:	bf00      	nop
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	20000650 	.word	0x20000650
 8003edc:	40004400 	.word	0x40004400

08003ee0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003ee4:	4b11      	ldr	r3, [pc, #68]	; (8003f2c <MX_USART3_UART_Init+0x4c>)
 8003ee6:	4a12      	ldr	r2, [pc, #72]	; (8003f30 <MX_USART3_UART_Init+0x50>)
 8003ee8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003eea:	4b10      	ldr	r3, [pc, #64]	; (8003f2c <MX_USART3_UART_Init+0x4c>)
 8003eec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ef0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003ef2:	4b0e      	ldr	r3, [pc, #56]	; (8003f2c <MX_USART3_UART_Init+0x4c>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003ef8:	4b0c      	ldr	r3, [pc, #48]	; (8003f2c <MX_USART3_UART_Init+0x4c>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003efe:	4b0b      	ldr	r3, [pc, #44]	; (8003f2c <MX_USART3_UART_Init+0x4c>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003f04:	4b09      	ldr	r3, [pc, #36]	; (8003f2c <MX_USART3_UART_Init+0x4c>)
 8003f06:	220c      	movs	r2, #12
 8003f08:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f0a:	4b08      	ldr	r3, [pc, #32]	; (8003f2c <MX_USART3_UART_Init+0x4c>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f10:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <MX_USART3_UART_Init+0x4c>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003f16:	4805      	ldr	r0, [pc, #20]	; (8003f2c <MX_USART3_UART_Init+0x4c>)
 8003f18:	f002 fa44 	bl	80063a4 <HAL_UART_Init>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003f22:	f7ff fcd9 	bl	80038d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003f26:	bf00      	nop
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	20000694 	.word	0x20000694
 8003f30:	40004800 	.word	0x40004800

08003f34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b08c      	sub	sp, #48	; 0x30
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f3c:	f107 031c 	add.w	r3, r7, #28
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	605a      	str	r2, [r3, #4]
 8003f46:	609a      	str	r2, [r3, #8]
 8003f48:	60da      	str	r2, [r3, #12]
 8003f4a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a61      	ldr	r2, [pc, #388]	; (80040d8 <HAL_UART_MspInit+0x1a4>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	f040 8081 	bne.w	800405a <HAL_UART_MspInit+0x126>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f58:	2300      	movs	r3, #0
 8003f5a:	61bb      	str	r3, [r7, #24]
 8003f5c:	4b5f      	ldr	r3, [pc, #380]	; (80040dc <HAL_UART_MspInit+0x1a8>)
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f60:	4a5e      	ldr	r2, [pc, #376]	; (80040dc <HAL_UART_MspInit+0x1a8>)
 8003f62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f66:	6413      	str	r3, [r2, #64]	; 0x40
 8003f68:	4b5c      	ldr	r3, [pc, #368]	; (80040dc <HAL_UART_MspInit+0x1a8>)
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f70:	61bb      	str	r3, [r7, #24]
 8003f72:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f74:	2300      	movs	r3, #0
 8003f76:	617b      	str	r3, [r7, #20]
 8003f78:	4b58      	ldr	r3, [pc, #352]	; (80040dc <HAL_UART_MspInit+0x1a8>)
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7c:	4a57      	ldr	r2, [pc, #348]	; (80040dc <HAL_UART_MspInit+0x1a8>)
 8003f7e:	f043 0301 	orr.w	r3, r3, #1
 8003f82:	6313      	str	r3, [r2, #48]	; 0x30
 8003f84:	4b55      	ldr	r3, [pc, #340]	; (80040dc <HAL_UART_MspInit+0x1a8>)
 8003f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	617b      	str	r3, [r7, #20]
 8003f8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f90:	2300      	movs	r3, #0
 8003f92:	613b      	str	r3, [r7, #16]
 8003f94:	4b51      	ldr	r3, [pc, #324]	; (80040dc <HAL_UART_MspInit+0x1a8>)
 8003f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f98:	4a50      	ldr	r2, [pc, #320]	; (80040dc <HAL_UART_MspInit+0x1a8>)
 8003f9a:	f043 0308 	orr.w	r3, r3, #8
 8003f9e:	6313      	str	r3, [r2, #48]	; 0x30
 8003fa0:	4b4e      	ldr	r3, [pc, #312]	; (80040dc <HAL_UART_MspInit+0x1a8>)
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa4:	f003 0308 	and.w	r3, r3, #8
 8003fa8:	613b      	str	r3, [r7, #16]
 8003faa:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003fac:	2308      	movs	r3, #8
 8003fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003fbc:	2307      	movs	r3, #7
 8003fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fc0:	f107 031c 	add.w	r3, r7, #28
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4846      	ldr	r0, [pc, #280]	; (80040e0 <HAL_UART_MspInit+0x1ac>)
 8003fc8:	f000 fde4 	bl	8004b94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003fcc:	2320      	movs	r3, #32
 8003fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003fdc:	2307      	movs	r3, #7
 8003fde:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fe0:	f107 031c 	add.w	r3, r7, #28
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	483f      	ldr	r0, [pc, #252]	; (80040e4 <HAL_UART_MspInit+0x1b0>)
 8003fe8:	f000 fdd4 	bl	8004b94 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003fec:	4b3e      	ldr	r3, [pc, #248]	; (80040e8 <HAL_UART_MspInit+0x1b4>)
 8003fee:	4a3f      	ldr	r2, [pc, #252]	; (80040ec <HAL_UART_MspInit+0x1b8>)
 8003ff0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003ff2:	4b3d      	ldr	r3, [pc, #244]	; (80040e8 <HAL_UART_MspInit+0x1b4>)
 8003ff4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ff8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ffa:	4b3b      	ldr	r3, [pc, #236]	; (80040e8 <HAL_UART_MspInit+0x1b4>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004000:	4b39      	ldr	r3, [pc, #228]	; (80040e8 <HAL_UART_MspInit+0x1b4>)
 8004002:	2200      	movs	r2, #0
 8004004:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004006:	4b38      	ldr	r3, [pc, #224]	; (80040e8 <HAL_UART_MspInit+0x1b4>)
 8004008:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800400c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800400e:	4b36      	ldr	r3, [pc, #216]	; (80040e8 <HAL_UART_MspInit+0x1b4>)
 8004010:	2200      	movs	r2, #0
 8004012:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004014:	4b34      	ldr	r3, [pc, #208]	; (80040e8 <HAL_UART_MspInit+0x1b4>)
 8004016:	2200      	movs	r2, #0
 8004018:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800401a:	4b33      	ldr	r3, [pc, #204]	; (80040e8 <HAL_UART_MspInit+0x1b4>)
 800401c:	2200      	movs	r2, #0
 800401e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004020:	4b31      	ldr	r3, [pc, #196]	; (80040e8 <HAL_UART_MspInit+0x1b4>)
 8004022:	2200      	movs	r2, #0
 8004024:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004026:	4b30      	ldr	r3, [pc, #192]	; (80040e8 <HAL_UART_MspInit+0x1b4>)
 8004028:	2200      	movs	r2, #0
 800402a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800402c:	482e      	ldr	r0, [pc, #184]	; (80040e8 <HAL_UART_MspInit+0x1b4>)
 800402e:	f000 f9af 	bl	8004390 <HAL_DMA_Init>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8004038:	f7ff fc4e 	bl	80038d8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a2a      	ldr	r2, [pc, #168]	; (80040e8 <HAL_UART_MspInit+0x1b4>)
 8004040:	639a      	str	r2, [r3, #56]	; 0x38
 8004042:	4a29      	ldr	r2, [pc, #164]	; (80040e8 <HAL_UART_MspInit+0x1b4>)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8004048:	2200      	movs	r2, #0
 800404a:	2105      	movs	r1, #5
 800404c:	2026      	movs	r0, #38	; 0x26
 800404e:	f000 f975 	bl	800433c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004052:	2026      	movs	r0, #38	; 0x26
 8004054:	f000 f98e 	bl	8004374 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004058:	e039      	b.n	80040ce <HAL_UART_MspInit+0x19a>
  else if(uartHandle->Instance==USART3)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a24      	ldr	r2, [pc, #144]	; (80040f0 <HAL_UART_MspInit+0x1bc>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d134      	bne.n	80040ce <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004064:	2300      	movs	r3, #0
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	4b1c      	ldr	r3, [pc, #112]	; (80040dc <HAL_UART_MspInit+0x1a8>)
 800406a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406c:	4a1b      	ldr	r2, [pc, #108]	; (80040dc <HAL_UART_MspInit+0x1a8>)
 800406e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004072:	6413      	str	r3, [r2, #64]	; 0x40
 8004074:	4b19      	ldr	r3, [pc, #100]	; (80040dc <HAL_UART_MspInit+0x1a8>)
 8004076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004078:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004080:	2300      	movs	r3, #0
 8004082:	60bb      	str	r3, [r7, #8]
 8004084:	4b15      	ldr	r3, [pc, #84]	; (80040dc <HAL_UART_MspInit+0x1a8>)
 8004086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004088:	4a14      	ldr	r2, [pc, #80]	; (80040dc <HAL_UART_MspInit+0x1a8>)
 800408a:	f043 0308 	orr.w	r3, r3, #8
 800408e:	6313      	str	r3, [r2, #48]	; 0x30
 8004090:	4b12      	ldr	r3, [pc, #72]	; (80040dc <HAL_UART_MspInit+0x1a8>)
 8004092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004094:	f003 0308 	and.w	r3, r3, #8
 8004098:	60bb      	str	r3, [r7, #8]
 800409a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800409c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80040a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a2:	2302      	movs	r3, #2
 80040a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a6:	2300      	movs	r3, #0
 80040a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040aa:	2303      	movs	r3, #3
 80040ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80040ae:	2307      	movs	r3, #7
 80040b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040b2:	f107 031c 	add.w	r3, r7, #28
 80040b6:	4619      	mov	r1, r3
 80040b8:	480a      	ldr	r0, [pc, #40]	; (80040e4 <HAL_UART_MspInit+0x1b0>)
 80040ba:	f000 fd6b 	bl	8004b94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80040be:	2200      	movs	r2, #0
 80040c0:	2105      	movs	r1, #5
 80040c2:	2027      	movs	r0, #39	; 0x27
 80040c4:	f000 f93a 	bl	800433c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80040c8:	2027      	movs	r0, #39	; 0x27
 80040ca:	f000 f953 	bl	8004374 <HAL_NVIC_EnableIRQ>
}
 80040ce:	bf00      	nop
 80040d0:	3730      	adds	r7, #48	; 0x30
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	40004400 	.word	0x40004400
 80040dc:	40023800 	.word	0x40023800
 80040e0:	40020000 	.word	0x40020000
 80040e4:	40020c00 	.word	0x40020c00
 80040e8:	200006d8 	.word	0x200006d8
 80040ec:	40026088 	.word	0x40026088
 80040f0:	40004800 	.word	0x40004800

080040f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80040f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800412c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80040f8:	480d      	ldr	r0, [pc, #52]	; (8004130 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80040fa:	490e      	ldr	r1, [pc, #56]	; (8004134 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80040fc:	4a0e      	ldr	r2, [pc, #56]	; (8004138 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80040fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004100:	e002      	b.n	8004108 <LoopCopyDataInit>

08004102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004106:	3304      	adds	r3, #4

08004108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800410a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800410c:	d3f9      	bcc.n	8004102 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800410e:	4a0b      	ldr	r2, [pc, #44]	; (800413c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004110:	4c0b      	ldr	r4, [pc, #44]	; (8004140 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004114:	e001      	b.n	800411a <LoopFillZerobss>

08004116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004118:	3204      	adds	r2, #4

0800411a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800411a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800411c:	d3fb      	bcc.n	8004116 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800411e:	f7ff fda5 	bl	8003c6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004122:	f006 fc1f 	bl	800a964 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004126:	f7ff fb3b 	bl	80037a0 <main>
  bx  lr    
 800412a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800412c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004130:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004134:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 8004138:	0800f748 	.word	0x0800f748
  ldr r2, =_sbss
 800413c:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8004140:	200044a0 	.word	0x200044a0

08004144 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004144:	e7fe      	b.n	8004144 <ADC_IRQHandler>
	...

08004148 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800414c:	4b0e      	ldr	r3, [pc, #56]	; (8004188 <HAL_Init+0x40>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a0d      	ldr	r2, [pc, #52]	; (8004188 <HAL_Init+0x40>)
 8004152:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004156:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004158:	4b0b      	ldr	r3, [pc, #44]	; (8004188 <HAL_Init+0x40>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a0a      	ldr	r2, [pc, #40]	; (8004188 <HAL_Init+0x40>)
 800415e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004162:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004164:	4b08      	ldr	r3, [pc, #32]	; (8004188 <HAL_Init+0x40>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a07      	ldr	r2, [pc, #28]	; (8004188 <HAL_Init+0x40>)
 800416a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800416e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004170:	2003      	movs	r0, #3
 8004172:	f000 f8d8 	bl	8004326 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004176:	200f      	movs	r0, #15
 8004178:	f7ff fc30 	bl	80039dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800417c:	f7ff fc02 	bl	8003984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	40023c00 	.word	0x40023c00

0800418c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004190:	4b06      	ldr	r3, [pc, #24]	; (80041ac <HAL_IncTick+0x20>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	461a      	mov	r2, r3
 8004196:	4b06      	ldr	r3, [pc, #24]	; (80041b0 <HAL_IncTick+0x24>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4413      	add	r3, r2
 800419c:	4a04      	ldr	r2, [pc, #16]	; (80041b0 <HAL_IncTick+0x24>)
 800419e:	6013      	str	r3, [r2, #0]
}
 80041a0:	bf00      	nop
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	20000058 	.word	0x20000058
 80041b0:	20000738 	.word	0x20000738

080041b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	af00      	add	r7, sp, #0
  return uwTick;
 80041b8:	4b03      	ldr	r3, [pc, #12]	; (80041c8 <HAL_GetTick+0x14>)
 80041ba:	681b      	ldr	r3, [r3, #0]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	20000738 	.word	0x20000738

080041cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f003 0307 	and.w	r3, r3, #7
 80041da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041dc:	4b0c      	ldr	r3, [pc, #48]	; (8004210 <__NVIC_SetPriorityGrouping+0x44>)
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041e8:	4013      	ands	r3, r2
 80041ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041fe:	4a04      	ldr	r2, [pc, #16]	; (8004210 <__NVIC_SetPriorityGrouping+0x44>)
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	60d3      	str	r3, [r2, #12]
}
 8004204:	bf00      	nop
 8004206:	3714      	adds	r7, #20
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	e000ed00 	.word	0xe000ed00

08004214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004218:	4b04      	ldr	r3, [pc, #16]	; (800422c <__NVIC_GetPriorityGrouping+0x18>)
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	0a1b      	lsrs	r3, r3, #8
 800421e:	f003 0307 	and.w	r3, r3, #7
}
 8004222:	4618      	mov	r0, r3
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	e000ed00 	.word	0xe000ed00

08004230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	4603      	mov	r3, r0
 8004238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800423a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423e:	2b00      	cmp	r3, #0
 8004240:	db0b      	blt.n	800425a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004242:	79fb      	ldrb	r3, [r7, #7]
 8004244:	f003 021f 	and.w	r2, r3, #31
 8004248:	4907      	ldr	r1, [pc, #28]	; (8004268 <__NVIC_EnableIRQ+0x38>)
 800424a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800424e:	095b      	lsrs	r3, r3, #5
 8004250:	2001      	movs	r0, #1
 8004252:	fa00 f202 	lsl.w	r2, r0, r2
 8004256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800425a:	bf00      	nop
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	e000e100 	.word	0xe000e100

0800426c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	4603      	mov	r3, r0
 8004274:	6039      	str	r1, [r7, #0]
 8004276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800427c:	2b00      	cmp	r3, #0
 800427e:	db0a      	blt.n	8004296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	b2da      	uxtb	r2, r3
 8004284:	490c      	ldr	r1, [pc, #48]	; (80042b8 <__NVIC_SetPriority+0x4c>)
 8004286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800428a:	0112      	lsls	r2, r2, #4
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	440b      	add	r3, r1
 8004290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004294:	e00a      	b.n	80042ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	b2da      	uxtb	r2, r3
 800429a:	4908      	ldr	r1, [pc, #32]	; (80042bc <__NVIC_SetPriority+0x50>)
 800429c:	79fb      	ldrb	r3, [r7, #7]
 800429e:	f003 030f 	and.w	r3, r3, #15
 80042a2:	3b04      	subs	r3, #4
 80042a4:	0112      	lsls	r2, r2, #4
 80042a6:	b2d2      	uxtb	r2, r2
 80042a8:	440b      	add	r3, r1
 80042aa:	761a      	strb	r2, [r3, #24]
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	e000e100 	.word	0xe000e100
 80042bc:	e000ed00 	.word	0xe000ed00

080042c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b089      	sub	sp, #36	; 0x24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f003 0307 	and.w	r3, r3, #7
 80042d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	f1c3 0307 	rsb	r3, r3, #7
 80042da:	2b04      	cmp	r3, #4
 80042dc:	bf28      	it	cs
 80042de:	2304      	movcs	r3, #4
 80042e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	3304      	adds	r3, #4
 80042e6:	2b06      	cmp	r3, #6
 80042e8:	d902      	bls.n	80042f0 <NVIC_EncodePriority+0x30>
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	3b03      	subs	r3, #3
 80042ee:	e000      	b.n	80042f2 <NVIC_EncodePriority+0x32>
 80042f0:	2300      	movs	r3, #0
 80042f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042f4:	f04f 32ff 	mov.w	r2, #4294967295
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	fa02 f303 	lsl.w	r3, r2, r3
 80042fe:	43da      	mvns	r2, r3
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	401a      	ands	r2, r3
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004308:	f04f 31ff 	mov.w	r1, #4294967295
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	fa01 f303 	lsl.w	r3, r1, r3
 8004312:	43d9      	mvns	r1, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004318:	4313      	orrs	r3, r2
         );
}
 800431a:	4618      	mov	r0, r3
 800431c:	3724      	adds	r7, #36	; 0x24
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b082      	sub	sp, #8
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7ff ff4c 	bl	80041cc <__NVIC_SetPriorityGrouping>
}
 8004334:	bf00      	nop
 8004336:	3708      	adds	r7, #8
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	4603      	mov	r3, r0
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
 8004348:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800434a:	2300      	movs	r3, #0
 800434c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800434e:	f7ff ff61 	bl	8004214 <__NVIC_GetPriorityGrouping>
 8004352:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	68b9      	ldr	r1, [r7, #8]
 8004358:	6978      	ldr	r0, [r7, #20]
 800435a:	f7ff ffb1 	bl	80042c0 <NVIC_EncodePriority>
 800435e:	4602      	mov	r2, r0
 8004360:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004364:	4611      	mov	r1, r2
 8004366:	4618      	mov	r0, r3
 8004368:	f7ff ff80 	bl	800426c <__NVIC_SetPriority>
}
 800436c:	bf00      	nop
 800436e:	3718      	adds	r7, #24
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	4603      	mov	r3, r0
 800437c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800437e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004382:	4618      	mov	r0, r3
 8004384:	f7ff ff54 	bl	8004230 <__NVIC_EnableIRQ>
}
 8004388:	bf00      	nop
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004398:	2300      	movs	r3, #0
 800439a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800439c:	f7ff ff0a 	bl	80041b4 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d101      	bne.n	80043ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e099      	b.n	80044e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0201 	bic.w	r2, r2, #1
 80043ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043cc:	e00f      	b.n	80043ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043ce:	f7ff fef1 	bl	80041b4 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b05      	cmp	r3, #5
 80043da:	d908      	bls.n	80043ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2220      	movs	r2, #32
 80043e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2203      	movs	r2, #3
 80043e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e078      	b.n	80044e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1e8      	bne.n	80043ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	4b38      	ldr	r3, [pc, #224]	; (80044e8 <HAL_DMA_Init+0x158>)
 8004408:	4013      	ands	r3, r2
 800440a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800441a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004426:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004432:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	4313      	orrs	r3, r2
 800443e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	2b04      	cmp	r3, #4
 8004446:	d107      	bne.n	8004458 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004450:	4313      	orrs	r3, r2
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	4313      	orrs	r3, r2
 8004456:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f023 0307 	bic.w	r3, r3, #7
 800446e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	4313      	orrs	r3, r2
 8004478:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447e:	2b04      	cmp	r3, #4
 8004480:	d117      	bne.n	80044b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	4313      	orrs	r3, r2
 800448a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00e      	beq.n	80044b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 fb01 	bl	8004a9c <DMA_CheckFifoParam>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d008      	beq.n	80044b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2240      	movs	r2, #64	; 0x40
 80044a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80044ae:	2301      	movs	r3, #1
 80044b0:	e016      	b.n	80044e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fab8 	bl	8004a30 <DMA_CalcBaseAndBitshift>
 80044c0:	4603      	mov	r3, r0
 80044c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c8:	223f      	movs	r2, #63	; 0x3f
 80044ca:	409a      	lsls	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3718      	adds	r7, #24
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	f010803f 	.word	0xf010803f

080044ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
 80044f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004502:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800450a:	2b01      	cmp	r3, #1
 800450c:	d101      	bne.n	8004512 <HAL_DMA_Start_IT+0x26>
 800450e:	2302      	movs	r3, #2
 8004510:	e040      	b.n	8004594 <HAL_DMA_Start_IT+0xa8>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b01      	cmp	r3, #1
 8004524:	d12f      	bne.n	8004586 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2202      	movs	r2, #2
 800452a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	68b9      	ldr	r1, [r7, #8]
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f000 fa4a 	bl	80049d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004544:	223f      	movs	r2, #63	; 0x3f
 8004546:	409a      	lsls	r2, r3
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f042 0216 	orr.w	r2, r2, #22
 800455a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004560:	2b00      	cmp	r3, #0
 8004562:	d007      	beq.n	8004574 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 0208 	orr.w	r2, r2, #8
 8004572:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0201 	orr.w	r2, r2, #1
 8004582:	601a      	str	r2, [r3, #0]
 8004584:	e005      	b.n	8004592 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800458e:	2302      	movs	r3, #2
 8004590:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004592:	7dfb      	ldrb	r3, [r7, #23]
}
 8004594:	4618      	mov	r0, r3
 8004596:	3718      	adds	r7, #24
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80045aa:	f7ff fe03 	bl	80041b4 <HAL_GetTick>
 80045ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d008      	beq.n	80045ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2280      	movs	r2, #128	; 0x80
 80045c0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e052      	b.n	8004674 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0216 	bic.w	r2, r2, #22
 80045dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	695a      	ldr	r2, [r3, #20]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d103      	bne.n	80045fe <HAL_DMA_Abort+0x62>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d007      	beq.n	800460e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0208 	bic.w	r2, r2, #8
 800460c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 0201 	bic.w	r2, r2, #1
 800461c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800461e:	e013      	b.n	8004648 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004620:	f7ff fdc8 	bl	80041b4 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b05      	cmp	r3, #5
 800462c:	d90c      	bls.n	8004648 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2220      	movs	r2, #32
 8004632:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2203      	movs	r2, #3
 8004638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e015      	b.n	8004674 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1e4      	bne.n	8004620 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800465a:	223f      	movs	r2, #63	; 0x3f
 800465c:	409a      	lsls	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d004      	beq.n	800469a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2280      	movs	r2, #128	; 0x80
 8004694:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e00c      	b.n	80046b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2205      	movs	r2, #5
 800469e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0201 	bic.w	r2, r2, #1
 80046b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80046cc:	4b8e      	ldr	r3, [pc, #568]	; (8004908 <HAL_DMA_IRQHandler+0x248>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a8e      	ldr	r2, [pc, #568]	; (800490c <HAL_DMA_IRQHandler+0x24c>)
 80046d2:	fba2 2303 	umull	r2, r3, r2, r3
 80046d6:	0a9b      	lsrs	r3, r3, #10
 80046d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ea:	2208      	movs	r2, #8
 80046ec:	409a      	lsls	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	4013      	ands	r3, r2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d01a      	beq.n	800472c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b00      	cmp	r3, #0
 8004702:	d013      	beq.n	800472c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 0204 	bic.w	r2, r2, #4
 8004712:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004718:	2208      	movs	r2, #8
 800471a:	409a      	lsls	r2, r3
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004724:	f043 0201 	orr.w	r2, r3, #1
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004730:	2201      	movs	r2, #1
 8004732:	409a      	lsls	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	4013      	ands	r3, r2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d012      	beq.n	8004762 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00b      	beq.n	8004762 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800474e:	2201      	movs	r2, #1
 8004750:	409a      	lsls	r2, r3
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475a:	f043 0202 	orr.w	r2, r3, #2
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004766:	2204      	movs	r2, #4
 8004768:	409a      	lsls	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	4013      	ands	r3, r2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d012      	beq.n	8004798 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00b      	beq.n	8004798 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004784:	2204      	movs	r2, #4
 8004786:	409a      	lsls	r2, r3
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004790:	f043 0204 	orr.w	r2, r3, #4
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800479c:	2210      	movs	r2, #16
 800479e:	409a      	lsls	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4013      	ands	r3, r2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d043      	beq.n	8004830 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0308 	and.w	r3, r3, #8
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d03c      	beq.n	8004830 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ba:	2210      	movs	r2, #16
 80047bc:	409a      	lsls	r2, r3
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d018      	beq.n	8004802 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d108      	bne.n	80047f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d024      	beq.n	8004830 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	4798      	blx	r3
 80047ee:	e01f      	b.n	8004830 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d01b      	beq.n	8004830 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	4798      	blx	r3
 8004800:	e016      	b.n	8004830 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480c:	2b00      	cmp	r3, #0
 800480e:	d107      	bne.n	8004820 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 0208 	bic.w	r2, r2, #8
 800481e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004824:	2b00      	cmp	r3, #0
 8004826:	d003      	beq.n	8004830 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004834:	2220      	movs	r2, #32
 8004836:	409a      	lsls	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4013      	ands	r3, r2
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 808f 	beq.w	8004960 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0310 	and.w	r3, r3, #16
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 8087 	beq.w	8004960 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004856:	2220      	movs	r2, #32
 8004858:	409a      	lsls	r2, r3
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b05      	cmp	r3, #5
 8004868:	d136      	bne.n	80048d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 0216 	bic.w	r2, r2, #22
 8004878:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	695a      	ldr	r2, [r3, #20]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004888:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	2b00      	cmp	r3, #0
 8004890:	d103      	bne.n	800489a <HAL_DMA_IRQHandler+0x1da>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004896:	2b00      	cmp	r3, #0
 8004898:	d007      	beq.n	80048aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 0208 	bic.w	r2, r2, #8
 80048a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ae:	223f      	movs	r2, #63	; 0x3f
 80048b0:	409a      	lsls	r2, r3
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d07e      	beq.n	80049cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	4798      	blx	r3
        }
        return;
 80048d6:	e079      	b.n	80049cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d01d      	beq.n	8004922 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10d      	bne.n	8004910 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d031      	beq.n	8004960 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	4798      	blx	r3
 8004904:	e02c      	b.n	8004960 <HAL_DMA_IRQHandler+0x2a0>
 8004906:	bf00      	nop
 8004908:	20000050 	.word	0x20000050
 800490c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004914:	2b00      	cmp	r3, #0
 8004916:	d023      	beq.n	8004960 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	4798      	blx	r3
 8004920:	e01e      	b.n	8004960 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10f      	bne.n	8004950 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f022 0210 	bic.w	r2, r2, #16
 800493e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004954:	2b00      	cmp	r3, #0
 8004956:	d003      	beq.n	8004960 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004964:	2b00      	cmp	r3, #0
 8004966:	d032      	beq.n	80049ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	2b00      	cmp	r3, #0
 8004972:	d022      	beq.n	80049ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2205      	movs	r2, #5
 8004978:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f022 0201 	bic.w	r2, r2, #1
 800498a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	3301      	adds	r3, #1
 8004990:	60bb      	str	r3, [r7, #8]
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	429a      	cmp	r2, r3
 8004996:	d307      	bcc.n	80049a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1f2      	bne.n	800498c <HAL_DMA_IRQHandler+0x2cc>
 80049a6:	e000      	b.n	80049aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80049a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d005      	beq.n	80049ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	4798      	blx	r3
 80049ca:	e000      	b.n	80049ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80049cc:	bf00      	nop
    }
  }
}
 80049ce:	3718      	adds	r7, #24
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
 80049e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80049f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	2b40      	cmp	r3, #64	; 0x40
 8004a00:	d108      	bne.n	8004a14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004a12:	e007      	b.n	8004a24 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	60da      	str	r2, [r3, #12]
}
 8004a24:	bf00      	nop
 8004a26:	3714      	adds	r7, #20
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	3b10      	subs	r3, #16
 8004a40:	4a14      	ldr	r2, [pc, #80]	; (8004a94 <DMA_CalcBaseAndBitshift+0x64>)
 8004a42:	fba2 2303 	umull	r2, r3, r2, r3
 8004a46:	091b      	lsrs	r3, r3, #4
 8004a48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004a4a:	4a13      	ldr	r2, [pc, #76]	; (8004a98 <DMA_CalcBaseAndBitshift+0x68>)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4413      	add	r3, r2
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	461a      	mov	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2b03      	cmp	r3, #3
 8004a5c:	d909      	bls.n	8004a72 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a66:	f023 0303 	bic.w	r3, r3, #3
 8004a6a:	1d1a      	adds	r2, r3, #4
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	659a      	str	r2, [r3, #88]	; 0x58
 8004a70:	e007      	b.n	8004a82 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a7a:	f023 0303 	bic.w	r3, r3, #3
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	aaaaaaab 	.word	0xaaaaaaab
 8004a98:	0800f108 	.word	0x0800f108

08004a9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d11f      	bne.n	8004af6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2b03      	cmp	r3, #3
 8004aba:	d856      	bhi.n	8004b6a <DMA_CheckFifoParam+0xce>
 8004abc:	a201      	add	r2, pc, #4	; (adr r2, 8004ac4 <DMA_CheckFifoParam+0x28>)
 8004abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac2:	bf00      	nop
 8004ac4:	08004ad5 	.word	0x08004ad5
 8004ac8:	08004ae7 	.word	0x08004ae7
 8004acc:	08004ad5 	.word	0x08004ad5
 8004ad0:	08004b6b 	.word	0x08004b6b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d046      	beq.n	8004b6e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ae4:	e043      	b.n	8004b6e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004aee:	d140      	bne.n	8004b72 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004af4:	e03d      	b.n	8004b72 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004afe:	d121      	bne.n	8004b44 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	2b03      	cmp	r3, #3
 8004b04:	d837      	bhi.n	8004b76 <DMA_CheckFifoParam+0xda>
 8004b06:	a201      	add	r2, pc, #4	; (adr r2, 8004b0c <DMA_CheckFifoParam+0x70>)
 8004b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0c:	08004b1d 	.word	0x08004b1d
 8004b10:	08004b23 	.word	0x08004b23
 8004b14:	08004b1d 	.word	0x08004b1d
 8004b18:	08004b35 	.word	0x08004b35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b20:	e030      	b.n	8004b84 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d025      	beq.n	8004b7a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b32:	e022      	b.n	8004b7a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b3c:	d11f      	bne.n	8004b7e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004b42:	e01c      	b.n	8004b7e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d903      	bls.n	8004b52 <DMA_CheckFifoParam+0xb6>
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	2b03      	cmp	r3, #3
 8004b4e:	d003      	beq.n	8004b58 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004b50:	e018      	b.n	8004b84 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	73fb      	strb	r3, [r7, #15]
      break;
 8004b56:	e015      	b.n	8004b84 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00e      	beq.n	8004b82 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	73fb      	strb	r3, [r7, #15]
      break;
 8004b68:	e00b      	b.n	8004b82 <DMA_CheckFifoParam+0xe6>
      break;
 8004b6a:	bf00      	nop
 8004b6c:	e00a      	b.n	8004b84 <DMA_CheckFifoParam+0xe8>
      break;
 8004b6e:	bf00      	nop
 8004b70:	e008      	b.n	8004b84 <DMA_CheckFifoParam+0xe8>
      break;
 8004b72:	bf00      	nop
 8004b74:	e006      	b.n	8004b84 <DMA_CheckFifoParam+0xe8>
      break;
 8004b76:	bf00      	nop
 8004b78:	e004      	b.n	8004b84 <DMA_CheckFifoParam+0xe8>
      break;
 8004b7a:	bf00      	nop
 8004b7c:	e002      	b.n	8004b84 <DMA_CheckFifoParam+0xe8>
      break;   
 8004b7e:	bf00      	nop
 8004b80:	e000      	b.n	8004b84 <DMA_CheckFifoParam+0xe8>
      break;
 8004b82:	bf00      	nop
    }
  } 
  
  return status; 
 8004b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop

08004b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b089      	sub	sp, #36	; 0x24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004baa:	2300      	movs	r3, #0
 8004bac:	61fb      	str	r3, [r7, #28]
 8004bae:	e177      	b.n	8004ea0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	f040 8166 	bne.w	8004e9a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f003 0303 	and.w	r3, r3, #3
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d005      	beq.n	8004be6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d130      	bne.n	8004c48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	005b      	lsls	r3, r3, #1
 8004bf0:	2203      	movs	r2, #3
 8004bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf6:	43db      	mvns	r3, r3
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	68da      	ldr	r2, [r3, #12]
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	005b      	lsls	r3, r3, #1
 8004c06:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0a:	69ba      	ldr	r2, [r7, #24]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	43db      	mvns	r3, r3
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	4013      	ands	r3, r2
 8004c2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	091b      	lsrs	r3, r3, #4
 8004c32:	f003 0201 	and.w	r2, r3, #1
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f003 0303 	and.w	r3, r3, #3
 8004c50:	2b03      	cmp	r3, #3
 8004c52:	d017      	beq.n	8004c84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	2203      	movs	r2, #3
 8004c60:	fa02 f303 	lsl.w	r3, r2, r3
 8004c64:	43db      	mvns	r3, r3
 8004c66:	69ba      	ldr	r2, [r7, #24]
 8004c68:	4013      	ands	r3, r2
 8004c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	689a      	ldr	r2, [r3, #8]
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	fa02 f303 	lsl.w	r3, r2, r3
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f003 0303 	and.w	r3, r3, #3
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d123      	bne.n	8004cd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	08da      	lsrs	r2, r3, #3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	3208      	adds	r2, #8
 8004c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	220f      	movs	r2, #15
 8004ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cac:	43db      	mvns	r3, r3
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	691a      	ldr	r2, [r3, #16]
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	08da      	lsrs	r2, r3, #3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	3208      	adds	r2, #8
 8004cd2:	69b9      	ldr	r1, [r7, #24]
 8004cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	005b      	lsls	r3, r3, #1
 8004ce2:	2203      	movs	r2, #3
 8004ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce8:	43db      	mvns	r3, r3
 8004cea:	69ba      	ldr	r2, [r7, #24]
 8004cec:	4013      	ands	r3, r2
 8004cee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f003 0203 	and.w	r2, r3, #3
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f000 80c0 	beq.w	8004e9a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	60fb      	str	r3, [r7, #12]
 8004d1e:	4b66      	ldr	r3, [pc, #408]	; (8004eb8 <HAL_GPIO_Init+0x324>)
 8004d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d22:	4a65      	ldr	r2, [pc, #404]	; (8004eb8 <HAL_GPIO_Init+0x324>)
 8004d24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d28:	6453      	str	r3, [r2, #68]	; 0x44
 8004d2a:	4b63      	ldr	r3, [pc, #396]	; (8004eb8 <HAL_GPIO_Init+0x324>)
 8004d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d32:	60fb      	str	r3, [r7, #12]
 8004d34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d36:	4a61      	ldr	r2, [pc, #388]	; (8004ebc <HAL_GPIO_Init+0x328>)
 8004d38:	69fb      	ldr	r3, [r7, #28]
 8004d3a:	089b      	lsrs	r3, r3, #2
 8004d3c:	3302      	adds	r3, #2
 8004d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	f003 0303 	and.w	r3, r3, #3
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	220f      	movs	r2, #15
 8004d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d52:	43db      	mvns	r3, r3
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	4013      	ands	r3, r2
 8004d58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a58      	ldr	r2, [pc, #352]	; (8004ec0 <HAL_GPIO_Init+0x32c>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d037      	beq.n	8004dd2 <HAL_GPIO_Init+0x23e>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a57      	ldr	r2, [pc, #348]	; (8004ec4 <HAL_GPIO_Init+0x330>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d031      	beq.n	8004dce <HAL_GPIO_Init+0x23a>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a56      	ldr	r2, [pc, #344]	; (8004ec8 <HAL_GPIO_Init+0x334>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d02b      	beq.n	8004dca <HAL_GPIO_Init+0x236>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a55      	ldr	r2, [pc, #340]	; (8004ecc <HAL_GPIO_Init+0x338>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d025      	beq.n	8004dc6 <HAL_GPIO_Init+0x232>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a54      	ldr	r2, [pc, #336]	; (8004ed0 <HAL_GPIO_Init+0x33c>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d01f      	beq.n	8004dc2 <HAL_GPIO_Init+0x22e>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a53      	ldr	r2, [pc, #332]	; (8004ed4 <HAL_GPIO_Init+0x340>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d019      	beq.n	8004dbe <HAL_GPIO_Init+0x22a>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a52      	ldr	r2, [pc, #328]	; (8004ed8 <HAL_GPIO_Init+0x344>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d013      	beq.n	8004dba <HAL_GPIO_Init+0x226>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a51      	ldr	r2, [pc, #324]	; (8004edc <HAL_GPIO_Init+0x348>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d00d      	beq.n	8004db6 <HAL_GPIO_Init+0x222>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a50      	ldr	r2, [pc, #320]	; (8004ee0 <HAL_GPIO_Init+0x34c>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d007      	beq.n	8004db2 <HAL_GPIO_Init+0x21e>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a4f      	ldr	r2, [pc, #316]	; (8004ee4 <HAL_GPIO_Init+0x350>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d101      	bne.n	8004dae <HAL_GPIO_Init+0x21a>
 8004daa:	2309      	movs	r3, #9
 8004dac:	e012      	b.n	8004dd4 <HAL_GPIO_Init+0x240>
 8004dae:	230a      	movs	r3, #10
 8004db0:	e010      	b.n	8004dd4 <HAL_GPIO_Init+0x240>
 8004db2:	2308      	movs	r3, #8
 8004db4:	e00e      	b.n	8004dd4 <HAL_GPIO_Init+0x240>
 8004db6:	2307      	movs	r3, #7
 8004db8:	e00c      	b.n	8004dd4 <HAL_GPIO_Init+0x240>
 8004dba:	2306      	movs	r3, #6
 8004dbc:	e00a      	b.n	8004dd4 <HAL_GPIO_Init+0x240>
 8004dbe:	2305      	movs	r3, #5
 8004dc0:	e008      	b.n	8004dd4 <HAL_GPIO_Init+0x240>
 8004dc2:	2304      	movs	r3, #4
 8004dc4:	e006      	b.n	8004dd4 <HAL_GPIO_Init+0x240>
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e004      	b.n	8004dd4 <HAL_GPIO_Init+0x240>
 8004dca:	2302      	movs	r3, #2
 8004dcc:	e002      	b.n	8004dd4 <HAL_GPIO_Init+0x240>
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e000      	b.n	8004dd4 <HAL_GPIO_Init+0x240>
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	69fa      	ldr	r2, [r7, #28]
 8004dd6:	f002 0203 	and.w	r2, r2, #3
 8004dda:	0092      	lsls	r2, r2, #2
 8004ddc:	4093      	lsls	r3, r2
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004de4:	4935      	ldr	r1, [pc, #212]	; (8004ebc <HAL_GPIO_Init+0x328>)
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	089b      	lsrs	r3, r3, #2
 8004dea:	3302      	adds	r3, #2
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004df2:	4b3d      	ldr	r3, [pc, #244]	; (8004ee8 <HAL_GPIO_Init+0x354>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	43db      	mvns	r3, r3
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	4013      	ands	r3, r2
 8004e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d003      	beq.n	8004e16 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e16:	4a34      	ldr	r2, [pc, #208]	; (8004ee8 <HAL_GPIO_Init+0x354>)
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e1c:	4b32      	ldr	r3, [pc, #200]	; (8004ee8 <HAL_GPIO_Init+0x354>)
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	43db      	mvns	r3, r3
 8004e26:	69ba      	ldr	r2, [r7, #24]
 8004e28:	4013      	ands	r3, r2
 8004e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d003      	beq.n	8004e40 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e40:	4a29      	ldr	r2, [pc, #164]	; (8004ee8 <HAL_GPIO_Init+0x354>)
 8004e42:	69bb      	ldr	r3, [r7, #24]
 8004e44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004e46:	4b28      	ldr	r3, [pc, #160]	; (8004ee8 <HAL_GPIO_Init+0x354>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	43db      	mvns	r3, r3
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	4013      	ands	r3, r2
 8004e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e6a:	4a1f      	ldr	r2, [pc, #124]	; (8004ee8 <HAL_GPIO_Init+0x354>)
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e70:	4b1d      	ldr	r3, [pc, #116]	; (8004ee8 <HAL_GPIO_Init+0x354>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	43db      	mvns	r3, r3
 8004e7a:	69ba      	ldr	r2, [r7, #24]
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d003      	beq.n	8004e94 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e94:	4a14      	ldr	r2, [pc, #80]	; (8004ee8 <HAL_GPIO_Init+0x354>)
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	61fb      	str	r3, [r7, #28]
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	2b0f      	cmp	r3, #15
 8004ea4:	f67f ae84 	bls.w	8004bb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ea8:	bf00      	nop
 8004eaa:	bf00      	nop
 8004eac:	3724      	adds	r7, #36	; 0x24
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	40023800 	.word	0x40023800
 8004ebc:	40013800 	.word	0x40013800
 8004ec0:	40020000 	.word	0x40020000
 8004ec4:	40020400 	.word	0x40020400
 8004ec8:	40020800 	.word	0x40020800
 8004ecc:	40020c00 	.word	0x40020c00
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	40021400 	.word	0x40021400
 8004ed8:	40021800 	.word	0x40021800
 8004edc:	40021c00 	.word	0x40021c00
 8004ee0:	40022000 	.word	0x40022000
 8004ee4:	40022400 	.word	0x40022400
 8004ee8:	40013c00 	.word	0x40013c00

08004eec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	807b      	strh	r3, [r7, #2]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004efc:	787b      	ldrb	r3, [r7, #1]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d003      	beq.n	8004f0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f02:	887a      	ldrh	r2, [r7, #2]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f08:	e003      	b.n	8004f12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f0a:	887b      	ldrh	r3, [r7, #2]
 8004f0c:	041a      	lsls	r2, r3, #16
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	619a      	str	r2, [r3, #24]
}
 8004f12:	bf00      	nop
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
	...

08004f20 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004f26:	2300      	movs	r3, #0
 8004f28:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	603b      	str	r3, [r7, #0]
 8004f2e:	4b20      	ldr	r3, [pc, #128]	; (8004fb0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f32:	4a1f      	ldr	r2, [pc, #124]	; (8004fb0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f38:	6413      	str	r3, [r2, #64]	; 0x40
 8004f3a:	4b1d      	ldr	r3, [pc, #116]	; (8004fb0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f42:	603b      	str	r3, [r7, #0]
 8004f44:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004f46:	4b1b      	ldr	r3, [pc, #108]	; (8004fb4 <HAL_PWREx_EnableOverDrive+0x94>)
 8004f48:	2201      	movs	r2, #1
 8004f4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f4c:	f7ff f932 	bl	80041b4 <HAL_GetTick>
 8004f50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004f52:	e009      	b.n	8004f68 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004f54:	f7ff f92e 	bl	80041b4 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f62:	d901      	bls.n	8004f68 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e01f      	b.n	8004fa8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004f68:	4b13      	ldr	r3, [pc, #76]	; (8004fb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f74:	d1ee      	bne.n	8004f54 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004f76:	4b11      	ldr	r3, [pc, #68]	; (8004fbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004f78:	2201      	movs	r2, #1
 8004f7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f7c:	f7ff f91a 	bl	80041b4 <HAL_GetTick>
 8004f80:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004f82:	e009      	b.n	8004f98 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004f84:	f7ff f916 	bl	80041b4 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f92:	d901      	bls.n	8004f98 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e007      	b.n	8004fa8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004f98:	4b07      	ldr	r3, [pc, #28]	; (8004fb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fa4:	d1ee      	bne.n	8004f84 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	40023800 	.word	0x40023800
 8004fb4:	420e0040 	.word	0x420e0040
 8004fb8:	40007000 	.word	0x40007000
 8004fbc:	420e0044 	.word	0x420e0044

08004fc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e267      	b.n	80054a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d075      	beq.n	80050ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fde:	4b88      	ldr	r3, [pc, #544]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 030c 	and.w	r3, r3, #12
 8004fe6:	2b04      	cmp	r3, #4
 8004fe8:	d00c      	beq.n	8005004 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fea:	4b85      	ldr	r3, [pc, #532]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ff2:	2b08      	cmp	r3, #8
 8004ff4:	d112      	bne.n	800501c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ff6:	4b82      	ldr	r3, [pc, #520]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ffe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005002:	d10b      	bne.n	800501c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005004:	4b7e      	ldr	r3, [pc, #504]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d05b      	beq.n	80050c8 <HAL_RCC_OscConfig+0x108>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d157      	bne.n	80050c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e242      	b.n	80054a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005024:	d106      	bne.n	8005034 <HAL_RCC_OscConfig+0x74>
 8005026:	4b76      	ldr	r3, [pc, #472]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a75      	ldr	r2, [pc, #468]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 800502c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005030:	6013      	str	r3, [r2, #0]
 8005032:	e01d      	b.n	8005070 <HAL_RCC_OscConfig+0xb0>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800503c:	d10c      	bne.n	8005058 <HAL_RCC_OscConfig+0x98>
 800503e:	4b70      	ldr	r3, [pc, #448]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a6f      	ldr	r2, [pc, #444]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 8005044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005048:	6013      	str	r3, [r2, #0]
 800504a:	4b6d      	ldr	r3, [pc, #436]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a6c      	ldr	r2, [pc, #432]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 8005050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005054:	6013      	str	r3, [r2, #0]
 8005056:	e00b      	b.n	8005070 <HAL_RCC_OscConfig+0xb0>
 8005058:	4b69      	ldr	r3, [pc, #420]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a68      	ldr	r2, [pc, #416]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 800505e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005062:	6013      	str	r3, [r2, #0]
 8005064:	4b66      	ldr	r3, [pc, #408]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a65      	ldr	r2, [pc, #404]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 800506a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800506e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d013      	beq.n	80050a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005078:	f7ff f89c 	bl	80041b4 <HAL_GetTick>
 800507c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800507e:	e008      	b.n	8005092 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005080:	f7ff f898 	bl	80041b4 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b64      	cmp	r3, #100	; 0x64
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e207      	b.n	80054a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005092:	4b5b      	ldr	r3, [pc, #364]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d0f0      	beq.n	8005080 <HAL_RCC_OscConfig+0xc0>
 800509e:	e014      	b.n	80050ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a0:	f7ff f888 	bl	80041b4 <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050a8:	f7ff f884 	bl	80041b4 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b64      	cmp	r3, #100	; 0x64
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e1f3      	b.n	80054a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050ba:	4b51      	ldr	r3, [pc, #324]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1f0      	bne.n	80050a8 <HAL_RCC_OscConfig+0xe8>
 80050c6:	e000      	b.n	80050ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d063      	beq.n	800519e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050d6:	4b4a      	ldr	r3, [pc, #296]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f003 030c 	and.w	r3, r3, #12
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00b      	beq.n	80050fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050e2:	4b47      	ldr	r3, [pc, #284]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050ea:	2b08      	cmp	r3, #8
 80050ec:	d11c      	bne.n	8005128 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050ee:	4b44      	ldr	r3, [pc, #272]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d116      	bne.n	8005128 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050fa:	4b41      	ldr	r3, [pc, #260]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d005      	beq.n	8005112 <HAL_RCC_OscConfig+0x152>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d001      	beq.n	8005112 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e1c7      	b.n	80054a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005112:	4b3b      	ldr	r3, [pc, #236]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	00db      	lsls	r3, r3, #3
 8005120:	4937      	ldr	r1, [pc, #220]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 8005122:	4313      	orrs	r3, r2
 8005124:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005126:	e03a      	b.n	800519e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d020      	beq.n	8005172 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005130:	4b34      	ldr	r3, [pc, #208]	; (8005204 <HAL_RCC_OscConfig+0x244>)
 8005132:	2201      	movs	r2, #1
 8005134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005136:	f7ff f83d 	bl	80041b4 <HAL_GetTick>
 800513a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800513c:	e008      	b.n	8005150 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800513e:	f7ff f839 	bl	80041b4 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	2b02      	cmp	r3, #2
 800514a:	d901      	bls.n	8005150 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e1a8      	b.n	80054a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005150:	4b2b      	ldr	r3, [pc, #172]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0302 	and.w	r3, r3, #2
 8005158:	2b00      	cmp	r3, #0
 800515a:	d0f0      	beq.n	800513e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800515c:	4b28      	ldr	r3, [pc, #160]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	00db      	lsls	r3, r3, #3
 800516a:	4925      	ldr	r1, [pc, #148]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 800516c:	4313      	orrs	r3, r2
 800516e:	600b      	str	r3, [r1, #0]
 8005170:	e015      	b.n	800519e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005172:	4b24      	ldr	r3, [pc, #144]	; (8005204 <HAL_RCC_OscConfig+0x244>)
 8005174:	2200      	movs	r2, #0
 8005176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005178:	f7ff f81c 	bl	80041b4 <HAL_GetTick>
 800517c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800517e:	e008      	b.n	8005192 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005180:	f7ff f818 	bl	80041b4 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	2b02      	cmp	r3, #2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e187      	b.n	80054a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005192:	4b1b      	ldr	r3, [pc, #108]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d1f0      	bne.n	8005180 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0308 	and.w	r3, r3, #8
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d036      	beq.n	8005218 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d016      	beq.n	80051e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051b2:	4b15      	ldr	r3, [pc, #84]	; (8005208 <HAL_RCC_OscConfig+0x248>)
 80051b4:	2201      	movs	r2, #1
 80051b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051b8:	f7fe fffc 	bl	80041b4 <HAL_GetTick>
 80051bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051be:	e008      	b.n	80051d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051c0:	f7fe fff8 	bl	80041b4 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e167      	b.n	80054a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051d2:	4b0b      	ldr	r3, [pc, #44]	; (8005200 <HAL_RCC_OscConfig+0x240>)
 80051d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d0f0      	beq.n	80051c0 <HAL_RCC_OscConfig+0x200>
 80051de:	e01b      	b.n	8005218 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051e0:	4b09      	ldr	r3, [pc, #36]	; (8005208 <HAL_RCC_OscConfig+0x248>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051e6:	f7fe ffe5 	bl	80041b4 <HAL_GetTick>
 80051ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051ec:	e00e      	b.n	800520c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051ee:	f7fe ffe1 	bl	80041b4 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d907      	bls.n	800520c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80051fc:	2303      	movs	r3, #3
 80051fe:	e150      	b.n	80054a2 <HAL_RCC_OscConfig+0x4e2>
 8005200:	40023800 	.word	0x40023800
 8005204:	42470000 	.word	0x42470000
 8005208:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800520c:	4b88      	ldr	r3, [pc, #544]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 800520e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1ea      	bne.n	80051ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0304 	and.w	r3, r3, #4
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 8097 	beq.w	8005354 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005226:	2300      	movs	r3, #0
 8005228:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800522a:	4b81      	ldr	r3, [pc, #516]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10f      	bne.n	8005256 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005236:	2300      	movs	r3, #0
 8005238:	60bb      	str	r3, [r7, #8]
 800523a:	4b7d      	ldr	r3, [pc, #500]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	4a7c      	ldr	r2, [pc, #496]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 8005240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005244:	6413      	str	r3, [r2, #64]	; 0x40
 8005246:	4b7a      	ldr	r3, [pc, #488]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800524e:	60bb      	str	r3, [r7, #8]
 8005250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005252:	2301      	movs	r3, #1
 8005254:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005256:	4b77      	ldr	r3, [pc, #476]	; (8005434 <HAL_RCC_OscConfig+0x474>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525e:	2b00      	cmp	r3, #0
 8005260:	d118      	bne.n	8005294 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005262:	4b74      	ldr	r3, [pc, #464]	; (8005434 <HAL_RCC_OscConfig+0x474>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a73      	ldr	r2, [pc, #460]	; (8005434 <HAL_RCC_OscConfig+0x474>)
 8005268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800526c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800526e:	f7fe ffa1 	bl	80041b4 <HAL_GetTick>
 8005272:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005274:	e008      	b.n	8005288 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005276:	f7fe ff9d 	bl	80041b4 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	2b02      	cmp	r3, #2
 8005282:	d901      	bls.n	8005288 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e10c      	b.n	80054a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005288:	4b6a      	ldr	r3, [pc, #424]	; (8005434 <HAL_RCC_OscConfig+0x474>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005290:	2b00      	cmp	r3, #0
 8005292:	d0f0      	beq.n	8005276 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d106      	bne.n	80052aa <HAL_RCC_OscConfig+0x2ea>
 800529c:	4b64      	ldr	r3, [pc, #400]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 800529e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a0:	4a63      	ldr	r2, [pc, #396]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 80052a2:	f043 0301 	orr.w	r3, r3, #1
 80052a6:	6713      	str	r3, [r2, #112]	; 0x70
 80052a8:	e01c      	b.n	80052e4 <HAL_RCC_OscConfig+0x324>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	2b05      	cmp	r3, #5
 80052b0:	d10c      	bne.n	80052cc <HAL_RCC_OscConfig+0x30c>
 80052b2:	4b5f      	ldr	r3, [pc, #380]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 80052b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b6:	4a5e      	ldr	r2, [pc, #376]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 80052b8:	f043 0304 	orr.w	r3, r3, #4
 80052bc:	6713      	str	r3, [r2, #112]	; 0x70
 80052be:	4b5c      	ldr	r3, [pc, #368]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 80052c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c2:	4a5b      	ldr	r2, [pc, #364]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 80052c4:	f043 0301 	orr.w	r3, r3, #1
 80052c8:	6713      	str	r3, [r2, #112]	; 0x70
 80052ca:	e00b      	b.n	80052e4 <HAL_RCC_OscConfig+0x324>
 80052cc:	4b58      	ldr	r3, [pc, #352]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 80052ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d0:	4a57      	ldr	r2, [pc, #348]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 80052d2:	f023 0301 	bic.w	r3, r3, #1
 80052d6:	6713      	str	r3, [r2, #112]	; 0x70
 80052d8:	4b55      	ldr	r3, [pc, #340]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 80052da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052dc:	4a54      	ldr	r2, [pc, #336]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 80052de:	f023 0304 	bic.w	r3, r3, #4
 80052e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d015      	beq.n	8005318 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ec:	f7fe ff62 	bl	80041b4 <HAL_GetTick>
 80052f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052f2:	e00a      	b.n	800530a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052f4:	f7fe ff5e 	bl	80041b4 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005302:	4293      	cmp	r3, r2
 8005304:	d901      	bls.n	800530a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e0cb      	b.n	80054a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800530a:	4b49      	ldr	r3, [pc, #292]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 800530c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d0ee      	beq.n	80052f4 <HAL_RCC_OscConfig+0x334>
 8005316:	e014      	b.n	8005342 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005318:	f7fe ff4c 	bl	80041b4 <HAL_GetTick>
 800531c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800531e:	e00a      	b.n	8005336 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005320:	f7fe ff48 	bl	80041b4 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	f241 3288 	movw	r2, #5000	; 0x1388
 800532e:	4293      	cmp	r3, r2
 8005330:	d901      	bls.n	8005336 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e0b5      	b.n	80054a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005336:	4b3e      	ldr	r3, [pc, #248]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 8005338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1ee      	bne.n	8005320 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005342:	7dfb      	ldrb	r3, [r7, #23]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d105      	bne.n	8005354 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005348:	4b39      	ldr	r3, [pc, #228]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 800534a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534c:	4a38      	ldr	r2, [pc, #224]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 800534e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005352:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	2b00      	cmp	r3, #0
 800535a:	f000 80a1 	beq.w	80054a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800535e:	4b34      	ldr	r3, [pc, #208]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f003 030c 	and.w	r3, r3, #12
 8005366:	2b08      	cmp	r3, #8
 8005368:	d05c      	beq.n	8005424 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	2b02      	cmp	r3, #2
 8005370:	d141      	bne.n	80053f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005372:	4b31      	ldr	r3, [pc, #196]	; (8005438 <HAL_RCC_OscConfig+0x478>)
 8005374:	2200      	movs	r2, #0
 8005376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005378:	f7fe ff1c 	bl	80041b4 <HAL_GetTick>
 800537c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800537e:	e008      	b.n	8005392 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005380:	f7fe ff18 	bl	80041b4 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b02      	cmp	r3, #2
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e087      	b.n	80054a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005392:	4b27      	ldr	r3, [pc, #156]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1f0      	bne.n	8005380 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	69da      	ldr	r2, [r3, #28]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	431a      	orrs	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ac:	019b      	lsls	r3, r3, #6
 80053ae:	431a      	orrs	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b4:	085b      	lsrs	r3, r3, #1
 80053b6:	3b01      	subs	r3, #1
 80053b8:	041b      	lsls	r3, r3, #16
 80053ba:	431a      	orrs	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c0:	061b      	lsls	r3, r3, #24
 80053c2:	491b      	ldr	r1, [pc, #108]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053c8:	4b1b      	ldr	r3, [pc, #108]	; (8005438 <HAL_RCC_OscConfig+0x478>)
 80053ca:	2201      	movs	r2, #1
 80053cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ce:	f7fe fef1 	bl	80041b4 <HAL_GetTick>
 80053d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053d4:	e008      	b.n	80053e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053d6:	f7fe feed 	bl	80041b4 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d901      	bls.n	80053e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e05c      	b.n	80054a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053e8:	4b11      	ldr	r3, [pc, #68]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d0f0      	beq.n	80053d6 <HAL_RCC_OscConfig+0x416>
 80053f4:	e054      	b.n	80054a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053f6:	4b10      	ldr	r3, [pc, #64]	; (8005438 <HAL_RCC_OscConfig+0x478>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053fc:	f7fe feda 	bl	80041b4 <HAL_GetTick>
 8005400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005402:	e008      	b.n	8005416 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005404:	f7fe fed6 	bl	80041b4 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b02      	cmp	r3, #2
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e045      	b.n	80054a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005416:	4b06      	ldr	r3, [pc, #24]	; (8005430 <HAL_RCC_OscConfig+0x470>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1f0      	bne.n	8005404 <HAL_RCC_OscConfig+0x444>
 8005422:	e03d      	b.n	80054a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d107      	bne.n	800543c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e038      	b.n	80054a2 <HAL_RCC_OscConfig+0x4e2>
 8005430:	40023800 	.word	0x40023800
 8005434:	40007000 	.word	0x40007000
 8005438:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800543c:	4b1b      	ldr	r3, [pc, #108]	; (80054ac <HAL_RCC_OscConfig+0x4ec>)
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d028      	beq.n	800549c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005454:	429a      	cmp	r2, r3
 8005456:	d121      	bne.n	800549c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005462:	429a      	cmp	r2, r3
 8005464:	d11a      	bne.n	800549c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800546c:	4013      	ands	r3, r2
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005472:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005474:	4293      	cmp	r3, r2
 8005476:	d111      	bne.n	800549c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005482:	085b      	lsrs	r3, r3, #1
 8005484:	3b01      	subs	r3, #1
 8005486:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005488:	429a      	cmp	r2, r3
 800548a:	d107      	bne.n	800549c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005496:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005498:	429a      	cmp	r2, r3
 800549a:	d001      	beq.n	80054a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e000      	b.n	80054a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3718      	adds	r7, #24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	40023800 	.word	0x40023800

080054b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e0cc      	b.n	800565e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054c4:	4b68      	ldr	r3, [pc, #416]	; (8005668 <HAL_RCC_ClockConfig+0x1b8>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 030f 	and.w	r3, r3, #15
 80054cc:	683a      	ldr	r2, [r7, #0]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d90c      	bls.n	80054ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054d2:	4b65      	ldr	r3, [pc, #404]	; (8005668 <HAL_RCC_ClockConfig+0x1b8>)
 80054d4:	683a      	ldr	r2, [r7, #0]
 80054d6:	b2d2      	uxtb	r2, r2
 80054d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054da:	4b63      	ldr	r3, [pc, #396]	; (8005668 <HAL_RCC_ClockConfig+0x1b8>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 030f 	and.w	r3, r3, #15
 80054e2:	683a      	ldr	r2, [r7, #0]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d001      	beq.n	80054ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e0b8      	b.n	800565e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0302 	and.w	r3, r3, #2
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d020      	beq.n	800553a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0304 	and.w	r3, r3, #4
 8005500:	2b00      	cmp	r3, #0
 8005502:	d005      	beq.n	8005510 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005504:	4b59      	ldr	r3, [pc, #356]	; (800566c <HAL_RCC_ClockConfig+0x1bc>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	4a58      	ldr	r2, [pc, #352]	; (800566c <HAL_RCC_ClockConfig+0x1bc>)
 800550a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800550e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0308 	and.w	r3, r3, #8
 8005518:	2b00      	cmp	r3, #0
 800551a:	d005      	beq.n	8005528 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800551c:	4b53      	ldr	r3, [pc, #332]	; (800566c <HAL_RCC_ClockConfig+0x1bc>)
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	4a52      	ldr	r2, [pc, #328]	; (800566c <HAL_RCC_ClockConfig+0x1bc>)
 8005522:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005526:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005528:	4b50      	ldr	r3, [pc, #320]	; (800566c <HAL_RCC_ClockConfig+0x1bc>)
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	494d      	ldr	r1, [pc, #308]	; (800566c <HAL_RCC_ClockConfig+0x1bc>)
 8005536:	4313      	orrs	r3, r2
 8005538:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	2b00      	cmp	r3, #0
 8005544:	d044      	beq.n	80055d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	2b01      	cmp	r3, #1
 800554c:	d107      	bne.n	800555e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800554e:	4b47      	ldr	r3, [pc, #284]	; (800566c <HAL_RCC_ClockConfig+0x1bc>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d119      	bne.n	800558e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e07f      	b.n	800565e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	2b02      	cmp	r3, #2
 8005564:	d003      	beq.n	800556e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800556a:	2b03      	cmp	r3, #3
 800556c:	d107      	bne.n	800557e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800556e:	4b3f      	ldr	r3, [pc, #252]	; (800566c <HAL_RCC_ClockConfig+0x1bc>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d109      	bne.n	800558e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e06f      	b.n	800565e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800557e:	4b3b      	ldr	r3, [pc, #236]	; (800566c <HAL_RCC_ClockConfig+0x1bc>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e067      	b.n	800565e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800558e:	4b37      	ldr	r3, [pc, #220]	; (800566c <HAL_RCC_ClockConfig+0x1bc>)
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f023 0203 	bic.w	r2, r3, #3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	4934      	ldr	r1, [pc, #208]	; (800566c <HAL_RCC_ClockConfig+0x1bc>)
 800559c:	4313      	orrs	r3, r2
 800559e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055a0:	f7fe fe08 	bl	80041b4 <HAL_GetTick>
 80055a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055a6:	e00a      	b.n	80055be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055a8:	f7fe fe04 	bl	80041b4 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e04f      	b.n	800565e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055be:	4b2b      	ldr	r3, [pc, #172]	; (800566c <HAL_RCC_ClockConfig+0x1bc>)
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	f003 020c 	and.w	r2, r3, #12
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d1eb      	bne.n	80055a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055d0:	4b25      	ldr	r3, [pc, #148]	; (8005668 <HAL_RCC_ClockConfig+0x1b8>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 030f 	and.w	r3, r3, #15
 80055d8:	683a      	ldr	r2, [r7, #0]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d20c      	bcs.n	80055f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055de:	4b22      	ldr	r3, [pc, #136]	; (8005668 <HAL_RCC_ClockConfig+0x1b8>)
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	b2d2      	uxtb	r2, r2
 80055e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055e6:	4b20      	ldr	r3, [pc, #128]	; (8005668 <HAL_RCC_ClockConfig+0x1b8>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 030f 	and.w	r3, r3, #15
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d001      	beq.n	80055f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e032      	b.n	800565e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0304 	and.w	r3, r3, #4
 8005600:	2b00      	cmp	r3, #0
 8005602:	d008      	beq.n	8005616 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005604:	4b19      	ldr	r3, [pc, #100]	; (800566c <HAL_RCC_ClockConfig+0x1bc>)
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	4916      	ldr	r1, [pc, #88]	; (800566c <HAL_RCC_ClockConfig+0x1bc>)
 8005612:	4313      	orrs	r3, r2
 8005614:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0308 	and.w	r3, r3, #8
 800561e:	2b00      	cmp	r3, #0
 8005620:	d009      	beq.n	8005636 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005622:	4b12      	ldr	r3, [pc, #72]	; (800566c <HAL_RCC_ClockConfig+0x1bc>)
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	00db      	lsls	r3, r3, #3
 8005630:	490e      	ldr	r1, [pc, #56]	; (800566c <HAL_RCC_ClockConfig+0x1bc>)
 8005632:	4313      	orrs	r3, r2
 8005634:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005636:	f000 f821 	bl	800567c <HAL_RCC_GetSysClockFreq>
 800563a:	4602      	mov	r2, r0
 800563c:	4b0b      	ldr	r3, [pc, #44]	; (800566c <HAL_RCC_ClockConfig+0x1bc>)
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	091b      	lsrs	r3, r3, #4
 8005642:	f003 030f 	and.w	r3, r3, #15
 8005646:	490a      	ldr	r1, [pc, #40]	; (8005670 <HAL_RCC_ClockConfig+0x1c0>)
 8005648:	5ccb      	ldrb	r3, [r1, r3]
 800564a:	fa22 f303 	lsr.w	r3, r2, r3
 800564e:	4a09      	ldr	r2, [pc, #36]	; (8005674 <HAL_RCC_ClockConfig+0x1c4>)
 8005650:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005652:	4b09      	ldr	r3, [pc, #36]	; (8005678 <HAL_RCC_ClockConfig+0x1c8>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4618      	mov	r0, r3
 8005658:	f7fe f9c0 	bl	80039dc <HAL_InitTick>

  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	40023c00 	.word	0x40023c00
 800566c:	40023800 	.word	0x40023800
 8005670:	0800f0f0 	.word	0x0800f0f0
 8005674:	20000050 	.word	0x20000050
 8005678:	20000054 	.word	0x20000054

0800567c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800567c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005680:	b090      	sub	sp, #64	; 0x40
 8005682:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005684:	2300      	movs	r3, #0
 8005686:	637b      	str	r3, [r7, #52]	; 0x34
 8005688:	2300      	movs	r3, #0
 800568a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800568c:	2300      	movs	r3, #0
 800568e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005690:	2300      	movs	r3, #0
 8005692:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005694:	4b59      	ldr	r3, [pc, #356]	; (80057fc <HAL_RCC_GetSysClockFreq+0x180>)
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f003 030c 	and.w	r3, r3, #12
 800569c:	2b08      	cmp	r3, #8
 800569e:	d00d      	beq.n	80056bc <HAL_RCC_GetSysClockFreq+0x40>
 80056a0:	2b08      	cmp	r3, #8
 80056a2:	f200 80a1 	bhi.w	80057e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d002      	beq.n	80056b0 <HAL_RCC_GetSysClockFreq+0x34>
 80056aa:	2b04      	cmp	r3, #4
 80056ac:	d003      	beq.n	80056b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80056ae:	e09b      	b.n	80057e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056b0:	4b53      	ldr	r3, [pc, #332]	; (8005800 <HAL_RCC_GetSysClockFreq+0x184>)
 80056b2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80056b4:	e09b      	b.n	80057ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056b6:	4b53      	ldr	r3, [pc, #332]	; (8005804 <HAL_RCC_GetSysClockFreq+0x188>)
 80056b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80056ba:	e098      	b.n	80057ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056bc:	4b4f      	ldr	r3, [pc, #316]	; (80057fc <HAL_RCC_GetSysClockFreq+0x180>)
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056c4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056c6:	4b4d      	ldr	r3, [pc, #308]	; (80057fc <HAL_RCC_GetSysClockFreq+0x180>)
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d028      	beq.n	8005724 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056d2:	4b4a      	ldr	r3, [pc, #296]	; (80057fc <HAL_RCC_GetSysClockFreq+0x180>)
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	099b      	lsrs	r3, r3, #6
 80056d8:	2200      	movs	r2, #0
 80056da:	623b      	str	r3, [r7, #32]
 80056dc:	627a      	str	r2, [r7, #36]	; 0x24
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80056e4:	2100      	movs	r1, #0
 80056e6:	4b47      	ldr	r3, [pc, #284]	; (8005804 <HAL_RCC_GetSysClockFreq+0x188>)
 80056e8:	fb03 f201 	mul.w	r2, r3, r1
 80056ec:	2300      	movs	r3, #0
 80056ee:	fb00 f303 	mul.w	r3, r0, r3
 80056f2:	4413      	add	r3, r2
 80056f4:	4a43      	ldr	r2, [pc, #268]	; (8005804 <HAL_RCC_GetSysClockFreq+0x188>)
 80056f6:	fba0 1202 	umull	r1, r2, r0, r2
 80056fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056fc:	460a      	mov	r2, r1
 80056fe:	62ba      	str	r2, [r7, #40]	; 0x28
 8005700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005702:	4413      	add	r3, r2
 8005704:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005708:	2200      	movs	r2, #0
 800570a:	61bb      	str	r3, [r7, #24]
 800570c:	61fa      	str	r2, [r7, #28]
 800570e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005712:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005716:	f7fb fa77 	bl	8000c08 <__aeabi_uldivmod>
 800571a:	4602      	mov	r2, r0
 800571c:	460b      	mov	r3, r1
 800571e:	4613      	mov	r3, r2
 8005720:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005722:	e053      	b.n	80057cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005724:	4b35      	ldr	r3, [pc, #212]	; (80057fc <HAL_RCC_GetSysClockFreq+0x180>)
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	099b      	lsrs	r3, r3, #6
 800572a:	2200      	movs	r2, #0
 800572c:	613b      	str	r3, [r7, #16]
 800572e:	617a      	str	r2, [r7, #20]
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005736:	f04f 0b00 	mov.w	fp, #0
 800573a:	4652      	mov	r2, sl
 800573c:	465b      	mov	r3, fp
 800573e:	f04f 0000 	mov.w	r0, #0
 8005742:	f04f 0100 	mov.w	r1, #0
 8005746:	0159      	lsls	r1, r3, #5
 8005748:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800574c:	0150      	lsls	r0, r2, #5
 800574e:	4602      	mov	r2, r0
 8005750:	460b      	mov	r3, r1
 8005752:	ebb2 080a 	subs.w	r8, r2, sl
 8005756:	eb63 090b 	sbc.w	r9, r3, fp
 800575a:	f04f 0200 	mov.w	r2, #0
 800575e:	f04f 0300 	mov.w	r3, #0
 8005762:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005766:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800576a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800576e:	ebb2 0408 	subs.w	r4, r2, r8
 8005772:	eb63 0509 	sbc.w	r5, r3, r9
 8005776:	f04f 0200 	mov.w	r2, #0
 800577a:	f04f 0300 	mov.w	r3, #0
 800577e:	00eb      	lsls	r3, r5, #3
 8005780:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005784:	00e2      	lsls	r2, r4, #3
 8005786:	4614      	mov	r4, r2
 8005788:	461d      	mov	r5, r3
 800578a:	eb14 030a 	adds.w	r3, r4, sl
 800578e:	603b      	str	r3, [r7, #0]
 8005790:	eb45 030b 	adc.w	r3, r5, fp
 8005794:	607b      	str	r3, [r7, #4]
 8005796:	f04f 0200 	mov.w	r2, #0
 800579a:	f04f 0300 	mov.w	r3, #0
 800579e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80057a2:	4629      	mov	r1, r5
 80057a4:	028b      	lsls	r3, r1, #10
 80057a6:	4621      	mov	r1, r4
 80057a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80057ac:	4621      	mov	r1, r4
 80057ae:	028a      	lsls	r2, r1, #10
 80057b0:	4610      	mov	r0, r2
 80057b2:	4619      	mov	r1, r3
 80057b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b6:	2200      	movs	r2, #0
 80057b8:	60bb      	str	r3, [r7, #8]
 80057ba:	60fa      	str	r2, [r7, #12]
 80057bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057c0:	f7fb fa22 	bl	8000c08 <__aeabi_uldivmod>
 80057c4:	4602      	mov	r2, r0
 80057c6:	460b      	mov	r3, r1
 80057c8:	4613      	mov	r3, r2
 80057ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80057cc:	4b0b      	ldr	r3, [pc, #44]	; (80057fc <HAL_RCC_GetSysClockFreq+0x180>)
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	0c1b      	lsrs	r3, r3, #16
 80057d2:	f003 0303 	and.w	r3, r3, #3
 80057d6:	3301      	adds	r3, #1
 80057d8:	005b      	lsls	r3, r3, #1
 80057da:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80057dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80057e6:	e002      	b.n	80057ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057e8:	4b05      	ldr	r3, [pc, #20]	; (8005800 <HAL_RCC_GetSysClockFreq+0x184>)
 80057ea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80057ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3740      	adds	r7, #64	; 0x40
 80057f4:	46bd      	mov	sp, r7
 80057f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057fa:	bf00      	nop
 80057fc:	40023800 	.word	0x40023800
 8005800:	00f42400 	.word	0x00f42400
 8005804:	017d7840 	.word	0x017d7840

08005808 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005808:	b480      	push	{r7}
 800580a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800580c:	4b03      	ldr	r3, [pc, #12]	; (800581c <HAL_RCC_GetHCLKFreq+0x14>)
 800580e:	681b      	ldr	r3, [r3, #0]
}
 8005810:	4618      	mov	r0, r3
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	20000050 	.word	0x20000050

08005820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005824:	f7ff fff0 	bl	8005808 <HAL_RCC_GetHCLKFreq>
 8005828:	4602      	mov	r2, r0
 800582a:	4b05      	ldr	r3, [pc, #20]	; (8005840 <HAL_RCC_GetPCLK1Freq+0x20>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	0a9b      	lsrs	r3, r3, #10
 8005830:	f003 0307 	and.w	r3, r3, #7
 8005834:	4903      	ldr	r1, [pc, #12]	; (8005844 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005836:	5ccb      	ldrb	r3, [r1, r3]
 8005838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800583c:	4618      	mov	r0, r3
 800583e:	bd80      	pop	{r7, pc}
 8005840:	40023800 	.word	0x40023800
 8005844:	0800f100 	.word	0x0800f100

08005848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800584c:	f7ff ffdc 	bl	8005808 <HAL_RCC_GetHCLKFreq>
 8005850:	4602      	mov	r2, r0
 8005852:	4b05      	ldr	r3, [pc, #20]	; (8005868 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	0b5b      	lsrs	r3, r3, #13
 8005858:	f003 0307 	and.w	r3, r3, #7
 800585c:	4903      	ldr	r1, [pc, #12]	; (800586c <HAL_RCC_GetPCLK2Freq+0x24>)
 800585e:	5ccb      	ldrb	r3, [r1, r3]
 8005860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005864:	4618      	mov	r0, r3
 8005866:	bd80      	pop	{r7, pc}
 8005868:	40023800 	.word	0x40023800
 800586c:	0800f100 	.word	0x0800f100

08005870 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	220f      	movs	r2, #15
 800587e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005880:	4b12      	ldr	r3, [pc, #72]	; (80058cc <HAL_RCC_GetClockConfig+0x5c>)
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f003 0203 	and.w	r2, r3, #3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800588c:	4b0f      	ldr	r3, [pc, #60]	; (80058cc <HAL_RCC_GetClockConfig+0x5c>)
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005898:	4b0c      	ldr	r3, [pc, #48]	; (80058cc <HAL_RCC_GetClockConfig+0x5c>)
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80058a4:	4b09      	ldr	r3, [pc, #36]	; (80058cc <HAL_RCC_GetClockConfig+0x5c>)
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	08db      	lsrs	r3, r3, #3
 80058aa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80058b2:	4b07      	ldr	r3, [pc, #28]	; (80058d0 <HAL_RCC_GetClockConfig+0x60>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 020f 	and.w	r2, r3, #15
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	601a      	str	r2, [r3, #0]
}
 80058be:	bf00      	nop
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	40023800 	.word	0x40023800
 80058d0:	40023c00 	.word	0x40023c00

080058d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058dc:	2300      	movs	r3, #0
 80058de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80058e0:	2300      	movs	r3, #0
 80058e2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10b      	bne.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d105      	bne.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005904:	2b00      	cmp	r3, #0
 8005906:	d075      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005908:	4b91      	ldr	r3, [pc, #580]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800590a:	2200      	movs	r2, #0
 800590c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800590e:	f7fe fc51 	bl	80041b4 <HAL_GetTick>
 8005912:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005914:	e008      	b.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005916:	f7fe fc4d 	bl	80041b4 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	2b02      	cmp	r3, #2
 8005922:	d901      	bls.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e189      	b.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005928:	4b8a      	ldr	r3, [pc, #552]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d1f0      	bne.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b00      	cmp	r3, #0
 800593e:	d009      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	019a      	lsls	r2, r3, #6
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	071b      	lsls	r3, r3, #28
 800594c:	4981      	ldr	r1, [pc, #516]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800594e:	4313      	orrs	r3, r2
 8005950:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d01f      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005960:	4b7c      	ldr	r3, [pc, #496]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005962:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005966:	0f1b      	lsrs	r3, r3, #28
 8005968:	f003 0307 	and.w	r3, r3, #7
 800596c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	019a      	lsls	r2, r3, #6
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	061b      	lsls	r3, r3, #24
 800597a:	431a      	orrs	r2, r3
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	071b      	lsls	r3, r3, #28
 8005980:	4974      	ldr	r1, [pc, #464]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005982:	4313      	orrs	r3, r2
 8005984:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005988:	4b72      	ldr	r3, [pc, #456]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800598a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800598e:	f023 021f 	bic.w	r2, r3, #31
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	3b01      	subs	r3, #1
 8005998:	496e      	ldr	r1, [pc, #440]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800599a:	4313      	orrs	r3, r2
 800599c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00d      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	019a      	lsls	r2, r3, #6
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	061b      	lsls	r3, r3, #24
 80059b8:	431a      	orrs	r2, r3
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	071b      	lsls	r3, r3, #28
 80059c0:	4964      	ldr	r1, [pc, #400]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80059c8:	4b61      	ldr	r3, [pc, #388]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80059ca:	2201      	movs	r2, #1
 80059cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80059ce:	f7fe fbf1 	bl	80041b4 <HAL_GetTick>
 80059d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059d4:	e008      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80059d6:	f7fe fbed 	bl	80041b4 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d901      	bls.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e129      	b.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059e8:	4b5a      	ldr	r3, [pc, #360]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d0f0      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d105      	bne.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d079      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005a0c:	4b52      	ldr	r3, [pc, #328]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a12:	f7fe fbcf 	bl	80041b4 <HAL_GetTick>
 8005a16:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a18:	e008      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005a1a:	f7fe fbcb 	bl	80041b4 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d901      	bls.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e107      	b.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a2c:	4b49      	ldr	r3, [pc, #292]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a38:	d0ef      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0304 	and.w	r3, r3, #4
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d020      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a46:	4b43      	ldr	r3, [pc, #268]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a4c:	0f1b      	lsrs	r3, r3, #28
 8005a4e:	f003 0307 	and.w	r3, r3, #7
 8005a52:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	019a      	lsls	r2, r3, #6
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	061b      	lsls	r3, r3, #24
 8005a60:	431a      	orrs	r2, r3
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	071b      	lsls	r3, r3, #28
 8005a66:	493b      	ldr	r1, [pc, #236]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005a6e:	4b39      	ldr	r3, [pc, #228]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a74:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a1b      	ldr	r3, [r3, #32]
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	021b      	lsls	r3, r3, #8
 8005a80:	4934      	ldr	r1, [pc, #208]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0308 	and.w	r3, r3, #8
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d01e      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005a94:	4b2f      	ldr	r3, [pc, #188]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9a:	0e1b      	lsrs	r3, r3, #24
 8005a9c:	f003 030f 	and.w	r3, r3, #15
 8005aa0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	019a      	lsls	r2, r3, #6
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	061b      	lsls	r3, r3, #24
 8005aac:	431a      	orrs	r2, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	071b      	lsls	r3, r3, #28
 8005ab4:	4927      	ldr	r1, [pc, #156]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005abc:	4b25      	ldr	r3, [pc, #148]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005abe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ac2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aca:	4922      	ldr	r1, [pc, #136]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005ad2:	4b21      	ldr	r3, [pc, #132]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ad8:	f7fe fb6c 	bl	80041b4 <HAL_GetTick>
 8005adc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ade:	e008      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005ae0:	f7fe fb68 	bl	80041b4 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d901      	bls.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e0a4      	b.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005af2:	4b18      	ldr	r3, [pc, #96]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005afa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005afe:	d1ef      	bne.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0320 	and.w	r3, r3, #32
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f000 808b 	beq.w	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60fb      	str	r3, [r7, #12]
 8005b12:	4b10      	ldr	r3, [pc, #64]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b16:	4a0f      	ldr	r2, [pc, #60]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8005b1e:	4b0d      	ldr	r3, [pc, #52]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b26:	60fb      	str	r3, [r7, #12]
 8005b28:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005b2a:	4b0c      	ldr	r3, [pc, #48]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a0b      	ldr	r2, [pc, #44]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b34:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b36:	f7fe fb3d 	bl	80041b4 <HAL_GetTick>
 8005b3a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005b3c:	e010      	b.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005b3e:	f7fe fb39 	bl	80041b4 <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d909      	bls.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e075      	b.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005b50:	42470068 	.word	0x42470068
 8005b54:	40023800 	.word	0x40023800
 8005b58:	42470070 	.word	0x42470070
 8005b5c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005b60:	4b38      	ldr	r3, [pc, #224]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d0e8      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b6c:	4b36      	ldr	r3, [pc, #216]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b74:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d02f      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d028      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b8a:	4b2f      	ldr	r3, [pc, #188]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b92:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b94:	4b2d      	ldr	r3, [pc, #180]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005b96:	2201      	movs	r2, #1
 8005b98:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b9a:	4b2c      	ldr	r3, [pc, #176]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005ba0:	4a29      	ldr	r2, [pc, #164]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005ba6:	4b28      	ldr	r3, [pc, #160]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d114      	bne.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005bb2:	f7fe faff 	bl	80041b4 <HAL_GetTick>
 8005bb6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bb8:	e00a      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bba:	f7fe fafb 	bl	80041b4 <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d901      	bls.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e035      	b.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bd0:	4b1d      	ldr	r3, [pc, #116]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd4:	f003 0302 	and.w	r3, r3, #2
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d0ee      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005be4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005be8:	d10d      	bne.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005bea:	4b17      	ldr	r3, [pc, #92]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bfe:	4912      	ldr	r1, [pc, #72]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c00:	4313      	orrs	r3, r2
 8005c02:	608b      	str	r3, [r1, #8]
 8005c04:	e005      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005c06:	4b10      	ldr	r3, [pc, #64]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	4a0f      	ldr	r2, [pc, #60]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c0c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005c10:	6093      	str	r3, [r2, #8]
 8005c12:	4b0d      	ldr	r3, [pc, #52]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c1e:	490a      	ldr	r1, [pc, #40]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0310 	and.w	r3, r3, #16
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d004      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005c36:	4b06      	ldr	r3, [pc, #24]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005c38:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3718      	adds	r7, #24
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	40007000 	.word	0x40007000
 8005c48:	40023800 	.word	0x40023800
 8005c4c:	42470e40 	.word	0x42470e40
 8005c50:	424711e0 	.word	0x424711e0

08005c54 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e066      	b.n	8005d38 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	7f5b      	ldrb	r3, [r3, #29]
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d105      	bne.n	8005c80 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f7fd fe58 	bl	8003930 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2202      	movs	r2, #2
 8005c84:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	22ca      	movs	r2, #202	; 0xca
 8005c8c:	625a      	str	r2, [r3, #36]	; 0x24
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2253      	movs	r2, #83	; 0x53
 8005c94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 f87a 	bl	8005d90 <RTC_EnterInitMode>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005ca0:	7bfb      	ldrb	r3, [r7, #15]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d12c      	bne.n	8005d00 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	6812      	ldr	r2, [r2, #0]
 8005cb0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005cb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cb8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	6899      	ldr	r1, [r3, #8]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685a      	ldr	r2, [r3, #4]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	431a      	orrs	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	68d2      	ldr	r2, [r2, #12]
 8005ce0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6919      	ldr	r1, [r3, #16]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	041a      	lsls	r2, r3, #16
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f881 	bl	8005dfe <RTC_ExitInitMode>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005d00:	7bfb      	ldrb	r3, [r7, #15]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d113      	bne.n	8005d2e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d14:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	699a      	ldr	r2, [r3, #24]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	430a      	orrs	r2, r1
 8005d26:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	22ff      	movs	r2, #255	; 0xff
 8005d34:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3710      	adds	r7, #16
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68da      	ldr	r2, [r3, #12]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d5a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d5c:	f7fe fa2a 	bl	80041b4 <HAL_GetTick>
 8005d60:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d62:	e009      	b.n	8005d78 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d64:	f7fe fa26 	bl	80041b4 <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d72:	d901      	bls.n	8005d78 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e007      	b.n	8005d88 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	f003 0320 	and.w	r3, r3, #32
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d0ee      	beq.n	8005d64 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d122      	bne.n	8005df4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68da      	ldr	r2, [r3, #12]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005dbc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005dbe:	f7fe f9f9 	bl	80041b4 <HAL_GetTick>
 8005dc2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005dc4:	e00c      	b.n	8005de0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005dc6:	f7fe f9f5 	bl	80041b4 <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dd4:	d904      	bls.n	8005de0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2204      	movs	r2, #4
 8005dda:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d102      	bne.n	8005df4 <RTC_EnterInitMode+0x64>
 8005dee:	7bfb      	ldrb	r3, [r7, #15]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d1e8      	bne.n	8005dc6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b084      	sub	sp, #16
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e06:	2300      	movs	r3, #0
 8005e08:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68da      	ldr	r2, [r3, #12]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e18:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f003 0320 	and.w	r3, r3, #32
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10a      	bne.n	8005e3e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f7ff ff89 	bl	8005d40 <HAL_RTC_WaitForSynchro>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d004      	beq.n	8005e3e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2204      	movs	r2, #4
 8005e38:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d101      	bne.n	8005e5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e041      	b.n	8005ede <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d106      	bne.n	8005e74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f839 	bl	8005ee6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2202      	movs	r2, #2
 8005e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	3304      	adds	r3, #4
 8005e84:	4619      	mov	r1, r3
 8005e86:	4610      	mov	r0, r2
 8005e88:	f000 f9d8 	bl	800623c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b083      	sub	sp, #12
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005eee:	bf00      	nop
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
	...

08005efc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d001      	beq.n	8005f14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e04e      	b.n	8005fb2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2202      	movs	r2, #2
 8005f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68da      	ldr	r2, [r3, #12]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f042 0201 	orr.w	r2, r2, #1
 8005f2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a23      	ldr	r2, [pc, #140]	; (8005fc0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d022      	beq.n	8005f7c <HAL_TIM_Base_Start_IT+0x80>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f3e:	d01d      	beq.n	8005f7c <HAL_TIM_Base_Start_IT+0x80>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a1f      	ldr	r2, [pc, #124]	; (8005fc4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d018      	beq.n	8005f7c <HAL_TIM_Base_Start_IT+0x80>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a1e      	ldr	r2, [pc, #120]	; (8005fc8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d013      	beq.n	8005f7c <HAL_TIM_Base_Start_IT+0x80>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a1c      	ldr	r2, [pc, #112]	; (8005fcc <HAL_TIM_Base_Start_IT+0xd0>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d00e      	beq.n	8005f7c <HAL_TIM_Base_Start_IT+0x80>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a1b      	ldr	r2, [pc, #108]	; (8005fd0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d009      	beq.n	8005f7c <HAL_TIM_Base_Start_IT+0x80>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a19      	ldr	r2, [pc, #100]	; (8005fd4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d004      	beq.n	8005f7c <HAL_TIM_Base_Start_IT+0x80>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a18      	ldr	r2, [pc, #96]	; (8005fd8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d111      	bne.n	8005fa0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f003 0307 	and.w	r3, r3, #7
 8005f86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2b06      	cmp	r3, #6
 8005f8c:	d010      	beq.n	8005fb0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f042 0201 	orr.w	r2, r2, #1
 8005f9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f9e:	e007      	b.n	8005fb0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f042 0201 	orr.w	r2, r2, #1
 8005fae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3714      	adds	r7, #20
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	40010000 	.word	0x40010000
 8005fc4:	40000400 	.word	0x40000400
 8005fc8:	40000800 	.word	0x40000800
 8005fcc:	40000c00 	.word	0x40000c00
 8005fd0:	40010400 	.word	0x40010400
 8005fd4:	40014000 	.word	0x40014000
 8005fd8:	40001800 	.word	0x40001800

08005fdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	f003 0302 	and.w	r3, r3, #2
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d122      	bne.n	8006038 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	f003 0302 	and.w	r3, r3, #2
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d11b      	bne.n	8006038 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f06f 0202 	mvn.w	r2, #2
 8006008:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	f003 0303 	and.w	r3, r3, #3
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f8ee 	bl	8006200 <HAL_TIM_IC_CaptureCallback>
 8006024:	e005      	b.n	8006032 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f8e0 	bl	80061ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f8f1 	bl	8006214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	f003 0304 	and.w	r3, r3, #4
 8006042:	2b04      	cmp	r3, #4
 8006044:	d122      	bne.n	800608c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	f003 0304 	and.w	r3, r3, #4
 8006050:	2b04      	cmp	r3, #4
 8006052:	d11b      	bne.n	800608c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f06f 0204 	mvn.w	r2, #4
 800605c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2202      	movs	r2, #2
 8006062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800606e:	2b00      	cmp	r3, #0
 8006070:	d003      	beq.n	800607a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f8c4 	bl	8006200 <HAL_TIM_IC_CaptureCallback>
 8006078:	e005      	b.n	8006086 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f8b6 	bl	80061ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 f8c7 	bl	8006214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	f003 0308 	and.w	r3, r3, #8
 8006096:	2b08      	cmp	r3, #8
 8006098:	d122      	bne.n	80060e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	f003 0308 	and.w	r3, r3, #8
 80060a4:	2b08      	cmp	r3, #8
 80060a6:	d11b      	bne.n	80060e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f06f 0208 	mvn.w	r2, #8
 80060b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2204      	movs	r2, #4
 80060b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	69db      	ldr	r3, [r3, #28]
 80060be:	f003 0303 	and.w	r3, r3, #3
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d003      	beq.n	80060ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f89a 	bl	8006200 <HAL_TIM_IC_CaptureCallback>
 80060cc:	e005      	b.n	80060da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f88c 	bl	80061ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 f89d 	bl	8006214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	f003 0310 	and.w	r3, r3, #16
 80060ea:	2b10      	cmp	r3, #16
 80060ec:	d122      	bne.n	8006134 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	f003 0310 	and.w	r3, r3, #16
 80060f8:	2b10      	cmp	r3, #16
 80060fa:	d11b      	bne.n	8006134 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f06f 0210 	mvn.w	r2, #16
 8006104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2208      	movs	r2, #8
 800610a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	69db      	ldr	r3, [r3, #28]
 8006112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f870 	bl	8006200 <HAL_TIM_IC_CaptureCallback>
 8006120:	e005      	b.n	800612e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f862 	bl	80061ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 f873 	bl	8006214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b01      	cmp	r3, #1
 8006140:	d10e      	bne.n	8006160 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	f003 0301 	and.w	r3, r3, #1
 800614c:	2b01      	cmp	r3, #1
 800614e:	d107      	bne.n	8006160 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f06f 0201 	mvn.w	r2, #1
 8006158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7fd fbaa 	bl	80038b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800616a:	2b80      	cmp	r3, #128	; 0x80
 800616c:	d10e      	bne.n	800618c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006178:	2b80      	cmp	r3, #128	; 0x80
 800617a:	d107      	bne.n	800618c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 f902 	bl	8006390 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006196:	2b40      	cmp	r3, #64	; 0x40
 8006198:	d10e      	bne.n	80061b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a4:	2b40      	cmp	r3, #64	; 0x40
 80061a6:	d107      	bne.n	80061b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f838 	bl	8006228 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	f003 0320 	and.w	r3, r3, #32
 80061c2:	2b20      	cmp	r3, #32
 80061c4:	d10e      	bne.n	80061e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	f003 0320 	and.w	r3, r3, #32
 80061d0:	2b20      	cmp	r3, #32
 80061d2:	d107      	bne.n	80061e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f06f 0220 	mvn.w	r2, #32
 80061dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f8cc 	bl	800637c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061e4:	bf00      	nop
 80061e6:	3708      	adds	r7, #8
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800623c:	b480      	push	{r7}
 800623e:	b085      	sub	sp, #20
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a40      	ldr	r2, [pc, #256]	; (8006350 <TIM_Base_SetConfig+0x114>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d013      	beq.n	800627c <TIM_Base_SetConfig+0x40>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800625a:	d00f      	beq.n	800627c <TIM_Base_SetConfig+0x40>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a3d      	ldr	r2, [pc, #244]	; (8006354 <TIM_Base_SetConfig+0x118>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d00b      	beq.n	800627c <TIM_Base_SetConfig+0x40>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a3c      	ldr	r2, [pc, #240]	; (8006358 <TIM_Base_SetConfig+0x11c>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d007      	beq.n	800627c <TIM_Base_SetConfig+0x40>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a3b      	ldr	r2, [pc, #236]	; (800635c <TIM_Base_SetConfig+0x120>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d003      	beq.n	800627c <TIM_Base_SetConfig+0x40>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a3a      	ldr	r2, [pc, #232]	; (8006360 <TIM_Base_SetConfig+0x124>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d108      	bne.n	800628e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006282:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	4313      	orrs	r3, r2
 800628c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a2f      	ldr	r2, [pc, #188]	; (8006350 <TIM_Base_SetConfig+0x114>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d02b      	beq.n	80062ee <TIM_Base_SetConfig+0xb2>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800629c:	d027      	beq.n	80062ee <TIM_Base_SetConfig+0xb2>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a2c      	ldr	r2, [pc, #176]	; (8006354 <TIM_Base_SetConfig+0x118>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d023      	beq.n	80062ee <TIM_Base_SetConfig+0xb2>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a2b      	ldr	r2, [pc, #172]	; (8006358 <TIM_Base_SetConfig+0x11c>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d01f      	beq.n	80062ee <TIM_Base_SetConfig+0xb2>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a2a      	ldr	r2, [pc, #168]	; (800635c <TIM_Base_SetConfig+0x120>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d01b      	beq.n	80062ee <TIM_Base_SetConfig+0xb2>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a29      	ldr	r2, [pc, #164]	; (8006360 <TIM_Base_SetConfig+0x124>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d017      	beq.n	80062ee <TIM_Base_SetConfig+0xb2>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a28      	ldr	r2, [pc, #160]	; (8006364 <TIM_Base_SetConfig+0x128>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d013      	beq.n	80062ee <TIM_Base_SetConfig+0xb2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a27      	ldr	r2, [pc, #156]	; (8006368 <TIM_Base_SetConfig+0x12c>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d00f      	beq.n	80062ee <TIM_Base_SetConfig+0xb2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a26      	ldr	r2, [pc, #152]	; (800636c <TIM_Base_SetConfig+0x130>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d00b      	beq.n	80062ee <TIM_Base_SetConfig+0xb2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a25      	ldr	r2, [pc, #148]	; (8006370 <TIM_Base_SetConfig+0x134>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d007      	beq.n	80062ee <TIM_Base_SetConfig+0xb2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a24      	ldr	r2, [pc, #144]	; (8006374 <TIM_Base_SetConfig+0x138>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d003      	beq.n	80062ee <TIM_Base_SetConfig+0xb2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a23      	ldr	r2, [pc, #140]	; (8006378 <TIM_Base_SetConfig+0x13c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d108      	bne.n	8006300 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	4313      	orrs	r3, r2
 800630c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	689a      	ldr	r2, [r3, #8]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a0a      	ldr	r2, [pc, #40]	; (8006350 <TIM_Base_SetConfig+0x114>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d003      	beq.n	8006334 <TIM_Base_SetConfig+0xf8>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a0c      	ldr	r2, [pc, #48]	; (8006360 <TIM_Base_SetConfig+0x124>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d103      	bne.n	800633c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	691a      	ldr	r2, [r3, #16]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	615a      	str	r2, [r3, #20]
}
 8006342:	bf00      	nop
 8006344:	3714      	adds	r7, #20
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	40010000 	.word	0x40010000
 8006354:	40000400 	.word	0x40000400
 8006358:	40000800 	.word	0x40000800
 800635c:	40000c00 	.word	0x40000c00
 8006360:	40010400 	.word	0x40010400
 8006364:	40014000 	.word	0x40014000
 8006368:	40014400 	.word	0x40014400
 800636c:	40014800 	.word	0x40014800
 8006370:	40001800 	.word	0x40001800
 8006374:	40001c00 	.word	0x40001c00
 8006378:	40002000 	.word	0x40002000

0800637c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e03f      	b.n	8006436 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d106      	bne.n	80063d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7fd fdb2 	bl	8003f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2224      	movs	r2, #36	; 0x24
 80063d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68da      	ldr	r2, [r3, #12]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 ffff 	bl	80073ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	691a      	ldr	r2, [r3, #16]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	695a      	ldr	r2, [r3, #20]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800640c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68da      	ldr	r2, [r3, #12]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800641c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2220      	movs	r2, #32
 8006428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2220      	movs	r2, #32
 8006430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b08a      	sub	sp, #40	; 0x28
 8006442:	af02      	add	r7, sp, #8
 8006444:	60f8      	str	r0, [r7, #12]
 8006446:	60b9      	str	r1, [r7, #8]
 8006448:	603b      	str	r3, [r7, #0]
 800644a:	4613      	mov	r3, r2
 800644c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800644e:	2300      	movs	r3, #0
 8006450:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006458:	b2db      	uxtb	r3, r3
 800645a:	2b20      	cmp	r3, #32
 800645c:	d17c      	bne.n	8006558 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d002      	beq.n	800646a <HAL_UART_Transmit+0x2c>
 8006464:	88fb      	ldrh	r3, [r7, #6]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e075      	b.n	800655a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006474:	2b01      	cmp	r3, #1
 8006476:	d101      	bne.n	800647c <HAL_UART_Transmit+0x3e>
 8006478:	2302      	movs	r3, #2
 800647a:	e06e      	b.n	800655a <HAL_UART_Transmit+0x11c>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2221      	movs	r2, #33	; 0x21
 800648e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006492:	f7fd fe8f 	bl	80041b4 <HAL_GetTick>
 8006496:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	88fa      	ldrh	r2, [r7, #6]
 800649c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	88fa      	ldrh	r2, [r7, #6]
 80064a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ac:	d108      	bne.n	80064c0 <HAL_UART_Transmit+0x82>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d104      	bne.n	80064c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80064b6:	2300      	movs	r3, #0
 80064b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	61bb      	str	r3, [r7, #24]
 80064be:	e003      	b.n	80064c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064c4:	2300      	movs	r3, #0
 80064c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80064d0:	e02a      	b.n	8006528 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	9300      	str	r3, [sp, #0]
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	2200      	movs	r2, #0
 80064da:	2180      	movs	r1, #128	; 0x80
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f000 fc79 	bl	8006dd4 <UART_WaitOnFlagUntilTimeout>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d001      	beq.n	80064ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e036      	b.n	800655a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10b      	bne.n	800650a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	881b      	ldrh	r3, [r3, #0]
 80064f6:	461a      	mov	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006500:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	3302      	adds	r3, #2
 8006506:	61bb      	str	r3, [r7, #24]
 8006508:	e007      	b.n	800651a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	781a      	ldrb	r2, [r3, #0]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	3301      	adds	r3, #1
 8006518:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800651e:	b29b      	uxth	r3, r3
 8006520:	3b01      	subs	r3, #1
 8006522:	b29a      	uxth	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800652c:	b29b      	uxth	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1cf      	bne.n	80064d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	2200      	movs	r2, #0
 800653a:	2140      	movs	r1, #64	; 0x40
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f000 fc49 	bl	8006dd4 <UART_WaitOnFlagUntilTimeout>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e006      	b.n	800655a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2220      	movs	r2, #32
 8006550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006554:	2300      	movs	r3, #0
 8006556:	e000      	b.n	800655a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006558:	2302      	movs	r3, #2
  }
}
 800655a:	4618      	mov	r0, r3
 800655c:	3720      	adds	r7, #32
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b084      	sub	sp, #16
 8006566:	af00      	add	r7, sp, #0
 8006568:	60f8      	str	r0, [r7, #12]
 800656a:	60b9      	str	r1, [r7, #8]
 800656c:	4613      	mov	r3, r2
 800656e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006576:	b2db      	uxtb	r3, r3
 8006578:	2b20      	cmp	r3, #32
 800657a:	d11d      	bne.n	80065b8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d002      	beq.n	8006588 <HAL_UART_Receive_IT+0x26>
 8006582:	88fb      	ldrh	r3, [r7, #6]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d101      	bne.n	800658c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e016      	b.n	80065ba <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006592:	2b01      	cmp	r3, #1
 8006594:	d101      	bne.n	800659a <HAL_UART_Receive_IT+0x38>
 8006596:	2302      	movs	r3, #2
 8006598:	e00f      	b.n	80065ba <HAL_UART_Receive_IT+0x58>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80065a8:	88fb      	ldrh	r3, [r7, #6]
 80065aa:	461a      	mov	r2, r3
 80065ac:	68b9      	ldr	r1, [r7, #8]
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f000 fc7e 	bl	8006eb0 <UART_Start_Receive_IT>
 80065b4:	4603      	mov	r3, r0
 80065b6:	e000      	b.n	80065ba <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80065b8:	2302      	movs	r3, #2
  }
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b08c      	sub	sp, #48	; 0x30
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	60f8      	str	r0, [r7, #12]
 80065ca:	60b9      	str	r1, [r7, #8]
 80065cc:	4613      	mov	r3, r2
 80065ce:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	2b20      	cmp	r3, #32
 80065da:	d152      	bne.n	8006682 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d002      	beq.n	80065e8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80065e2:	88fb      	ldrh	r3, [r7, #6]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d101      	bne.n	80065ec <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e04b      	b.n	8006684 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d101      	bne.n	80065fa <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80065f6:	2302      	movs	r3, #2
 80065f8:	e044      	b.n	8006684 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2201      	movs	r2, #1
 80065fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2201      	movs	r2, #1
 8006606:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006608:	88fb      	ldrh	r3, [r7, #6]
 800660a:	461a      	mov	r2, r3
 800660c:	68b9      	ldr	r1, [r7, #8]
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f000 fc8c 	bl	8006f2c <UART_Start_Receive_DMA>
 8006614:	4603      	mov	r3, r0
 8006616:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800661a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800661e:	2b00      	cmp	r3, #0
 8006620:	d12c      	bne.n	800667c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006626:	2b01      	cmp	r3, #1
 8006628:	d125      	bne.n	8006676 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800662a:	2300      	movs	r3, #0
 800662c:	613b      	str	r3, [r7, #16]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	613b      	str	r3, [r7, #16]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	613b      	str	r3, [r7, #16]
 800663e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	330c      	adds	r3, #12
 8006646:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006648:	69bb      	ldr	r3, [r7, #24]
 800664a:	e853 3f00 	ldrex	r3, [r3]
 800664e:	617b      	str	r3, [r7, #20]
   return(result);
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	f043 0310 	orr.w	r3, r3, #16
 8006656:	62bb      	str	r3, [r7, #40]	; 0x28
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	330c      	adds	r3, #12
 800665e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006660:	627a      	str	r2, [r7, #36]	; 0x24
 8006662:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006664:	6a39      	ldr	r1, [r7, #32]
 8006666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006668:	e841 2300 	strex	r3, r2, [r1]
 800666c:	61fb      	str	r3, [r7, #28]
   return(result);
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1e5      	bne.n	8006640 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8006674:	e002      	b.n	800667c <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800667c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006680:	e000      	b.n	8006684 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8006682:	2302      	movs	r3, #2
  }
}
 8006684:	4618      	mov	r0, r3
 8006686:	3730      	adds	r7, #48	; 0x30
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b0ba      	sub	sp, #232	; 0xe8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80066b2:	2300      	movs	r3, #0
 80066b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80066b8:	2300      	movs	r3, #0
 80066ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80066be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066c2:	f003 030f 	and.w	r3, r3, #15
 80066c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80066ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10f      	bne.n	80066f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066d6:	f003 0320 	and.w	r3, r3, #32
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d009      	beq.n	80066f2 <HAL_UART_IRQHandler+0x66>
 80066de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066e2:	f003 0320 	and.w	r3, r3, #32
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fdc3 	bl	8007276 <UART_Receive_IT>
      return;
 80066f0:	e256      	b.n	8006ba0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80066f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	f000 80de 	beq.w	80068b8 <HAL_UART_IRQHandler+0x22c>
 80066fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006700:	f003 0301 	and.w	r3, r3, #1
 8006704:	2b00      	cmp	r3, #0
 8006706:	d106      	bne.n	8006716 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800670c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006710:	2b00      	cmp	r3, #0
 8006712:	f000 80d1 	beq.w	80068b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00b      	beq.n	800673a <HAL_UART_IRQHandler+0xae>
 8006722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800672a:	2b00      	cmp	r3, #0
 800672c:	d005      	beq.n	800673a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006732:	f043 0201 	orr.w	r2, r3, #1
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800673a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800673e:	f003 0304 	and.w	r3, r3, #4
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00b      	beq.n	800675e <HAL_UART_IRQHandler+0xd2>
 8006746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800674a:	f003 0301 	and.w	r3, r3, #1
 800674e:	2b00      	cmp	r3, #0
 8006750:	d005      	beq.n	800675e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006756:	f043 0202 	orr.w	r2, r3, #2
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800675e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006762:	f003 0302 	and.w	r3, r3, #2
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00b      	beq.n	8006782 <HAL_UART_IRQHandler+0xf6>
 800676a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	2b00      	cmp	r3, #0
 8006774:	d005      	beq.n	8006782 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677a:	f043 0204 	orr.w	r2, r3, #4
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006786:	f003 0308 	and.w	r3, r3, #8
 800678a:	2b00      	cmp	r3, #0
 800678c:	d011      	beq.n	80067b2 <HAL_UART_IRQHandler+0x126>
 800678e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006792:	f003 0320 	and.w	r3, r3, #32
 8006796:	2b00      	cmp	r3, #0
 8006798:	d105      	bne.n	80067a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800679a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800679e:	f003 0301 	and.w	r3, r3, #1
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d005      	beq.n	80067b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067aa:	f043 0208 	orr.w	r2, r3, #8
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f000 81ed 	beq.w	8006b96 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80067bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067c0:	f003 0320 	and.w	r3, r3, #32
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d008      	beq.n	80067da <HAL_UART_IRQHandler+0x14e>
 80067c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067cc:	f003 0320 	and.w	r3, r3, #32
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d002      	beq.n	80067da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 fd4e 	bl	8007276 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e4:	2b40      	cmp	r3, #64	; 0x40
 80067e6:	bf0c      	ite	eq
 80067e8:	2301      	moveq	r3, #1
 80067ea:	2300      	movne	r3, #0
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f6:	f003 0308 	and.w	r3, r3, #8
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d103      	bne.n	8006806 <HAL_UART_IRQHandler+0x17a>
 80067fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006802:	2b00      	cmp	r3, #0
 8006804:	d04f      	beq.n	80068a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 fc56 	bl	80070b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	695b      	ldr	r3, [r3, #20]
 8006812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006816:	2b40      	cmp	r3, #64	; 0x40
 8006818:	d141      	bne.n	800689e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	3314      	adds	r3, #20
 8006820:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006824:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006828:	e853 3f00 	ldrex	r3, [r3]
 800682c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006830:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006834:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006838:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	3314      	adds	r3, #20
 8006842:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006846:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800684a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006852:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006856:	e841 2300 	strex	r3, r2, [r1]
 800685a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800685e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1d9      	bne.n	800681a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800686a:	2b00      	cmp	r3, #0
 800686c:	d013      	beq.n	8006896 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006872:	4a7d      	ldr	r2, [pc, #500]	; (8006a68 <HAL_UART_IRQHandler+0x3dc>)
 8006874:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687a:	4618      	mov	r0, r3
 800687c:	f7fd fefe 	bl	800467c <HAL_DMA_Abort_IT>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d016      	beq.n	80068b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800688a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006890:	4610      	mov	r0, r2
 8006892:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006894:	e00e      	b.n	80068b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f99a 	bl	8006bd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800689c:	e00a      	b.n	80068b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 f996 	bl	8006bd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068a4:	e006      	b.n	80068b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f992 	bl	8006bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80068b2:	e170      	b.n	8006b96 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068b4:	bf00      	nop
    return;
 80068b6:	e16e      	b.n	8006b96 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068bc:	2b01      	cmp	r3, #1
 80068be:	f040 814a 	bne.w	8006b56 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80068c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068c6:	f003 0310 	and.w	r3, r3, #16
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f000 8143 	beq.w	8006b56 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80068d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068d4:	f003 0310 	and.w	r3, r3, #16
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f000 813c 	beq.w	8006b56 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068de:	2300      	movs	r3, #0
 80068e0:	60bb      	str	r3, [r7, #8]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	60bb      	str	r3, [r7, #8]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	60bb      	str	r3, [r7, #8]
 80068f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	695b      	ldr	r3, [r3, #20]
 80068fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068fe:	2b40      	cmp	r3, #64	; 0x40
 8006900:	f040 80b4 	bne.w	8006a6c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006910:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006914:	2b00      	cmp	r3, #0
 8006916:	f000 8140 	beq.w	8006b9a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800691e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006922:	429a      	cmp	r2, r3
 8006924:	f080 8139 	bcs.w	8006b9a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800692e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006934:	69db      	ldr	r3, [r3, #28]
 8006936:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800693a:	f000 8088 	beq.w	8006a4e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	330c      	adds	r3, #12
 8006944:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006948:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800694c:	e853 3f00 	ldrex	r3, [r3]
 8006950:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006954:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006958:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800695c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	330c      	adds	r3, #12
 8006966:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800696a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800696e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006972:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006976:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800697a:	e841 2300 	strex	r3, r2, [r1]
 800697e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006982:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1d9      	bne.n	800693e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	3314      	adds	r3, #20
 8006990:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006992:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006994:	e853 3f00 	ldrex	r3, [r3]
 8006998:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800699a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800699c:	f023 0301 	bic.w	r3, r3, #1
 80069a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	3314      	adds	r3, #20
 80069aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80069ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80069b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80069b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80069ba:	e841 2300 	strex	r3, r2, [r1]
 80069be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80069c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1e1      	bne.n	800698a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	3314      	adds	r3, #20
 80069cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069d0:	e853 3f00 	ldrex	r3, [r3]
 80069d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80069d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	3314      	adds	r3, #20
 80069e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80069ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80069ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80069f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80069f2:	e841 2300 	strex	r3, r2, [r1]
 80069f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80069f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1e3      	bne.n	80069c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2220      	movs	r2, #32
 8006a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	330c      	adds	r3, #12
 8006a12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a16:	e853 3f00 	ldrex	r3, [r3]
 8006a1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a1e:	f023 0310 	bic.w	r3, r3, #16
 8006a22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	330c      	adds	r3, #12
 8006a2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006a30:	65ba      	str	r2, [r7, #88]	; 0x58
 8006a32:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a38:	e841 2300 	strex	r3, r2, [r1]
 8006a3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1e3      	bne.n	8006a0c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7fd fda7 	bl	800459c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f7fd f94c 	bl	8003cfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a64:	e099      	b.n	8006b9a <HAL_UART_IRQHandler+0x50e>
 8006a66:	bf00      	nop
 8006a68:	0800717f 	.word	0x0800717f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f000 808b 	beq.w	8006b9e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006a88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f000 8086 	beq.w	8006b9e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	330c      	adds	r3, #12
 8006a98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9c:	e853 3f00 	ldrex	r3, [r3]
 8006aa0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006aa8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	330c      	adds	r3, #12
 8006ab2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006ab6:	647a      	str	r2, [r7, #68]	; 0x44
 8006ab8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006abc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006abe:	e841 2300 	strex	r3, r2, [r1]
 8006ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1e3      	bne.n	8006a92 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	3314      	adds	r3, #20
 8006ad0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad4:	e853 3f00 	ldrex	r3, [r3]
 8006ad8:	623b      	str	r3, [r7, #32]
   return(result);
 8006ada:	6a3b      	ldr	r3, [r7, #32]
 8006adc:	f023 0301 	bic.w	r3, r3, #1
 8006ae0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	3314      	adds	r3, #20
 8006aea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006aee:	633a      	str	r2, [r7, #48]	; 0x30
 8006af0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006af4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006af6:	e841 2300 	strex	r3, r2, [r1]
 8006afa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1e3      	bne.n	8006aca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2220      	movs	r2, #32
 8006b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	330c      	adds	r3, #12
 8006b16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	e853 3f00 	ldrex	r3, [r3]
 8006b1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f023 0310 	bic.w	r3, r3, #16
 8006b26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	330c      	adds	r3, #12
 8006b30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006b34:	61fa      	str	r2, [r7, #28]
 8006b36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b38:	69b9      	ldr	r1, [r7, #24]
 8006b3a:	69fa      	ldr	r2, [r7, #28]
 8006b3c:	e841 2300 	strex	r3, r2, [r1]
 8006b40:	617b      	str	r3, [r7, #20]
   return(result);
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1e3      	bne.n	8006b10 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f7fd f8d4 	bl	8003cfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b54:	e023      	b.n	8006b9e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d009      	beq.n	8006b76 <HAL_UART_IRQHandler+0x4ea>
 8006b62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d003      	beq.n	8006b76 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fb19 	bl	80071a6 <UART_Transmit_IT>
    return;
 8006b74:	e014      	b.n	8006ba0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00e      	beq.n	8006ba0 <HAL_UART_IRQHandler+0x514>
 8006b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d008      	beq.n	8006ba0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 fb59 	bl	8007246 <UART_EndTransmit_IT>
    return;
 8006b94:	e004      	b.n	8006ba0 <HAL_UART_IRQHandler+0x514>
    return;
 8006b96:	bf00      	nop
 8006b98:	e002      	b.n	8006ba0 <HAL_UART_IRQHandler+0x514>
      return;
 8006b9a:	bf00      	nop
 8006b9c:	e000      	b.n	8006ba0 <HAL_UART_IRQHandler+0x514>
      return;
 8006b9e:	bf00      	nop
  }
}
 8006ba0:	37e8      	adds	r7, #232	; 0xe8
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop

08006ba8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006bc4:	bf00      	nop
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b09c      	sub	sp, #112	; 0x70
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf0:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d172      	bne.n	8006ce6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c02:	2200      	movs	r2, #0
 8006c04:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	330c      	adds	r3, #12
 8006c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c10:	e853 3f00 	ldrex	r3, [r3]
 8006c14:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	330c      	adds	r3, #12
 8006c24:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c26:	65ba      	str	r2, [r7, #88]	; 0x58
 8006c28:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c2e:	e841 2300 	strex	r3, r2, [r1]
 8006c32:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1e5      	bne.n	8006c06 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	3314      	adds	r3, #20
 8006c40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c44:	e853 3f00 	ldrex	r3, [r3]
 8006c48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c4c:	f023 0301 	bic.w	r3, r3, #1
 8006c50:	667b      	str	r3, [r7, #100]	; 0x64
 8006c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	3314      	adds	r3, #20
 8006c58:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006c5a:	647a      	str	r2, [r7, #68]	; 0x44
 8006c5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c62:	e841 2300 	strex	r3, r2, [r1]
 8006c66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1e5      	bne.n	8006c3a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	3314      	adds	r3, #20
 8006c74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c78:	e853 3f00 	ldrex	r3, [r3]
 8006c7c:	623b      	str	r3, [r7, #32]
   return(result);
 8006c7e:	6a3b      	ldr	r3, [r7, #32]
 8006c80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c84:	663b      	str	r3, [r7, #96]	; 0x60
 8006c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	3314      	adds	r3, #20
 8006c8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c8e:	633a      	str	r2, [r7, #48]	; 0x30
 8006c90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c96:	e841 2300 	strex	r3, r2, [r1]
 8006c9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1e5      	bne.n	8006c6e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d119      	bne.n	8006ce6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	330c      	adds	r3, #12
 8006cb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	e853 3f00 	ldrex	r3, [r3]
 8006cc0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f023 0310 	bic.w	r3, r3, #16
 8006cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	330c      	adds	r3, #12
 8006cd0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006cd2:	61fa      	str	r2, [r7, #28]
 8006cd4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd6:	69b9      	ldr	r1, [r7, #24]
 8006cd8:	69fa      	ldr	r2, [r7, #28]
 8006cda:	e841 2300 	strex	r3, r2, [r1]
 8006cde:	617b      	str	r3, [r7, #20]
   return(result);
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1e5      	bne.n	8006cb2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d106      	bne.n	8006cfc <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cf0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006cf6:	f7fd f801 	bl	8003cfc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006cfa:	e002      	b.n	8006d02 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006cfc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006cfe:	f7fd f867 	bl	8003dd0 <HAL_UART_RxCpltCallback>
}
 8006d02:	bf00      	nop
 8006d04:	3770      	adds	r7, #112	; 0x70
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b084      	sub	sp, #16
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d16:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d108      	bne.n	8006d32 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d24:	085b      	lsrs	r3, r3, #1
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	4619      	mov	r1, r3
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f7fc ffe6 	bl	8003cfc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d30:	e002      	b.n	8006d38 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	f7ff ff42 	bl	8006bbc <HAL_UART_RxHalfCpltCallback>
}
 8006d38:	bf00      	nop
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d50:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	695b      	ldr	r3, [r3, #20]
 8006d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d5c:	2b80      	cmp	r3, #128	; 0x80
 8006d5e:	bf0c      	ite	eq
 8006d60:	2301      	moveq	r3, #1
 8006d62:	2300      	movne	r3, #0
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	2b21      	cmp	r3, #33	; 0x21
 8006d72:	d108      	bne.n	8006d86 <UART_DMAError+0x46>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d005      	beq.n	8006d86 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006d80:	68b8      	ldr	r0, [r7, #8]
 8006d82:	f000 f971 	bl	8007068 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	695b      	ldr	r3, [r3, #20]
 8006d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d90:	2b40      	cmp	r3, #64	; 0x40
 8006d92:	bf0c      	ite	eq
 8006d94:	2301      	moveq	r3, #1
 8006d96:	2300      	movne	r3, #0
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	2b22      	cmp	r3, #34	; 0x22
 8006da6:	d108      	bne.n	8006dba <UART_DMAError+0x7a>
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d005      	beq.n	8006dba <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	2200      	movs	r2, #0
 8006db2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006db4:	68b8      	ldr	r0, [r7, #8]
 8006db6:	f000 f97f 	bl	80070b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dbe:	f043 0210 	orr.w	r2, r3, #16
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006dc6:	68b8      	ldr	r0, [r7, #8]
 8006dc8:	f7ff ff02 	bl	8006bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dcc:	bf00      	nop
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b090      	sub	sp, #64	; 0x40
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	603b      	str	r3, [r7, #0]
 8006de0:	4613      	mov	r3, r2
 8006de2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006de4:	e050      	b.n	8006e88 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dec:	d04c      	beq.n	8006e88 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006dee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d007      	beq.n	8006e04 <UART_WaitOnFlagUntilTimeout+0x30>
 8006df4:	f7fd f9de 	bl	80041b4 <HAL_GetTick>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	1ad3      	subs	r3, r2, r3
 8006dfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d241      	bcs.n	8006e88 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	330c      	adds	r3, #12
 8006e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e0e:	e853 3f00 	ldrex	r3, [r3]
 8006e12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	330c      	adds	r3, #12
 8006e22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e24:	637a      	str	r2, [r7, #52]	; 0x34
 8006e26:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e2c:	e841 2300 	strex	r3, r2, [r1]
 8006e30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1e5      	bne.n	8006e04 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3314      	adds	r3, #20
 8006e3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	e853 3f00 	ldrex	r3, [r3]
 8006e46:	613b      	str	r3, [r7, #16]
   return(result);
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	f023 0301 	bic.w	r3, r3, #1
 8006e4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	3314      	adds	r3, #20
 8006e56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e58:	623a      	str	r2, [r7, #32]
 8006e5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5c:	69f9      	ldr	r1, [r7, #28]
 8006e5e:	6a3a      	ldr	r2, [r7, #32]
 8006e60:	e841 2300 	strex	r3, r2, [r1]
 8006e64:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1e5      	bne.n	8006e38 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2220      	movs	r2, #32
 8006e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2220      	movs	r2, #32
 8006e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e00f      	b.n	8006ea8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	4013      	ands	r3, r2
 8006e92:	68ba      	ldr	r2, [r7, #8]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	bf0c      	ite	eq
 8006e98:	2301      	moveq	r3, #1
 8006e9a:	2300      	movne	r3, #0
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	79fb      	ldrb	r3, [r7, #7]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d09f      	beq.n	8006de6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3740      	adds	r7, #64	; 0x40
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	68ba      	ldr	r2, [r7, #8]
 8006ec2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	88fa      	ldrh	r2, [r7, #6]
 8006ec8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	88fa      	ldrh	r2, [r7, #6]
 8006ece:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2222      	movs	r2, #34	; 0x22
 8006eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d007      	beq.n	8006efe <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68da      	ldr	r2, [r3, #12]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006efc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	695a      	ldr	r2, [r3, #20]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f042 0201 	orr.w	r2, r2, #1
 8006f0c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68da      	ldr	r2, [r3, #12]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f042 0220 	orr.w	r2, r2, #32
 8006f1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3714      	adds	r7, #20
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b098      	sub	sp, #96	; 0x60
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	4613      	mov	r3, r2
 8006f38:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	88fa      	ldrh	r2, [r7, #6]
 8006f44:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2222      	movs	r2, #34	; 0x22
 8006f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f58:	4a40      	ldr	r2, [pc, #256]	; (800705c <UART_Start_Receive_DMA+0x130>)
 8006f5a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f60:	4a3f      	ldr	r2, [pc, #252]	; (8007060 <UART_Start_Receive_DMA+0x134>)
 8006f62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f68:	4a3e      	ldr	r2, [pc, #248]	; (8007064 <UART_Start_Receive_DMA+0x138>)
 8006f6a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f70:	2200      	movs	r2, #0
 8006f72:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006f74:	f107 0308 	add.w	r3, r7, #8
 8006f78:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	3304      	adds	r3, #4
 8006f84:	4619      	mov	r1, r3
 8006f86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	88fb      	ldrh	r3, [r7, #6]
 8006f8c:	f7fd faae 	bl	80044ec <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006f90:	2300      	movs	r3, #0
 8006f92:	613b      	str	r3, [r7, #16]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	613b      	str	r3, [r7, #16]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	613b      	str	r3, [r7, #16]
 8006fa4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d019      	beq.n	8006fea <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	330c      	adds	r3, #12
 8006fbc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fc0:	e853 3f00 	ldrex	r3, [r3]
 8006fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fcc:	65bb      	str	r3, [r7, #88]	; 0x58
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	330c      	adds	r3, #12
 8006fd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fd6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006fd8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fda:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006fdc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006fde:	e841 2300 	strex	r3, r2, [r1]
 8006fe2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1e5      	bne.n	8006fb6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	3314      	adds	r3, #20
 8006ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff4:	e853 3f00 	ldrex	r3, [r3]
 8006ff8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffc:	f043 0301 	orr.w	r3, r3, #1
 8007000:	657b      	str	r3, [r7, #84]	; 0x54
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	3314      	adds	r3, #20
 8007008:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800700a:	63ba      	str	r2, [r7, #56]	; 0x38
 800700c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007010:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007012:	e841 2300 	strex	r3, r2, [r1]
 8007016:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1e5      	bne.n	8006fea <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	3314      	adds	r3, #20
 8007024:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	e853 3f00 	ldrex	r3, [r3]
 800702c:	617b      	str	r3, [r7, #20]
   return(result);
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007034:	653b      	str	r3, [r7, #80]	; 0x50
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	3314      	adds	r3, #20
 800703c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800703e:	627a      	str	r2, [r7, #36]	; 0x24
 8007040:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007042:	6a39      	ldr	r1, [r7, #32]
 8007044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007046:	e841 2300 	strex	r3, r2, [r1]
 800704a:	61fb      	str	r3, [r7, #28]
   return(result);
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1e5      	bne.n	800701e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3760      	adds	r7, #96	; 0x60
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	08006be5 	.word	0x08006be5
 8007060:	08006d0b 	.word	0x08006d0b
 8007064:	08006d41 	.word	0x08006d41

08007068 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007068:	b480      	push	{r7}
 800706a:	b089      	sub	sp, #36	; 0x24
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	330c      	adds	r3, #12
 8007076:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	e853 3f00 	ldrex	r3, [r3]
 800707e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007086:	61fb      	str	r3, [r7, #28]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	330c      	adds	r3, #12
 800708e:	69fa      	ldr	r2, [r7, #28]
 8007090:	61ba      	str	r2, [r7, #24]
 8007092:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007094:	6979      	ldr	r1, [r7, #20]
 8007096:	69ba      	ldr	r2, [r7, #24]
 8007098:	e841 2300 	strex	r3, r2, [r1]
 800709c:	613b      	str	r3, [r7, #16]
   return(result);
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d1e5      	bne.n	8007070 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2220      	movs	r2, #32
 80070a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80070ac:	bf00      	nop
 80070ae:	3724      	adds	r7, #36	; 0x24
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b095      	sub	sp, #84	; 0x54
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	330c      	adds	r3, #12
 80070c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ca:	e853 3f00 	ldrex	r3, [r3]
 80070ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80070d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	330c      	adds	r3, #12
 80070de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80070e0:	643a      	str	r2, [r7, #64]	; 0x40
 80070e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80070e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070e8:	e841 2300 	strex	r3, r2, [r1]
 80070ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d1e5      	bne.n	80070c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	3314      	adds	r3, #20
 80070fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fc:	6a3b      	ldr	r3, [r7, #32]
 80070fe:	e853 3f00 	ldrex	r3, [r3]
 8007102:	61fb      	str	r3, [r7, #28]
   return(result);
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	f023 0301 	bic.w	r3, r3, #1
 800710a:	64bb      	str	r3, [r7, #72]	; 0x48
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	3314      	adds	r3, #20
 8007112:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007114:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007116:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007118:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800711a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800711c:	e841 2300 	strex	r3, r2, [r1]
 8007120:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007124:	2b00      	cmp	r3, #0
 8007126:	d1e5      	bne.n	80070f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712c:	2b01      	cmp	r3, #1
 800712e:	d119      	bne.n	8007164 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	330c      	adds	r3, #12
 8007136:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	e853 3f00 	ldrex	r3, [r3]
 800713e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	f023 0310 	bic.w	r3, r3, #16
 8007146:	647b      	str	r3, [r7, #68]	; 0x44
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	330c      	adds	r3, #12
 800714e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007150:	61ba      	str	r2, [r7, #24]
 8007152:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007154:	6979      	ldr	r1, [r7, #20]
 8007156:	69ba      	ldr	r2, [r7, #24]
 8007158:	e841 2300 	strex	r3, r2, [r1]
 800715c:	613b      	str	r3, [r7, #16]
   return(result);
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d1e5      	bne.n	8007130 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2220      	movs	r2, #32
 8007168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007172:	bf00      	nop
 8007174:	3754      	adds	r7, #84	; 0x54
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr

0800717e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800717e:	b580      	push	{r7, lr}
 8007180:	b084      	sub	sp, #16
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f7ff fd19 	bl	8006bd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800719e:	bf00      	nop
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80071a6:	b480      	push	{r7}
 80071a8:	b085      	sub	sp, #20
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b21      	cmp	r3, #33	; 0x21
 80071b8:	d13e      	bne.n	8007238 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071c2:	d114      	bne.n	80071ee <UART_Transmit_IT+0x48>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d110      	bne.n	80071ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a1b      	ldr	r3, [r3, #32]
 80071d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	881b      	ldrh	r3, [r3, #0]
 80071d6:	461a      	mov	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a1b      	ldr	r3, [r3, #32]
 80071e6:	1c9a      	adds	r2, r3, #2
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	621a      	str	r2, [r3, #32]
 80071ec:	e008      	b.n	8007200 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a1b      	ldr	r3, [r3, #32]
 80071f2:	1c59      	adds	r1, r3, #1
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	6211      	str	r1, [r2, #32]
 80071f8:	781a      	ldrb	r2, [r3, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007204:	b29b      	uxth	r3, r3
 8007206:	3b01      	subs	r3, #1
 8007208:	b29b      	uxth	r3, r3
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	4619      	mov	r1, r3
 800720e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10f      	bne.n	8007234 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	68da      	ldr	r2, [r3, #12]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007222:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68da      	ldr	r2, [r3, #12]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007232:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007234:	2300      	movs	r3, #0
 8007236:	e000      	b.n	800723a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007238:	2302      	movs	r3, #2
  }
}
 800723a:	4618      	mov	r0, r3
 800723c:	3714      	adds	r7, #20
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr

08007246 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007246:	b580      	push	{r7, lr}
 8007248:	b082      	sub	sp, #8
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68da      	ldr	r2, [r3, #12]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800725c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2220      	movs	r2, #32
 8007262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f7ff fc9e 	bl	8006ba8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3708      	adds	r7, #8
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b08c      	sub	sp, #48	; 0x30
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007284:	b2db      	uxtb	r3, r3
 8007286:	2b22      	cmp	r3, #34	; 0x22
 8007288:	f040 80ab 	bne.w	80073e2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007294:	d117      	bne.n	80072c6 <UART_Receive_IT+0x50>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d113      	bne.n	80072c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800729e:	2300      	movs	r3, #0
 80072a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072b4:	b29a      	uxth	r2, r3
 80072b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072be:	1c9a      	adds	r2, r3, #2
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	629a      	str	r2, [r3, #40]	; 0x28
 80072c4:	e026      	b.n	8007314 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80072cc:	2300      	movs	r3, #0
 80072ce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072d8:	d007      	beq.n	80072ea <UART_Receive_IT+0x74>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d10a      	bne.n	80072f8 <UART_Receive_IT+0x82>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d106      	bne.n	80072f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	b2da      	uxtb	r2, r3
 80072f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f4:	701a      	strb	r2, [r3, #0]
 80072f6:	e008      	b.n	800730a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007304:	b2da      	uxtb	r2, r3
 8007306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007308:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730e:	1c5a      	adds	r2, r3, #1
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007318:	b29b      	uxth	r3, r3
 800731a:	3b01      	subs	r3, #1
 800731c:	b29b      	uxth	r3, r3
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	4619      	mov	r1, r3
 8007322:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007324:	2b00      	cmp	r3, #0
 8007326:	d15a      	bne.n	80073de <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68da      	ldr	r2, [r3, #12]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f022 0220 	bic.w	r2, r2, #32
 8007336:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68da      	ldr	r2, [r3, #12]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007346:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	695a      	ldr	r2, [r3, #20]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f022 0201 	bic.w	r2, r2, #1
 8007356:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2220      	movs	r2, #32
 800735c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007364:	2b01      	cmp	r3, #1
 8007366:	d135      	bne.n	80073d4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	330c      	adds	r3, #12
 8007374:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	e853 3f00 	ldrex	r3, [r3]
 800737c:	613b      	str	r3, [r7, #16]
   return(result);
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	f023 0310 	bic.w	r3, r3, #16
 8007384:	627b      	str	r3, [r7, #36]	; 0x24
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	330c      	adds	r3, #12
 800738c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800738e:	623a      	str	r2, [r7, #32]
 8007390:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007392:	69f9      	ldr	r1, [r7, #28]
 8007394:	6a3a      	ldr	r2, [r7, #32]
 8007396:	e841 2300 	strex	r3, r2, [r1]
 800739a:	61bb      	str	r3, [r7, #24]
   return(result);
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1e5      	bne.n	800736e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0310 	and.w	r3, r3, #16
 80073ac:	2b10      	cmp	r3, #16
 80073ae:	d10a      	bne.n	80073c6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073b0:	2300      	movs	r3, #0
 80073b2:	60fb      	str	r3, [r7, #12]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	60fb      	str	r3, [r7, #12]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	60fb      	str	r3, [r7, #12]
 80073c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80073ca:	4619      	mov	r1, r3
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f7fc fc95 	bl	8003cfc <HAL_UARTEx_RxEventCallback>
 80073d2:	e002      	b.n	80073da <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f7fc fcfb 	bl	8003dd0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	e002      	b.n	80073e4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80073de:	2300      	movs	r3, #0
 80073e0:	e000      	b.n	80073e4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80073e2:	2302      	movs	r3, #2
  }
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3730      	adds	r7, #48	; 0x30
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073f0:	b0c0      	sub	sp, #256	; 0x100
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007408:	68d9      	ldr	r1, [r3, #12]
 800740a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	ea40 0301 	orr.w	r3, r0, r1
 8007414:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800741a:	689a      	ldr	r2, [r3, #8]
 800741c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	431a      	orrs	r2, r3
 8007424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	431a      	orrs	r2, r3
 800742c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007430:	69db      	ldr	r3, [r3, #28]
 8007432:	4313      	orrs	r3, r2
 8007434:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007444:	f021 010c 	bic.w	r1, r1, #12
 8007448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007452:	430b      	orrs	r3, r1
 8007454:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	695b      	ldr	r3, [r3, #20]
 800745e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007466:	6999      	ldr	r1, [r3, #24]
 8007468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	ea40 0301 	orr.w	r3, r0, r1
 8007472:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	4b8f      	ldr	r3, [pc, #572]	; (80076b8 <UART_SetConfig+0x2cc>)
 800747c:	429a      	cmp	r2, r3
 800747e:	d005      	beq.n	800748c <UART_SetConfig+0xa0>
 8007480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	4b8d      	ldr	r3, [pc, #564]	; (80076bc <UART_SetConfig+0x2d0>)
 8007488:	429a      	cmp	r2, r3
 800748a:	d104      	bne.n	8007496 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800748c:	f7fe f9dc 	bl	8005848 <HAL_RCC_GetPCLK2Freq>
 8007490:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007494:	e003      	b.n	800749e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007496:	f7fe f9c3 	bl	8005820 <HAL_RCC_GetPCLK1Freq>
 800749a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800749e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074a2:	69db      	ldr	r3, [r3, #28]
 80074a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074a8:	f040 810c 	bne.w	80076c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80074ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074b0:	2200      	movs	r2, #0
 80074b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80074b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80074ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80074be:	4622      	mov	r2, r4
 80074c0:	462b      	mov	r3, r5
 80074c2:	1891      	adds	r1, r2, r2
 80074c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80074c6:	415b      	adcs	r3, r3
 80074c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80074ce:	4621      	mov	r1, r4
 80074d0:	eb12 0801 	adds.w	r8, r2, r1
 80074d4:	4629      	mov	r1, r5
 80074d6:	eb43 0901 	adc.w	r9, r3, r1
 80074da:	f04f 0200 	mov.w	r2, #0
 80074de:	f04f 0300 	mov.w	r3, #0
 80074e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80074e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80074ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80074ee:	4690      	mov	r8, r2
 80074f0:	4699      	mov	r9, r3
 80074f2:	4623      	mov	r3, r4
 80074f4:	eb18 0303 	adds.w	r3, r8, r3
 80074f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80074fc:	462b      	mov	r3, r5
 80074fe:	eb49 0303 	adc.w	r3, r9, r3
 8007502:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007512:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007516:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800751a:	460b      	mov	r3, r1
 800751c:	18db      	adds	r3, r3, r3
 800751e:	653b      	str	r3, [r7, #80]	; 0x50
 8007520:	4613      	mov	r3, r2
 8007522:	eb42 0303 	adc.w	r3, r2, r3
 8007526:	657b      	str	r3, [r7, #84]	; 0x54
 8007528:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800752c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007530:	f7f9 fb6a 	bl	8000c08 <__aeabi_uldivmod>
 8007534:	4602      	mov	r2, r0
 8007536:	460b      	mov	r3, r1
 8007538:	4b61      	ldr	r3, [pc, #388]	; (80076c0 <UART_SetConfig+0x2d4>)
 800753a:	fba3 2302 	umull	r2, r3, r3, r2
 800753e:	095b      	lsrs	r3, r3, #5
 8007540:	011c      	lsls	r4, r3, #4
 8007542:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007546:	2200      	movs	r2, #0
 8007548:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800754c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007550:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007554:	4642      	mov	r2, r8
 8007556:	464b      	mov	r3, r9
 8007558:	1891      	adds	r1, r2, r2
 800755a:	64b9      	str	r1, [r7, #72]	; 0x48
 800755c:	415b      	adcs	r3, r3
 800755e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007560:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007564:	4641      	mov	r1, r8
 8007566:	eb12 0a01 	adds.w	sl, r2, r1
 800756a:	4649      	mov	r1, r9
 800756c:	eb43 0b01 	adc.w	fp, r3, r1
 8007570:	f04f 0200 	mov.w	r2, #0
 8007574:	f04f 0300 	mov.w	r3, #0
 8007578:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800757c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007580:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007584:	4692      	mov	sl, r2
 8007586:	469b      	mov	fp, r3
 8007588:	4643      	mov	r3, r8
 800758a:	eb1a 0303 	adds.w	r3, sl, r3
 800758e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007592:	464b      	mov	r3, r9
 8007594:	eb4b 0303 	adc.w	r3, fp, r3
 8007598:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800759c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80075a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80075ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80075b0:	460b      	mov	r3, r1
 80075b2:	18db      	adds	r3, r3, r3
 80075b4:	643b      	str	r3, [r7, #64]	; 0x40
 80075b6:	4613      	mov	r3, r2
 80075b8:	eb42 0303 	adc.w	r3, r2, r3
 80075bc:	647b      	str	r3, [r7, #68]	; 0x44
 80075be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80075c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80075c6:	f7f9 fb1f 	bl	8000c08 <__aeabi_uldivmod>
 80075ca:	4602      	mov	r2, r0
 80075cc:	460b      	mov	r3, r1
 80075ce:	4611      	mov	r1, r2
 80075d0:	4b3b      	ldr	r3, [pc, #236]	; (80076c0 <UART_SetConfig+0x2d4>)
 80075d2:	fba3 2301 	umull	r2, r3, r3, r1
 80075d6:	095b      	lsrs	r3, r3, #5
 80075d8:	2264      	movs	r2, #100	; 0x64
 80075da:	fb02 f303 	mul.w	r3, r2, r3
 80075de:	1acb      	subs	r3, r1, r3
 80075e0:	00db      	lsls	r3, r3, #3
 80075e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80075e6:	4b36      	ldr	r3, [pc, #216]	; (80076c0 <UART_SetConfig+0x2d4>)
 80075e8:	fba3 2302 	umull	r2, r3, r3, r2
 80075ec:	095b      	lsrs	r3, r3, #5
 80075ee:	005b      	lsls	r3, r3, #1
 80075f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80075f4:	441c      	add	r4, r3
 80075f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075fa:	2200      	movs	r2, #0
 80075fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007600:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007604:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007608:	4642      	mov	r2, r8
 800760a:	464b      	mov	r3, r9
 800760c:	1891      	adds	r1, r2, r2
 800760e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007610:	415b      	adcs	r3, r3
 8007612:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007614:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007618:	4641      	mov	r1, r8
 800761a:	1851      	adds	r1, r2, r1
 800761c:	6339      	str	r1, [r7, #48]	; 0x30
 800761e:	4649      	mov	r1, r9
 8007620:	414b      	adcs	r3, r1
 8007622:	637b      	str	r3, [r7, #52]	; 0x34
 8007624:	f04f 0200 	mov.w	r2, #0
 8007628:	f04f 0300 	mov.w	r3, #0
 800762c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007630:	4659      	mov	r1, fp
 8007632:	00cb      	lsls	r3, r1, #3
 8007634:	4651      	mov	r1, sl
 8007636:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800763a:	4651      	mov	r1, sl
 800763c:	00ca      	lsls	r2, r1, #3
 800763e:	4610      	mov	r0, r2
 8007640:	4619      	mov	r1, r3
 8007642:	4603      	mov	r3, r0
 8007644:	4642      	mov	r2, r8
 8007646:	189b      	adds	r3, r3, r2
 8007648:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800764c:	464b      	mov	r3, r9
 800764e:	460a      	mov	r2, r1
 8007650:	eb42 0303 	adc.w	r3, r2, r3
 8007654:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007664:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007668:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800766c:	460b      	mov	r3, r1
 800766e:	18db      	adds	r3, r3, r3
 8007670:	62bb      	str	r3, [r7, #40]	; 0x28
 8007672:	4613      	mov	r3, r2
 8007674:	eb42 0303 	adc.w	r3, r2, r3
 8007678:	62fb      	str	r3, [r7, #44]	; 0x2c
 800767a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800767e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007682:	f7f9 fac1 	bl	8000c08 <__aeabi_uldivmod>
 8007686:	4602      	mov	r2, r0
 8007688:	460b      	mov	r3, r1
 800768a:	4b0d      	ldr	r3, [pc, #52]	; (80076c0 <UART_SetConfig+0x2d4>)
 800768c:	fba3 1302 	umull	r1, r3, r3, r2
 8007690:	095b      	lsrs	r3, r3, #5
 8007692:	2164      	movs	r1, #100	; 0x64
 8007694:	fb01 f303 	mul.w	r3, r1, r3
 8007698:	1ad3      	subs	r3, r2, r3
 800769a:	00db      	lsls	r3, r3, #3
 800769c:	3332      	adds	r3, #50	; 0x32
 800769e:	4a08      	ldr	r2, [pc, #32]	; (80076c0 <UART_SetConfig+0x2d4>)
 80076a0:	fba2 2303 	umull	r2, r3, r2, r3
 80076a4:	095b      	lsrs	r3, r3, #5
 80076a6:	f003 0207 	and.w	r2, r3, #7
 80076aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4422      	add	r2, r4
 80076b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80076b4:	e105      	b.n	80078c2 <UART_SetConfig+0x4d6>
 80076b6:	bf00      	nop
 80076b8:	40011000 	.word	0x40011000
 80076bc:	40011400 	.word	0x40011400
 80076c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80076c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076c8:	2200      	movs	r2, #0
 80076ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80076ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80076d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80076d6:	4642      	mov	r2, r8
 80076d8:	464b      	mov	r3, r9
 80076da:	1891      	adds	r1, r2, r2
 80076dc:	6239      	str	r1, [r7, #32]
 80076de:	415b      	adcs	r3, r3
 80076e0:	627b      	str	r3, [r7, #36]	; 0x24
 80076e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80076e6:	4641      	mov	r1, r8
 80076e8:	1854      	adds	r4, r2, r1
 80076ea:	4649      	mov	r1, r9
 80076ec:	eb43 0501 	adc.w	r5, r3, r1
 80076f0:	f04f 0200 	mov.w	r2, #0
 80076f4:	f04f 0300 	mov.w	r3, #0
 80076f8:	00eb      	lsls	r3, r5, #3
 80076fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80076fe:	00e2      	lsls	r2, r4, #3
 8007700:	4614      	mov	r4, r2
 8007702:	461d      	mov	r5, r3
 8007704:	4643      	mov	r3, r8
 8007706:	18e3      	adds	r3, r4, r3
 8007708:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800770c:	464b      	mov	r3, r9
 800770e:	eb45 0303 	adc.w	r3, r5, r3
 8007712:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007722:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007726:	f04f 0200 	mov.w	r2, #0
 800772a:	f04f 0300 	mov.w	r3, #0
 800772e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007732:	4629      	mov	r1, r5
 8007734:	008b      	lsls	r3, r1, #2
 8007736:	4621      	mov	r1, r4
 8007738:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800773c:	4621      	mov	r1, r4
 800773e:	008a      	lsls	r2, r1, #2
 8007740:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007744:	f7f9 fa60 	bl	8000c08 <__aeabi_uldivmod>
 8007748:	4602      	mov	r2, r0
 800774a:	460b      	mov	r3, r1
 800774c:	4b60      	ldr	r3, [pc, #384]	; (80078d0 <UART_SetConfig+0x4e4>)
 800774e:	fba3 2302 	umull	r2, r3, r3, r2
 8007752:	095b      	lsrs	r3, r3, #5
 8007754:	011c      	lsls	r4, r3, #4
 8007756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800775a:	2200      	movs	r2, #0
 800775c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007760:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007764:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007768:	4642      	mov	r2, r8
 800776a:	464b      	mov	r3, r9
 800776c:	1891      	adds	r1, r2, r2
 800776e:	61b9      	str	r1, [r7, #24]
 8007770:	415b      	adcs	r3, r3
 8007772:	61fb      	str	r3, [r7, #28]
 8007774:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007778:	4641      	mov	r1, r8
 800777a:	1851      	adds	r1, r2, r1
 800777c:	6139      	str	r1, [r7, #16]
 800777e:	4649      	mov	r1, r9
 8007780:	414b      	adcs	r3, r1
 8007782:	617b      	str	r3, [r7, #20]
 8007784:	f04f 0200 	mov.w	r2, #0
 8007788:	f04f 0300 	mov.w	r3, #0
 800778c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007790:	4659      	mov	r1, fp
 8007792:	00cb      	lsls	r3, r1, #3
 8007794:	4651      	mov	r1, sl
 8007796:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800779a:	4651      	mov	r1, sl
 800779c:	00ca      	lsls	r2, r1, #3
 800779e:	4610      	mov	r0, r2
 80077a0:	4619      	mov	r1, r3
 80077a2:	4603      	mov	r3, r0
 80077a4:	4642      	mov	r2, r8
 80077a6:	189b      	adds	r3, r3, r2
 80077a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80077ac:	464b      	mov	r3, r9
 80077ae:	460a      	mov	r2, r1
 80077b0:	eb42 0303 	adc.w	r3, r2, r3
 80077b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80077b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80077c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80077c4:	f04f 0200 	mov.w	r2, #0
 80077c8:	f04f 0300 	mov.w	r3, #0
 80077cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80077d0:	4649      	mov	r1, r9
 80077d2:	008b      	lsls	r3, r1, #2
 80077d4:	4641      	mov	r1, r8
 80077d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077da:	4641      	mov	r1, r8
 80077dc:	008a      	lsls	r2, r1, #2
 80077de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80077e2:	f7f9 fa11 	bl	8000c08 <__aeabi_uldivmod>
 80077e6:	4602      	mov	r2, r0
 80077e8:	460b      	mov	r3, r1
 80077ea:	4b39      	ldr	r3, [pc, #228]	; (80078d0 <UART_SetConfig+0x4e4>)
 80077ec:	fba3 1302 	umull	r1, r3, r3, r2
 80077f0:	095b      	lsrs	r3, r3, #5
 80077f2:	2164      	movs	r1, #100	; 0x64
 80077f4:	fb01 f303 	mul.w	r3, r1, r3
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	011b      	lsls	r3, r3, #4
 80077fc:	3332      	adds	r3, #50	; 0x32
 80077fe:	4a34      	ldr	r2, [pc, #208]	; (80078d0 <UART_SetConfig+0x4e4>)
 8007800:	fba2 2303 	umull	r2, r3, r2, r3
 8007804:	095b      	lsrs	r3, r3, #5
 8007806:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800780a:	441c      	add	r4, r3
 800780c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007810:	2200      	movs	r2, #0
 8007812:	673b      	str	r3, [r7, #112]	; 0x70
 8007814:	677a      	str	r2, [r7, #116]	; 0x74
 8007816:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800781a:	4642      	mov	r2, r8
 800781c:	464b      	mov	r3, r9
 800781e:	1891      	adds	r1, r2, r2
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	415b      	adcs	r3, r3
 8007824:	60fb      	str	r3, [r7, #12]
 8007826:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800782a:	4641      	mov	r1, r8
 800782c:	1851      	adds	r1, r2, r1
 800782e:	6039      	str	r1, [r7, #0]
 8007830:	4649      	mov	r1, r9
 8007832:	414b      	adcs	r3, r1
 8007834:	607b      	str	r3, [r7, #4]
 8007836:	f04f 0200 	mov.w	r2, #0
 800783a:	f04f 0300 	mov.w	r3, #0
 800783e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007842:	4659      	mov	r1, fp
 8007844:	00cb      	lsls	r3, r1, #3
 8007846:	4651      	mov	r1, sl
 8007848:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800784c:	4651      	mov	r1, sl
 800784e:	00ca      	lsls	r2, r1, #3
 8007850:	4610      	mov	r0, r2
 8007852:	4619      	mov	r1, r3
 8007854:	4603      	mov	r3, r0
 8007856:	4642      	mov	r2, r8
 8007858:	189b      	adds	r3, r3, r2
 800785a:	66bb      	str	r3, [r7, #104]	; 0x68
 800785c:	464b      	mov	r3, r9
 800785e:	460a      	mov	r2, r1
 8007860:	eb42 0303 	adc.w	r3, r2, r3
 8007864:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	663b      	str	r3, [r7, #96]	; 0x60
 8007870:	667a      	str	r2, [r7, #100]	; 0x64
 8007872:	f04f 0200 	mov.w	r2, #0
 8007876:	f04f 0300 	mov.w	r3, #0
 800787a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800787e:	4649      	mov	r1, r9
 8007880:	008b      	lsls	r3, r1, #2
 8007882:	4641      	mov	r1, r8
 8007884:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007888:	4641      	mov	r1, r8
 800788a:	008a      	lsls	r2, r1, #2
 800788c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007890:	f7f9 f9ba 	bl	8000c08 <__aeabi_uldivmod>
 8007894:	4602      	mov	r2, r0
 8007896:	460b      	mov	r3, r1
 8007898:	4b0d      	ldr	r3, [pc, #52]	; (80078d0 <UART_SetConfig+0x4e4>)
 800789a:	fba3 1302 	umull	r1, r3, r3, r2
 800789e:	095b      	lsrs	r3, r3, #5
 80078a0:	2164      	movs	r1, #100	; 0x64
 80078a2:	fb01 f303 	mul.w	r3, r1, r3
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	011b      	lsls	r3, r3, #4
 80078aa:	3332      	adds	r3, #50	; 0x32
 80078ac:	4a08      	ldr	r2, [pc, #32]	; (80078d0 <UART_SetConfig+0x4e4>)
 80078ae:	fba2 2303 	umull	r2, r3, r2, r3
 80078b2:	095b      	lsrs	r3, r3, #5
 80078b4:	f003 020f 	and.w	r2, r3, #15
 80078b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4422      	add	r2, r4
 80078c0:	609a      	str	r2, [r3, #8]
}
 80078c2:	bf00      	nop
 80078c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80078c8:	46bd      	mov	sp, r7
 80078ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078ce:	bf00      	nop
 80078d0:	51eb851f 	.word	0x51eb851f

080078d4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
 80078da:	4603      	mov	r3, r0
 80078dc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80078de:	2300      	movs	r3, #0
 80078e0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80078e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80078e6:	2b84      	cmp	r3, #132	; 0x84
 80078e8:	d005      	beq.n	80078f6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80078ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	4413      	add	r3, r2
 80078f2:	3303      	adds	r3, #3
 80078f4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80078f6:	68fb      	ldr	r3, [r7, #12]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3714      	adds	r7, #20
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800790a:	f3ef 8305 	mrs	r3, IPSR
 800790e:	607b      	str	r3, [r7, #4]
  return(result);
 8007910:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007912:	2b00      	cmp	r3, #0
 8007914:	bf14      	ite	ne
 8007916:	2301      	movne	r3, #1
 8007918:	2300      	moveq	r3, #0
 800791a:	b2db      	uxtb	r3, r3
}
 800791c:	4618      	mov	r0, r3
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800792c:	f001 fcb2 	bl	8009294 <vTaskStartScheduler>
  
  return osOK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	bd80      	pop	{r7, pc}

08007936 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007936:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007938:	b089      	sub	sp, #36	; 0x24
 800793a:	af04      	add	r7, sp, #16
 800793c:	6078      	str	r0, [r7, #4]
 800793e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	695b      	ldr	r3, [r3, #20]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d020      	beq.n	800798a <osThreadCreate+0x54>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	699b      	ldr	r3, [r3, #24]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d01c      	beq.n	800798a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	685c      	ldr	r4, [r3, #4]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681d      	ldr	r5, [r3, #0]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	691e      	ldr	r6, [r3, #16]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007962:	4618      	mov	r0, r3
 8007964:	f7ff ffb6 	bl	80078d4 <makeFreeRtosPriority>
 8007968:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	695b      	ldr	r3, [r3, #20]
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007972:	9202      	str	r2, [sp, #8]
 8007974:	9301      	str	r3, [sp, #4]
 8007976:	9100      	str	r1, [sp, #0]
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	4632      	mov	r2, r6
 800797c:	4629      	mov	r1, r5
 800797e:	4620      	mov	r0, r4
 8007980:	f001 fa00 	bl	8008d84 <xTaskCreateStatic>
 8007984:	4603      	mov	r3, r0
 8007986:	60fb      	str	r3, [r7, #12]
 8007988:	e01c      	b.n	80079c4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	685c      	ldr	r4, [r3, #4]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007996:	b29e      	uxth	r6, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800799e:	4618      	mov	r0, r3
 80079a0:	f7ff ff98 	bl	80078d4 <makeFreeRtosPriority>
 80079a4:	4602      	mov	r2, r0
 80079a6:	f107 030c 	add.w	r3, r7, #12
 80079aa:	9301      	str	r3, [sp, #4]
 80079ac:	9200      	str	r2, [sp, #0]
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	4632      	mov	r2, r6
 80079b2:	4629      	mov	r1, r5
 80079b4:	4620      	mov	r0, r4
 80079b6:	f001 fa42 	bl	8008e3e <xTaskCreate>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d001      	beq.n	80079c4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80079c0:	2300      	movs	r3, #0
 80079c2:	e000      	b.n	80079c6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80079c4:	68fb      	ldr	r3, [r7, #12]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3714      	adds	r7, #20
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080079ce <osThreadSetPriority>:
* @param   priority      new priority value for the thread function.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadSetPriority shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadSetPriority (osThreadId thread_id, osPriority priority)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b082      	sub	sp, #8
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
 80079d6:	460b      	mov	r3, r1
 80079d8:	807b      	strh	r3, [r7, #2]
#if (INCLUDE_vTaskPrioritySet == 1)
  vTaskPrioritySet(thread_id, makeFreeRtosPriority(priority));
 80079da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80079de:	4618      	mov	r0, r3
 80079e0:	f7ff ff78 	bl	80078d4 <makeFreeRtosPriority>
 80079e4:	4603      	mov	r3, r0
 80079e6:	4619      	mov	r1, r3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f001 fba9 	bl	8009140 <vTaskPrioritySet>
  return osOK;
 80079ee:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3708      	adds	r7, #8
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d001      	beq.n	8007a0e <osDelay+0x16>
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	e000      	b.n	8007a10 <osDelay+0x18>
 8007a0e:	2301      	movs	r3, #1
 8007a10:	4618      	mov	r0, r3
 8007a12:	f001 fb61 	bl	80090d8 <vTaskDelay>
  
  return osOK;
 8007a16:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b086      	sub	sp, #24
 8007a24:	af02      	add	r7, sp, #8
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d016      	beq.n	8007a60 <osSemaphoreCreate+0x40>
    if (count == 1) {
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d10a      	bne.n	8007a4e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	2203      	movs	r2, #3
 8007a3e:	9200      	str	r2, [sp, #0]
 8007a40:	2200      	movs	r2, #0
 8007a42:	2100      	movs	r1, #0
 8007a44:	2001      	movs	r0, #1
 8007a46:	f000 faa7 	bl	8007f98 <xQueueGenericCreateStatic>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	e023      	b.n	8007a96 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8007a4e:	6838      	ldr	r0, [r7, #0]
 8007a50:	6839      	ldr	r1, [r7, #0]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	461a      	mov	r2, r3
 8007a58:	f000 fb6f 	bl	800813a <xQueueCreateCountingSemaphoreStatic>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	e01a      	b.n	8007a96 <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d110      	bne.n	8007a88 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 8007a66:	2203      	movs	r2, #3
 8007a68:	2100      	movs	r1, #0
 8007a6a:	2001      	movs	r0, #1
 8007a6c:	f000 fb0c 	bl	8008088 <xQueueGenericCreate>
 8007a70:	60f8      	str	r0, [r7, #12]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d005      	beq.n	8007a84 <osSemaphoreCreate+0x64>
 8007a78:	2300      	movs	r3, #0
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	2100      	movs	r1, #0
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f000 fbc6 	bl	8008210 <xQueueGenericSend>
      return sema;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	e006      	b.n	8007a96 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	683a      	ldr	r2, [r7, #0]
 8007a8c:	4611      	mov	r1, r2
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f000 fb8a 	bl	80081a8 <xQueueCreateCountingSemaphore>
 8007a94:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
	...

08007aa0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007aaa:	2300      	movs	r3, #0
 8007aac:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d101      	bne.n	8007ab8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8007ab4:	2380      	movs	r3, #128	; 0x80
 8007ab6:	e03a      	b.n	8007b2e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac2:	d103      	bne.n	8007acc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8007ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ac8:	60fb      	str	r3, [r7, #12]
 8007aca:	e009      	b.n	8007ae0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d006      	beq.n	8007ae0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d101      	bne.n	8007ae0 <osSemaphoreWait+0x40>
      ticks = 1;
 8007adc:	2301      	movs	r3, #1
 8007ade:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007ae0:	f7ff ff10 	bl	8007904 <inHandlerMode>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d017      	beq.n	8007b1a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007aea:	f107 0308 	add.w	r3, r7, #8
 8007aee:	461a      	mov	r2, r3
 8007af0:	2100      	movs	r1, #0
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 ff9e 	bl	8008a34 <xQueueReceiveFromISR>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d001      	beq.n	8007b02 <osSemaphoreWait+0x62>
      return osErrorOS;
 8007afe:	23ff      	movs	r3, #255	; 0xff
 8007b00:	e015      	b.n	8007b2e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d011      	beq.n	8007b2c <osSemaphoreWait+0x8c>
 8007b08:	4b0b      	ldr	r3, [pc, #44]	; (8007b38 <osSemaphoreWait+0x98>)
 8007b0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b0e:	601a      	str	r2, [r3, #0]
 8007b10:	f3bf 8f4f 	dsb	sy
 8007b14:	f3bf 8f6f 	isb	sy
 8007b18:	e008      	b.n	8007b2c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8007b1a:	68f9      	ldr	r1, [r7, #12]
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 fe7d 	bl	800881c <xQueueSemaphoreTake>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d001      	beq.n	8007b2c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007b28:	23ff      	movs	r3, #255	; 0xff
 8007b2a:	e000      	b.n	8007b2e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	e000ed04 	.word	0xe000ed04

08007b3c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007b44:	2300      	movs	r3, #0
 8007b46:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007b4c:	f7ff feda 	bl	8007904 <inHandlerMode>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d016      	beq.n	8007b84 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007b56:	f107 0308 	add.w	r3, r7, #8
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 fcf0 	bl	8008542 <xQueueGiveFromISR>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d001      	beq.n	8007b6c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8007b68:	23ff      	movs	r3, #255	; 0xff
 8007b6a:	e017      	b.n	8007b9c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d013      	beq.n	8007b9a <osSemaphoreRelease+0x5e>
 8007b72:	4b0c      	ldr	r3, [pc, #48]	; (8007ba4 <osSemaphoreRelease+0x68>)
 8007b74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b78:	601a      	str	r2, [r3, #0]
 8007b7a:	f3bf 8f4f 	dsb	sy
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	e00a      	b.n	8007b9a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007b84:	2300      	movs	r3, #0
 8007b86:	2200      	movs	r2, #0
 8007b88:	2100      	movs	r1, #0
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 fb40 	bl	8008210 <xQueueGenericSend>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d001      	beq.n	8007b9a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8007b96:	23ff      	movs	r3, #255	; 0xff
 8007b98:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	e000ed04 	.word	0xe000ed04

08007ba8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007ba8:	b590      	push	{r4, r7, lr}
 8007baa:	b085      	sub	sp, #20
 8007bac:	af02      	add	r7, sp, #8
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d011      	beq.n	8007bde <osMessageCreate+0x36>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00d      	beq.n	8007bde <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6818      	ldr	r0, [r3, #0]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6859      	ldr	r1, [r3, #4]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	689a      	ldr	r2, [r3, #8]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	2400      	movs	r4, #0
 8007bd4:	9400      	str	r4, [sp, #0]
 8007bd6:	f000 f9df 	bl	8007f98 <xQueueGenericCreateStatic>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	e008      	b.n	8007bf0 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6818      	ldr	r0, [r3, #0]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	4619      	mov	r1, r3
 8007bea:	f000 fa4d 	bl	8008088 <xQueueGenericCreate>
 8007bee:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	370c      	adds	r7, #12
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd90      	pop	{r4, r7, pc}

08007bf8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b086      	sub	sp, #24
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007c04:	2300      	movs	r3, #0
 8007c06:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d101      	bne.n	8007c16 <osMessagePut+0x1e>
    ticks = 1;
 8007c12:	2301      	movs	r3, #1
 8007c14:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007c16:	f7ff fe75 	bl	8007904 <inHandlerMode>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d018      	beq.n	8007c52 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007c20:	f107 0210 	add.w	r2, r7, #16
 8007c24:	f107 0108 	add.w	r1, r7, #8
 8007c28:	2300      	movs	r3, #0
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	f000 fbee 	bl	800840c <xQueueGenericSendFromISR>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d001      	beq.n	8007c3a <osMessagePut+0x42>
      return osErrorOS;
 8007c36:	23ff      	movs	r3, #255	; 0xff
 8007c38:	e018      	b.n	8007c6c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d014      	beq.n	8007c6a <osMessagePut+0x72>
 8007c40:	4b0c      	ldr	r3, [pc, #48]	; (8007c74 <osMessagePut+0x7c>)
 8007c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c46:	601a      	str	r2, [r3, #0]
 8007c48:	f3bf 8f4f 	dsb	sy
 8007c4c:	f3bf 8f6f 	isb	sy
 8007c50:	e00b      	b.n	8007c6a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8007c52:	f107 0108 	add.w	r1, r7, #8
 8007c56:	2300      	movs	r3, #0
 8007c58:	697a      	ldr	r2, [r7, #20]
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f000 fad8 	bl	8008210 <xQueueGenericSend>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d001      	beq.n	8007c6a <osMessagePut+0x72>
      return osErrorOS;
 8007c66:	23ff      	movs	r3, #255	; 0xff
 8007c68:	e000      	b.n	8007c6c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3718      	adds	r7, #24
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	e000ed04 	.word	0xe000ed04

08007c78 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007c78:	b590      	push	{r4, r7, lr}
 8007c7a:	b08b      	sub	sp, #44	; 0x2c
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d10a      	bne.n	8007ca8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8007c92:	2380      	movs	r3, #128	; 0x80
 8007c94:	617b      	str	r3, [r7, #20]
    return event;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	461c      	mov	r4, r3
 8007c9a:	f107 0314 	add.w	r3, r7, #20
 8007c9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007ca2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007ca6:	e054      	b.n	8007d52 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007cac:	2300      	movs	r3, #0
 8007cae:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cb6:	d103      	bne.n	8007cc0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8007cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8007cbe:	e009      	b.n	8007cd4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d006      	beq.n	8007cd4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8007cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d101      	bne.n	8007cd4 <osMessageGet+0x5c>
      ticks = 1;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007cd4:	f7ff fe16 	bl	8007904 <inHandlerMode>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d01c      	beq.n	8007d18 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007cde:	f107 0220 	add.w	r2, r7, #32
 8007ce2:	f107 0314 	add.w	r3, r7, #20
 8007ce6:	3304      	adds	r3, #4
 8007ce8:	4619      	mov	r1, r3
 8007cea:	68b8      	ldr	r0, [r7, #8]
 8007cec:	f000 fea2 	bl	8008a34 <xQueueReceiveFromISR>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d102      	bne.n	8007cfc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8007cf6:	2310      	movs	r3, #16
 8007cf8:	617b      	str	r3, [r7, #20]
 8007cfa:	e001      	b.n	8007d00 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007d00:	6a3b      	ldr	r3, [r7, #32]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d01d      	beq.n	8007d42 <osMessageGet+0xca>
 8007d06:	4b15      	ldr	r3, [pc, #84]	; (8007d5c <osMessageGet+0xe4>)
 8007d08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d0c:	601a      	str	r2, [r3, #0]
 8007d0e:	f3bf 8f4f 	dsb	sy
 8007d12:	f3bf 8f6f 	isb	sy
 8007d16:	e014      	b.n	8007d42 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007d18:	f107 0314 	add.w	r3, r7, #20
 8007d1c:	3304      	adds	r3, #4
 8007d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d20:	4619      	mov	r1, r3
 8007d22:	68b8      	ldr	r0, [r7, #8]
 8007d24:	f000 fc9a 	bl	800865c <xQueueReceive>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d102      	bne.n	8007d34 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8007d2e:	2310      	movs	r3, #16
 8007d30:	617b      	str	r3, [r7, #20]
 8007d32:	e006      	b.n	8007d42 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d101      	bne.n	8007d3e <osMessageGet+0xc6>
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	e000      	b.n	8007d40 <osMessageGet+0xc8>
 8007d3e:	2340      	movs	r3, #64	; 0x40
 8007d40:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	461c      	mov	r4, r3
 8007d46:	f107 0314 	add.w	r3, r7, #20
 8007d4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007d4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	372c      	adds	r7, #44	; 0x2c
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd90      	pop	{r4, r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	e000ed04 	.word	0xe000ed04

08007d60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f103 0208 	add.w	r2, r3, #8
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f04f 32ff 	mov.w	r2, #4294967295
 8007d78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f103 0208 	add.w	r2, r3, #8
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f103 0208 	add.w	r2, r3, #8
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007dae:	bf00      	nop
 8007db0:	370c      	adds	r7, #12
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b085      	sub	sp, #20
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
 8007dc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	689a      	ldr	r2, [r3, #8]
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	683a      	ldr	r2, [r7, #0]
 8007dde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	683a      	ldr	r2, [r7, #0]
 8007de4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	1c5a      	adds	r2, r3, #1
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	601a      	str	r2, [r3, #0]
}
 8007df6:	bf00      	nop
 8007df8:	3714      	adds	r7, #20
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr

08007e02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e02:	b480      	push	{r7}
 8007e04:	b085      	sub	sp, #20
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
 8007e0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e18:	d103      	bne.n	8007e22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	691b      	ldr	r3, [r3, #16]
 8007e1e:	60fb      	str	r3, [r7, #12]
 8007e20:	e00c      	b.n	8007e3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	3308      	adds	r3, #8
 8007e26:	60fb      	str	r3, [r7, #12]
 8007e28:	e002      	b.n	8007e30 <vListInsert+0x2e>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	60fb      	str	r3, [r7, #12]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	68ba      	ldr	r2, [r7, #8]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d2f6      	bcs.n	8007e2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	685a      	ldr	r2, [r3, #4]
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	683a      	ldr	r2, [r7, #0]
 8007e4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	683a      	ldr	r2, [r7, #0]
 8007e56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	1c5a      	adds	r2, r3, #1
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	601a      	str	r2, [r3, #0]
}
 8007e68:	bf00      	nop
 8007e6a:	3714      	adds	r7, #20
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	6892      	ldr	r2, [r2, #8]
 8007e8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	6852      	ldr	r2, [r2, #4]
 8007e94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d103      	bne.n	8007ea8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	689a      	ldr	r2, [r3, #8]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	1e5a      	subs	r2, r3, #1
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3714      	adds	r7, #20
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d10a      	bne.n	8007ef2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee0:	f383 8811 	msr	BASEPRI, r3
 8007ee4:	f3bf 8f6f 	isb	sy
 8007ee8:	f3bf 8f4f 	dsb	sy
 8007eec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007eee:	bf00      	nop
 8007ef0:	e7fe      	b.n	8007ef0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007ef2:	f002 f92f 	bl	800a154 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007efe:	68f9      	ldr	r1, [r7, #12]
 8007f00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007f02:	fb01 f303 	mul.w	r3, r1, r3
 8007f06:	441a      	add	r2, r3
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f22:	3b01      	subs	r3, #1
 8007f24:	68f9      	ldr	r1, [r7, #12]
 8007f26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007f28:	fb01 f303 	mul.w	r3, r1, r3
 8007f2c:	441a      	add	r2, r3
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	22ff      	movs	r2, #255	; 0xff
 8007f36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	22ff      	movs	r2, #255	; 0xff
 8007f3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d114      	bne.n	8007f72 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d01a      	beq.n	8007f86 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	3310      	adds	r3, #16
 8007f54:	4618      	mov	r0, r3
 8007f56:	f001 fbef 	bl	8009738 <xTaskRemoveFromEventList>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d012      	beq.n	8007f86 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007f60:	4b0c      	ldr	r3, [pc, #48]	; (8007f94 <xQueueGenericReset+0xcc>)
 8007f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f66:	601a      	str	r2, [r3, #0]
 8007f68:	f3bf 8f4f 	dsb	sy
 8007f6c:	f3bf 8f6f 	isb	sy
 8007f70:	e009      	b.n	8007f86 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	3310      	adds	r3, #16
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7ff fef2 	bl	8007d60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	3324      	adds	r3, #36	; 0x24
 8007f80:	4618      	mov	r0, r3
 8007f82:	f7ff feed 	bl	8007d60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007f86:	f002 f915 	bl	800a1b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007f8a:	2301      	movs	r3, #1
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3710      	adds	r7, #16
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	e000ed04 	.word	0xe000ed04

08007f98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b08e      	sub	sp, #56	; 0x38
 8007f9c:	af02      	add	r7, sp, #8
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	607a      	str	r2, [r7, #4]
 8007fa4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d10a      	bne.n	8007fc2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb0:	f383 8811 	msr	BASEPRI, r3
 8007fb4:	f3bf 8f6f 	isb	sy
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007fbe:	bf00      	nop
 8007fc0:	e7fe      	b.n	8007fc0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d10a      	bne.n	8007fde <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fcc:	f383 8811 	msr	BASEPRI, r3
 8007fd0:	f3bf 8f6f 	isb	sy
 8007fd4:	f3bf 8f4f 	dsb	sy
 8007fd8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007fda:	bf00      	nop
 8007fdc:	e7fe      	b.n	8007fdc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d002      	beq.n	8007fea <xQueueGenericCreateStatic+0x52>
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d001      	beq.n	8007fee <xQueueGenericCreateStatic+0x56>
 8007fea:	2301      	movs	r3, #1
 8007fec:	e000      	b.n	8007ff0 <xQueueGenericCreateStatic+0x58>
 8007fee:	2300      	movs	r3, #0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d10a      	bne.n	800800a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff8:	f383 8811 	msr	BASEPRI, r3
 8007ffc:	f3bf 8f6f 	isb	sy
 8008000:	f3bf 8f4f 	dsb	sy
 8008004:	623b      	str	r3, [r7, #32]
}
 8008006:	bf00      	nop
 8008008:	e7fe      	b.n	8008008 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d102      	bne.n	8008016 <xQueueGenericCreateStatic+0x7e>
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d101      	bne.n	800801a <xQueueGenericCreateStatic+0x82>
 8008016:	2301      	movs	r3, #1
 8008018:	e000      	b.n	800801c <xQueueGenericCreateStatic+0x84>
 800801a:	2300      	movs	r3, #0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10a      	bne.n	8008036 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008024:	f383 8811 	msr	BASEPRI, r3
 8008028:	f3bf 8f6f 	isb	sy
 800802c:	f3bf 8f4f 	dsb	sy
 8008030:	61fb      	str	r3, [r7, #28]
}
 8008032:	bf00      	nop
 8008034:	e7fe      	b.n	8008034 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008036:	2348      	movs	r3, #72	; 0x48
 8008038:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	2b48      	cmp	r3, #72	; 0x48
 800803e:	d00a      	beq.n	8008056 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008044:	f383 8811 	msr	BASEPRI, r3
 8008048:	f3bf 8f6f 	isb	sy
 800804c:	f3bf 8f4f 	dsb	sy
 8008050:	61bb      	str	r3, [r7, #24]
}
 8008052:	bf00      	nop
 8008054:	e7fe      	b.n	8008054 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008056:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800805c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00d      	beq.n	800807e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008064:	2201      	movs	r2, #1
 8008066:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800806a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800806e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008070:	9300      	str	r3, [sp, #0]
 8008072:	4613      	mov	r3, r2
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	68b9      	ldr	r1, [r7, #8]
 8008078:	68f8      	ldr	r0, [r7, #12]
 800807a:	f000 f83f 	bl	80080fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800807e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008080:	4618      	mov	r0, r3
 8008082:	3730      	adds	r7, #48	; 0x30
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008088:	b580      	push	{r7, lr}
 800808a:	b08a      	sub	sp, #40	; 0x28
 800808c:	af02      	add	r7, sp, #8
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	4613      	mov	r3, r2
 8008094:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d10a      	bne.n	80080b2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800809c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a0:	f383 8811 	msr	BASEPRI, r3
 80080a4:	f3bf 8f6f 	isb	sy
 80080a8:	f3bf 8f4f 	dsb	sy
 80080ac:	613b      	str	r3, [r7, #16]
}
 80080ae:	bf00      	nop
 80080b0:	e7fe      	b.n	80080b0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	68ba      	ldr	r2, [r7, #8]
 80080b6:	fb02 f303 	mul.w	r3, r2, r3
 80080ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80080bc:	69fb      	ldr	r3, [r7, #28]
 80080be:	3348      	adds	r3, #72	; 0x48
 80080c0:	4618      	mov	r0, r3
 80080c2:	f002 f969 	bl	800a398 <pvPortMalloc>
 80080c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d011      	beq.n	80080f2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	3348      	adds	r3, #72	; 0x48
 80080d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80080e0:	79fa      	ldrb	r2, [r7, #7]
 80080e2:	69bb      	ldr	r3, [r7, #24]
 80080e4:	9300      	str	r3, [sp, #0]
 80080e6:	4613      	mov	r3, r2
 80080e8:	697a      	ldr	r2, [r7, #20]
 80080ea:	68b9      	ldr	r1, [r7, #8]
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f000 f805 	bl	80080fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80080f2:	69bb      	ldr	r3, [r7, #24]
	}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3720      	adds	r7, #32
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	607a      	str	r2, [r7, #4]
 8008108:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d103      	bne.n	8008118 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	69ba      	ldr	r2, [r7, #24]
 8008114:	601a      	str	r2, [r3, #0]
 8008116:	e002      	b.n	800811e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008118:	69bb      	ldr	r3, [r7, #24]
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	68fa      	ldr	r2, [r7, #12]
 8008122:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	68ba      	ldr	r2, [r7, #8]
 8008128:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800812a:	2101      	movs	r1, #1
 800812c:	69b8      	ldr	r0, [r7, #24]
 800812e:	f7ff fecb 	bl	8007ec8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008132:	bf00      	nop
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800813a:	b580      	push	{r7, lr}
 800813c:	b08a      	sub	sp, #40	; 0x28
 800813e:	af02      	add	r7, sp, #8
 8008140:	60f8      	str	r0, [r7, #12]
 8008142:	60b9      	str	r1, [r7, #8]
 8008144:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d10a      	bne.n	8008162 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800814c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008150:	f383 8811 	msr	BASEPRI, r3
 8008154:	f3bf 8f6f 	isb	sy
 8008158:	f3bf 8f4f 	dsb	sy
 800815c:	61bb      	str	r3, [r7, #24]
}
 800815e:	bf00      	nop
 8008160:	e7fe      	b.n	8008160 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008162:	68ba      	ldr	r2, [r7, #8]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	429a      	cmp	r2, r3
 8008168:	d90a      	bls.n	8008180 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800816a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800816e:	f383 8811 	msr	BASEPRI, r3
 8008172:	f3bf 8f6f 	isb	sy
 8008176:	f3bf 8f4f 	dsb	sy
 800817a:	617b      	str	r3, [r7, #20]
}
 800817c:	bf00      	nop
 800817e:	e7fe      	b.n	800817e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008180:	2302      	movs	r3, #2
 8008182:	9300      	str	r3, [sp, #0]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	2100      	movs	r1, #0
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f7ff ff04 	bl	8007f98 <xQueueGenericCreateStatic>
 8008190:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d002      	beq.n	800819e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	68ba      	ldr	r2, [r7, #8]
 800819c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800819e:	69fb      	ldr	r3, [r7, #28]
	}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3720      	adds	r7, #32
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b086      	sub	sp, #24
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d10a      	bne.n	80081ce <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80081b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081bc:	f383 8811 	msr	BASEPRI, r3
 80081c0:	f3bf 8f6f 	isb	sy
 80081c4:	f3bf 8f4f 	dsb	sy
 80081c8:	613b      	str	r3, [r7, #16]
}
 80081ca:	bf00      	nop
 80081cc:	e7fe      	b.n	80081cc <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80081ce:	683a      	ldr	r2, [r7, #0]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d90a      	bls.n	80081ec <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80081d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081da:	f383 8811 	msr	BASEPRI, r3
 80081de:	f3bf 8f6f 	isb	sy
 80081e2:	f3bf 8f4f 	dsb	sy
 80081e6:	60fb      	str	r3, [r7, #12]
}
 80081e8:	bf00      	nop
 80081ea:	e7fe      	b.n	80081ea <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80081ec:	2202      	movs	r2, #2
 80081ee:	2100      	movs	r1, #0
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f7ff ff49 	bl	8008088 <xQueueGenericCreate>
 80081f6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d002      	beq.n	8008204 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	683a      	ldr	r2, [r7, #0]
 8008202:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008204:	697b      	ldr	r3, [r7, #20]
	}
 8008206:	4618      	mov	r0, r3
 8008208:	3718      	adds	r7, #24
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
	...

08008210 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b08e      	sub	sp, #56	; 0x38
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	607a      	str	r2, [r7, #4]
 800821c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800821e:	2300      	movs	r3, #0
 8008220:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008228:	2b00      	cmp	r3, #0
 800822a:	d10a      	bne.n	8008242 <xQueueGenericSend+0x32>
	__asm volatile
 800822c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008230:	f383 8811 	msr	BASEPRI, r3
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800823e:	bf00      	nop
 8008240:	e7fe      	b.n	8008240 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d103      	bne.n	8008250 <xQueueGenericSend+0x40>
 8008248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800824c:	2b00      	cmp	r3, #0
 800824e:	d101      	bne.n	8008254 <xQueueGenericSend+0x44>
 8008250:	2301      	movs	r3, #1
 8008252:	e000      	b.n	8008256 <xQueueGenericSend+0x46>
 8008254:	2300      	movs	r3, #0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d10a      	bne.n	8008270 <xQueueGenericSend+0x60>
	__asm volatile
 800825a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825e:	f383 8811 	msr	BASEPRI, r3
 8008262:	f3bf 8f6f 	isb	sy
 8008266:	f3bf 8f4f 	dsb	sy
 800826a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800826c:	bf00      	nop
 800826e:	e7fe      	b.n	800826e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	2b02      	cmp	r3, #2
 8008274:	d103      	bne.n	800827e <xQueueGenericSend+0x6e>
 8008276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800827a:	2b01      	cmp	r3, #1
 800827c:	d101      	bne.n	8008282 <xQueueGenericSend+0x72>
 800827e:	2301      	movs	r3, #1
 8008280:	e000      	b.n	8008284 <xQueueGenericSend+0x74>
 8008282:	2300      	movs	r3, #0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d10a      	bne.n	800829e <xQueueGenericSend+0x8e>
	__asm volatile
 8008288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828c:	f383 8811 	msr	BASEPRI, r3
 8008290:	f3bf 8f6f 	isb	sy
 8008294:	f3bf 8f4f 	dsb	sy
 8008298:	623b      	str	r3, [r7, #32]
}
 800829a:	bf00      	nop
 800829c:	e7fe      	b.n	800829c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800829e:	f001 fc0b 	bl	8009ab8 <xTaskGetSchedulerState>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d102      	bne.n	80082ae <xQueueGenericSend+0x9e>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d101      	bne.n	80082b2 <xQueueGenericSend+0xa2>
 80082ae:	2301      	movs	r3, #1
 80082b0:	e000      	b.n	80082b4 <xQueueGenericSend+0xa4>
 80082b2:	2300      	movs	r3, #0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d10a      	bne.n	80082ce <xQueueGenericSend+0xbe>
	__asm volatile
 80082b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082bc:	f383 8811 	msr	BASEPRI, r3
 80082c0:	f3bf 8f6f 	isb	sy
 80082c4:	f3bf 8f4f 	dsb	sy
 80082c8:	61fb      	str	r3, [r7, #28]
}
 80082ca:	bf00      	nop
 80082cc:	e7fe      	b.n	80082cc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80082ce:	f001 ff41 	bl	800a154 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80082d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082da:	429a      	cmp	r2, r3
 80082dc:	d302      	bcc.n	80082e4 <xQueueGenericSend+0xd4>
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d129      	bne.n	8008338 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80082e4:	683a      	ldr	r2, [r7, #0]
 80082e6:	68b9      	ldr	r1, [r7, #8]
 80082e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082ea:	f000 fc3b 	bl	8008b64 <prvCopyDataToQueue>
 80082ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d010      	beq.n	800831a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fa:	3324      	adds	r3, #36	; 0x24
 80082fc:	4618      	mov	r0, r3
 80082fe:	f001 fa1b 	bl	8009738 <xTaskRemoveFromEventList>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d013      	beq.n	8008330 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008308:	4b3f      	ldr	r3, [pc, #252]	; (8008408 <xQueueGenericSend+0x1f8>)
 800830a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800830e:	601a      	str	r2, [r3, #0]
 8008310:	f3bf 8f4f 	dsb	sy
 8008314:	f3bf 8f6f 	isb	sy
 8008318:	e00a      	b.n	8008330 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800831a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800831c:	2b00      	cmp	r3, #0
 800831e:	d007      	beq.n	8008330 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008320:	4b39      	ldr	r3, [pc, #228]	; (8008408 <xQueueGenericSend+0x1f8>)
 8008322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008326:	601a      	str	r2, [r3, #0]
 8008328:	f3bf 8f4f 	dsb	sy
 800832c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008330:	f001 ff40 	bl	800a1b4 <vPortExitCritical>
				return pdPASS;
 8008334:	2301      	movs	r3, #1
 8008336:	e063      	b.n	8008400 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d103      	bne.n	8008346 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800833e:	f001 ff39 	bl	800a1b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008342:	2300      	movs	r3, #0
 8008344:	e05c      	b.n	8008400 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008348:	2b00      	cmp	r3, #0
 800834a:	d106      	bne.n	800835a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800834c:	f107 0314 	add.w	r3, r7, #20
 8008350:	4618      	mov	r0, r3
 8008352:	f001 fa53 	bl	80097fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008356:	2301      	movs	r3, #1
 8008358:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800835a:	f001 ff2b 	bl	800a1b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800835e:	f001 f803 	bl	8009368 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008362:	f001 fef7 	bl	800a154 <vPortEnterCritical>
 8008366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008368:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800836c:	b25b      	sxtb	r3, r3
 800836e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008372:	d103      	bne.n	800837c <xQueueGenericSend+0x16c>
 8008374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008376:	2200      	movs	r2, #0
 8008378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800837c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800837e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008382:	b25b      	sxtb	r3, r3
 8008384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008388:	d103      	bne.n	8008392 <xQueueGenericSend+0x182>
 800838a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838c:	2200      	movs	r2, #0
 800838e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008392:	f001 ff0f 	bl	800a1b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008396:	1d3a      	adds	r2, r7, #4
 8008398:	f107 0314 	add.w	r3, r7, #20
 800839c:	4611      	mov	r1, r2
 800839e:	4618      	mov	r0, r3
 80083a0:	f001 fa42 	bl	8009828 <xTaskCheckForTimeOut>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d124      	bne.n	80083f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80083aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083ac:	f000 fcd2 	bl	8008d54 <prvIsQueueFull>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d018      	beq.n	80083e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80083b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b8:	3310      	adds	r3, #16
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	4611      	mov	r1, r2
 80083be:	4618      	mov	r0, r3
 80083c0:	f001 f996 	bl	80096f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80083c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083c6:	f000 fc5d 	bl	8008c84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80083ca:	f000 ffdb 	bl	8009384 <xTaskResumeAll>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f47f af7c 	bne.w	80082ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80083d6:	4b0c      	ldr	r3, [pc, #48]	; (8008408 <xQueueGenericSend+0x1f8>)
 80083d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083dc:	601a      	str	r2, [r3, #0]
 80083de:	f3bf 8f4f 	dsb	sy
 80083e2:	f3bf 8f6f 	isb	sy
 80083e6:	e772      	b.n	80082ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80083e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083ea:	f000 fc4b 	bl	8008c84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083ee:	f000 ffc9 	bl	8009384 <xTaskResumeAll>
 80083f2:	e76c      	b.n	80082ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80083f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083f6:	f000 fc45 	bl	8008c84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083fa:	f000 ffc3 	bl	8009384 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80083fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008400:	4618      	mov	r0, r3
 8008402:	3738      	adds	r7, #56	; 0x38
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}
 8008408:	e000ed04 	.word	0xe000ed04

0800840c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b090      	sub	sp, #64	; 0x40
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	607a      	str	r2, [r7, #4]
 8008418:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800841e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10a      	bne.n	800843a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008428:	f383 8811 	msr	BASEPRI, r3
 800842c:	f3bf 8f6f 	isb	sy
 8008430:	f3bf 8f4f 	dsb	sy
 8008434:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008436:	bf00      	nop
 8008438:	e7fe      	b.n	8008438 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d103      	bne.n	8008448 <xQueueGenericSendFromISR+0x3c>
 8008440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008444:	2b00      	cmp	r3, #0
 8008446:	d101      	bne.n	800844c <xQueueGenericSendFromISR+0x40>
 8008448:	2301      	movs	r3, #1
 800844a:	e000      	b.n	800844e <xQueueGenericSendFromISR+0x42>
 800844c:	2300      	movs	r3, #0
 800844e:	2b00      	cmp	r3, #0
 8008450:	d10a      	bne.n	8008468 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008456:	f383 8811 	msr	BASEPRI, r3
 800845a:	f3bf 8f6f 	isb	sy
 800845e:	f3bf 8f4f 	dsb	sy
 8008462:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008464:	bf00      	nop
 8008466:	e7fe      	b.n	8008466 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	2b02      	cmp	r3, #2
 800846c:	d103      	bne.n	8008476 <xQueueGenericSendFromISR+0x6a>
 800846e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008472:	2b01      	cmp	r3, #1
 8008474:	d101      	bne.n	800847a <xQueueGenericSendFromISR+0x6e>
 8008476:	2301      	movs	r3, #1
 8008478:	e000      	b.n	800847c <xQueueGenericSendFromISR+0x70>
 800847a:	2300      	movs	r3, #0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d10a      	bne.n	8008496 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008484:	f383 8811 	msr	BASEPRI, r3
 8008488:	f3bf 8f6f 	isb	sy
 800848c:	f3bf 8f4f 	dsb	sy
 8008490:	623b      	str	r3, [r7, #32]
}
 8008492:	bf00      	nop
 8008494:	e7fe      	b.n	8008494 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008496:	f001 ff3f 	bl	800a318 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800849a:	f3ef 8211 	mrs	r2, BASEPRI
 800849e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a2:	f383 8811 	msr	BASEPRI, r3
 80084a6:	f3bf 8f6f 	isb	sy
 80084aa:	f3bf 8f4f 	dsb	sy
 80084ae:	61fa      	str	r2, [r7, #28]
 80084b0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80084b2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80084b4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80084b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084be:	429a      	cmp	r2, r3
 80084c0:	d302      	bcc.n	80084c8 <xQueueGenericSendFromISR+0xbc>
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	2b02      	cmp	r3, #2
 80084c6:	d12f      	bne.n	8008528 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80084c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80084d8:	683a      	ldr	r2, [r7, #0]
 80084da:	68b9      	ldr	r1, [r7, #8]
 80084dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80084de:	f000 fb41 	bl	8008b64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80084e2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80084e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ea:	d112      	bne.n	8008512 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d016      	beq.n	8008522 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f6:	3324      	adds	r3, #36	; 0x24
 80084f8:	4618      	mov	r0, r3
 80084fa:	f001 f91d 	bl	8009738 <xTaskRemoveFromEventList>
 80084fe:	4603      	mov	r3, r0
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00e      	beq.n	8008522 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00b      	beq.n	8008522 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2201      	movs	r2, #1
 800850e:	601a      	str	r2, [r3, #0]
 8008510:	e007      	b.n	8008522 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008512:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008516:	3301      	adds	r3, #1
 8008518:	b2db      	uxtb	r3, r3
 800851a:	b25a      	sxtb	r2, r3
 800851c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008522:	2301      	movs	r3, #1
 8008524:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008526:	e001      	b.n	800852c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008528:	2300      	movs	r3, #0
 800852a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800852c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800852e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008536:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800853a:	4618      	mov	r0, r3
 800853c:	3740      	adds	r7, #64	; 0x40
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b08e      	sub	sp, #56	; 0x38
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
 800854a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008552:	2b00      	cmp	r3, #0
 8008554:	d10a      	bne.n	800856c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855a:	f383 8811 	msr	BASEPRI, r3
 800855e:	f3bf 8f6f 	isb	sy
 8008562:	f3bf 8f4f 	dsb	sy
 8008566:	623b      	str	r3, [r7, #32]
}
 8008568:	bf00      	nop
 800856a:	e7fe      	b.n	800856a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800856c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00a      	beq.n	800858a <xQueueGiveFromISR+0x48>
	__asm volatile
 8008574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008578:	f383 8811 	msr	BASEPRI, r3
 800857c:	f3bf 8f6f 	isb	sy
 8008580:	f3bf 8f4f 	dsb	sy
 8008584:	61fb      	str	r3, [r7, #28]
}
 8008586:	bf00      	nop
 8008588:	e7fe      	b.n	8008588 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800858a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d103      	bne.n	800859a <xQueueGiveFromISR+0x58>
 8008592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d101      	bne.n	800859e <xQueueGiveFromISR+0x5c>
 800859a:	2301      	movs	r3, #1
 800859c:	e000      	b.n	80085a0 <xQueueGiveFromISR+0x5e>
 800859e:	2300      	movs	r3, #0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d10a      	bne.n	80085ba <xQueueGiveFromISR+0x78>
	__asm volatile
 80085a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a8:	f383 8811 	msr	BASEPRI, r3
 80085ac:	f3bf 8f6f 	isb	sy
 80085b0:	f3bf 8f4f 	dsb	sy
 80085b4:	61bb      	str	r3, [r7, #24]
}
 80085b6:	bf00      	nop
 80085b8:	e7fe      	b.n	80085b8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80085ba:	f001 fead 	bl	800a318 <vPortValidateInterruptPriority>
	__asm volatile
 80085be:	f3ef 8211 	mrs	r2, BASEPRI
 80085c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c6:	f383 8811 	msr	BASEPRI, r3
 80085ca:	f3bf 8f6f 	isb	sy
 80085ce:	f3bf 8f4f 	dsb	sy
 80085d2:	617a      	str	r2, [r7, #20]
 80085d4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80085d6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80085d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085de:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80085e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d22b      	bcs.n	8008642 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80085ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80085f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f6:	1c5a      	adds	r2, r3, #1
 80085f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80085fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008604:	d112      	bne.n	800862c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860a:	2b00      	cmp	r3, #0
 800860c:	d016      	beq.n	800863c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800860e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008610:	3324      	adds	r3, #36	; 0x24
 8008612:	4618      	mov	r0, r3
 8008614:	f001 f890 	bl	8009738 <xTaskRemoveFromEventList>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00e      	beq.n	800863c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00b      	beq.n	800863c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	2201      	movs	r2, #1
 8008628:	601a      	str	r2, [r3, #0]
 800862a:	e007      	b.n	800863c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800862c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008630:	3301      	adds	r3, #1
 8008632:	b2db      	uxtb	r3, r3
 8008634:	b25a      	sxtb	r2, r3
 8008636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800863c:	2301      	movs	r3, #1
 800863e:	637b      	str	r3, [r7, #52]	; 0x34
 8008640:	e001      	b.n	8008646 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008642:	2300      	movs	r3, #0
 8008644:	637b      	str	r3, [r7, #52]	; 0x34
 8008646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008648:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f383 8811 	msr	BASEPRI, r3
}
 8008650:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008654:	4618      	mov	r0, r3
 8008656:	3738      	adds	r7, #56	; 0x38
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b08c      	sub	sp, #48	; 0x30
 8008660:	af00      	add	r7, sp, #0
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008668:	2300      	movs	r3, #0
 800866a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008672:	2b00      	cmp	r3, #0
 8008674:	d10a      	bne.n	800868c <xQueueReceive+0x30>
	__asm volatile
 8008676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867a:	f383 8811 	msr	BASEPRI, r3
 800867e:	f3bf 8f6f 	isb	sy
 8008682:	f3bf 8f4f 	dsb	sy
 8008686:	623b      	str	r3, [r7, #32]
}
 8008688:	bf00      	nop
 800868a:	e7fe      	b.n	800868a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d103      	bne.n	800869a <xQueueReceive+0x3e>
 8008692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008696:	2b00      	cmp	r3, #0
 8008698:	d101      	bne.n	800869e <xQueueReceive+0x42>
 800869a:	2301      	movs	r3, #1
 800869c:	e000      	b.n	80086a0 <xQueueReceive+0x44>
 800869e:	2300      	movs	r3, #0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d10a      	bne.n	80086ba <xQueueReceive+0x5e>
	__asm volatile
 80086a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a8:	f383 8811 	msr	BASEPRI, r3
 80086ac:	f3bf 8f6f 	isb	sy
 80086b0:	f3bf 8f4f 	dsb	sy
 80086b4:	61fb      	str	r3, [r7, #28]
}
 80086b6:	bf00      	nop
 80086b8:	e7fe      	b.n	80086b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086ba:	f001 f9fd 	bl	8009ab8 <xTaskGetSchedulerState>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d102      	bne.n	80086ca <xQueueReceive+0x6e>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d101      	bne.n	80086ce <xQueueReceive+0x72>
 80086ca:	2301      	movs	r3, #1
 80086cc:	e000      	b.n	80086d0 <xQueueReceive+0x74>
 80086ce:	2300      	movs	r3, #0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d10a      	bne.n	80086ea <xQueueReceive+0x8e>
	__asm volatile
 80086d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d8:	f383 8811 	msr	BASEPRI, r3
 80086dc:	f3bf 8f6f 	isb	sy
 80086e0:	f3bf 8f4f 	dsb	sy
 80086e4:	61bb      	str	r3, [r7, #24]
}
 80086e6:	bf00      	nop
 80086e8:	e7fe      	b.n	80086e8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80086ea:	f001 fd33 	bl	800a154 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d01f      	beq.n	800873a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80086fa:	68b9      	ldr	r1, [r7, #8]
 80086fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086fe:	f000 fa9b 	bl	8008c38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008704:	1e5a      	subs	r2, r3, #1
 8008706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008708:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800870a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870c:	691b      	ldr	r3, [r3, #16]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d00f      	beq.n	8008732 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008714:	3310      	adds	r3, #16
 8008716:	4618      	mov	r0, r3
 8008718:	f001 f80e 	bl	8009738 <xTaskRemoveFromEventList>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d007      	beq.n	8008732 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008722:	4b3d      	ldr	r3, [pc, #244]	; (8008818 <xQueueReceive+0x1bc>)
 8008724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008728:	601a      	str	r2, [r3, #0]
 800872a:	f3bf 8f4f 	dsb	sy
 800872e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008732:	f001 fd3f 	bl	800a1b4 <vPortExitCritical>
				return pdPASS;
 8008736:	2301      	movs	r3, #1
 8008738:	e069      	b.n	800880e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d103      	bne.n	8008748 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008740:	f001 fd38 	bl	800a1b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008744:	2300      	movs	r3, #0
 8008746:	e062      	b.n	800880e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800874a:	2b00      	cmp	r3, #0
 800874c:	d106      	bne.n	800875c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800874e:	f107 0310 	add.w	r3, r7, #16
 8008752:	4618      	mov	r0, r3
 8008754:	f001 f852 	bl	80097fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008758:	2301      	movs	r3, #1
 800875a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800875c:	f001 fd2a 	bl	800a1b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008760:	f000 fe02 	bl	8009368 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008764:	f001 fcf6 	bl	800a154 <vPortEnterCritical>
 8008768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800876e:	b25b      	sxtb	r3, r3
 8008770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008774:	d103      	bne.n	800877e <xQueueReceive+0x122>
 8008776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008778:	2200      	movs	r2, #0
 800877a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800877e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008780:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008784:	b25b      	sxtb	r3, r3
 8008786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800878a:	d103      	bne.n	8008794 <xQueueReceive+0x138>
 800878c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878e:	2200      	movs	r2, #0
 8008790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008794:	f001 fd0e 	bl	800a1b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008798:	1d3a      	adds	r2, r7, #4
 800879a:	f107 0310 	add.w	r3, r7, #16
 800879e:	4611      	mov	r1, r2
 80087a0:	4618      	mov	r0, r3
 80087a2:	f001 f841 	bl	8009828 <xTaskCheckForTimeOut>
 80087a6:	4603      	mov	r3, r0
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d123      	bne.n	80087f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087ae:	f000 fabb 	bl	8008d28 <prvIsQueueEmpty>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d017      	beq.n	80087e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80087b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ba:	3324      	adds	r3, #36	; 0x24
 80087bc:	687a      	ldr	r2, [r7, #4]
 80087be:	4611      	mov	r1, r2
 80087c0:	4618      	mov	r0, r3
 80087c2:	f000 ff95 	bl	80096f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80087c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087c8:	f000 fa5c 	bl	8008c84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80087cc:	f000 fdda 	bl	8009384 <xTaskResumeAll>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d189      	bne.n	80086ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80087d6:	4b10      	ldr	r3, [pc, #64]	; (8008818 <xQueueReceive+0x1bc>)
 80087d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087dc:	601a      	str	r2, [r3, #0]
 80087de:	f3bf 8f4f 	dsb	sy
 80087e2:	f3bf 8f6f 	isb	sy
 80087e6:	e780      	b.n	80086ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80087e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087ea:	f000 fa4b 	bl	8008c84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087ee:	f000 fdc9 	bl	8009384 <xTaskResumeAll>
 80087f2:	e77a      	b.n	80086ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80087f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087f6:	f000 fa45 	bl	8008c84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80087fa:	f000 fdc3 	bl	8009384 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008800:	f000 fa92 	bl	8008d28 <prvIsQueueEmpty>
 8008804:	4603      	mov	r3, r0
 8008806:	2b00      	cmp	r3, #0
 8008808:	f43f af6f 	beq.w	80086ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800880c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800880e:	4618      	mov	r0, r3
 8008810:	3730      	adds	r7, #48	; 0x30
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop
 8008818:	e000ed04 	.word	0xe000ed04

0800881c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b08e      	sub	sp, #56	; 0x38
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008826:	2300      	movs	r3, #0
 8008828:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800882e:	2300      	movs	r3, #0
 8008830:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008834:	2b00      	cmp	r3, #0
 8008836:	d10a      	bne.n	800884e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800883c:	f383 8811 	msr	BASEPRI, r3
 8008840:	f3bf 8f6f 	isb	sy
 8008844:	f3bf 8f4f 	dsb	sy
 8008848:	623b      	str	r3, [r7, #32]
}
 800884a:	bf00      	nop
 800884c:	e7fe      	b.n	800884c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800884e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00a      	beq.n	800886c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885a:	f383 8811 	msr	BASEPRI, r3
 800885e:	f3bf 8f6f 	isb	sy
 8008862:	f3bf 8f4f 	dsb	sy
 8008866:	61fb      	str	r3, [r7, #28]
}
 8008868:	bf00      	nop
 800886a:	e7fe      	b.n	800886a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800886c:	f001 f924 	bl	8009ab8 <xTaskGetSchedulerState>
 8008870:	4603      	mov	r3, r0
 8008872:	2b00      	cmp	r3, #0
 8008874:	d102      	bne.n	800887c <xQueueSemaphoreTake+0x60>
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d101      	bne.n	8008880 <xQueueSemaphoreTake+0x64>
 800887c:	2301      	movs	r3, #1
 800887e:	e000      	b.n	8008882 <xQueueSemaphoreTake+0x66>
 8008880:	2300      	movs	r3, #0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d10a      	bne.n	800889c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888a:	f383 8811 	msr	BASEPRI, r3
 800888e:	f3bf 8f6f 	isb	sy
 8008892:	f3bf 8f4f 	dsb	sy
 8008896:	61bb      	str	r3, [r7, #24]
}
 8008898:	bf00      	nop
 800889a:	e7fe      	b.n	800889a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800889c:	f001 fc5a 	bl	800a154 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80088a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80088a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d024      	beq.n	80088f6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80088ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ae:	1e5a      	subs	r2, r3, #1
 80088b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80088b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d104      	bne.n	80088c6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80088bc:	f001 faa4 	bl	8009e08 <pvTaskIncrementMutexHeldCount>
 80088c0:	4602      	mov	r2, r0
 80088c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c8:	691b      	ldr	r3, [r3, #16]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00f      	beq.n	80088ee <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d0:	3310      	adds	r3, #16
 80088d2:	4618      	mov	r0, r3
 80088d4:	f000 ff30 	bl	8009738 <xTaskRemoveFromEventList>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d007      	beq.n	80088ee <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80088de:	4b54      	ldr	r3, [pc, #336]	; (8008a30 <xQueueSemaphoreTake+0x214>)
 80088e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088e4:	601a      	str	r2, [r3, #0]
 80088e6:	f3bf 8f4f 	dsb	sy
 80088ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80088ee:	f001 fc61 	bl	800a1b4 <vPortExitCritical>
				return pdPASS;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e097      	b.n	8008a26 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d111      	bne.n	8008920 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80088fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00a      	beq.n	8008918 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008906:	f383 8811 	msr	BASEPRI, r3
 800890a:	f3bf 8f6f 	isb	sy
 800890e:	f3bf 8f4f 	dsb	sy
 8008912:	617b      	str	r3, [r7, #20]
}
 8008914:	bf00      	nop
 8008916:	e7fe      	b.n	8008916 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008918:	f001 fc4c 	bl	800a1b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800891c:	2300      	movs	r3, #0
 800891e:	e082      	b.n	8008a26 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008922:	2b00      	cmp	r3, #0
 8008924:	d106      	bne.n	8008934 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008926:	f107 030c 	add.w	r3, r7, #12
 800892a:	4618      	mov	r0, r3
 800892c:	f000 ff66 	bl	80097fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008930:	2301      	movs	r3, #1
 8008932:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008934:	f001 fc3e 	bl	800a1b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008938:	f000 fd16 	bl	8009368 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800893c:	f001 fc0a 	bl	800a154 <vPortEnterCritical>
 8008940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008942:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008946:	b25b      	sxtb	r3, r3
 8008948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800894c:	d103      	bne.n	8008956 <xQueueSemaphoreTake+0x13a>
 800894e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008950:	2200      	movs	r2, #0
 8008952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008958:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800895c:	b25b      	sxtb	r3, r3
 800895e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008962:	d103      	bne.n	800896c <xQueueSemaphoreTake+0x150>
 8008964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008966:	2200      	movs	r2, #0
 8008968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800896c:	f001 fc22 	bl	800a1b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008970:	463a      	mov	r2, r7
 8008972:	f107 030c 	add.w	r3, r7, #12
 8008976:	4611      	mov	r1, r2
 8008978:	4618      	mov	r0, r3
 800897a:	f000 ff55 	bl	8009828 <xTaskCheckForTimeOut>
 800897e:	4603      	mov	r3, r0
 8008980:	2b00      	cmp	r3, #0
 8008982:	d132      	bne.n	80089ea <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008984:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008986:	f000 f9cf 	bl	8008d28 <prvIsQueueEmpty>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d026      	beq.n	80089de <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d109      	bne.n	80089ac <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008998:	f001 fbdc 	bl	800a154 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800899c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	4618      	mov	r0, r3
 80089a2:	f001 f8a7 	bl	8009af4 <xTaskPriorityInherit>
 80089a6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80089a8:	f001 fc04 	bl	800a1b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80089ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ae:	3324      	adds	r3, #36	; 0x24
 80089b0:	683a      	ldr	r2, [r7, #0]
 80089b2:	4611      	mov	r1, r2
 80089b4:	4618      	mov	r0, r3
 80089b6:	f000 fe9b 	bl	80096f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80089ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089bc:	f000 f962 	bl	8008c84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80089c0:	f000 fce0 	bl	8009384 <xTaskResumeAll>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	f47f af68 	bne.w	800889c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80089cc:	4b18      	ldr	r3, [pc, #96]	; (8008a30 <xQueueSemaphoreTake+0x214>)
 80089ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089d2:	601a      	str	r2, [r3, #0]
 80089d4:	f3bf 8f4f 	dsb	sy
 80089d8:	f3bf 8f6f 	isb	sy
 80089dc:	e75e      	b.n	800889c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80089de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089e0:	f000 f950 	bl	8008c84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089e4:	f000 fcce 	bl	8009384 <xTaskResumeAll>
 80089e8:	e758      	b.n	800889c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80089ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089ec:	f000 f94a 	bl	8008c84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089f0:	f000 fcc8 	bl	8009384 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089f6:	f000 f997 	bl	8008d28 <prvIsQueueEmpty>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	f43f af4d 	beq.w	800889c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d00d      	beq.n	8008a24 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008a08:	f001 fba4 	bl	800a154 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008a0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008a0e:	f000 f891 	bl	8008b34 <prvGetDisinheritPriorityAfterTimeout>
 8008a12:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f001 f966 	bl	8009cec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008a20:	f001 fbc8 	bl	800a1b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008a24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3738      	adds	r7, #56	; 0x38
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	e000ed04 	.word	0xe000ed04

08008a34 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b08e      	sub	sp, #56	; 0x38
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d10a      	bne.n	8008a60 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4e:	f383 8811 	msr	BASEPRI, r3
 8008a52:	f3bf 8f6f 	isb	sy
 8008a56:	f3bf 8f4f 	dsb	sy
 8008a5a:	623b      	str	r3, [r7, #32]
}
 8008a5c:	bf00      	nop
 8008a5e:	e7fe      	b.n	8008a5e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d103      	bne.n	8008a6e <xQueueReceiveFromISR+0x3a>
 8008a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d101      	bne.n	8008a72 <xQueueReceiveFromISR+0x3e>
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e000      	b.n	8008a74 <xQueueReceiveFromISR+0x40>
 8008a72:	2300      	movs	r3, #0
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d10a      	bne.n	8008a8e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7c:	f383 8811 	msr	BASEPRI, r3
 8008a80:	f3bf 8f6f 	isb	sy
 8008a84:	f3bf 8f4f 	dsb	sy
 8008a88:	61fb      	str	r3, [r7, #28]
}
 8008a8a:	bf00      	nop
 8008a8c:	e7fe      	b.n	8008a8c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a8e:	f001 fc43 	bl	800a318 <vPortValidateInterruptPriority>
	__asm volatile
 8008a92:	f3ef 8211 	mrs	r2, BASEPRI
 8008a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9a:	f383 8811 	msr	BASEPRI, r3
 8008a9e:	f3bf 8f6f 	isb	sy
 8008aa2:	f3bf 8f4f 	dsb	sy
 8008aa6:	61ba      	str	r2, [r7, #24]
 8008aa8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008aaa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008aac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d02f      	beq.n	8008b1a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008abc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008ac4:	68b9      	ldr	r1, [r7, #8]
 8008ac6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ac8:	f000 f8b6 	bl	8008c38 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ace:	1e5a      	subs	r2, r3, #1
 8008ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008ad4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008adc:	d112      	bne.n	8008b04 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae0:	691b      	ldr	r3, [r3, #16]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d016      	beq.n	8008b14 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae8:	3310      	adds	r3, #16
 8008aea:	4618      	mov	r0, r3
 8008aec:	f000 fe24 	bl	8009738 <xTaskRemoveFromEventList>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00e      	beq.n	8008b14 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d00b      	beq.n	8008b14 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2201      	movs	r2, #1
 8008b00:	601a      	str	r2, [r3, #0]
 8008b02:	e007      	b.n	8008b14 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008b04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b08:	3301      	adds	r3, #1
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	b25a      	sxtb	r2, r3
 8008b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008b14:	2301      	movs	r3, #1
 8008b16:	637b      	str	r3, [r7, #52]	; 0x34
 8008b18:	e001      	b.n	8008b1e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8008b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b20:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	f383 8811 	msr	BASEPRI, r3
}
 8008b28:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3738      	adds	r7, #56	; 0x38
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d006      	beq.n	8008b52 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f1c3 0307 	rsb	r3, r3, #7
 8008b4e:	60fb      	str	r3, [r7, #12]
 8008b50:	e001      	b.n	8008b56 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008b52:	2300      	movs	r3, #0
 8008b54:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008b56:	68fb      	ldr	r3, [r7, #12]
	}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3714      	adds	r7, #20
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b086      	sub	sp, #24
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008b70:	2300      	movs	r3, #0
 8008b72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d10d      	bne.n	8008b9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d14d      	bne.n	8008c26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f001 f826 	bl	8009be0 <xTaskPriorityDisinherit>
 8008b94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	609a      	str	r2, [r3, #8]
 8008b9c:	e043      	b.n	8008c26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d119      	bne.n	8008bd8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6858      	ldr	r0, [r3, #4]
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bac:	461a      	mov	r2, r3
 8008bae:	68b9      	ldr	r1, [r7, #8]
 8008bb0:	f001 feff 	bl	800a9b2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	685a      	ldr	r2, [r3, #4]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bbc:	441a      	add	r2, r3
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	685a      	ldr	r2, [r3, #4]
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d32b      	bcc.n	8008c26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	605a      	str	r2, [r3, #4]
 8008bd6:	e026      	b.n	8008c26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	68d8      	ldr	r0, [r3, #12]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be0:	461a      	mov	r2, r3
 8008be2:	68b9      	ldr	r1, [r7, #8]
 8008be4:	f001 fee5 	bl	800a9b2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	68da      	ldr	r2, [r3, #12]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf0:	425b      	negs	r3, r3
 8008bf2:	441a      	add	r2, r3
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	68da      	ldr	r2, [r3, #12]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d207      	bcs.n	8008c14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	689a      	ldr	r2, [r3, #8]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c0c:	425b      	negs	r3, r3
 8008c0e:	441a      	add	r2, r3
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2b02      	cmp	r3, #2
 8008c18:	d105      	bne.n	8008c26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d002      	beq.n	8008c26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	3b01      	subs	r3, #1
 8008c24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	1c5a      	adds	r2, r3, #1
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008c2e:	697b      	ldr	r3, [r7, #20]
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3718      	adds	r7, #24
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d018      	beq.n	8008c7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	68da      	ldr	r2, [r3, #12]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c52:	441a      	add	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	68da      	ldr	r2, [r3, #12]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d303      	bcc.n	8008c6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	68d9      	ldr	r1, [r3, #12]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c74:	461a      	mov	r2, r3
 8008c76:	6838      	ldr	r0, [r7, #0]
 8008c78:	f001 fe9b 	bl	800a9b2 <memcpy>
	}
}
 8008c7c:	bf00      	nop
 8008c7e:	3708      	adds	r7, #8
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008c8c:	f001 fa62 	bl	800a154 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c98:	e011      	b.n	8008cbe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d012      	beq.n	8008cc8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	3324      	adds	r3, #36	; 0x24
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f000 fd46 	bl	8009738 <xTaskRemoveFromEventList>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d001      	beq.n	8008cb6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008cb2:	f000 fe1b 	bl	80098ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008cb6:	7bfb      	ldrb	r3, [r7, #15]
 8008cb8:	3b01      	subs	r3, #1
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	dce9      	bgt.n	8008c9a <prvUnlockQueue+0x16>
 8008cc6:	e000      	b.n	8008cca <prvUnlockQueue+0x46>
					break;
 8008cc8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	22ff      	movs	r2, #255	; 0xff
 8008cce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008cd2:	f001 fa6f 	bl	800a1b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008cd6:	f001 fa3d 	bl	800a154 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ce0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ce2:	e011      	b.n	8008d08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d012      	beq.n	8008d12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	3310      	adds	r3, #16
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f000 fd21 	bl	8009738 <xTaskRemoveFromEventList>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d001      	beq.n	8008d00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008cfc:	f000 fdf6 	bl	80098ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008d00:	7bbb      	ldrb	r3, [r7, #14]
 8008d02:	3b01      	subs	r3, #1
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	dce9      	bgt.n	8008ce4 <prvUnlockQueue+0x60>
 8008d10:	e000      	b.n	8008d14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008d12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	22ff      	movs	r2, #255	; 0xff
 8008d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008d1c:	f001 fa4a 	bl	800a1b4 <vPortExitCritical>
}
 8008d20:	bf00      	nop
 8008d22:	3710      	adds	r7, #16
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d30:	f001 fa10 	bl	800a154 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d102      	bne.n	8008d42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	60fb      	str	r3, [r7, #12]
 8008d40:	e001      	b.n	8008d46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008d42:	2300      	movs	r3, #0
 8008d44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d46:	f001 fa35 	bl	800a1b4 <vPortExitCritical>

	return xReturn;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d5c:	f001 f9fa 	bl	800a154 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d102      	bne.n	8008d72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	60fb      	str	r3, [r7, #12]
 8008d70:	e001      	b.n	8008d76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008d72:	2300      	movs	r3, #0
 8008d74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d76:	f001 fa1d 	bl	800a1b4 <vPortExitCritical>

	return xReturn;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3710      	adds	r7, #16
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b08e      	sub	sp, #56	; 0x38
 8008d88:	af04      	add	r7, sp, #16
 8008d8a:	60f8      	str	r0, [r7, #12]
 8008d8c:	60b9      	str	r1, [r7, #8]
 8008d8e:	607a      	str	r2, [r7, #4]
 8008d90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d10a      	bne.n	8008dae <xTaskCreateStatic+0x2a>
	__asm volatile
 8008d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9c:	f383 8811 	msr	BASEPRI, r3
 8008da0:	f3bf 8f6f 	isb	sy
 8008da4:	f3bf 8f4f 	dsb	sy
 8008da8:	623b      	str	r3, [r7, #32]
}
 8008daa:	bf00      	nop
 8008dac:	e7fe      	b.n	8008dac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d10a      	bne.n	8008dca <xTaskCreateStatic+0x46>
	__asm volatile
 8008db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db8:	f383 8811 	msr	BASEPRI, r3
 8008dbc:	f3bf 8f6f 	isb	sy
 8008dc0:	f3bf 8f4f 	dsb	sy
 8008dc4:	61fb      	str	r3, [r7, #28]
}
 8008dc6:	bf00      	nop
 8008dc8:	e7fe      	b.n	8008dc8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008dca:	23b4      	movs	r3, #180	; 0xb4
 8008dcc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	2bb4      	cmp	r3, #180	; 0xb4
 8008dd2:	d00a      	beq.n	8008dea <xTaskCreateStatic+0x66>
	__asm volatile
 8008dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd8:	f383 8811 	msr	BASEPRI, r3
 8008ddc:	f3bf 8f6f 	isb	sy
 8008de0:	f3bf 8f4f 	dsb	sy
 8008de4:	61bb      	str	r3, [r7, #24]
}
 8008de6:	bf00      	nop
 8008de8:	e7fe      	b.n	8008de8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008dea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d01e      	beq.n	8008e30 <xTaskCreateStatic+0xac>
 8008df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d01b      	beq.n	8008e30 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dfa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e00:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e04:	2202      	movs	r2, #2
 8008e06:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	9303      	str	r3, [sp, #12]
 8008e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e10:	9302      	str	r3, [sp, #8]
 8008e12:	f107 0314 	add.w	r3, r7, #20
 8008e16:	9301      	str	r3, [sp, #4]
 8008e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1a:	9300      	str	r3, [sp, #0]
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	68b9      	ldr	r1, [r7, #8]
 8008e22:	68f8      	ldr	r0, [r7, #12]
 8008e24:	f000 f850 	bl	8008ec8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e2a:	f000 f8eb 	bl	8009004 <prvAddNewTaskToReadyList>
 8008e2e:	e001      	b.n	8008e34 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008e30:	2300      	movs	r3, #0
 8008e32:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008e34:	697b      	ldr	r3, [r7, #20]
	}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3728      	adds	r7, #40	; 0x28
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b08c      	sub	sp, #48	; 0x30
 8008e42:	af04      	add	r7, sp, #16
 8008e44:	60f8      	str	r0, [r7, #12]
 8008e46:	60b9      	str	r1, [r7, #8]
 8008e48:	603b      	str	r3, [r7, #0]
 8008e4a:	4613      	mov	r3, r2
 8008e4c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008e4e:	88fb      	ldrh	r3, [r7, #6]
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	4618      	mov	r0, r3
 8008e54:	f001 faa0 	bl	800a398 <pvPortMalloc>
 8008e58:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d00e      	beq.n	8008e7e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008e60:	20b4      	movs	r0, #180	; 0xb4
 8008e62:	f001 fa99 	bl	800a398 <pvPortMalloc>
 8008e66:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008e68:	69fb      	ldr	r3, [r7, #28]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d003      	beq.n	8008e76 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	697a      	ldr	r2, [r7, #20]
 8008e72:	631a      	str	r2, [r3, #48]	; 0x30
 8008e74:	e005      	b.n	8008e82 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008e76:	6978      	ldr	r0, [r7, #20]
 8008e78:	f001 fb5a 	bl	800a530 <vPortFree>
 8008e7c:	e001      	b.n	8008e82 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d017      	beq.n	8008eb8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008e90:	88fa      	ldrh	r2, [r7, #6]
 8008e92:	2300      	movs	r3, #0
 8008e94:	9303      	str	r3, [sp, #12]
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	9302      	str	r3, [sp, #8]
 8008e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e9c:	9301      	str	r3, [sp, #4]
 8008e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	68b9      	ldr	r1, [r7, #8]
 8008ea6:	68f8      	ldr	r0, [r7, #12]
 8008ea8:	f000 f80e 	bl	8008ec8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008eac:	69f8      	ldr	r0, [r7, #28]
 8008eae:	f000 f8a9 	bl	8009004 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	61bb      	str	r3, [r7, #24]
 8008eb6:	e002      	b.n	8008ebe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8008ebc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008ebe:	69bb      	ldr	r3, [r7, #24]
	}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3720      	adds	r7, #32
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b088      	sub	sp, #32
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	60b9      	str	r1, [r7, #8]
 8008ed2:	607a      	str	r2, [r7, #4]
 8008ed4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008ee0:	3b01      	subs	r3, #1
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	4413      	add	r3, r2
 8008ee6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	f023 0307 	bic.w	r3, r3, #7
 8008eee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	f003 0307 	and.w	r3, r3, #7
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d00a      	beq.n	8008f10 <prvInitialiseNewTask+0x48>
	__asm volatile
 8008efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efe:	f383 8811 	msr	BASEPRI, r3
 8008f02:	f3bf 8f6f 	isb	sy
 8008f06:	f3bf 8f4f 	dsb	sy
 8008f0a:	617b      	str	r3, [r7, #20]
}
 8008f0c:	bf00      	nop
 8008f0e:	e7fe      	b.n	8008f0e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d01f      	beq.n	8008f56 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f16:	2300      	movs	r3, #0
 8008f18:	61fb      	str	r3, [r7, #28]
 8008f1a:	e012      	b.n	8008f42 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008f1c:	68ba      	ldr	r2, [r7, #8]
 8008f1e:	69fb      	ldr	r3, [r7, #28]
 8008f20:	4413      	add	r3, r2
 8008f22:	7819      	ldrb	r1, [r3, #0]
 8008f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f26:	69fb      	ldr	r3, [r7, #28]
 8008f28:	4413      	add	r3, r2
 8008f2a:	3334      	adds	r3, #52	; 0x34
 8008f2c:	460a      	mov	r2, r1
 8008f2e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008f30:	68ba      	ldr	r2, [r7, #8]
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	4413      	add	r3, r2
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d006      	beq.n	8008f4a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f3c:	69fb      	ldr	r3, [r7, #28]
 8008f3e:	3301      	adds	r3, #1
 8008f40:	61fb      	str	r3, [r7, #28]
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	2b0f      	cmp	r3, #15
 8008f46:	d9e9      	bls.n	8008f1c <prvInitialiseNewTask+0x54>
 8008f48:	e000      	b.n	8008f4c <prvInitialiseNewTask+0x84>
			{
				break;
 8008f4a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f54:	e003      	b.n	8008f5e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f60:	2b06      	cmp	r3, #6
 8008f62:	d901      	bls.n	8008f68 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008f64:	2306      	movs	r3, #6
 8008f66:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f6c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f72:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f76:	2200      	movs	r2, #0
 8008f78:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7c:	3304      	adds	r3, #4
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7fe ff0e 	bl	8007da0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f86:	3318      	adds	r3, #24
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f7fe ff09 	bl	8007da0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f96:	f1c3 0207 	rsb	r2, r3, #7
 8008f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fa2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb6:	334c      	adds	r3, #76	; 0x4c
 8008fb8:	2260      	movs	r2, #96	; 0x60
 8008fba:	2100      	movs	r1, #0
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f001 fd06 	bl	800a9ce <memset>
 8008fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc4:	4a0c      	ldr	r2, [pc, #48]	; (8008ff8 <prvInitialiseNewTask+0x130>)
 8008fc6:	651a      	str	r2, [r3, #80]	; 0x50
 8008fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fca:	4a0c      	ldr	r2, [pc, #48]	; (8008ffc <prvInitialiseNewTask+0x134>)
 8008fcc:	655a      	str	r2, [r3, #84]	; 0x54
 8008fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd0:	4a0b      	ldr	r2, [pc, #44]	; (8009000 <prvInitialiseNewTask+0x138>)
 8008fd2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008fd4:	683a      	ldr	r2, [r7, #0]
 8008fd6:	68f9      	ldr	r1, [r7, #12]
 8008fd8:	69b8      	ldr	r0, [r7, #24]
 8008fda:	f000 ff8f 	bl	8009efc <pxPortInitialiseStack>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d002      	beq.n	8008ff0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ff0:	bf00      	nop
 8008ff2:	3720      	adds	r7, #32
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	0800f130 	.word	0x0800f130
 8008ffc:	0800f150 	.word	0x0800f150
 8009000:	0800f110 	.word	0x0800f110

08009004 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800900c:	f001 f8a2 	bl	800a154 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009010:	4b2a      	ldr	r3, [pc, #168]	; (80090bc <prvAddNewTaskToReadyList+0xb8>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	3301      	adds	r3, #1
 8009016:	4a29      	ldr	r2, [pc, #164]	; (80090bc <prvAddNewTaskToReadyList+0xb8>)
 8009018:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800901a:	4b29      	ldr	r3, [pc, #164]	; (80090c0 <prvAddNewTaskToReadyList+0xbc>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d109      	bne.n	8009036 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009022:	4a27      	ldr	r2, [pc, #156]	; (80090c0 <prvAddNewTaskToReadyList+0xbc>)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009028:	4b24      	ldr	r3, [pc, #144]	; (80090bc <prvAddNewTaskToReadyList+0xb8>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2b01      	cmp	r3, #1
 800902e:	d110      	bne.n	8009052 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009030:	f000 fc80 	bl	8009934 <prvInitialiseTaskLists>
 8009034:	e00d      	b.n	8009052 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009036:	4b23      	ldr	r3, [pc, #140]	; (80090c4 <prvAddNewTaskToReadyList+0xc0>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d109      	bne.n	8009052 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800903e:	4b20      	ldr	r3, [pc, #128]	; (80090c0 <prvAddNewTaskToReadyList+0xbc>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009048:	429a      	cmp	r2, r3
 800904a:	d802      	bhi.n	8009052 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800904c:	4a1c      	ldr	r2, [pc, #112]	; (80090c0 <prvAddNewTaskToReadyList+0xbc>)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009052:	4b1d      	ldr	r3, [pc, #116]	; (80090c8 <prvAddNewTaskToReadyList+0xc4>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	3301      	adds	r3, #1
 8009058:	4a1b      	ldr	r2, [pc, #108]	; (80090c8 <prvAddNewTaskToReadyList+0xc4>)
 800905a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009060:	2201      	movs	r2, #1
 8009062:	409a      	lsls	r2, r3
 8009064:	4b19      	ldr	r3, [pc, #100]	; (80090cc <prvAddNewTaskToReadyList+0xc8>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4313      	orrs	r3, r2
 800906a:	4a18      	ldr	r2, [pc, #96]	; (80090cc <prvAddNewTaskToReadyList+0xc8>)
 800906c:	6013      	str	r3, [r2, #0]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009072:	4613      	mov	r3, r2
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	4413      	add	r3, r2
 8009078:	009b      	lsls	r3, r3, #2
 800907a:	4a15      	ldr	r2, [pc, #84]	; (80090d0 <prvAddNewTaskToReadyList+0xcc>)
 800907c:	441a      	add	r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	3304      	adds	r3, #4
 8009082:	4619      	mov	r1, r3
 8009084:	4610      	mov	r0, r2
 8009086:	f7fe fe98 	bl	8007dba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800908a:	f001 f893 	bl	800a1b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800908e:	4b0d      	ldr	r3, [pc, #52]	; (80090c4 <prvAddNewTaskToReadyList+0xc0>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00e      	beq.n	80090b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009096:	4b0a      	ldr	r3, [pc, #40]	; (80090c0 <prvAddNewTaskToReadyList+0xbc>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d207      	bcs.n	80090b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80090a4:	4b0b      	ldr	r3, [pc, #44]	; (80090d4 <prvAddNewTaskToReadyList+0xd0>)
 80090a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090aa:	601a      	str	r2, [r3, #0]
 80090ac:	f3bf 8f4f 	dsb	sy
 80090b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090b4:	bf00      	nop
 80090b6:	3708      	adds	r7, #8
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}
 80090bc:	2000083c 	.word	0x2000083c
 80090c0:	2000073c 	.word	0x2000073c
 80090c4:	20000848 	.word	0x20000848
 80090c8:	20000858 	.word	0x20000858
 80090cc:	20000844 	.word	0x20000844
 80090d0:	20000740 	.word	0x20000740
 80090d4:	e000ed04 	.word	0xe000ed04

080090d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80090e0:	2300      	movs	r3, #0
 80090e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d017      	beq.n	800911a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80090ea:	4b13      	ldr	r3, [pc, #76]	; (8009138 <vTaskDelay+0x60>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d00a      	beq.n	8009108 <vTaskDelay+0x30>
	__asm volatile
 80090f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f6:	f383 8811 	msr	BASEPRI, r3
 80090fa:	f3bf 8f6f 	isb	sy
 80090fe:	f3bf 8f4f 	dsb	sy
 8009102:	60bb      	str	r3, [r7, #8]
}
 8009104:	bf00      	nop
 8009106:	e7fe      	b.n	8009106 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009108:	f000 f92e 	bl	8009368 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800910c:	2100      	movs	r1, #0
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 fe8e 	bl	8009e30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009114:	f000 f936 	bl	8009384 <xTaskResumeAll>
 8009118:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d107      	bne.n	8009130 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009120:	4b06      	ldr	r3, [pc, #24]	; (800913c <vTaskDelay+0x64>)
 8009122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009126:	601a      	str	r2, [r3, #0]
 8009128:	f3bf 8f4f 	dsb	sy
 800912c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009130:	bf00      	nop
 8009132:	3710      	adds	r7, #16
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}
 8009138:	20000864 	.word	0x20000864
 800913c:	e000ed04 	.word	0xe000ed04

08009140 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8009140:	b580      	push	{r7, lr}
 8009142:	b088      	sub	sp, #32
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 800914a:	2300      	movs	r3, #0
 800914c:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	2b06      	cmp	r3, #6
 8009152:	d90a      	bls.n	800916a <vTaskPrioritySet+0x2a>
	__asm volatile
 8009154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009158:	f383 8811 	msr	BASEPRI, r3
 800915c:	f3bf 8f6f 	isb	sy
 8009160:	f3bf 8f4f 	dsb	sy
 8009164:	60fb      	str	r3, [r7, #12]
}
 8009166:	bf00      	nop
 8009168:	e7fe      	b.n	8009168 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	2b06      	cmp	r3, #6
 800916e:	d901      	bls.n	8009174 <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009170:	2306      	movs	r3, #6
 8009172:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8009174:	f000 ffee 	bl	800a154 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d102      	bne.n	8009184 <vTaskPrioritySet+0x44>
 800917e:	4b41      	ldr	r3, [pc, #260]	; (8009284 <vTaskPrioritySet+0x144>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	e000      	b.n	8009186 <vTaskPrioritySet+0x46>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8009188:	69bb      	ldr	r3, [r7, #24]
 800918a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800918c:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 800918e:	697a      	ldr	r2, [r7, #20]
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	429a      	cmp	r2, r3
 8009194:	d06f      	beq.n	8009276 <vTaskPrioritySet+0x136>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8009196:	683a      	ldr	r2, [r7, #0]
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	429a      	cmp	r2, r3
 800919c:	d90d      	bls.n	80091ba <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 800919e:	4b39      	ldr	r3, [pc, #228]	; (8009284 <vTaskPrioritySet+0x144>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	69ba      	ldr	r2, [r7, #24]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d00f      	beq.n	80091c8 <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80091a8:	4b36      	ldr	r3, [pc, #216]	; (8009284 <vTaskPrioritySet+0x144>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ae:	683a      	ldr	r2, [r7, #0]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d309      	bcc.n	80091c8 <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 80091b4:	2301      	movs	r3, #1
 80091b6:	61fb      	str	r3, [r7, #28]
 80091b8:	e006      	b.n	80091c8 <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 80091ba:	4b32      	ldr	r3, [pc, #200]	; (8009284 <vTaskPrioritySet+0x144>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	69ba      	ldr	r2, [r7, #24]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d101      	bne.n	80091c8 <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 80091c4:	2301      	movs	r3, #1
 80091c6:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091cc:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d102      	bne.n	80091e0 <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 80091da:	69bb      	ldr	r3, [r7, #24]
 80091dc:	683a      	ldr	r2, [r7, #0]
 80091de:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 80091e0:	69bb      	ldr	r3, [r7, #24]
 80091e2:	683a      	ldr	r2, [r7, #0]
 80091e4:	645a      	str	r2, [r3, #68]	; 0x44
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80091e6:	69bb      	ldr	r3, [r7, #24]
 80091e8:	699b      	ldr	r3, [r3, #24]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	db04      	blt.n	80091f8 <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	f1c3 0207 	rsb	r2, r3, #7
 80091f4:	69bb      	ldr	r3, [r7, #24]
 80091f6:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80091f8:	69bb      	ldr	r3, [r7, #24]
 80091fa:	6959      	ldr	r1, [r3, #20]
 80091fc:	693a      	ldr	r2, [r7, #16]
 80091fe:	4613      	mov	r3, r2
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	4413      	add	r3, r2
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	4a20      	ldr	r2, [pc, #128]	; (8009288 <vTaskPrioritySet+0x148>)
 8009208:	4413      	add	r3, r2
 800920a:	4299      	cmp	r1, r3
 800920c:	d128      	bne.n	8009260 <vTaskPrioritySet+0x120>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800920e:	69bb      	ldr	r3, [r7, #24]
 8009210:	3304      	adds	r3, #4
 8009212:	4618      	mov	r0, r3
 8009214:	f7fe fe2e 	bl	8007e74 <uxListRemove>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d109      	bne.n	8009232 <vTaskPrioritySet+0xf2>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 800921e:	2201      	movs	r2, #1
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	fa02 f303 	lsl.w	r3, r2, r3
 8009226:	43da      	mvns	r2, r3
 8009228:	4b18      	ldr	r3, [pc, #96]	; (800928c <vTaskPrioritySet+0x14c>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4013      	ands	r3, r2
 800922e:	4a17      	ldr	r2, [pc, #92]	; (800928c <vTaskPrioritySet+0x14c>)
 8009230:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8009232:	69bb      	ldr	r3, [r7, #24]
 8009234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009236:	2201      	movs	r2, #1
 8009238:	409a      	lsls	r2, r3
 800923a:	4b14      	ldr	r3, [pc, #80]	; (800928c <vTaskPrioritySet+0x14c>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4313      	orrs	r3, r2
 8009240:	4a12      	ldr	r2, [pc, #72]	; (800928c <vTaskPrioritySet+0x14c>)
 8009242:	6013      	str	r3, [r2, #0]
 8009244:	69bb      	ldr	r3, [r7, #24]
 8009246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009248:	4613      	mov	r3, r2
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	4413      	add	r3, r2
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	4a0d      	ldr	r2, [pc, #52]	; (8009288 <vTaskPrioritySet+0x148>)
 8009252:	441a      	add	r2, r3
 8009254:	69bb      	ldr	r3, [r7, #24]
 8009256:	3304      	adds	r3, #4
 8009258:	4619      	mov	r1, r3
 800925a:	4610      	mov	r0, r2
 800925c:	f7fe fdad 	bl	8007dba <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8009260:	69fb      	ldr	r3, [r7, #28]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d007      	beq.n	8009276 <vTaskPrioritySet+0x136>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8009266:	4b0a      	ldr	r3, [pc, #40]	; (8009290 <vTaskPrioritySet+0x150>)
 8009268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800926c:	601a      	str	r2, [r3, #0]
 800926e:	f3bf 8f4f 	dsb	sy
 8009272:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8009276:	f000 ff9d 	bl	800a1b4 <vPortExitCritical>
	}
 800927a:	bf00      	nop
 800927c:	3720      	adds	r7, #32
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	2000073c 	.word	0x2000073c
 8009288:	20000740 	.word	0x20000740
 800928c:	20000844 	.word	0x20000844
 8009290:	e000ed04 	.word	0xe000ed04

08009294 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b08a      	sub	sp, #40	; 0x28
 8009298:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800929a:	2300      	movs	r3, #0
 800929c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800929e:	2300      	movs	r3, #0
 80092a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80092a2:	463a      	mov	r2, r7
 80092a4:	1d39      	adds	r1, r7, #4
 80092a6:	f107 0308 	add.w	r3, r7, #8
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7f9 feb2 	bl	8003014 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80092b0:	6839      	ldr	r1, [r7, #0]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	68ba      	ldr	r2, [r7, #8]
 80092b6:	9202      	str	r2, [sp, #8]
 80092b8:	9301      	str	r3, [sp, #4]
 80092ba:	2300      	movs	r3, #0
 80092bc:	9300      	str	r3, [sp, #0]
 80092be:	2300      	movs	r3, #0
 80092c0:	460a      	mov	r2, r1
 80092c2:	4921      	ldr	r1, [pc, #132]	; (8009348 <vTaskStartScheduler+0xb4>)
 80092c4:	4821      	ldr	r0, [pc, #132]	; (800934c <vTaskStartScheduler+0xb8>)
 80092c6:	f7ff fd5d 	bl	8008d84 <xTaskCreateStatic>
 80092ca:	4603      	mov	r3, r0
 80092cc:	4a20      	ldr	r2, [pc, #128]	; (8009350 <vTaskStartScheduler+0xbc>)
 80092ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80092d0:	4b1f      	ldr	r3, [pc, #124]	; (8009350 <vTaskStartScheduler+0xbc>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d002      	beq.n	80092de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80092d8:	2301      	movs	r3, #1
 80092da:	617b      	str	r3, [r7, #20]
 80092dc:	e001      	b.n	80092e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80092de:	2300      	movs	r3, #0
 80092e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d11b      	bne.n	8009320 <vTaskStartScheduler+0x8c>
	__asm volatile
 80092e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ec:	f383 8811 	msr	BASEPRI, r3
 80092f0:	f3bf 8f6f 	isb	sy
 80092f4:	f3bf 8f4f 	dsb	sy
 80092f8:	613b      	str	r3, [r7, #16]
}
 80092fa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80092fc:	4b15      	ldr	r3, [pc, #84]	; (8009354 <vTaskStartScheduler+0xc0>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	334c      	adds	r3, #76	; 0x4c
 8009302:	4a15      	ldr	r2, [pc, #84]	; (8009358 <vTaskStartScheduler+0xc4>)
 8009304:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009306:	4b15      	ldr	r3, [pc, #84]	; (800935c <vTaskStartScheduler+0xc8>)
 8009308:	f04f 32ff 	mov.w	r2, #4294967295
 800930c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800930e:	4b14      	ldr	r3, [pc, #80]	; (8009360 <vTaskStartScheduler+0xcc>)
 8009310:	2201      	movs	r2, #1
 8009312:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009314:	4b13      	ldr	r3, [pc, #76]	; (8009364 <vTaskStartScheduler+0xd0>)
 8009316:	2200      	movs	r2, #0
 8009318:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800931a:	f000 fe79 	bl	800a010 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800931e:	e00e      	b.n	800933e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009326:	d10a      	bne.n	800933e <vTaskStartScheduler+0xaa>
	__asm volatile
 8009328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932c:	f383 8811 	msr	BASEPRI, r3
 8009330:	f3bf 8f6f 	isb	sy
 8009334:	f3bf 8f4f 	dsb	sy
 8009338:	60fb      	str	r3, [r7, #12]
}
 800933a:	bf00      	nop
 800933c:	e7fe      	b.n	800933c <vTaskStartScheduler+0xa8>
}
 800933e:	bf00      	nop
 8009340:	3718      	adds	r7, #24
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	0800f0e8 	.word	0x0800f0e8
 800934c:	08009905 	.word	0x08009905
 8009350:	20000860 	.word	0x20000860
 8009354:	2000073c 	.word	0x2000073c
 8009358:	20000060 	.word	0x20000060
 800935c:	2000085c 	.word	0x2000085c
 8009360:	20000848 	.word	0x20000848
 8009364:	20000840 	.word	0x20000840

08009368 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009368:	b480      	push	{r7}
 800936a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800936c:	4b04      	ldr	r3, [pc, #16]	; (8009380 <vTaskSuspendAll+0x18>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	3301      	adds	r3, #1
 8009372:	4a03      	ldr	r2, [pc, #12]	; (8009380 <vTaskSuspendAll+0x18>)
 8009374:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009376:	bf00      	nop
 8009378:	46bd      	mov	sp, r7
 800937a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937e:	4770      	bx	lr
 8009380:	20000864 	.word	0x20000864

08009384 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800938a:	2300      	movs	r3, #0
 800938c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800938e:	2300      	movs	r3, #0
 8009390:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009392:	4b41      	ldr	r3, [pc, #260]	; (8009498 <xTaskResumeAll+0x114>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d10a      	bne.n	80093b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800939a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800939e:	f383 8811 	msr	BASEPRI, r3
 80093a2:	f3bf 8f6f 	isb	sy
 80093a6:	f3bf 8f4f 	dsb	sy
 80093aa:	603b      	str	r3, [r7, #0]
}
 80093ac:	bf00      	nop
 80093ae:	e7fe      	b.n	80093ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80093b0:	f000 fed0 	bl	800a154 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80093b4:	4b38      	ldr	r3, [pc, #224]	; (8009498 <xTaskResumeAll+0x114>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	3b01      	subs	r3, #1
 80093ba:	4a37      	ldr	r2, [pc, #220]	; (8009498 <xTaskResumeAll+0x114>)
 80093bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093be:	4b36      	ldr	r3, [pc, #216]	; (8009498 <xTaskResumeAll+0x114>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d161      	bne.n	800948a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80093c6:	4b35      	ldr	r3, [pc, #212]	; (800949c <xTaskResumeAll+0x118>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d05d      	beq.n	800948a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093ce:	e02e      	b.n	800942e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093d0:	4b33      	ldr	r3, [pc, #204]	; (80094a0 <xTaskResumeAll+0x11c>)
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	68db      	ldr	r3, [r3, #12]
 80093d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	3318      	adds	r3, #24
 80093dc:	4618      	mov	r0, r3
 80093de:	f7fe fd49 	bl	8007e74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	3304      	adds	r3, #4
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7fe fd44 	bl	8007e74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f0:	2201      	movs	r2, #1
 80093f2:	409a      	lsls	r2, r3
 80093f4:	4b2b      	ldr	r3, [pc, #172]	; (80094a4 <xTaskResumeAll+0x120>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	4a2a      	ldr	r2, [pc, #168]	; (80094a4 <xTaskResumeAll+0x120>)
 80093fc:	6013      	str	r3, [r2, #0]
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009402:	4613      	mov	r3, r2
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	4413      	add	r3, r2
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	4a27      	ldr	r2, [pc, #156]	; (80094a8 <xTaskResumeAll+0x124>)
 800940c:	441a      	add	r2, r3
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	3304      	adds	r3, #4
 8009412:	4619      	mov	r1, r3
 8009414:	4610      	mov	r0, r2
 8009416:	f7fe fcd0 	bl	8007dba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800941e:	4b23      	ldr	r3, [pc, #140]	; (80094ac <xTaskResumeAll+0x128>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009424:	429a      	cmp	r2, r3
 8009426:	d302      	bcc.n	800942e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009428:	4b21      	ldr	r3, [pc, #132]	; (80094b0 <xTaskResumeAll+0x12c>)
 800942a:	2201      	movs	r2, #1
 800942c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800942e:	4b1c      	ldr	r3, [pc, #112]	; (80094a0 <xTaskResumeAll+0x11c>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d1cc      	bne.n	80093d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d001      	beq.n	8009440 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800943c:	f000 fb1c 	bl	8009a78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009440:	4b1c      	ldr	r3, [pc, #112]	; (80094b4 <xTaskResumeAll+0x130>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d010      	beq.n	800946e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800944c:	f000 f836 	bl	80094bc <xTaskIncrementTick>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d002      	beq.n	800945c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009456:	4b16      	ldr	r3, [pc, #88]	; (80094b0 <xTaskResumeAll+0x12c>)
 8009458:	2201      	movs	r2, #1
 800945a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	3b01      	subs	r3, #1
 8009460:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d1f1      	bne.n	800944c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009468:	4b12      	ldr	r3, [pc, #72]	; (80094b4 <xTaskResumeAll+0x130>)
 800946a:	2200      	movs	r2, #0
 800946c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800946e:	4b10      	ldr	r3, [pc, #64]	; (80094b0 <xTaskResumeAll+0x12c>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d009      	beq.n	800948a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009476:	2301      	movs	r3, #1
 8009478:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800947a:	4b0f      	ldr	r3, [pc, #60]	; (80094b8 <xTaskResumeAll+0x134>)
 800947c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009480:	601a      	str	r2, [r3, #0]
 8009482:	f3bf 8f4f 	dsb	sy
 8009486:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800948a:	f000 fe93 	bl	800a1b4 <vPortExitCritical>

	return xAlreadyYielded;
 800948e:	68bb      	ldr	r3, [r7, #8]
}
 8009490:	4618      	mov	r0, r3
 8009492:	3710      	adds	r7, #16
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}
 8009498:	20000864 	.word	0x20000864
 800949c:	2000083c 	.word	0x2000083c
 80094a0:	200007fc 	.word	0x200007fc
 80094a4:	20000844 	.word	0x20000844
 80094a8:	20000740 	.word	0x20000740
 80094ac:	2000073c 	.word	0x2000073c
 80094b0:	20000850 	.word	0x20000850
 80094b4:	2000084c 	.word	0x2000084c
 80094b8:	e000ed04 	.word	0xe000ed04

080094bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b086      	sub	sp, #24
 80094c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80094c2:	2300      	movs	r3, #0
 80094c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094c6:	4b4e      	ldr	r3, [pc, #312]	; (8009600 <xTaskIncrementTick+0x144>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	f040 808e 	bne.w	80095ec <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80094d0:	4b4c      	ldr	r3, [pc, #304]	; (8009604 <xTaskIncrementTick+0x148>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	3301      	adds	r3, #1
 80094d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80094d8:	4a4a      	ldr	r2, [pc, #296]	; (8009604 <xTaskIncrementTick+0x148>)
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d120      	bne.n	8009526 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80094e4:	4b48      	ldr	r3, [pc, #288]	; (8009608 <xTaskIncrementTick+0x14c>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d00a      	beq.n	8009504 <xTaskIncrementTick+0x48>
	__asm volatile
 80094ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f2:	f383 8811 	msr	BASEPRI, r3
 80094f6:	f3bf 8f6f 	isb	sy
 80094fa:	f3bf 8f4f 	dsb	sy
 80094fe:	603b      	str	r3, [r7, #0]
}
 8009500:	bf00      	nop
 8009502:	e7fe      	b.n	8009502 <xTaskIncrementTick+0x46>
 8009504:	4b40      	ldr	r3, [pc, #256]	; (8009608 <xTaskIncrementTick+0x14c>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	60fb      	str	r3, [r7, #12]
 800950a:	4b40      	ldr	r3, [pc, #256]	; (800960c <xTaskIncrementTick+0x150>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4a3e      	ldr	r2, [pc, #248]	; (8009608 <xTaskIncrementTick+0x14c>)
 8009510:	6013      	str	r3, [r2, #0]
 8009512:	4a3e      	ldr	r2, [pc, #248]	; (800960c <xTaskIncrementTick+0x150>)
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	6013      	str	r3, [r2, #0]
 8009518:	4b3d      	ldr	r3, [pc, #244]	; (8009610 <xTaskIncrementTick+0x154>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	3301      	adds	r3, #1
 800951e:	4a3c      	ldr	r2, [pc, #240]	; (8009610 <xTaskIncrementTick+0x154>)
 8009520:	6013      	str	r3, [r2, #0]
 8009522:	f000 faa9 	bl	8009a78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009526:	4b3b      	ldr	r3, [pc, #236]	; (8009614 <xTaskIncrementTick+0x158>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	693a      	ldr	r2, [r7, #16]
 800952c:	429a      	cmp	r2, r3
 800952e:	d348      	bcc.n	80095c2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009530:	4b35      	ldr	r3, [pc, #212]	; (8009608 <xTaskIncrementTick+0x14c>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d104      	bne.n	8009544 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800953a:	4b36      	ldr	r3, [pc, #216]	; (8009614 <xTaskIncrementTick+0x158>)
 800953c:	f04f 32ff 	mov.w	r2, #4294967295
 8009540:	601a      	str	r2, [r3, #0]
					break;
 8009542:	e03e      	b.n	80095c2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009544:	4b30      	ldr	r3, [pc, #192]	; (8009608 <xTaskIncrementTick+0x14c>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	68db      	ldr	r3, [r3, #12]
 800954c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009554:	693a      	ldr	r2, [r7, #16]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	429a      	cmp	r2, r3
 800955a:	d203      	bcs.n	8009564 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800955c:	4a2d      	ldr	r2, [pc, #180]	; (8009614 <xTaskIncrementTick+0x158>)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009562:	e02e      	b.n	80095c2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	3304      	adds	r3, #4
 8009568:	4618      	mov	r0, r3
 800956a:	f7fe fc83 	bl	8007e74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009572:	2b00      	cmp	r3, #0
 8009574:	d004      	beq.n	8009580 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	3318      	adds	r3, #24
 800957a:	4618      	mov	r0, r3
 800957c:	f7fe fc7a 	bl	8007e74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009584:	2201      	movs	r2, #1
 8009586:	409a      	lsls	r2, r3
 8009588:	4b23      	ldr	r3, [pc, #140]	; (8009618 <xTaskIncrementTick+0x15c>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4313      	orrs	r3, r2
 800958e:	4a22      	ldr	r2, [pc, #136]	; (8009618 <xTaskIncrementTick+0x15c>)
 8009590:	6013      	str	r3, [r2, #0]
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009596:	4613      	mov	r3, r2
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	4413      	add	r3, r2
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	4a1f      	ldr	r2, [pc, #124]	; (800961c <xTaskIncrementTick+0x160>)
 80095a0:	441a      	add	r2, r3
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	3304      	adds	r3, #4
 80095a6:	4619      	mov	r1, r3
 80095a8:	4610      	mov	r0, r2
 80095aa:	f7fe fc06 	bl	8007dba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095b2:	4b1b      	ldr	r3, [pc, #108]	; (8009620 <xTaskIncrementTick+0x164>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d3b9      	bcc.n	8009530 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80095bc:	2301      	movs	r3, #1
 80095be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095c0:	e7b6      	b.n	8009530 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80095c2:	4b17      	ldr	r3, [pc, #92]	; (8009620 <xTaskIncrementTick+0x164>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095c8:	4914      	ldr	r1, [pc, #80]	; (800961c <xTaskIncrementTick+0x160>)
 80095ca:	4613      	mov	r3, r2
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	4413      	add	r3, r2
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	440b      	add	r3, r1
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d901      	bls.n	80095de <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80095da:	2301      	movs	r3, #1
 80095dc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80095de:	4b11      	ldr	r3, [pc, #68]	; (8009624 <xTaskIncrementTick+0x168>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d007      	beq.n	80095f6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80095e6:	2301      	movs	r3, #1
 80095e8:	617b      	str	r3, [r7, #20]
 80095ea:	e004      	b.n	80095f6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80095ec:	4b0e      	ldr	r3, [pc, #56]	; (8009628 <xTaskIncrementTick+0x16c>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	3301      	adds	r3, #1
 80095f2:	4a0d      	ldr	r2, [pc, #52]	; (8009628 <xTaskIncrementTick+0x16c>)
 80095f4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80095f6:	697b      	ldr	r3, [r7, #20]
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3718      	adds	r7, #24
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	20000864 	.word	0x20000864
 8009604:	20000840 	.word	0x20000840
 8009608:	200007f4 	.word	0x200007f4
 800960c:	200007f8 	.word	0x200007f8
 8009610:	20000854 	.word	0x20000854
 8009614:	2000085c 	.word	0x2000085c
 8009618:	20000844 	.word	0x20000844
 800961c:	20000740 	.word	0x20000740
 8009620:	2000073c 	.word	0x2000073c
 8009624:	20000850 	.word	0x20000850
 8009628:	2000084c 	.word	0x2000084c

0800962c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800962c:	b480      	push	{r7}
 800962e:	b087      	sub	sp, #28
 8009630:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009632:	4b29      	ldr	r3, [pc, #164]	; (80096d8 <vTaskSwitchContext+0xac>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d003      	beq.n	8009642 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800963a:	4b28      	ldr	r3, [pc, #160]	; (80096dc <vTaskSwitchContext+0xb0>)
 800963c:	2201      	movs	r2, #1
 800963e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009640:	e044      	b.n	80096cc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8009642:	4b26      	ldr	r3, [pc, #152]	; (80096dc <vTaskSwitchContext+0xb0>)
 8009644:	2200      	movs	r2, #0
 8009646:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009648:	4b25      	ldr	r3, [pc, #148]	; (80096e0 <vTaskSwitchContext+0xb4>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	fab3 f383 	clz	r3, r3
 8009654:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009656:	7afb      	ldrb	r3, [r7, #11]
 8009658:	f1c3 031f 	rsb	r3, r3, #31
 800965c:	617b      	str	r3, [r7, #20]
 800965e:	4921      	ldr	r1, [pc, #132]	; (80096e4 <vTaskSwitchContext+0xb8>)
 8009660:	697a      	ldr	r2, [r7, #20]
 8009662:	4613      	mov	r3, r2
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	4413      	add	r3, r2
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	440b      	add	r3, r1
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d10a      	bne.n	8009688 <vTaskSwitchContext+0x5c>
	__asm volatile
 8009672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009676:	f383 8811 	msr	BASEPRI, r3
 800967a:	f3bf 8f6f 	isb	sy
 800967e:	f3bf 8f4f 	dsb	sy
 8009682:	607b      	str	r3, [r7, #4]
}
 8009684:	bf00      	nop
 8009686:	e7fe      	b.n	8009686 <vTaskSwitchContext+0x5a>
 8009688:	697a      	ldr	r2, [r7, #20]
 800968a:	4613      	mov	r3, r2
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	4413      	add	r3, r2
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	4a14      	ldr	r2, [pc, #80]	; (80096e4 <vTaskSwitchContext+0xb8>)
 8009694:	4413      	add	r3, r2
 8009696:	613b      	str	r3, [r7, #16]
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	685a      	ldr	r2, [r3, #4]
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	605a      	str	r2, [r3, #4]
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	685a      	ldr	r2, [r3, #4]
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	3308      	adds	r3, #8
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d104      	bne.n	80096b8 <vTaskSwitchContext+0x8c>
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	685a      	ldr	r2, [r3, #4]
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	605a      	str	r2, [r3, #4]
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	68db      	ldr	r3, [r3, #12]
 80096be:	4a0a      	ldr	r2, [pc, #40]	; (80096e8 <vTaskSwitchContext+0xbc>)
 80096c0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80096c2:	4b09      	ldr	r3, [pc, #36]	; (80096e8 <vTaskSwitchContext+0xbc>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	334c      	adds	r3, #76	; 0x4c
 80096c8:	4a08      	ldr	r2, [pc, #32]	; (80096ec <vTaskSwitchContext+0xc0>)
 80096ca:	6013      	str	r3, [r2, #0]
}
 80096cc:	bf00      	nop
 80096ce:	371c      	adds	r7, #28
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr
 80096d8:	20000864 	.word	0x20000864
 80096dc:	20000850 	.word	0x20000850
 80096e0:	20000844 	.word	0x20000844
 80096e4:	20000740 	.word	0x20000740
 80096e8:	2000073c 	.word	0x2000073c
 80096ec:	20000060 	.word	0x20000060

080096f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b084      	sub	sp, #16
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d10a      	bne.n	8009716 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009704:	f383 8811 	msr	BASEPRI, r3
 8009708:	f3bf 8f6f 	isb	sy
 800970c:	f3bf 8f4f 	dsb	sy
 8009710:	60fb      	str	r3, [r7, #12]
}
 8009712:	bf00      	nop
 8009714:	e7fe      	b.n	8009714 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009716:	4b07      	ldr	r3, [pc, #28]	; (8009734 <vTaskPlaceOnEventList+0x44>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	3318      	adds	r3, #24
 800971c:	4619      	mov	r1, r3
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f7fe fb6f 	bl	8007e02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009724:	2101      	movs	r1, #1
 8009726:	6838      	ldr	r0, [r7, #0]
 8009728:	f000 fb82 	bl	8009e30 <prvAddCurrentTaskToDelayedList>
}
 800972c:	bf00      	nop
 800972e:	3710      	adds	r7, #16
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}
 8009734:	2000073c 	.word	0x2000073c

08009738 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b086      	sub	sp, #24
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	68db      	ldr	r3, [r3, #12]
 8009746:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d10a      	bne.n	8009764 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800974e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009752:	f383 8811 	msr	BASEPRI, r3
 8009756:	f3bf 8f6f 	isb	sy
 800975a:	f3bf 8f4f 	dsb	sy
 800975e:	60fb      	str	r3, [r7, #12]
}
 8009760:	bf00      	nop
 8009762:	e7fe      	b.n	8009762 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	3318      	adds	r3, #24
 8009768:	4618      	mov	r0, r3
 800976a:	f7fe fb83 	bl	8007e74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800976e:	4b1d      	ldr	r3, [pc, #116]	; (80097e4 <xTaskRemoveFromEventList+0xac>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d11c      	bne.n	80097b0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	3304      	adds	r3, #4
 800977a:	4618      	mov	r0, r3
 800977c:	f7fe fb7a 	bl	8007e74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009784:	2201      	movs	r2, #1
 8009786:	409a      	lsls	r2, r3
 8009788:	4b17      	ldr	r3, [pc, #92]	; (80097e8 <xTaskRemoveFromEventList+0xb0>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4313      	orrs	r3, r2
 800978e:	4a16      	ldr	r2, [pc, #88]	; (80097e8 <xTaskRemoveFromEventList+0xb0>)
 8009790:	6013      	str	r3, [r2, #0]
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009796:	4613      	mov	r3, r2
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	4413      	add	r3, r2
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	4a13      	ldr	r2, [pc, #76]	; (80097ec <xTaskRemoveFromEventList+0xb4>)
 80097a0:	441a      	add	r2, r3
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	3304      	adds	r3, #4
 80097a6:	4619      	mov	r1, r3
 80097a8:	4610      	mov	r0, r2
 80097aa:	f7fe fb06 	bl	8007dba <vListInsertEnd>
 80097ae:	e005      	b.n	80097bc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	3318      	adds	r3, #24
 80097b4:	4619      	mov	r1, r3
 80097b6:	480e      	ldr	r0, [pc, #56]	; (80097f0 <xTaskRemoveFromEventList+0xb8>)
 80097b8:	f7fe faff 	bl	8007dba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097c0:	4b0c      	ldr	r3, [pc, #48]	; (80097f4 <xTaskRemoveFromEventList+0xbc>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d905      	bls.n	80097d6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80097ca:	2301      	movs	r3, #1
 80097cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80097ce:	4b0a      	ldr	r3, [pc, #40]	; (80097f8 <xTaskRemoveFromEventList+0xc0>)
 80097d0:	2201      	movs	r2, #1
 80097d2:	601a      	str	r2, [r3, #0]
 80097d4:	e001      	b.n	80097da <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80097d6:	2300      	movs	r3, #0
 80097d8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80097da:	697b      	ldr	r3, [r7, #20]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3718      	adds	r7, #24
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	20000864 	.word	0x20000864
 80097e8:	20000844 	.word	0x20000844
 80097ec:	20000740 	.word	0x20000740
 80097f0:	200007fc 	.word	0x200007fc
 80097f4:	2000073c 	.word	0x2000073c
 80097f8:	20000850 	.word	0x20000850

080097fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80097fc:	b480      	push	{r7}
 80097fe:	b083      	sub	sp, #12
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009804:	4b06      	ldr	r3, [pc, #24]	; (8009820 <vTaskInternalSetTimeOutState+0x24>)
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800980c:	4b05      	ldr	r3, [pc, #20]	; (8009824 <vTaskInternalSetTimeOutState+0x28>)
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	605a      	str	r2, [r3, #4]
}
 8009814:	bf00      	nop
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr
 8009820:	20000854 	.word	0x20000854
 8009824:	20000840 	.word	0x20000840

08009828 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b088      	sub	sp, #32
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d10a      	bne.n	800984e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800983c:	f383 8811 	msr	BASEPRI, r3
 8009840:	f3bf 8f6f 	isb	sy
 8009844:	f3bf 8f4f 	dsb	sy
 8009848:	613b      	str	r3, [r7, #16]
}
 800984a:	bf00      	nop
 800984c:	e7fe      	b.n	800984c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d10a      	bne.n	800986a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009858:	f383 8811 	msr	BASEPRI, r3
 800985c:	f3bf 8f6f 	isb	sy
 8009860:	f3bf 8f4f 	dsb	sy
 8009864:	60fb      	str	r3, [r7, #12]
}
 8009866:	bf00      	nop
 8009868:	e7fe      	b.n	8009868 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800986a:	f000 fc73 	bl	800a154 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800986e:	4b1d      	ldr	r3, [pc, #116]	; (80098e4 <xTaskCheckForTimeOut+0xbc>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	69ba      	ldr	r2, [r7, #24]
 800987a:	1ad3      	subs	r3, r2, r3
 800987c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009886:	d102      	bne.n	800988e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009888:	2300      	movs	r3, #0
 800988a:	61fb      	str	r3, [r7, #28]
 800988c:	e023      	b.n	80098d6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	4b15      	ldr	r3, [pc, #84]	; (80098e8 <xTaskCheckForTimeOut+0xc0>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	429a      	cmp	r2, r3
 8009898:	d007      	beq.n	80098aa <xTaskCheckForTimeOut+0x82>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	685b      	ldr	r3, [r3, #4]
 800989e:	69ba      	ldr	r2, [r7, #24]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d302      	bcc.n	80098aa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80098a4:	2301      	movs	r3, #1
 80098a6:	61fb      	str	r3, [r7, #28]
 80098a8:	e015      	b.n	80098d6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	697a      	ldr	r2, [r7, #20]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d20b      	bcs.n	80098cc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	1ad2      	subs	r2, r2, r3
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f7ff ff9b 	bl	80097fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80098c6:	2300      	movs	r3, #0
 80098c8:	61fb      	str	r3, [r7, #28]
 80098ca:	e004      	b.n	80098d6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	2200      	movs	r2, #0
 80098d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80098d2:	2301      	movs	r3, #1
 80098d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80098d6:	f000 fc6d 	bl	800a1b4 <vPortExitCritical>

	return xReturn;
 80098da:	69fb      	ldr	r3, [r7, #28]
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3720      	adds	r7, #32
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}
 80098e4:	20000840 	.word	0x20000840
 80098e8:	20000854 	.word	0x20000854

080098ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80098ec:	b480      	push	{r7}
 80098ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80098f0:	4b03      	ldr	r3, [pc, #12]	; (8009900 <vTaskMissedYield+0x14>)
 80098f2:	2201      	movs	r2, #1
 80098f4:	601a      	str	r2, [r3, #0]
}
 80098f6:	bf00      	nop
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr
 8009900:	20000850 	.word	0x20000850

08009904 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b082      	sub	sp, #8
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800990c:	f000 f852 	bl	80099b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009910:	4b06      	ldr	r3, [pc, #24]	; (800992c <prvIdleTask+0x28>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2b01      	cmp	r3, #1
 8009916:	d9f9      	bls.n	800990c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009918:	4b05      	ldr	r3, [pc, #20]	; (8009930 <prvIdleTask+0x2c>)
 800991a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800991e:	601a      	str	r2, [r3, #0]
 8009920:	f3bf 8f4f 	dsb	sy
 8009924:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009928:	e7f0      	b.n	800990c <prvIdleTask+0x8>
 800992a:	bf00      	nop
 800992c:	20000740 	.word	0x20000740
 8009930:	e000ed04 	.word	0xe000ed04

08009934 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b082      	sub	sp, #8
 8009938:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800993a:	2300      	movs	r3, #0
 800993c:	607b      	str	r3, [r7, #4]
 800993e:	e00c      	b.n	800995a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	4613      	mov	r3, r2
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	4413      	add	r3, r2
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	4a12      	ldr	r2, [pc, #72]	; (8009994 <prvInitialiseTaskLists+0x60>)
 800994c:	4413      	add	r3, r2
 800994e:	4618      	mov	r0, r3
 8009950:	f7fe fa06 	bl	8007d60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	3301      	adds	r3, #1
 8009958:	607b      	str	r3, [r7, #4]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2b06      	cmp	r3, #6
 800995e:	d9ef      	bls.n	8009940 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009960:	480d      	ldr	r0, [pc, #52]	; (8009998 <prvInitialiseTaskLists+0x64>)
 8009962:	f7fe f9fd 	bl	8007d60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009966:	480d      	ldr	r0, [pc, #52]	; (800999c <prvInitialiseTaskLists+0x68>)
 8009968:	f7fe f9fa 	bl	8007d60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800996c:	480c      	ldr	r0, [pc, #48]	; (80099a0 <prvInitialiseTaskLists+0x6c>)
 800996e:	f7fe f9f7 	bl	8007d60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009972:	480c      	ldr	r0, [pc, #48]	; (80099a4 <prvInitialiseTaskLists+0x70>)
 8009974:	f7fe f9f4 	bl	8007d60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009978:	480b      	ldr	r0, [pc, #44]	; (80099a8 <prvInitialiseTaskLists+0x74>)
 800997a:	f7fe f9f1 	bl	8007d60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800997e:	4b0b      	ldr	r3, [pc, #44]	; (80099ac <prvInitialiseTaskLists+0x78>)
 8009980:	4a05      	ldr	r2, [pc, #20]	; (8009998 <prvInitialiseTaskLists+0x64>)
 8009982:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009984:	4b0a      	ldr	r3, [pc, #40]	; (80099b0 <prvInitialiseTaskLists+0x7c>)
 8009986:	4a05      	ldr	r2, [pc, #20]	; (800999c <prvInitialiseTaskLists+0x68>)
 8009988:	601a      	str	r2, [r3, #0]
}
 800998a:	bf00      	nop
 800998c:	3708      	adds	r7, #8
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop
 8009994:	20000740 	.word	0x20000740
 8009998:	200007cc 	.word	0x200007cc
 800999c:	200007e0 	.word	0x200007e0
 80099a0:	200007fc 	.word	0x200007fc
 80099a4:	20000810 	.word	0x20000810
 80099a8:	20000828 	.word	0x20000828
 80099ac:	200007f4 	.word	0x200007f4
 80099b0:	200007f8 	.word	0x200007f8

080099b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80099ba:	e019      	b.n	80099f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80099bc:	f000 fbca 	bl	800a154 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099c0:	4b10      	ldr	r3, [pc, #64]	; (8009a04 <prvCheckTasksWaitingTermination+0x50>)
 80099c2:	68db      	ldr	r3, [r3, #12]
 80099c4:	68db      	ldr	r3, [r3, #12]
 80099c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	3304      	adds	r3, #4
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7fe fa51 	bl	8007e74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80099d2:	4b0d      	ldr	r3, [pc, #52]	; (8009a08 <prvCheckTasksWaitingTermination+0x54>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	3b01      	subs	r3, #1
 80099d8:	4a0b      	ldr	r2, [pc, #44]	; (8009a08 <prvCheckTasksWaitingTermination+0x54>)
 80099da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80099dc:	4b0b      	ldr	r3, [pc, #44]	; (8009a0c <prvCheckTasksWaitingTermination+0x58>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	3b01      	subs	r3, #1
 80099e2:	4a0a      	ldr	r2, [pc, #40]	; (8009a0c <prvCheckTasksWaitingTermination+0x58>)
 80099e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80099e6:	f000 fbe5 	bl	800a1b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 f810 	bl	8009a10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80099f0:	4b06      	ldr	r3, [pc, #24]	; (8009a0c <prvCheckTasksWaitingTermination+0x58>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d1e1      	bne.n	80099bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80099f8:	bf00      	nop
 80099fa:	bf00      	nop
 80099fc:	3708      	adds	r7, #8
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop
 8009a04:	20000810 	.word	0x20000810
 8009a08:	2000083c 	.word	0x2000083c
 8009a0c:	20000824 	.word	0x20000824

08009a10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	334c      	adds	r3, #76	; 0x4c
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f001 fd79 	bl	800b514 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d108      	bne.n	8009a3e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a30:	4618      	mov	r0, r3
 8009a32:	f000 fd7d 	bl	800a530 <vPortFree>
				vPortFree( pxTCB );
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 fd7a 	bl	800a530 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009a3c:	e018      	b.n	8009a70 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d103      	bne.n	8009a50 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 fd71 	bl	800a530 <vPortFree>
	}
 8009a4e:	e00f      	b.n	8009a70 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009a56:	2b02      	cmp	r3, #2
 8009a58:	d00a      	beq.n	8009a70 <prvDeleteTCB+0x60>
	__asm volatile
 8009a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5e:	f383 8811 	msr	BASEPRI, r3
 8009a62:	f3bf 8f6f 	isb	sy
 8009a66:	f3bf 8f4f 	dsb	sy
 8009a6a:	60fb      	str	r3, [r7, #12]
}
 8009a6c:	bf00      	nop
 8009a6e:	e7fe      	b.n	8009a6e <prvDeleteTCB+0x5e>
	}
 8009a70:	bf00      	nop
 8009a72:	3710      	adds	r7, #16
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a7e:	4b0c      	ldr	r3, [pc, #48]	; (8009ab0 <prvResetNextTaskUnblockTime+0x38>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d104      	bne.n	8009a92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009a88:	4b0a      	ldr	r3, [pc, #40]	; (8009ab4 <prvResetNextTaskUnblockTime+0x3c>)
 8009a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009a90:	e008      	b.n	8009aa4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a92:	4b07      	ldr	r3, [pc, #28]	; (8009ab0 <prvResetNextTaskUnblockTime+0x38>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	68db      	ldr	r3, [r3, #12]
 8009a9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	4a04      	ldr	r2, [pc, #16]	; (8009ab4 <prvResetNextTaskUnblockTime+0x3c>)
 8009aa2:	6013      	str	r3, [r2, #0]
}
 8009aa4:	bf00      	nop
 8009aa6:	370c      	adds	r7, #12
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr
 8009ab0:	200007f4 	.word	0x200007f4
 8009ab4:	2000085c 	.word	0x2000085c

08009ab8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009ab8:	b480      	push	{r7}
 8009aba:	b083      	sub	sp, #12
 8009abc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009abe:	4b0b      	ldr	r3, [pc, #44]	; (8009aec <xTaskGetSchedulerState+0x34>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d102      	bne.n	8009acc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	607b      	str	r3, [r7, #4]
 8009aca:	e008      	b.n	8009ade <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009acc:	4b08      	ldr	r3, [pc, #32]	; (8009af0 <xTaskGetSchedulerState+0x38>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d102      	bne.n	8009ada <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009ad4:	2302      	movs	r3, #2
 8009ad6:	607b      	str	r3, [r7, #4]
 8009ad8:	e001      	b.n	8009ade <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009ada:	2300      	movs	r3, #0
 8009adc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009ade:	687b      	ldr	r3, [r7, #4]
	}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	370c      	adds	r7, #12
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr
 8009aec:	20000848 	.word	0x20000848
 8009af0:	20000864 	.word	0x20000864

08009af4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b084      	sub	sp, #16
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009b00:	2300      	movs	r3, #0
 8009b02:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d05e      	beq.n	8009bc8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b0e:	4b31      	ldr	r3, [pc, #196]	; (8009bd4 <xTaskPriorityInherit+0xe0>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d24e      	bcs.n	8009bb6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	699b      	ldr	r3, [r3, #24]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	db06      	blt.n	8009b2e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b20:	4b2c      	ldr	r3, [pc, #176]	; (8009bd4 <xTaskPriorityInherit+0xe0>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b26:	f1c3 0207 	rsb	r2, r3, #7
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	6959      	ldr	r1, [r3, #20]
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b36:	4613      	mov	r3, r2
 8009b38:	009b      	lsls	r3, r3, #2
 8009b3a:	4413      	add	r3, r2
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	4a26      	ldr	r2, [pc, #152]	; (8009bd8 <xTaskPriorityInherit+0xe4>)
 8009b40:	4413      	add	r3, r2
 8009b42:	4299      	cmp	r1, r3
 8009b44:	d12f      	bne.n	8009ba6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	3304      	adds	r3, #4
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f7fe f992 	bl	8007e74 <uxListRemove>
 8009b50:	4603      	mov	r3, r0
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d10a      	bne.n	8009b6c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b60:	43da      	mvns	r2, r3
 8009b62:	4b1e      	ldr	r3, [pc, #120]	; (8009bdc <xTaskPriorityInherit+0xe8>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4013      	ands	r3, r2
 8009b68:	4a1c      	ldr	r2, [pc, #112]	; (8009bdc <xTaskPriorityInherit+0xe8>)
 8009b6a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009b6c:	4b19      	ldr	r3, [pc, #100]	; (8009bd4 <xTaskPriorityInherit+0xe0>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	409a      	lsls	r2, r3
 8009b7e:	4b17      	ldr	r3, [pc, #92]	; (8009bdc <xTaskPriorityInherit+0xe8>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4313      	orrs	r3, r2
 8009b84:	4a15      	ldr	r2, [pc, #84]	; (8009bdc <xTaskPriorityInherit+0xe8>)
 8009b86:	6013      	str	r3, [r2, #0]
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b8c:	4613      	mov	r3, r2
 8009b8e:	009b      	lsls	r3, r3, #2
 8009b90:	4413      	add	r3, r2
 8009b92:	009b      	lsls	r3, r3, #2
 8009b94:	4a10      	ldr	r2, [pc, #64]	; (8009bd8 <xTaskPriorityInherit+0xe4>)
 8009b96:	441a      	add	r2, r3
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	3304      	adds	r3, #4
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	4610      	mov	r0, r2
 8009ba0:	f7fe f90b 	bl	8007dba <vListInsertEnd>
 8009ba4:	e004      	b.n	8009bb0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009ba6:	4b0b      	ldr	r3, [pc, #44]	; (8009bd4 <xTaskPriorityInherit+0xe0>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	60fb      	str	r3, [r7, #12]
 8009bb4:	e008      	b.n	8009bc8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009bba:	4b06      	ldr	r3, [pc, #24]	; (8009bd4 <xTaskPriorityInherit+0xe0>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d201      	bcs.n	8009bc8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
	}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3710      	adds	r7, #16
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	2000073c 	.word	0x2000073c
 8009bd8:	20000740 	.word	0x20000740
 8009bdc:	20000844 	.word	0x20000844

08009be0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b086      	sub	sp, #24
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009bec:	2300      	movs	r3, #0
 8009bee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d06e      	beq.n	8009cd4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009bf6:	4b3a      	ldr	r3, [pc, #232]	; (8009ce0 <xTaskPriorityDisinherit+0x100>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	693a      	ldr	r2, [r7, #16]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d00a      	beq.n	8009c16 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c04:	f383 8811 	msr	BASEPRI, r3
 8009c08:	f3bf 8f6f 	isb	sy
 8009c0c:	f3bf 8f4f 	dsb	sy
 8009c10:	60fb      	str	r3, [r7, #12]
}
 8009c12:	bf00      	nop
 8009c14:	e7fe      	b.n	8009c14 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d10a      	bne.n	8009c34 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c22:	f383 8811 	msr	BASEPRI, r3
 8009c26:	f3bf 8f6f 	isb	sy
 8009c2a:	f3bf 8f4f 	dsb	sy
 8009c2e:	60bb      	str	r3, [r7, #8]
}
 8009c30:	bf00      	nop
 8009c32:	e7fe      	b.n	8009c32 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c38:	1e5a      	subs	r2, r3, #1
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d044      	beq.n	8009cd4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d140      	bne.n	8009cd4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	3304      	adds	r3, #4
 8009c56:	4618      	mov	r0, r3
 8009c58:	f7fe f90c 	bl	8007e74 <uxListRemove>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d115      	bne.n	8009c8e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c66:	491f      	ldr	r1, [pc, #124]	; (8009ce4 <xTaskPriorityDisinherit+0x104>)
 8009c68:	4613      	mov	r3, r2
 8009c6a:	009b      	lsls	r3, r3, #2
 8009c6c:	4413      	add	r3, r2
 8009c6e:	009b      	lsls	r3, r3, #2
 8009c70:	440b      	add	r3, r1
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d10a      	bne.n	8009c8e <xTaskPriorityDisinherit+0xae>
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c82:	43da      	mvns	r2, r3
 8009c84:	4b18      	ldr	r3, [pc, #96]	; (8009ce8 <xTaskPriorityDisinherit+0x108>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4013      	ands	r3, r2
 8009c8a:	4a17      	ldr	r2, [pc, #92]	; (8009ce8 <xTaskPriorityDisinherit+0x108>)
 8009c8c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c9a:	f1c3 0207 	rsb	r2, r3, #7
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	409a      	lsls	r2, r3
 8009caa:	4b0f      	ldr	r3, [pc, #60]	; (8009ce8 <xTaskPriorityDisinherit+0x108>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	4a0d      	ldr	r2, [pc, #52]	; (8009ce8 <xTaskPriorityDisinherit+0x108>)
 8009cb2:	6013      	str	r3, [r2, #0]
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cb8:	4613      	mov	r3, r2
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	4413      	add	r3, r2
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	4a08      	ldr	r2, [pc, #32]	; (8009ce4 <xTaskPriorityDisinherit+0x104>)
 8009cc2:	441a      	add	r2, r3
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	3304      	adds	r3, #4
 8009cc8:	4619      	mov	r1, r3
 8009cca:	4610      	mov	r0, r2
 8009ccc:	f7fe f875 	bl	8007dba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009cd4:	697b      	ldr	r3, [r7, #20]
	}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3718      	adds	r7, #24
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}
 8009cde:	bf00      	nop
 8009ce0:	2000073c 	.word	0x2000073c
 8009ce4:	20000740 	.word	0x20000740
 8009ce8:	20000844 	.word	0x20000844

08009cec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b088      	sub	sp, #32
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d077      	beq.n	8009df4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009d04:	69bb      	ldr	r3, [r7, #24]
 8009d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d10a      	bne.n	8009d22 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d10:	f383 8811 	msr	BASEPRI, r3
 8009d14:	f3bf 8f6f 	isb	sy
 8009d18:	f3bf 8f4f 	dsb	sy
 8009d1c:	60fb      	str	r3, [r7, #12]
}
 8009d1e:	bf00      	nop
 8009d20:	e7fe      	b.n	8009d20 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009d22:	69bb      	ldr	r3, [r7, #24]
 8009d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d26:	683a      	ldr	r2, [r7, #0]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d902      	bls.n	8009d32 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	61fb      	str	r3, [r7, #28]
 8009d30:	e002      	b.n	8009d38 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009d32:	69bb      	ldr	r3, [r7, #24]
 8009d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d36:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009d38:	69bb      	ldr	r3, [r7, #24]
 8009d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d3c:	69fa      	ldr	r2, [r7, #28]
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d058      	beq.n	8009df4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009d42:	69bb      	ldr	r3, [r7, #24]
 8009d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d46:	697a      	ldr	r2, [r7, #20]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d153      	bne.n	8009df4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009d4c:	4b2b      	ldr	r3, [pc, #172]	; (8009dfc <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	69ba      	ldr	r2, [r7, #24]
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d10a      	bne.n	8009d6c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5a:	f383 8811 	msr	BASEPRI, r3
 8009d5e:	f3bf 8f6f 	isb	sy
 8009d62:	f3bf 8f4f 	dsb	sy
 8009d66:	60bb      	str	r3, [r7, #8]
}
 8009d68:	bf00      	nop
 8009d6a:	e7fe      	b.n	8009d6a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009d6c:	69bb      	ldr	r3, [r7, #24]
 8009d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d70:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009d72:	69bb      	ldr	r3, [r7, #24]
 8009d74:	69fa      	ldr	r2, [r7, #28]
 8009d76:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009d78:	69bb      	ldr	r3, [r7, #24]
 8009d7a:	699b      	ldr	r3, [r3, #24]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	db04      	blt.n	8009d8a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	f1c3 0207 	rsb	r2, r3, #7
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009d8a:	69bb      	ldr	r3, [r7, #24]
 8009d8c:	6959      	ldr	r1, [r3, #20]
 8009d8e:	693a      	ldr	r2, [r7, #16]
 8009d90:	4613      	mov	r3, r2
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	4413      	add	r3, r2
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	4a19      	ldr	r2, [pc, #100]	; (8009e00 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009d9a:	4413      	add	r3, r2
 8009d9c:	4299      	cmp	r1, r3
 8009d9e:	d129      	bne.n	8009df4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009da0:	69bb      	ldr	r3, [r7, #24]
 8009da2:	3304      	adds	r3, #4
 8009da4:	4618      	mov	r0, r3
 8009da6:	f7fe f865 	bl	8007e74 <uxListRemove>
 8009daa:	4603      	mov	r3, r0
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d10a      	bne.n	8009dc6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009db0:	69bb      	ldr	r3, [r7, #24]
 8009db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db4:	2201      	movs	r2, #1
 8009db6:	fa02 f303 	lsl.w	r3, r2, r3
 8009dba:	43da      	mvns	r2, r3
 8009dbc:	4b11      	ldr	r3, [pc, #68]	; (8009e04 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4013      	ands	r3, r2
 8009dc2:	4a10      	ldr	r2, [pc, #64]	; (8009e04 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009dc4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009dc6:	69bb      	ldr	r3, [r7, #24]
 8009dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dca:	2201      	movs	r2, #1
 8009dcc:	409a      	lsls	r2, r3
 8009dce:	4b0d      	ldr	r3, [pc, #52]	; (8009e04 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	4a0b      	ldr	r2, [pc, #44]	; (8009e04 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009dd6:	6013      	str	r3, [r2, #0]
 8009dd8:	69bb      	ldr	r3, [r7, #24]
 8009dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ddc:	4613      	mov	r3, r2
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	4413      	add	r3, r2
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	4a06      	ldr	r2, [pc, #24]	; (8009e00 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009de6:	441a      	add	r2, r3
 8009de8:	69bb      	ldr	r3, [r7, #24]
 8009dea:	3304      	adds	r3, #4
 8009dec:	4619      	mov	r1, r3
 8009dee:	4610      	mov	r0, r2
 8009df0:	f7fd ffe3 	bl	8007dba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009df4:	bf00      	nop
 8009df6:	3720      	adds	r7, #32
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}
 8009dfc:	2000073c 	.word	0x2000073c
 8009e00:	20000740 	.word	0x20000740
 8009e04:	20000844 	.word	0x20000844

08009e08 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009e08:	b480      	push	{r7}
 8009e0a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009e0c:	4b07      	ldr	r3, [pc, #28]	; (8009e2c <pvTaskIncrementMutexHeldCount+0x24>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d004      	beq.n	8009e1e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009e14:	4b05      	ldr	r3, [pc, #20]	; (8009e2c <pvTaskIncrementMutexHeldCount+0x24>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e1a:	3201      	adds	r2, #1
 8009e1c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009e1e:	4b03      	ldr	r3, [pc, #12]	; (8009e2c <pvTaskIncrementMutexHeldCount+0x24>)
 8009e20:	681b      	ldr	r3, [r3, #0]
	}
 8009e22:	4618      	mov	r0, r3
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr
 8009e2c:	2000073c 	.word	0x2000073c

08009e30 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009e3a:	4b29      	ldr	r3, [pc, #164]	; (8009ee0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e40:	4b28      	ldr	r3, [pc, #160]	; (8009ee4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	3304      	adds	r3, #4
 8009e46:	4618      	mov	r0, r3
 8009e48:	f7fe f814 	bl	8007e74 <uxListRemove>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d10b      	bne.n	8009e6a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009e52:	4b24      	ldr	r3, [pc, #144]	; (8009ee4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e58:	2201      	movs	r2, #1
 8009e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8009e5e:	43da      	mvns	r2, r3
 8009e60:	4b21      	ldr	r3, [pc, #132]	; (8009ee8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4013      	ands	r3, r2
 8009e66:	4a20      	ldr	r2, [pc, #128]	; (8009ee8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009e68:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e70:	d10a      	bne.n	8009e88 <prvAddCurrentTaskToDelayedList+0x58>
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d007      	beq.n	8009e88 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e78:	4b1a      	ldr	r3, [pc, #104]	; (8009ee4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	3304      	adds	r3, #4
 8009e7e:	4619      	mov	r1, r3
 8009e80:	481a      	ldr	r0, [pc, #104]	; (8009eec <prvAddCurrentTaskToDelayedList+0xbc>)
 8009e82:	f7fd ff9a 	bl	8007dba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009e86:	e026      	b.n	8009ed6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009e88:	68fa      	ldr	r2, [r7, #12]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	4413      	add	r3, r2
 8009e8e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009e90:	4b14      	ldr	r3, [pc, #80]	; (8009ee4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	68ba      	ldr	r2, [r7, #8]
 8009e96:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009e98:	68ba      	ldr	r2, [r7, #8]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d209      	bcs.n	8009eb4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ea0:	4b13      	ldr	r3, [pc, #76]	; (8009ef0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	4b0f      	ldr	r3, [pc, #60]	; (8009ee4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	3304      	adds	r3, #4
 8009eaa:	4619      	mov	r1, r3
 8009eac:	4610      	mov	r0, r2
 8009eae:	f7fd ffa8 	bl	8007e02 <vListInsert>
}
 8009eb2:	e010      	b.n	8009ed6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009eb4:	4b0f      	ldr	r3, [pc, #60]	; (8009ef4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009eb6:	681a      	ldr	r2, [r3, #0]
 8009eb8:	4b0a      	ldr	r3, [pc, #40]	; (8009ee4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	3304      	adds	r3, #4
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	4610      	mov	r0, r2
 8009ec2:	f7fd ff9e 	bl	8007e02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009ec6:	4b0c      	ldr	r3, [pc, #48]	; (8009ef8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	68ba      	ldr	r2, [r7, #8]
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d202      	bcs.n	8009ed6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009ed0:	4a09      	ldr	r2, [pc, #36]	; (8009ef8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	6013      	str	r3, [r2, #0]
}
 8009ed6:	bf00      	nop
 8009ed8:	3710      	adds	r7, #16
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	bf00      	nop
 8009ee0:	20000840 	.word	0x20000840
 8009ee4:	2000073c 	.word	0x2000073c
 8009ee8:	20000844 	.word	0x20000844
 8009eec:	20000828 	.word	0x20000828
 8009ef0:	200007f8 	.word	0x200007f8
 8009ef4:	200007f4 	.word	0x200007f4
 8009ef8:	2000085c 	.word	0x2000085c

08009efc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009efc:	b480      	push	{r7}
 8009efe:	b085      	sub	sp, #20
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	3b04      	subs	r3, #4
 8009f0c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009f14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	3b04      	subs	r3, #4
 8009f1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	f023 0201 	bic.w	r2, r3, #1
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	3b04      	subs	r3, #4
 8009f2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009f2c:	4a0c      	ldr	r2, [pc, #48]	; (8009f60 <pxPortInitialiseStack+0x64>)
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	3b14      	subs	r3, #20
 8009f36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	3b04      	subs	r3, #4
 8009f42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f06f 0202 	mvn.w	r2, #2
 8009f4a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	3b20      	subs	r3, #32
 8009f50:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009f52:	68fb      	ldr	r3, [r7, #12]
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3714      	adds	r7, #20
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr
 8009f60:	08009f65 	.word	0x08009f65

08009f64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009f64:	b480      	push	{r7}
 8009f66:	b085      	sub	sp, #20
 8009f68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009f6e:	4b12      	ldr	r3, [pc, #72]	; (8009fb8 <prvTaskExitError+0x54>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f76:	d00a      	beq.n	8009f8e <prvTaskExitError+0x2a>
	__asm volatile
 8009f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7c:	f383 8811 	msr	BASEPRI, r3
 8009f80:	f3bf 8f6f 	isb	sy
 8009f84:	f3bf 8f4f 	dsb	sy
 8009f88:	60fb      	str	r3, [r7, #12]
}
 8009f8a:	bf00      	nop
 8009f8c:	e7fe      	b.n	8009f8c <prvTaskExitError+0x28>
	__asm volatile
 8009f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f92:	f383 8811 	msr	BASEPRI, r3
 8009f96:	f3bf 8f6f 	isb	sy
 8009f9a:	f3bf 8f4f 	dsb	sy
 8009f9e:	60bb      	str	r3, [r7, #8]
}
 8009fa0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009fa2:	bf00      	nop
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d0fc      	beq.n	8009fa4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009faa:	bf00      	nop
 8009fac:	bf00      	nop
 8009fae:	3714      	adds	r7, #20
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr
 8009fb8:	2000005c 	.word	0x2000005c
 8009fbc:	00000000 	.word	0x00000000

08009fc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009fc0:	4b07      	ldr	r3, [pc, #28]	; (8009fe0 <pxCurrentTCBConst2>)
 8009fc2:	6819      	ldr	r1, [r3, #0]
 8009fc4:	6808      	ldr	r0, [r1, #0]
 8009fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fca:	f380 8809 	msr	PSP, r0
 8009fce:	f3bf 8f6f 	isb	sy
 8009fd2:	f04f 0000 	mov.w	r0, #0
 8009fd6:	f380 8811 	msr	BASEPRI, r0
 8009fda:	4770      	bx	lr
 8009fdc:	f3af 8000 	nop.w

08009fe0 <pxCurrentTCBConst2>:
 8009fe0:	2000073c 	.word	0x2000073c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009fe4:	bf00      	nop
 8009fe6:	bf00      	nop

08009fe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009fe8:	4808      	ldr	r0, [pc, #32]	; (800a00c <prvPortStartFirstTask+0x24>)
 8009fea:	6800      	ldr	r0, [r0, #0]
 8009fec:	6800      	ldr	r0, [r0, #0]
 8009fee:	f380 8808 	msr	MSP, r0
 8009ff2:	f04f 0000 	mov.w	r0, #0
 8009ff6:	f380 8814 	msr	CONTROL, r0
 8009ffa:	b662      	cpsie	i
 8009ffc:	b661      	cpsie	f
 8009ffe:	f3bf 8f4f 	dsb	sy
 800a002:	f3bf 8f6f 	isb	sy
 800a006:	df00      	svc	0
 800a008:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a00a:	bf00      	nop
 800a00c:	e000ed08 	.word	0xe000ed08

0800a010 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b086      	sub	sp, #24
 800a014:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a016:	4b46      	ldr	r3, [pc, #280]	; (800a130 <xPortStartScheduler+0x120>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a46      	ldr	r2, [pc, #280]	; (800a134 <xPortStartScheduler+0x124>)
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d10a      	bne.n	800a036 <xPortStartScheduler+0x26>
	__asm volatile
 800a020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a024:	f383 8811 	msr	BASEPRI, r3
 800a028:	f3bf 8f6f 	isb	sy
 800a02c:	f3bf 8f4f 	dsb	sy
 800a030:	613b      	str	r3, [r7, #16]
}
 800a032:	bf00      	nop
 800a034:	e7fe      	b.n	800a034 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a036:	4b3e      	ldr	r3, [pc, #248]	; (800a130 <xPortStartScheduler+0x120>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a3f      	ldr	r2, [pc, #252]	; (800a138 <xPortStartScheduler+0x128>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d10a      	bne.n	800a056 <xPortStartScheduler+0x46>
	__asm volatile
 800a040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a044:	f383 8811 	msr	BASEPRI, r3
 800a048:	f3bf 8f6f 	isb	sy
 800a04c:	f3bf 8f4f 	dsb	sy
 800a050:	60fb      	str	r3, [r7, #12]
}
 800a052:	bf00      	nop
 800a054:	e7fe      	b.n	800a054 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a056:	4b39      	ldr	r3, [pc, #228]	; (800a13c <xPortStartScheduler+0x12c>)
 800a058:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	b2db      	uxtb	r3, r3
 800a060:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	22ff      	movs	r2, #255	; 0xff
 800a066:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	781b      	ldrb	r3, [r3, #0]
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a070:	78fb      	ldrb	r3, [r7, #3]
 800a072:	b2db      	uxtb	r3, r3
 800a074:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a078:	b2da      	uxtb	r2, r3
 800a07a:	4b31      	ldr	r3, [pc, #196]	; (800a140 <xPortStartScheduler+0x130>)
 800a07c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a07e:	4b31      	ldr	r3, [pc, #196]	; (800a144 <xPortStartScheduler+0x134>)
 800a080:	2207      	movs	r2, #7
 800a082:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a084:	e009      	b.n	800a09a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a086:	4b2f      	ldr	r3, [pc, #188]	; (800a144 <xPortStartScheduler+0x134>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	3b01      	subs	r3, #1
 800a08c:	4a2d      	ldr	r2, [pc, #180]	; (800a144 <xPortStartScheduler+0x134>)
 800a08e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a090:	78fb      	ldrb	r3, [r7, #3]
 800a092:	b2db      	uxtb	r3, r3
 800a094:	005b      	lsls	r3, r3, #1
 800a096:	b2db      	uxtb	r3, r3
 800a098:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a09a:	78fb      	ldrb	r3, [r7, #3]
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0a2:	2b80      	cmp	r3, #128	; 0x80
 800a0a4:	d0ef      	beq.n	800a086 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a0a6:	4b27      	ldr	r3, [pc, #156]	; (800a144 <xPortStartScheduler+0x134>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f1c3 0307 	rsb	r3, r3, #7
 800a0ae:	2b04      	cmp	r3, #4
 800a0b0:	d00a      	beq.n	800a0c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b6:	f383 8811 	msr	BASEPRI, r3
 800a0ba:	f3bf 8f6f 	isb	sy
 800a0be:	f3bf 8f4f 	dsb	sy
 800a0c2:	60bb      	str	r3, [r7, #8]
}
 800a0c4:	bf00      	nop
 800a0c6:	e7fe      	b.n	800a0c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a0c8:	4b1e      	ldr	r3, [pc, #120]	; (800a144 <xPortStartScheduler+0x134>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	021b      	lsls	r3, r3, #8
 800a0ce:	4a1d      	ldr	r2, [pc, #116]	; (800a144 <xPortStartScheduler+0x134>)
 800a0d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a0d2:	4b1c      	ldr	r3, [pc, #112]	; (800a144 <xPortStartScheduler+0x134>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a0da:	4a1a      	ldr	r2, [pc, #104]	; (800a144 <xPortStartScheduler+0x134>)
 800a0dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	b2da      	uxtb	r2, r3
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a0e6:	4b18      	ldr	r3, [pc, #96]	; (800a148 <xPortStartScheduler+0x138>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a17      	ldr	r2, [pc, #92]	; (800a148 <xPortStartScheduler+0x138>)
 800a0ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a0f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a0f2:	4b15      	ldr	r3, [pc, #84]	; (800a148 <xPortStartScheduler+0x138>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4a14      	ldr	r2, [pc, #80]	; (800a148 <xPortStartScheduler+0x138>)
 800a0f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a0fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a0fe:	f000 f8dd 	bl	800a2bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a102:	4b12      	ldr	r3, [pc, #72]	; (800a14c <xPortStartScheduler+0x13c>)
 800a104:	2200      	movs	r2, #0
 800a106:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a108:	f000 f8fc 	bl	800a304 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a10c:	4b10      	ldr	r3, [pc, #64]	; (800a150 <xPortStartScheduler+0x140>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4a0f      	ldr	r2, [pc, #60]	; (800a150 <xPortStartScheduler+0x140>)
 800a112:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a116:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a118:	f7ff ff66 	bl	8009fe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a11c:	f7ff fa86 	bl	800962c <vTaskSwitchContext>
	prvTaskExitError();
 800a120:	f7ff ff20 	bl	8009f64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a124:	2300      	movs	r3, #0
}
 800a126:	4618      	mov	r0, r3
 800a128:	3718      	adds	r7, #24
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	e000ed00 	.word	0xe000ed00
 800a134:	410fc271 	.word	0x410fc271
 800a138:	410fc270 	.word	0x410fc270
 800a13c:	e000e400 	.word	0xe000e400
 800a140:	20000868 	.word	0x20000868
 800a144:	2000086c 	.word	0x2000086c
 800a148:	e000ed20 	.word	0xe000ed20
 800a14c:	2000005c 	.word	0x2000005c
 800a150:	e000ef34 	.word	0xe000ef34

0800a154 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
	__asm volatile
 800a15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a15e:	f383 8811 	msr	BASEPRI, r3
 800a162:	f3bf 8f6f 	isb	sy
 800a166:	f3bf 8f4f 	dsb	sy
 800a16a:	607b      	str	r3, [r7, #4]
}
 800a16c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a16e:	4b0f      	ldr	r3, [pc, #60]	; (800a1ac <vPortEnterCritical+0x58>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	3301      	adds	r3, #1
 800a174:	4a0d      	ldr	r2, [pc, #52]	; (800a1ac <vPortEnterCritical+0x58>)
 800a176:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a178:	4b0c      	ldr	r3, [pc, #48]	; (800a1ac <vPortEnterCritical+0x58>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	d10f      	bne.n	800a1a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a180:	4b0b      	ldr	r3, [pc, #44]	; (800a1b0 <vPortEnterCritical+0x5c>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	b2db      	uxtb	r3, r3
 800a186:	2b00      	cmp	r3, #0
 800a188:	d00a      	beq.n	800a1a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18e:	f383 8811 	msr	BASEPRI, r3
 800a192:	f3bf 8f6f 	isb	sy
 800a196:	f3bf 8f4f 	dsb	sy
 800a19a:	603b      	str	r3, [r7, #0]
}
 800a19c:	bf00      	nop
 800a19e:	e7fe      	b.n	800a19e <vPortEnterCritical+0x4a>
	}
}
 800a1a0:	bf00      	nop
 800a1a2:	370c      	adds	r7, #12
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr
 800a1ac:	2000005c 	.word	0x2000005c
 800a1b0:	e000ed04 	.word	0xe000ed04

0800a1b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b083      	sub	sp, #12
 800a1b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a1ba:	4b12      	ldr	r3, [pc, #72]	; (800a204 <vPortExitCritical+0x50>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d10a      	bne.n	800a1d8 <vPortExitCritical+0x24>
	__asm volatile
 800a1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c6:	f383 8811 	msr	BASEPRI, r3
 800a1ca:	f3bf 8f6f 	isb	sy
 800a1ce:	f3bf 8f4f 	dsb	sy
 800a1d2:	607b      	str	r3, [r7, #4]
}
 800a1d4:	bf00      	nop
 800a1d6:	e7fe      	b.n	800a1d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a1d8:	4b0a      	ldr	r3, [pc, #40]	; (800a204 <vPortExitCritical+0x50>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	3b01      	subs	r3, #1
 800a1de:	4a09      	ldr	r2, [pc, #36]	; (800a204 <vPortExitCritical+0x50>)
 800a1e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a1e2:	4b08      	ldr	r3, [pc, #32]	; (800a204 <vPortExitCritical+0x50>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d105      	bne.n	800a1f6 <vPortExitCritical+0x42>
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	f383 8811 	msr	BASEPRI, r3
}
 800a1f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a1f6:	bf00      	nop
 800a1f8:	370c      	adds	r7, #12
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr
 800a202:	bf00      	nop
 800a204:	2000005c 	.word	0x2000005c
	...

0800a210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a210:	f3ef 8009 	mrs	r0, PSP
 800a214:	f3bf 8f6f 	isb	sy
 800a218:	4b15      	ldr	r3, [pc, #84]	; (800a270 <pxCurrentTCBConst>)
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	f01e 0f10 	tst.w	lr, #16
 800a220:	bf08      	it	eq
 800a222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a22a:	6010      	str	r0, [r2, #0]
 800a22c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a230:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a234:	f380 8811 	msr	BASEPRI, r0
 800a238:	f3bf 8f4f 	dsb	sy
 800a23c:	f3bf 8f6f 	isb	sy
 800a240:	f7ff f9f4 	bl	800962c <vTaskSwitchContext>
 800a244:	f04f 0000 	mov.w	r0, #0
 800a248:	f380 8811 	msr	BASEPRI, r0
 800a24c:	bc09      	pop	{r0, r3}
 800a24e:	6819      	ldr	r1, [r3, #0]
 800a250:	6808      	ldr	r0, [r1, #0]
 800a252:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a256:	f01e 0f10 	tst.w	lr, #16
 800a25a:	bf08      	it	eq
 800a25c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a260:	f380 8809 	msr	PSP, r0
 800a264:	f3bf 8f6f 	isb	sy
 800a268:	4770      	bx	lr
 800a26a:	bf00      	nop
 800a26c:	f3af 8000 	nop.w

0800a270 <pxCurrentTCBConst>:
 800a270:	2000073c 	.word	0x2000073c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a274:	bf00      	nop
 800a276:	bf00      	nop

0800a278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b082      	sub	sp, #8
 800a27c:	af00      	add	r7, sp, #0
	__asm volatile
 800a27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a282:	f383 8811 	msr	BASEPRI, r3
 800a286:	f3bf 8f6f 	isb	sy
 800a28a:	f3bf 8f4f 	dsb	sy
 800a28e:	607b      	str	r3, [r7, #4]
}
 800a290:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a292:	f7ff f913 	bl	80094bc <xTaskIncrementTick>
 800a296:	4603      	mov	r3, r0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d003      	beq.n	800a2a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a29c:	4b06      	ldr	r3, [pc, #24]	; (800a2b8 <SysTick_Handler+0x40>)
 800a29e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2a2:	601a      	str	r2, [r3, #0]
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	f383 8811 	msr	BASEPRI, r3
}
 800a2ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a2b0:	bf00      	nop
 800a2b2:	3708      	adds	r7, #8
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}
 800a2b8:	e000ed04 	.word	0xe000ed04

0800a2bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a2bc:	b480      	push	{r7}
 800a2be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a2c0:	4b0b      	ldr	r3, [pc, #44]	; (800a2f0 <vPortSetupTimerInterrupt+0x34>)
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a2c6:	4b0b      	ldr	r3, [pc, #44]	; (800a2f4 <vPortSetupTimerInterrupt+0x38>)
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a2cc:	4b0a      	ldr	r3, [pc, #40]	; (800a2f8 <vPortSetupTimerInterrupt+0x3c>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a0a      	ldr	r2, [pc, #40]	; (800a2fc <vPortSetupTimerInterrupt+0x40>)
 800a2d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a2d6:	099b      	lsrs	r3, r3, #6
 800a2d8:	4a09      	ldr	r2, [pc, #36]	; (800a300 <vPortSetupTimerInterrupt+0x44>)
 800a2da:	3b01      	subs	r3, #1
 800a2dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a2de:	4b04      	ldr	r3, [pc, #16]	; (800a2f0 <vPortSetupTimerInterrupt+0x34>)
 800a2e0:	2207      	movs	r2, #7
 800a2e2:	601a      	str	r2, [r3, #0]
}
 800a2e4:	bf00      	nop
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr
 800a2ee:	bf00      	nop
 800a2f0:	e000e010 	.word	0xe000e010
 800a2f4:	e000e018 	.word	0xe000e018
 800a2f8:	20000050 	.word	0x20000050
 800a2fc:	10624dd3 	.word	0x10624dd3
 800a300:	e000e014 	.word	0xe000e014

0800a304 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a304:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a314 <vPortEnableVFP+0x10>
 800a308:	6801      	ldr	r1, [r0, #0]
 800a30a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a30e:	6001      	str	r1, [r0, #0]
 800a310:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a312:	bf00      	nop
 800a314:	e000ed88 	.word	0xe000ed88

0800a318 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a318:	b480      	push	{r7}
 800a31a:	b085      	sub	sp, #20
 800a31c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a31e:	f3ef 8305 	mrs	r3, IPSR
 800a322:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2b0f      	cmp	r3, #15
 800a328:	d914      	bls.n	800a354 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a32a:	4a17      	ldr	r2, [pc, #92]	; (800a388 <vPortValidateInterruptPriority+0x70>)
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	4413      	add	r3, r2
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a334:	4b15      	ldr	r3, [pc, #84]	; (800a38c <vPortValidateInterruptPriority+0x74>)
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	7afa      	ldrb	r2, [r7, #11]
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d20a      	bcs.n	800a354 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a342:	f383 8811 	msr	BASEPRI, r3
 800a346:	f3bf 8f6f 	isb	sy
 800a34a:	f3bf 8f4f 	dsb	sy
 800a34e:	607b      	str	r3, [r7, #4]
}
 800a350:	bf00      	nop
 800a352:	e7fe      	b.n	800a352 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a354:	4b0e      	ldr	r3, [pc, #56]	; (800a390 <vPortValidateInterruptPriority+0x78>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a35c:	4b0d      	ldr	r3, [pc, #52]	; (800a394 <vPortValidateInterruptPriority+0x7c>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	429a      	cmp	r2, r3
 800a362:	d90a      	bls.n	800a37a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a368:	f383 8811 	msr	BASEPRI, r3
 800a36c:	f3bf 8f6f 	isb	sy
 800a370:	f3bf 8f4f 	dsb	sy
 800a374:	603b      	str	r3, [r7, #0]
}
 800a376:	bf00      	nop
 800a378:	e7fe      	b.n	800a378 <vPortValidateInterruptPriority+0x60>
	}
 800a37a:	bf00      	nop
 800a37c:	3714      	adds	r7, #20
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr
 800a386:	bf00      	nop
 800a388:	e000e3f0 	.word	0xe000e3f0
 800a38c:	20000868 	.word	0x20000868
 800a390:	e000ed0c 	.word	0xe000ed0c
 800a394:	2000086c 	.word	0x2000086c

0800a398 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b08a      	sub	sp, #40	; 0x28
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a3a4:	f7fe ffe0 	bl	8009368 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a3a8:	4b5b      	ldr	r3, [pc, #364]	; (800a518 <pvPortMalloc+0x180>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d101      	bne.n	800a3b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a3b0:	f000 f920 	bl	800a5f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a3b4:	4b59      	ldr	r3, [pc, #356]	; (800a51c <pvPortMalloc+0x184>)
 800a3b6:	681a      	ldr	r2, [r3, #0]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	4013      	ands	r3, r2
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	f040 8093 	bne.w	800a4e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d01d      	beq.n	800a404 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a3c8:	2208      	movs	r2, #8
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	4413      	add	r3, r2
 800a3ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f003 0307 	and.w	r3, r3, #7
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d014      	beq.n	800a404 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f023 0307 	bic.w	r3, r3, #7
 800a3e0:	3308      	adds	r3, #8
 800a3e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f003 0307 	and.w	r3, r3, #7
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d00a      	beq.n	800a404 <pvPortMalloc+0x6c>
	__asm volatile
 800a3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f2:	f383 8811 	msr	BASEPRI, r3
 800a3f6:	f3bf 8f6f 	isb	sy
 800a3fa:	f3bf 8f4f 	dsb	sy
 800a3fe:	617b      	str	r3, [r7, #20]
}
 800a400:	bf00      	nop
 800a402:	e7fe      	b.n	800a402 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d06e      	beq.n	800a4e8 <pvPortMalloc+0x150>
 800a40a:	4b45      	ldr	r3, [pc, #276]	; (800a520 <pvPortMalloc+0x188>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	687a      	ldr	r2, [r7, #4]
 800a410:	429a      	cmp	r2, r3
 800a412:	d869      	bhi.n	800a4e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a414:	4b43      	ldr	r3, [pc, #268]	; (800a524 <pvPortMalloc+0x18c>)
 800a416:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a418:	4b42      	ldr	r3, [pc, #264]	; (800a524 <pvPortMalloc+0x18c>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a41e:	e004      	b.n	800a42a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a422:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	429a      	cmp	r2, r3
 800a432:	d903      	bls.n	800a43c <pvPortMalloc+0xa4>
 800a434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d1f1      	bne.n	800a420 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a43c:	4b36      	ldr	r3, [pc, #216]	; (800a518 <pvPortMalloc+0x180>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a442:	429a      	cmp	r2, r3
 800a444:	d050      	beq.n	800a4e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a446:	6a3b      	ldr	r3, [r7, #32]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	2208      	movs	r2, #8
 800a44c:	4413      	add	r3, r2
 800a44e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	6a3b      	ldr	r3, [r7, #32]
 800a456:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45a:	685a      	ldr	r2, [r3, #4]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	1ad2      	subs	r2, r2, r3
 800a460:	2308      	movs	r3, #8
 800a462:	005b      	lsls	r3, r3, #1
 800a464:	429a      	cmp	r2, r3
 800a466:	d91f      	bls.n	800a4a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	4413      	add	r3, r2
 800a46e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	f003 0307 	and.w	r3, r3, #7
 800a476:	2b00      	cmp	r3, #0
 800a478:	d00a      	beq.n	800a490 <pvPortMalloc+0xf8>
	__asm volatile
 800a47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a47e:	f383 8811 	msr	BASEPRI, r3
 800a482:	f3bf 8f6f 	isb	sy
 800a486:	f3bf 8f4f 	dsb	sy
 800a48a:	613b      	str	r3, [r7, #16]
}
 800a48c:	bf00      	nop
 800a48e:	e7fe      	b.n	800a48e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a492:	685a      	ldr	r2, [r3, #4]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	1ad2      	subs	r2, r2, r3
 800a498:	69bb      	ldr	r3, [r7, #24]
 800a49a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a4a2:	69b8      	ldr	r0, [r7, #24]
 800a4a4:	f000 f908 	bl	800a6b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a4a8:	4b1d      	ldr	r3, [pc, #116]	; (800a520 <pvPortMalloc+0x188>)
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	1ad3      	subs	r3, r2, r3
 800a4b2:	4a1b      	ldr	r2, [pc, #108]	; (800a520 <pvPortMalloc+0x188>)
 800a4b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a4b6:	4b1a      	ldr	r3, [pc, #104]	; (800a520 <pvPortMalloc+0x188>)
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	4b1b      	ldr	r3, [pc, #108]	; (800a528 <pvPortMalloc+0x190>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d203      	bcs.n	800a4ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a4c2:	4b17      	ldr	r3, [pc, #92]	; (800a520 <pvPortMalloc+0x188>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a18      	ldr	r2, [pc, #96]	; (800a528 <pvPortMalloc+0x190>)
 800a4c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4cc:	685a      	ldr	r2, [r3, #4]
 800a4ce:	4b13      	ldr	r3, [pc, #76]	; (800a51c <pvPortMalloc+0x184>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	431a      	orrs	r2, r3
 800a4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4da:	2200      	movs	r2, #0
 800a4dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a4de:	4b13      	ldr	r3, [pc, #76]	; (800a52c <pvPortMalloc+0x194>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	4a11      	ldr	r2, [pc, #68]	; (800a52c <pvPortMalloc+0x194>)
 800a4e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a4e8:	f7fe ff4c 	bl	8009384 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4ec:	69fb      	ldr	r3, [r7, #28]
 800a4ee:	f003 0307 	and.w	r3, r3, #7
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d00a      	beq.n	800a50c <pvPortMalloc+0x174>
	__asm volatile
 800a4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fa:	f383 8811 	msr	BASEPRI, r3
 800a4fe:	f3bf 8f6f 	isb	sy
 800a502:	f3bf 8f4f 	dsb	sy
 800a506:	60fb      	str	r3, [r7, #12]
}
 800a508:	bf00      	nop
 800a50a:	e7fe      	b.n	800a50a <pvPortMalloc+0x172>
	return pvReturn;
 800a50c:	69fb      	ldr	r3, [r7, #28]
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3728      	adds	r7, #40	; 0x28
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	20004478 	.word	0x20004478
 800a51c:	2000448c 	.word	0x2000448c
 800a520:	2000447c 	.word	0x2000447c
 800a524:	20004470 	.word	0x20004470
 800a528:	20004480 	.word	0x20004480
 800a52c:	20004484 	.word	0x20004484

0800a530 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b086      	sub	sp, #24
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d04d      	beq.n	800a5de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a542:	2308      	movs	r3, #8
 800a544:	425b      	negs	r3, r3
 800a546:	697a      	ldr	r2, [r7, #20]
 800a548:	4413      	add	r3, r2
 800a54a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	685a      	ldr	r2, [r3, #4]
 800a554:	4b24      	ldr	r3, [pc, #144]	; (800a5e8 <vPortFree+0xb8>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4013      	ands	r3, r2
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d10a      	bne.n	800a574 <vPortFree+0x44>
	__asm volatile
 800a55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a562:	f383 8811 	msr	BASEPRI, r3
 800a566:	f3bf 8f6f 	isb	sy
 800a56a:	f3bf 8f4f 	dsb	sy
 800a56e:	60fb      	str	r3, [r7, #12]
}
 800a570:	bf00      	nop
 800a572:	e7fe      	b.n	800a572 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d00a      	beq.n	800a592 <vPortFree+0x62>
	__asm volatile
 800a57c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a580:	f383 8811 	msr	BASEPRI, r3
 800a584:	f3bf 8f6f 	isb	sy
 800a588:	f3bf 8f4f 	dsb	sy
 800a58c:	60bb      	str	r3, [r7, #8]
}
 800a58e:	bf00      	nop
 800a590:	e7fe      	b.n	800a590 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	685a      	ldr	r2, [r3, #4]
 800a596:	4b14      	ldr	r3, [pc, #80]	; (800a5e8 <vPortFree+0xb8>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	4013      	ands	r3, r2
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d01e      	beq.n	800a5de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d11a      	bne.n	800a5de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	685a      	ldr	r2, [r3, #4]
 800a5ac:	4b0e      	ldr	r3, [pc, #56]	; (800a5e8 <vPortFree+0xb8>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	43db      	mvns	r3, r3
 800a5b2:	401a      	ands	r2, r3
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a5b8:	f7fe fed6 	bl	8009368 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	685a      	ldr	r2, [r3, #4]
 800a5c0:	4b0a      	ldr	r3, [pc, #40]	; (800a5ec <vPortFree+0xbc>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4413      	add	r3, r2
 800a5c6:	4a09      	ldr	r2, [pc, #36]	; (800a5ec <vPortFree+0xbc>)
 800a5c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a5ca:	6938      	ldr	r0, [r7, #16]
 800a5cc:	f000 f874 	bl	800a6b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a5d0:	4b07      	ldr	r3, [pc, #28]	; (800a5f0 <vPortFree+0xc0>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	3301      	adds	r3, #1
 800a5d6:	4a06      	ldr	r2, [pc, #24]	; (800a5f0 <vPortFree+0xc0>)
 800a5d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a5da:	f7fe fed3 	bl	8009384 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a5de:	bf00      	nop
 800a5e0:	3718      	adds	r7, #24
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	2000448c 	.word	0x2000448c
 800a5ec:	2000447c 	.word	0x2000447c
 800a5f0:	20004488 	.word	0x20004488

0800a5f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b085      	sub	sp, #20
 800a5f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a5fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a5fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a600:	4b27      	ldr	r3, [pc, #156]	; (800a6a0 <prvHeapInit+0xac>)
 800a602:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f003 0307 	and.w	r3, r3, #7
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d00c      	beq.n	800a628 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	3307      	adds	r3, #7
 800a612:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f023 0307 	bic.w	r3, r3, #7
 800a61a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a61c:	68ba      	ldr	r2, [r7, #8]
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	1ad3      	subs	r3, r2, r3
 800a622:	4a1f      	ldr	r2, [pc, #124]	; (800a6a0 <prvHeapInit+0xac>)
 800a624:	4413      	add	r3, r2
 800a626:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a62c:	4a1d      	ldr	r2, [pc, #116]	; (800a6a4 <prvHeapInit+0xb0>)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a632:	4b1c      	ldr	r3, [pc, #112]	; (800a6a4 <prvHeapInit+0xb0>)
 800a634:	2200      	movs	r2, #0
 800a636:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	68ba      	ldr	r2, [r7, #8]
 800a63c:	4413      	add	r3, r2
 800a63e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a640:	2208      	movs	r2, #8
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	1a9b      	subs	r3, r3, r2
 800a646:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f023 0307 	bic.w	r3, r3, #7
 800a64e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	4a15      	ldr	r2, [pc, #84]	; (800a6a8 <prvHeapInit+0xb4>)
 800a654:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a656:	4b14      	ldr	r3, [pc, #80]	; (800a6a8 <prvHeapInit+0xb4>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	2200      	movs	r2, #0
 800a65c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a65e:	4b12      	ldr	r3, [pc, #72]	; (800a6a8 <prvHeapInit+0xb4>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	2200      	movs	r2, #0
 800a664:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	68fa      	ldr	r2, [r7, #12]
 800a66e:	1ad2      	subs	r2, r2, r3
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a674:	4b0c      	ldr	r3, [pc, #48]	; (800a6a8 <prvHeapInit+0xb4>)
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	4a0a      	ldr	r2, [pc, #40]	; (800a6ac <prvHeapInit+0xb8>)
 800a682:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	4a09      	ldr	r2, [pc, #36]	; (800a6b0 <prvHeapInit+0xbc>)
 800a68a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a68c:	4b09      	ldr	r3, [pc, #36]	; (800a6b4 <prvHeapInit+0xc0>)
 800a68e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a692:	601a      	str	r2, [r3, #0]
}
 800a694:	bf00      	nop
 800a696:	3714      	adds	r7, #20
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr
 800a6a0:	20000870 	.word	0x20000870
 800a6a4:	20004470 	.word	0x20004470
 800a6a8:	20004478 	.word	0x20004478
 800a6ac:	20004480 	.word	0x20004480
 800a6b0:	2000447c 	.word	0x2000447c
 800a6b4:	2000448c 	.word	0x2000448c

0800a6b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b085      	sub	sp, #20
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a6c0:	4b28      	ldr	r3, [pc, #160]	; (800a764 <prvInsertBlockIntoFreeList+0xac>)
 800a6c2:	60fb      	str	r3, [r7, #12]
 800a6c4:	e002      	b.n	800a6cc <prvInsertBlockIntoFreeList+0x14>
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	60fb      	str	r3, [r7, #12]
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d8f7      	bhi.n	800a6c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	68ba      	ldr	r2, [r7, #8]
 800a6e0:	4413      	add	r3, r2
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d108      	bne.n	800a6fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	685a      	ldr	r2, [r3, #4]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	441a      	add	r2, r3
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	68ba      	ldr	r2, [r7, #8]
 800a704:	441a      	add	r2, r3
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d118      	bne.n	800a740 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	4b15      	ldr	r3, [pc, #84]	; (800a768 <prvInsertBlockIntoFreeList+0xb0>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	429a      	cmp	r2, r3
 800a718:	d00d      	beq.n	800a736 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	685a      	ldr	r2, [r3, #4]
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	441a      	add	r2, r3
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	601a      	str	r2, [r3, #0]
 800a734:	e008      	b.n	800a748 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a736:	4b0c      	ldr	r3, [pc, #48]	; (800a768 <prvInsertBlockIntoFreeList+0xb0>)
 800a738:	681a      	ldr	r2, [r3, #0]
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	601a      	str	r2, [r3, #0]
 800a73e:	e003      	b.n	800a748 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a748:	68fa      	ldr	r2, [r7, #12]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d002      	beq.n	800a756 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	687a      	ldr	r2, [r7, #4]
 800a754:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a756:	bf00      	nop
 800a758:	3714      	adds	r7, #20
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr
 800a762:	bf00      	nop
 800a764:	20004470 	.word	0x20004470
 800a768:	20004478 	.word	0x20004478

0800a76c <__errno>:
 800a76c:	4b01      	ldr	r3, [pc, #4]	; (800a774 <__errno+0x8>)
 800a76e:	6818      	ldr	r0, [r3, #0]
 800a770:	4770      	bx	lr
 800a772:	bf00      	nop
 800a774:	20000060 	.word	0x20000060

0800a778 <std>:
 800a778:	2300      	movs	r3, #0
 800a77a:	b510      	push	{r4, lr}
 800a77c:	4604      	mov	r4, r0
 800a77e:	e9c0 3300 	strd	r3, r3, [r0]
 800a782:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a786:	6083      	str	r3, [r0, #8]
 800a788:	8181      	strh	r1, [r0, #12]
 800a78a:	6643      	str	r3, [r0, #100]	; 0x64
 800a78c:	81c2      	strh	r2, [r0, #14]
 800a78e:	6183      	str	r3, [r0, #24]
 800a790:	4619      	mov	r1, r3
 800a792:	2208      	movs	r2, #8
 800a794:	305c      	adds	r0, #92	; 0x5c
 800a796:	f000 f91a 	bl	800a9ce <memset>
 800a79a:	4b05      	ldr	r3, [pc, #20]	; (800a7b0 <std+0x38>)
 800a79c:	6263      	str	r3, [r4, #36]	; 0x24
 800a79e:	4b05      	ldr	r3, [pc, #20]	; (800a7b4 <std+0x3c>)
 800a7a0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a7a2:	4b05      	ldr	r3, [pc, #20]	; (800a7b8 <std+0x40>)
 800a7a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a7a6:	4b05      	ldr	r3, [pc, #20]	; (800a7bc <std+0x44>)
 800a7a8:	6224      	str	r4, [r4, #32]
 800a7aa:	6323      	str	r3, [r4, #48]	; 0x30
 800a7ac:	bd10      	pop	{r4, pc}
 800a7ae:	bf00      	nop
 800a7b0:	0800b62d 	.word	0x0800b62d
 800a7b4:	0800b64f 	.word	0x0800b64f
 800a7b8:	0800b687 	.word	0x0800b687
 800a7bc:	0800b6ab 	.word	0x0800b6ab

0800a7c0 <_cleanup_r>:
 800a7c0:	4901      	ldr	r1, [pc, #4]	; (800a7c8 <_cleanup_r+0x8>)
 800a7c2:	f000 b8af 	b.w	800a924 <_fwalk_reent>
 800a7c6:	bf00      	nop
 800a7c8:	0800c699 	.word	0x0800c699

0800a7cc <__sfmoreglue>:
 800a7cc:	b570      	push	{r4, r5, r6, lr}
 800a7ce:	2268      	movs	r2, #104	; 0x68
 800a7d0:	1e4d      	subs	r5, r1, #1
 800a7d2:	4355      	muls	r5, r2
 800a7d4:	460e      	mov	r6, r1
 800a7d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a7da:	f000 f921 	bl	800aa20 <_malloc_r>
 800a7de:	4604      	mov	r4, r0
 800a7e0:	b140      	cbz	r0, 800a7f4 <__sfmoreglue+0x28>
 800a7e2:	2100      	movs	r1, #0
 800a7e4:	e9c0 1600 	strd	r1, r6, [r0]
 800a7e8:	300c      	adds	r0, #12
 800a7ea:	60a0      	str	r0, [r4, #8]
 800a7ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a7f0:	f000 f8ed 	bl	800a9ce <memset>
 800a7f4:	4620      	mov	r0, r4
 800a7f6:	bd70      	pop	{r4, r5, r6, pc}

0800a7f8 <__sfp_lock_acquire>:
 800a7f8:	4801      	ldr	r0, [pc, #4]	; (800a800 <__sfp_lock_acquire+0x8>)
 800a7fa:	f000 b8d8 	b.w	800a9ae <__retarget_lock_acquire_recursive>
 800a7fe:	bf00      	nop
 800a800:	20004491 	.word	0x20004491

0800a804 <__sfp_lock_release>:
 800a804:	4801      	ldr	r0, [pc, #4]	; (800a80c <__sfp_lock_release+0x8>)
 800a806:	f000 b8d3 	b.w	800a9b0 <__retarget_lock_release_recursive>
 800a80a:	bf00      	nop
 800a80c:	20004491 	.word	0x20004491

0800a810 <__sinit_lock_acquire>:
 800a810:	4801      	ldr	r0, [pc, #4]	; (800a818 <__sinit_lock_acquire+0x8>)
 800a812:	f000 b8cc 	b.w	800a9ae <__retarget_lock_acquire_recursive>
 800a816:	bf00      	nop
 800a818:	20004492 	.word	0x20004492

0800a81c <__sinit_lock_release>:
 800a81c:	4801      	ldr	r0, [pc, #4]	; (800a824 <__sinit_lock_release+0x8>)
 800a81e:	f000 b8c7 	b.w	800a9b0 <__retarget_lock_release_recursive>
 800a822:	bf00      	nop
 800a824:	20004492 	.word	0x20004492

0800a828 <__sinit>:
 800a828:	b510      	push	{r4, lr}
 800a82a:	4604      	mov	r4, r0
 800a82c:	f7ff fff0 	bl	800a810 <__sinit_lock_acquire>
 800a830:	69a3      	ldr	r3, [r4, #24]
 800a832:	b11b      	cbz	r3, 800a83c <__sinit+0x14>
 800a834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a838:	f7ff bff0 	b.w	800a81c <__sinit_lock_release>
 800a83c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a840:	6523      	str	r3, [r4, #80]	; 0x50
 800a842:	4b13      	ldr	r3, [pc, #76]	; (800a890 <__sinit+0x68>)
 800a844:	4a13      	ldr	r2, [pc, #76]	; (800a894 <__sinit+0x6c>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	62a2      	str	r2, [r4, #40]	; 0x28
 800a84a:	42a3      	cmp	r3, r4
 800a84c:	bf04      	itt	eq
 800a84e:	2301      	moveq	r3, #1
 800a850:	61a3      	streq	r3, [r4, #24]
 800a852:	4620      	mov	r0, r4
 800a854:	f000 f820 	bl	800a898 <__sfp>
 800a858:	6060      	str	r0, [r4, #4]
 800a85a:	4620      	mov	r0, r4
 800a85c:	f000 f81c 	bl	800a898 <__sfp>
 800a860:	60a0      	str	r0, [r4, #8]
 800a862:	4620      	mov	r0, r4
 800a864:	f000 f818 	bl	800a898 <__sfp>
 800a868:	2200      	movs	r2, #0
 800a86a:	60e0      	str	r0, [r4, #12]
 800a86c:	2104      	movs	r1, #4
 800a86e:	6860      	ldr	r0, [r4, #4]
 800a870:	f7ff ff82 	bl	800a778 <std>
 800a874:	68a0      	ldr	r0, [r4, #8]
 800a876:	2201      	movs	r2, #1
 800a878:	2109      	movs	r1, #9
 800a87a:	f7ff ff7d 	bl	800a778 <std>
 800a87e:	68e0      	ldr	r0, [r4, #12]
 800a880:	2202      	movs	r2, #2
 800a882:	2112      	movs	r1, #18
 800a884:	f7ff ff78 	bl	800a778 <std>
 800a888:	2301      	movs	r3, #1
 800a88a:	61a3      	str	r3, [r4, #24]
 800a88c:	e7d2      	b.n	800a834 <__sinit+0xc>
 800a88e:	bf00      	nop
 800a890:	0800f170 	.word	0x0800f170
 800a894:	0800a7c1 	.word	0x0800a7c1

0800a898 <__sfp>:
 800a898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a89a:	4607      	mov	r7, r0
 800a89c:	f7ff ffac 	bl	800a7f8 <__sfp_lock_acquire>
 800a8a0:	4b1e      	ldr	r3, [pc, #120]	; (800a91c <__sfp+0x84>)
 800a8a2:	681e      	ldr	r6, [r3, #0]
 800a8a4:	69b3      	ldr	r3, [r6, #24]
 800a8a6:	b913      	cbnz	r3, 800a8ae <__sfp+0x16>
 800a8a8:	4630      	mov	r0, r6
 800a8aa:	f7ff ffbd 	bl	800a828 <__sinit>
 800a8ae:	3648      	adds	r6, #72	; 0x48
 800a8b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a8b4:	3b01      	subs	r3, #1
 800a8b6:	d503      	bpl.n	800a8c0 <__sfp+0x28>
 800a8b8:	6833      	ldr	r3, [r6, #0]
 800a8ba:	b30b      	cbz	r3, 800a900 <__sfp+0x68>
 800a8bc:	6836      	ldr	r6, [r6, #0]
 800a8be:	e7f7      	b.n	800a8b0 <__sfp+0x18>
 800a8c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a8c4:	b9d5      	cbnz	r5, 800a8fc <__sfp+0x64>
 800a8c6:	4b16      	ldr	r3, [pc, #88]	; (800a920 <__sfp+0x88>)
 800a8c8:	60e3      	str	r3, [r4, #12]
 800a8ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a8ce:	6665      	str	r5, [r4, #100]	; 0x64
 800a8d0:	f000 f86c 	bl	800a9ac <__retarget_lock_init_recursive>
 800a8d4:	f7ff ff96 	bl	800a804 <__sfp_lock_release>
 800a8d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a8dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a8e0:	6025      	str	r5, [r4, #0]
 800a8e2:	61a5      	str	r5, [r4, #24]
 800a8e4:	2208      	movs	r2, #8
 800a8e6:	4629      	mov	r1, r5
 800a8e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a8ec:	f000 f86f 	bl	800a9ce <memset>
 800a8f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a8f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8fc:	3468      	adds	r4, #104	; 0x68
 800a8fe:	e7d9      	b.n	800a8b4 <__sfp+0x1c>
 800a900:	2104      	movs	r1, #4
 800a902:	4638      	mov	r0, r7
 800a904:	f7ff ff62 	bl	800a7cc <__sfmoreglue>
 800a908:	4604      	mov	r4, r0
 800a90a:	6030      	str	r0, [r6, #0]
 800a90c:	2800      	cmp	r0, #0
 800a90e:	d1d5      	bne.n	800a8bc <__sfp+0x24>
 800a910:	f7ff ff78 	bl	800a804 <__sfp_lock_release>
 800a914:	230c      	movs	r3, #12
 800a916:	603b      	str	r3, [r7, #0]
 800a918:	e7ee      	b.n	800a8f8 <__sfp+0x60>
 800a91a:	bf00      	nop
 800a91c:	0800f170 	.word	0x0800f170
 800a920:	ffff0001 	.word	0xffff0001

0800a924 <_fwalk_reent>:
 800a924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a928:	4606      	mov	r6, r0
 800a92a:	4688      	mov	r8, r1
 800a92c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a930:	2700      	movs	r7, #0
 800a932:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a936:	f1b9 0901 	subs.w	r9, r9, #1
 800a93a:	d505      	bpl.n	800a948 <_fwalk_reent+0x24>
 800a93c:	6824      	ldr	r4, [r4, #0]
 800a93e:	2c00      	cmp	r4, #0
 800a940:	d1f7      	bne.n	800a932 <_fwalk_reent+0xe>
 800a942:	4638      	mov	r0, r7
 800a944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a948:	89ab      	ldrh	r3, [r5, #12]
 800a94a:	2b01      	cmp	r3, #1
 800a94c:	d907      	bls.n	800a95e <_fwalk_reent+0x3a>
 800a94e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a952:	3301      	adds	r3, #1
 800a954:	d003      	beq.n	800a95e <_fwalk_reent+0x3a>
 800a956:	4629      	mov	r1, r5
 800a958:	4630      	mov	r0, r6
 800a95a:	47c0      	blx	r8
 800a95c:	4307      	orrs	r7, r0
 800a95e:	3568      	adds	r5, #104	; 0x68
 800a960:	e7e9      	b.n	800a936 <_fwalk_reent+0x12>
	...

0800a964 <__libc_init_array>:
 800a964:	b570      	push	{r4, r5, r6, lr}
 800a966:	4d0d      	ldr	r5, [pc, #52]	; (800a99c <__libc_init_array+0x38>)
 800a968:	4c0d      	ldr	r4, [pc, #52]	; (800a9a0 <__libc_init_array+0x3c>)
 800a96a:	1b64      	subs	r4, r4, r5
 800a96c:	10a4      	asrs	r4, r4, #2
 800a96e:	2600      	movs	r6, #0
 800a970:	42a6      	cmp	r6, r4
 800a972:	d109      	bne.n	800a988 <__libc_init_array+0x24>
 800a974:	4d0b      	ldr	r5, [pc, #44]	; (800a9a4 <__libc_init_array+0x40>)
 800a976:	4c0c      	ldr	r4, [pc, #48]	; (800a9a8 <__libc_init_array+0x44>)
 800a978:	f004 fb08 	bl	800ef8c <_init>
 800a97c:	1b64      	subs	r4, r4, r5
 800a97e:	10a4      	asrs	r4, r4, #2
 800a980:	2600      	movs	r6, #0
 800a982:	42a6      	cmp	r6, r4
 800a984:	d105      	bne.n	800a992 <__libc_init_array+0x2e>
 800a986:	bd70      	pop	{r4, r5, r6, pc}
 800a988:	f855 3b04 	ldr.w	r3, [r5], #4
 800a98c:	4798      	blx	r3
 800a98e:	3601      	adds	r6, #1
 800a990:	e7ee      	b.n	800a970 <__libc_init_array+0xc>
 800a992:	f855 3b04 	ldr.w	r3, [r5], #4
 800a996:	4798      	blx	r3
 800a998:	3601      	adds	r6, #1
 800a99a:	e7f2      	b.n	800a982 <__libc_init_array+0x1e>
 800a99c:	0800f740 	.word	0x0800f740
 800a9a0:	0800f740 	.word	0x0800f740
 800a9a4:	0800f740 	.word	0x0800f740
 800a9a8:	0800f744 	.word	0x0800f744

0800a9ac <__retarget_lock_init_recursive>:
 800a9ac:	4770      	bx	lr

0800a9ae <__retarget_lock_acquire_recursive>:
 800a9ae:	4770      	bx	lr

0800a9b0 <__retarget_lock_release_recursive>:
 800a9b0:	4770      	bx	lr

0800a9b2 <memcpy>:
 800a9b2:	440a      	add	r2, r1
 800a9b4:	4291      	cmp	r1, r2
 800a9b6:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9ba:	d100      	bne.n	800a9be <memcpy+0xc>
 800a9bc:	4770      	bx	lr
 800a9be:	b510      	push	{r4, lr}
 800a9c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9c8:	4291      	cmp	r1, r2
 800a9ca:	d1f9      	bne.n	800a9c0 <memcpy+0xe>
 800a9cc:	bd10      	pop	{r4, pc}

0800a9ce <memset>:
 800a9ce:	4402      	add	r2, r0
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d100      	bne.n	800a9d8 <memset+0xa>
 800a9d6:	4770      	bx	lr
 800a9d8:	f803 1b01 	strb.w	r1, [r3], #1
 800a9dc:	e7f9      	b.n	800a9d2 <memset+0x4>
	...

0800a9e0 <sbrk_aligned>:
 800a9e0:	b570      	push	{r4, r5, r6, lr}
 800a9e2:	4e0e      	ldr	r6, [pc, #56]	; (800aa1c <sbrk_aligned+0x3c>)
 800a9e4:	460c      	mov	r4, r1
 800a9e6:	6831      	ldr	r1, [r6, #0]
 800a9e8:	4605      	mov	r5, r0
 800a9ea:	b911      	cbnz	r1, 800a9f2 <sbrk_aligned+0x12>
 800a9ec:	f000 fdee 	bl	800b5cc <_sbrk_r>
 800a9f0:	6030      	str	r0, [r6, #0]
 800a9f2:	4621      	mov	r1, r4
 800a9f4:	4628      	mov	r0, r5
 800a9f6:	f000 fde9 	bl	800b5cc <_sbrk_r>
 800a9fa:	1c43      	adds	r3, r0, #1
 800a9fc:	d00a      	beq.n	800aa14 <sbrk_aligned+0x34>
 800a9fe:	1cc4      	adds	r4, r0, #3
 800aa00:	f024 0403 	bic.w	r4, r4, #3
 800aa04:	42a0      	cmp	r0, r4
 800aa06:	d007      	beq.n	800aa18 <sbrk_aligned+0x38>
 800aa08:	1a21      	subs	r1, r4, r0
 800aa0a:	4628      	mov	r0, r5
 800aa0c:	f000 fdde 	bl	800b5cc <_sbrk_r>
 800aa10:	3001      	adds	r0, #1
 800aa12:	d101      	bne.n	800aa18 <sbrk_aligned+0x38>
 800aa14:	f04f 34ff 	mov.w	r4, #4294967295
 800aa18:	4620      	mov	r0, r4
 800aa1a:	bd70      	pop	{r4, r5, r6, pc}
 800aa1c:	20004498 	.word	0x20004498

0800aa20 <_malloc_r>:
 800aa20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa24:	1ccd      	adds	r5, r1, #3
 800aa26:	f025 0503 	bic.w	r5, r5, #3
 800aa2a:	3508      	adds	r5, #8
 800aa2c:	2d0c      	cmp	r5, #12
 800aa2e:	bf38      	it	cc
 800aa30:	250c      	movcc	r5, #12
 800aa32:	2d00      	cmp	r5, #0
 800aa34:	4607      	mov	r7, r0
 800aa36:	db01      	blt.n	800aa3c <_malloc_r+0x1c>
 800aa38:	42a9      	cmp	r1, r5
 800aa3a:	d905      	bls.n	800aa48 <_malloc_r+0x28>
 800aa3c:	230c      	movs	r3, #12
 800aa3e:	603b      	str	r3, [r7, #0]
 800aa40:	2600      	movs	r6, #0
 800aa42:	4630      	mov	r0, r6
 800aa44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa48:	4e2e      	ldr	r6, [pc, #184]	; (800ab04 <_malloc_r+0xe4>)
 800aa4a:	f001 fee5 	bl	800c818 <__malloc_lock>
 800aa4e:	6833      	ldr	r3, [r6, #0]
 800aa50:	461c      	mov	r4, r3
 800aa52:	bb34      	cbnz	r4, 800aaa2 <_malloc_r+0x82>
 800aa54:	4629      	mov	r1, r5
 800aa56:	4638      	mov	r0, r7
 800aa58:	f7ff ffc2 	bl	800a9e0 <sbrk_aligned>
 800aa5c:	1c43      	adds	r3, r0, #1
 800aa5e:	4604      	mov	r4, r0
 800aa60:	d14d      	bne.n	800aafe <_malloc_r+0xde>
 800aa62:	6834      	ldr	r4, [r6, #0]
 800aa64:	4626      	mov	r6, r4
 800aa66:	2e00      	cmp	r6, #0
 800aa68:	d140      	bne.n	800aaec <_malloc_r+0xcc>
 800aa6a:	6823      	ldr	r3, [r4, #0]
 800aa6c:	4631      	mov	r1, r6
 800aa6e:	4638      	mov	r0, r7
 800aa70:	eb04 0803 	add.w	r8, r4, r3
 800aa74:	f000 fdaa 	bl	800b5cc <_sbrk_r>
 800aa78:	4580      	cmp	r8, r0
 800aa7a:	d13a      	bne.n	800aaf2 <_malloc_r+0xd2>
 800aa7c:	6821      	ldr	r1, [r4, #0]
 800aa7e:	3503      	adds	r5, #3
 800aa80:	1a6d      	subs	r5, r5, r1
 800aa82:	f025 0503 	bic.w	r5, r5, #3
 800aa86:	3508      	adds	r5, #8
 800aa88:	2d0c      	cmp	r5, #12
 800aa8a:	bf38      	it	cc
 800aa8c:	250c      	movcc	r5, #12
 800aa8e:	4629      	mov	r1, r5
 800aa90:	4638      	mov	r0, r7
 800aa92:	f7ff ffa5 	bl	800a9e0 <sbrk_aligned>
 800aa96:	3001      	adds	r0, #1
 800aa98:	d02b      	beq.n	800aaf2 <_malloc_r+0xd2>
 800aa9a:	6823      	ldr	r3, [r4, #0]
 800aa9c:	442b      	add	r3, r5
 800aa9e:	6023      	str	r3, [r4, #0]
 800aaa0:	e00e      	b.n	800aac0 <_malloc_r+0xa0>
 800aaa2:	6822      	ldr	r2, [r4, #0]
 800aaa4:	1b52      	subs	r2, r2, r5
 800aaa6:	d41e      	bmi.n	800aae6 <_malloc_r+0xc6>
 800aaa8:	2a0b      	cmp	r2, #11
 800aaaa:	d916      	bls.n	800aada <_malloc_r+0xba>
 800aaac:	1961      	adds	r1, r4, r5
 800aaae:	42a3      	cmp	r3, r4
 800aab0:	6025      	str	r5, [r4, #0]
 800aab2:	bf18      	it	ne
 800aab4:	6059      	strne	r1, [r3, #4]
 800aab6:	6863      	ldr	r3, [r4, #4]
 800aab8:	bf08      	it	eq
 800aaba:	6031      	streq	r1, [r6, #0]
 800aabc:	5162      	str	r2, [r4, r5]
 800aabe:	604b      	str	r3, [r1, #4]
 800aac0:	4638      	mov	r0, r7
 800aac2:	f104 060b 	add.w	r6, r4, #11
 800aac6:	f001 fead 	bl	800c824 <__malloc_unlock>
 800aaca:	f026 0607 	bic.w	r6, r6, #7
 800aace:	1d23      	adds	r3, r4, #4
 800aad0:	1af2      	subs	r2, r6, r3
 800aad2:	d0b6      	beq.n	800aa42 <_malloc_r+0x22>
 800aad4:	1b9b      	subs	r3, r3, r6
 800aad6:	50a3      	str	r3, [r4, r2]
 800aad8:	e7b3      	b.n	800aa42 <_malloc_r+0x22>
 800aada:	6862      	ldr	r2, [r4, #4]
 800aadc:	42a3      	cmp	r3, r4
 800aade:	bf0c      	ite	eq
 800aae0:	6032      	streq	r2, [r6, #0]
 800aae2:	605a      	strne	r2, [r3, #4]
 800aae4:	e7ec      	b.n	800aac0 <_malloc_r+0xa0>
 800aae6:	4623      	mov	r3, r4
 800aae8:	6864      	ldr	r4, [r4, #4]
 800aaea:	e7b2      	b.n	800aa52 <_malloc_r+0x32>
 800aaec:	4634      	mov	r4, r6
 800aaee:	6876      	ldr	r6, [r6, #4]
 800aaf0:	e7b9      	b.n	800aa66 <_malloc_r+0x46>
 800aaf2:	230c      	movs	r3, #12
 800aaf4:	603b      	str	r3, [r7, #0]
 800aaf6:	4638      	mov	r0, r7
 800aaf8:	f001 fe94 	bl	800c824 <__malloc_unlock>
 800aafc:	e7a1      	b.n	800aa42 <_malloc_r+0x22>
 800aafe:	6025      	str	r5, [r4, #0]
 800ab00:	e7de      	b.n	800aac0 <_malloc_r+0xa0>
 800ab02:	bf00      	nop
 800ab04:	20004494 	.word	0x20004494

0800ab08 <__cvt>:
 800ab08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab0c:	ec55 4b10 	vmov	r4, r5, d0
 800ab10:	2d00      	cmp	r5, #0
 800ab12:	460e      	mov	r6, r1
 800ab14:	4619      	mov	r1, r3
 800ab16:	462b      	mov	r3, r5
 800ab18:	bfbb      	ittet	lt
 800ab1a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ab1e:	461d      	movlt	r5, r3
 800ab20:	2300      	movge	r3, #0
 800ab22:	232d      	movlt	r3, #45	; 0x2d
 800ab24:	700b      	strb	r3, [r1, #0]
 800ab26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab28:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ab2c:	4691      	mov	r9, r2
 800ab2e:	f023 0820 	bic.w	r8, r3, #32
 800ab32:	bfbc      	itt	lt
 800ab34:	4622      	movlt	r2, r4
 800ab36:	4614      	movlt	r4, r2
 800ab38:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ab3c:	d005      	beq.n	800ab4a <__cvt+0x42>
 800ab3e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ab42:	d100      	bne.n	800ab46 <__cvt+0x3e>
 800ab44:	3601      	adds	r6, #1
 800ab46:	2102      	movs	r1, #2
 800ab48:	e000      	b.n	800ab4c <__cvt+0x44>
 800ab4a:	2103      	movs	r1, #3
 800ab4c:	ab03      	add	r3, sp, #12
 800ab4e:	9301      	str	r3, [sp, #4]
 800ab50:	ab02      	add	r3, sp, #8
 800ab52:	9300      	str	r3, [sp, #0]
 800ab54:	ec45 4b10 	vmov	d0, r4, r5
 800ab58:	4653      	mov	r3, sl
 800ab5a:	4632      	mov	r2, r6
 800ab5c:	f000 ff28 	bl	800b9b0 <_dtoa_r>
 800ab60:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ab64:	4607      	mov	r7, r0
 800ab66:	d102      	bne.n	800ab6e <__cvt+0x66>
 800ab68:	f019 0f01 	tst.w	r9, #1
 800ab6c:	d022      	beq.n	800abb4 <__cvt+0xac>
 800ab6e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ab72:	eb07 0906 	add.w	r9, r7, r6
 800ab76:	d110      	bne.n	800ab9a <__cvt+0x92>
 800ab78:	783b      	ldrb	r3, [r7, #0]
 800ab7a:	2b30      	cmp	r3, #48	; 0x30
 800ab7c:	d10a      	bne.n	800ab94 <__cvt+0x8c>
 800ab7e:	2200      	movs	r2, #0
 800ab80:	2300      	movs	r3, #0
 800ab82:	4620      	mov	r0, r4
 800ab84:	4629      	mov	r1, r5
 800ab86:	f7f5 ffaf 	bl	8000ae8 <__aeabi_dcmpeq>
 800ab8a:	b918      	cbnz	r0, 800ab94 <__cvt+0x8c>
 800ab8c:	f1c6 0601 	rsb	r6, r6, #1
 800ab90:	f8ca 6000 	str.w	r6, [sl]
 800ab94:	f8da 3000 	ldr.w	r3, [sl]
 800ab98:	4499      	add	r9, r3
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	4620      	mov	r0, r4
 800aba0:	4629      	mov	r1, r5
 800aba2:	f7f5 ffa1 	bl	8000ae8 <__aeabi_dcmpeq>
 800aba6:	b108      	cbz	r0, 800abac <__cvt+0xa4>
 800aba8:	f8cd 900c 	str.w	r9, [sp, #12]
 800abac:	2230      	movs	r2, #48	; 0x30
 800abae:	9b03      	ldr	r3, [sp, #12]
 800abb0:	454b      	cmp	r3, r9
 800abb2:	d307      	bcc.n	800abc4 <__cvt+0xbc>
 800abb4:	9b03      	ldr	r3, [sp, #12]
 800abb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800abb8:	1bdb      	subs	r3, r3, r7
 800abba:	4638      	mov	r0, r7
 800abbc:	6013      	str	r3, [r2, #0]
 800abbe:	b004      	add	sp, #16
 800abc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abc4:	1c59      	adds	r1, r3, #1
 800abc6:	9103      	str	r1, [sp, #12]
 800abc8:	701a      	strb	r2, [r3, #0]
 800abca:	e7f0      	b.n	800abae <__cvt+0xa6>

0800abcc <__exponent>:
 800abcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800abce:	4603      	mov	r3, r0
 800abd0:	2900      	cmp	r1, #0
 800abd2:	bfb8      	it	lt
 800abd4:	4249      	neglt	r1, r1
 800abd6:	f803 2b02 	strb.w	r2, [r3], #2
 800abda:	bfb4      	ite	lt
 800abdc:	222d      	movlt	r2, #45	; 0x2d
 800abde:	222b      	movge	r2, #43	; 0x2b
 800abe0:	2909      	cmp	r1, #9
 800abe2:	7042      	strb	r2, [r0, #1]
 800abe4:	dd2a      	ble.n	800ac3c <__exponent+0x70>
 800abe6:	f10d 0407 	add.w	r4, sp, #7
 800abea:	46a4      	mov	ip, r4
 800abec:	270a      	movs	r7, #10
 800abee:	46a6      	mov	lr, r4
 800abf0:	460a      	mov	r2, r1
 800abf2:	fb91 f6f7 	sdiv	r6, r1, r7
 800abf6:	fb07 1516 	mls	r5, r7, r6, r1
 800abfa:	3530      	adds	r5, #48	; 0x30
 800abfc:	2a63      	cmp	r2, #99	; 0x63
 800abfe:	f104 34ff 	add.w	r4, r4, #4294967295
 800ac02:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ac06:	4631      	mov	r1, r6
 800ac08:	dcf1      	bgt.n	800abee <__exponent+0x22>
 800ac0a:	3130      	adds	r1, #48	; 0x30
 800ac0c:	f1ae 0502 	sub.w	r5, lr, #2
 800ac10:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ac14:	1c44      	adds	r4, r0, #1
 800ac16:	4629      	mov	r1, r5
 800ac18:	4561      	cmp	r1, ip
 800ac1a:	d30a      	bcc.n	800ac32 <__exponent+0x66>
 800ac1c:	f10d 0209 	add.w	r2, sp, #9
 800ac20:	eba2 020e 	sub.w	r2, r2, lr
 800ac24:	4565      	cmp	r5, ip
 800ac26:	bf88      	it	hi
 800ac28:	2200      	movhi	r2, #0
 800ac2a:	4413      	add	r3, r2
 800ac2c:	1a18      	subs	r0, r3, r0
 800ac2e:	b003      	add	sp, #12
 800ac30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac36:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ac3a:	e7ed      	b.n	800ac18 <__exponent+0x4c>
 800ac3c:	2330      	movs	r3, #48	; 0x30
 800ac3e:	3130      	adds	r1, #48	; 0x30
 800ac40:	7083      	strb	r3, [r0, #2]
 800ac42:	70c1      	strb	r1, [r0, #3]
 800ac44:	1d03      	adds	r3, r0, #4
 800ac46:	e7f1      	b.n	800ac2c <__exponent+0x60>

0800ac48 <_printf_float>:
 800ac48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac4c:	ed2d 8b02 	vpush	{d8}
 800ac50:	b08d      	sub	sp, #52	; 0x34
 800ac52:	460c      	mov	r4, r1
 800ac54:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ac58:	4616      	mov	r6, r2
 800ac5a:	461f      	mov	r7, r3
 800ac5c:	4605      	mov	r5, r0
 800ac5e:	f001 fd57 	bl	800c710 <_localeconv_r>
 800ac62:	f8d0 a000 	ldr.w	sl, [r0]
 800ac66:	4650      	mov	r0, sl
 800ac68:	f7f5 fac2 	bl	80001f0 <strlen>
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	930a      	str	r3, [sp, #40]	; 0x28
 800ac70:	6823      	ldr	r3, [r4, #0]
 800ac72:	9305      	str	r3, [sp, #20]
 800ac74:	f8d8 3000 	ldr.w	r3, [r8]
 800ac78:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ac7c:	3307      	adds	r3, #7
 800ac7e:	f023 0307 	bic.w	r3, r3, #7
 800ac82:	f103 0208 	add.w	r2, r3, #8
 800ac86:	f8c8 2000 	str.w	r2, [r8]
 800ac8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ac92:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ac96:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ac9a:	9307      	str	r3, [sp, #28]
 800ac9c:	f8cd 8018 	str.w	r8, [sp, #24]
 800aca0:	ee08 0a10 	vmov	s16, r0
 800aca4:	4b9f      	ldr	r3, [pc, #636]	; (800af24 <_printf_float+0x2dc>)
 800aca6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800acaa:	f04f 32ff 	mov.w	r2, #4294967295
 800acae:	f7f5 ff4d 	bl	8000b4c <__aeabi_dcmpun>
 800acb2:	bb88      	cbnz	r0, 800ad18 <_printf_float+0xd0>
 800acb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800acb8:	4b9a      	ldr	r3, [pc, #616]	; (800af24 <_printf_float+0x2dc>)
 800acba:	f04f 32ff 	mov.w	r2, #4294967295
 800acbe:	f7f5 ff27 	bl	8000b10 <__aeabi_dcmple>
 800acc2:	bb48      	cbnz	r0, 800ad18 <_printf_float+0xd0>
 800acc4:	2200      	movs	r2, #0
 800acc6:	2300      	movs	r3, #0
 800acc8:	4640      	mov	r0, r8
 800acca:	4649      	mov	r1, r9
 800accc:	f7f5 ff16 	bl	8000afc <__aeabi_dcmplt>
 800acd0:	b110      	cbz	r0, 800acd8 <_printf_float+0x90>
 800acd2:	232d      	movs	r3, #45	; 0x2d
 800acd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acd8:	4b93      	ldr	r3, [pc, #588]	; (800af28 <_printf_float+0x2e0>)
 800acda:	4894      	ldr	r0, [pc, #592]	; (800af2c <_printf_float+0x2e4>)
 800acdc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ace0:	bf94      	ite	ls
 800ace2:	4698      	movls	r8, r3
 800ace4:	4680      	movhi	r8, r0
 800ace6:	2303      	movs	r3, #3
 800ace8:	6123      	str	r3, [r4, #16]
 800acea:	9b05      	ldr	r3, [sp, #20]
 800acec:	f023 0204 	bic.w	r2, r3, #4
 800acf0:	6022      	str	r2, [r4, #0]
 800acf2:	f04f 0900 	mov.w	r9, #0
 800acf6:	9700      	str	r7, [sp, #0]
 800acf8:	4633      	mov	r3, r6
 800acfa:	aa0b      	add	r2, sp, #44	; 0x2c
 800acfc:	4621      	mov	r1, r4
 800acfe:	4628      	mov	r0, r5
 800ad00:	f000 f9d8 	bl	800b0b4 <_printf_common>
 800ad04:	3001      	adds	r0, #1
 800ad06:	f040 8090 	bne.w	800ae2a <_printf_float+0x1e2>
 800ad0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad0e:	b00d      	add	sp, #52	; 0x34
 800ad10:	ecbd 8b02 	vpop	{d8}
 800ad14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad18:	4642      	mov	r2, r8
 800ad1a:	464b      	mov	r3, r9
 800ad1c:	4640      	mov	r0, r8
 800ad1e:	4649      	mov	r1, r9
 800ad20:	f7f5 ff14 	bl	8000b4c <__aeabi_dcmpun>
 800ad24:	b140      	cbz	r0, 800ad38 <_printf_float+0xf0>
 800ad26:	464b      	mov	r3, r9
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	bfbc      	itt	lt
 800ad2c:	232d      	movlt	r3, #45	; 0x2d
 800ad2e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ad32:	487f      	ldr	r0, [pc, #508]	; (800af30 <_printf_float+0x2e8>)
 800ad34:	4b7f      	ldr	r3, [pc, #508]	; (800af34 <_printf_float+0x2ec>)
 800ad36:	e7d1      	b.n	800acdc <_printf_float+0x94>
 800ad38:	6863      	ldr	r3, [r4, #4]
 800ad3a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ad3e:	9206      	str	r2, [sp, #24]
 800ad40:	1c5a      	adds	r2, r3, #1
 800ad42:	d13f      	bne.n	800adc4 <_printf_float+0x17c>
 800ad44:	2306      	movs	r3, #6
 800ad46:	6063      	str	r3, [r4, #4]
 800ad48:	9b05      	ldr	r3, [sp, #20]
 800ad4a:	6861      	ldr	r1, [r4, #4]
 800ad4c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ad50:	2300      	movs	r3, #0
 800ad52:	9303      	str	r3, [sp, #12]
 800ad54:	ab0a      	add	r3, sp, #40	; 0x28
 800ad56:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ad5a:	ab09      	add	r3, sp, #36	; 0x24
 800ad5c:	ec49 8b10 	vmov	d0, r8, r9
 800ad60:	9300      	str	r3, [sp, #0]
 800ad62:	6022      	str	r2, [r4, #0]
 800ad64:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ad68:	4628      	mov	r0, r5
 800ad6a:	f7ff fecd 	bl	800ab08 <__cvt>
 800ad6e:	9b06      	ldr	r3, [sp, #24]
 800ad70:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad72:	2b47      	cmp	r3, #71	; 0x47
 800ad74:	4680      	mov	r8, r0
 800ad76:	d108      	bne.n	800ad8a <_printf_float+0x142>
 800ad78:	1cc8      	adds	r0, r1, #3
 800ad7a:	db02      	blt.n	800ad82 <_printf_float+0x13a>
 800ad7c:	6863      	ldr	r3, [r4, #4]
 800ad7e:	4299      	cmp	r1, r3
 800ad80:	dd41      	ble.n	800ae06 <_printf_float+0x1be>
 800ad82:	f1ab 0b02 	sub.w	fp, fp, #2
 800ad86:	fa5f fb8b 	uxtb.w	fp, fp
 800ad8a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ad8e:	d820      	bhi.n	800add2 <_printf_float+0x18a>
 800ad90:	3901      	subs	r1, #1
 800ad92:	465a      	mov	r2, fp
 800ad94:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ad98:	9109      	str	r1, [sp, #36]	; 0x24
 800ad9a:	f7ff ff17 	bl	800abcc <__exponent>
 800ad9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ada0:	1813      	adds	r3, r2, r0
 800ada2:	2a01      	cmp	r2, #1
 800ada4:	4681      	mov	r9, r0
 800ada6:	6123      	str	r3, [r4, #16]
 800ada8:	dc02      	bgt.n	800adb0 <_printf_float+0x168>
 800adaa:	6822      	ldr	r2, [r4, #0]
 800adac:	07d2      	lsls	r2, r2, #31
 800adae:	d501      	bpl.n	800adb4 <_printf_float+0x16c>
 800adb0:	3301      	adds	r3, #1
 800adb2:	6123      	str	r3, [r4, #16]
 800adb4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d09c      	beq.n	800acf6 <_printf_float+0xae>
 800adbc:	232d      	movs	r3, #45	; 0x2d
 800adbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800adc2:	e798      	b.n	800acf6 <_printf_float+0xae>
 800adc4:	9a06      	ldr	r2, [sp, #24]
 800adc6:	2a47      	cmp	r2, #71	; 0x47
 800adc8:	d1be      	bne.n	800ad48 <_printf_float+0x100>
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d1bc      	bne.n	800ad48 <_printf_float+0x100>
 800adce:	2301      	movs	r3, #1
 800add0:	e7b9      	b.n	800ad46 <_printf_float+0xfe>
 800add2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800add6:	d118      	bne.n	800ae0a <_printf_float+0x1c2>
 800add8:	2900      	cmp	r1, #0
 800adda:	6863      	ldr	r3, [r4, #4]
 800addc:	dd0b      	ble.n	800adf6 <_printf_float+0x1ae>
 800adde:	6121      	str	r1, [r4, #16]
 800ade0:	b913      	cbnz	r3, 800ade8 <_printf_float+0x1a0>
 800ade2:	6822      	ldr	r2, [r4, #0]
 800ade4:	07d0      	lsls	r0, r2, #31
 800ade6:	d502      	bpl.n	800adee <_printf_float+0x1a6>
 800ade8:	3301      	adds	r3, #1
 800adea:	440b      	add	r3, r1
 800adec:	6123      	str	r3, [r4, #16]
 800adee:	65a1      	str	r1, [r4, #88]	; 0x58
 800adf0:	f04f 0900 	mov.w	r9, #0
 800adf4:	e7de      	b.n	800adb4 <_printf_float+0x16c>
 800adf6:	b913      	cbnz	r3, 800adfe <_printf_float+0x1b6>
 800adf8:	6822      	ldr	r2, [r4, #0]
 800adfa:	07d2      	lsls	r2, r2, #31
 800adfc:	d501      	bpl.n	800ae02 <_printf_float+0x1ba>
 800adfe:	3302      	adds	r3, #2
 800ae00:	e7f4      	b.n	800adec <_printf_float+0x1a4>
 800ae02:	2301      	movs	r3, #1
 800ae04:	e7f2      	b.n	800adec <_printf_float+0x1a4>
 800ae06:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ae0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae0c:	4299      	cmp	r1, r3
 800ae0e:	db05      	blt.n	800ae1c <_printf_float+0x1d4>
 800ae10:	6823      	ldr	r3, [r4, #0]
 800ae12:	6121      	str	r1, [r4, #16]
 800ae14:	07d8      	lsls	r0, r3, #31
 800ae16:	d5ea      	bpl.n	800adee <_printf_float+0x1a6>
 800ae18:	1c4b      	adds	r3, r1, #1
 800ae1a:	e7e7      	b.n	800adec <_printf_float+0x1a4>
 800ae1c:	2900      	cmp	r1, #0
 800ae1e:	bfd4      	ite	le
 800ae20:	f1c1 0202 	rsble	r2, r1, #2
 800ae24:	2201      	movgt	r2, #1
 800ae26:	4413      	add	r3, r2
 800ae28:	e7e0      	b.n	800adec <_printf_float+0x1a4>
 800ae2a:	6823      	ldr	r3, [r4, #0]
 800ae2c:	055a      	lsls	r2, r3, #21
 800ae2e:	d407      	bmi.n	800ae40 <_printf_float+0x1f8>
 800ae30:	6923      	ldr	r3, [r4, #16]
 800ae32:	4642      	mov	r2, r8
 800ae34:	4631      	mov	r1, r6
 800ae36:	4628      	mov	r0, r5
 800ae38:	47b8      	blx	r7
 800ae3a:	3001      	adds	r0, #1
 800ae3c:	d12c      	bne.n	800ae98 <_printf_float+0x250>
 800ae3e:	e764      	b.n	800ad0a <_printf_float+0xc2>
 800ae40:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ae44:	f240 80e0 	bls.w	800b008 <_printf_float+0x3c0>
 800ae48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	2300      	movs	r3, #0
 800ae50:	f7f5 fe4a 	bl	8000ae8 <__aeabi_dcmpeq>
 800ae54:	2800      	cmp	r0, #0
 800ae56:	d034      	beq.n	800aec2 <_printf_float+0x27a>
 800ae58:	4a37      	ldr	r2, [pc, #220]	; (800af38 <_printf_float+0x2f0>)
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	4631      	mov	r1, r6
 800ae5e:	4628      	mov	r0, r5
 800ae60:	47b8      	blx	r7
 800ae62:	3001      	adds	r0, #1
 800ae64:	f43f af51 	beq.w	800ad0a <_printf_float+0xc2>
 800ae68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	db02      	blt.n	800ae76 <_printf_float+0x22e>
 800ae70:	6823      	ldr	r3, [r4, #0]
 800ae72:	07d8      	lsls	r0, r3, #31
 800ae74:	d510      	bpl.n	800ae98 <_printf_float+0x250>
 800ae76:	ee18 3a10 	vmov	r3, s16
 800ae7a:	4652      	mov	r2, sl
 800ae7c:	4631      	mov	r1, r6
 800ae7e:	4628      	mov	r0, r5
 800ae80:	47b8      	blx	r7
 800ae82:	3001      	adds	r0, #1
 800ae84:	f43f af41 	beq.w	800ad0a <_printf_float+0xc2>
 800ae88:	f04f 0800 	mov.w	r8, #0
 800ae8c:	f104 091a 	add.w	r9, r4, #26
 800ae90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae92:	3b01      	subs	r3, #1
 800ae94:	4543      	cmp	r3, r8
 800ae96:	dc09      	bgt.n	800aeac <_printf_float+0x264>
 800ae98:	6823      	ldr	r3, [r4, #0]
 800ae9a:	079b      	lsls	r3, r3, #30
 800ae9c:	f100 8105 	bmi.w	800b0aa <_printf_float+0x462>
 800aea0:	68e0      	ldr	r0, [r4, #12]
 800aea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aea4:	4298      	cmp	r0, r3
 800aea6:	bfb8      	it	lt
 800aea8:	4618      	movlt	r0, r3
 800aeaa:	e730      	b.n	800ad0e <_printf_float+0xc6>
 800aeac:	2301      	movs	r3, #1
 800aeae:	464a      	mov	r2, r9
 800aeb0:	4631      	mov	r1, r6
 800aeb2:	4628      	mov	r0, r5
 800aeb4:	47b8      	blx	r7
 800aeb6:	3001      	adds	r0, #1
 800aeb8:	f43f af27 	beq.w	800ad0a <_printf_float+0xc2>
 800aebc:	f108 0801 	add.w	r8, r8, #1
 800aec0:	e7e6      	b.n	800ae90 <_printf_float+0x248>
 800aec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	dc39      	bgt.n	800af3c <_printf_float+0x2f4>
 800aec8:	4a1b      	ldr	r2, [pc, #108]	; (800af38 <_printf_float+0x2f0>)
 800aeca:	2301      	movs	r3, #1
 800aecc:	4631      	mov	r1, r6
 800aece:	4628      	mov	r0, r5
 800aed0:	47b8      	blx	r7
 800aed2:	3001      	adds	r0, #1
 800aed4:	f43f af19 	beq.w	800ad0a <_printf_float+0xc2>
 800aed8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aedc:	4313      	orrs	r3, r2
 800aede:	d102      	bne.n	800aee6 <_printf_float+0x29e>
 800aee0:	6823      	ldr	r3, [r4, #0]
 800aee2:	07d9      	lsls	r1, r3, #31
 800aee4:	d5d8      	bpl.n	800ae98 <_printf_float+0x250>
 800aee6:	ee18 3a10 	vmov	r3, s16
 800aeea:	4652      	mov	r2, sl
 800aeec:	4631      	mov	r1, r6
 800aeee:	4628      	mov	r0, r5
 800aef0:	47b8      	blx	r7
 800aef2:	3001      	adds	r0, #1
 800aef4:	f43f af09 	beq.w	800ad0a <_printf_float+0xc2>
 800aef8:	f04f 0900 	mov.w	r9, #0
 800aefc:	f104 0a1a 	add.w	sl, r4, #26
 800af00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af02:	425b      	negs	r3, r3
 800af04:	454b      	cmp	r3, r9
 800af06:	dc01      	bgt.n	800af0c <_printf_float+0x2c4>
 800af08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af0a:	e792      	b.n	800ae32 <_printf_float+0x1ea>
 800af0c:	2301      	movs	r3, #1
 800af0e:	4652      	mov	r2, sl
 800af10:	4631      	mov	r1, r6
 800af12:	4628      	mov	r0, r5
 800af14:	47b8      	blx	r7
 800af16:	3001      	adds	r0, #1
 800af18:	f43f aef7 	beq.w	800ad0a <_printf_float+0xc2>
 800af1c:	f109 0901 	add.w	r9, r9, #1
 800af20:	e7ee      	b.n	800af00 <_printf_float+0x2b8>
 800af22:	bf00      	nop
 800af24:	7fefffff 	.word	0x7fefffff
 800af28:	0800f174 	.word	0x0800f174
 800af2c:	0800f178 	.word	0x0800f178
 800af30:	0800f180 	.word	0x0800f180
 800af34:	0800f17c 	.word	0x0800f17c
 800af38:	0800f184 	.word	0x0800f184
 800af3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af40:	429a      	cmp	r2, r3
 800af42:	bfa8      	it	ge
 800af44:	461a      	movge	r2, r3
 800af46:	2a00      	cmp	r2, #0
 800af48:	4691      	mov	r9, r2
 800af4a:	dc37      	bgt.n	800afbc <_printf_float+0x374>
 800af4c:	f04f 0b00 	mov.w	fp, #0
 800af50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af54:	f104 021a 	add.w	r2, r4, #26
 800af58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800af5a:	9305      	str	r3, [sp, #20]
 800af5c:	eba3 0309 	sub.w	r3, r3, r9
 800af60:	455b      	cmp	r3, fp
 800af62:	dc33      	bgt.n	800afcc <_printf_float+0x384>
 800af64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af68:	429a      	cmp	r2, r3
 800af6a:	db3b      	blt.n	800afe4 <_printf_float+0x39c>
 800af6c:	6823      	ldr	r3, [r4, #0]
 800af6e:	07da      	lsls	r2, r3, #31
 800af70:	d438      	bmi.n	800afe4 <_printf_float+0x39c>
 800af72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af74:	9a05      	ldr	r2, [sp, #20]
 800af76:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af78:	1a9a      	subs	r2, r3, r2
 800af7a:	eba3 0901 	sub.w	r9, r3, r1
 800af7e:	4591      	cmp	r9, r2
 800af80:	bfa8      	it	ge
 800af82:	4691      	movge	r9, r2
 800af84:	f1b9 0f00 	cmp.w	r9, #0
 800af88:	dc35      	bgt.n	800aff6 <_printf_float+0x3ae>
 800af8a:	f04f 0800 	mov.w	r8, #0
 800af8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af92:	f104 0a1a 	add.w	sl, r4, #26
 800af96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af9a:	1a9b      	subs	r3, r3, r2
 800af9c:	eba3 0309 	sub.w	r3, r3, r9
 800afa0:	4543      	cmp	r3, r8
 800afa2:	f77f af79 	ble.w	800ae98 <_printf_float+0x250>
 800afa6:	2301      	movs	r3, #1
 800afa8:	4652      	mov	r2, sl
 800afaa:	4631      	mov	r1, r6
 800afac:	4628      	mov	r0, r5
 800afae:	47b8      	blx	r7
 800afb0:	3001      	adds	r0, #1
 800afb2:	f43f aeaa 	beq.w	800ad0a <_printf_float+0xc2>
 800afb6:	f108 0801 	add.w	r8, r8, #1
 800afba:	e7ec      	b.n	800af96 <_printf_float+0x34e>
 800afbc:	4613      	mov	r3, r2
 800afbe:	4631      	mov	r1, r6
 800afc0:	4642      	mov	r2, r8
 800afc2:	4628      	mov	r0, r5
 800afc4:	47b8      	blx	r7
 800afc6:	3001      	adds	r0, #1
 800afc8:	d1c0      	bne.n	800af4c <_printf_float+0x304>
 800afca:	e69e      	b.n	800ad0a <_printf_float+0xc2>
 800afcc:	2301      	movs	r3, #1
 800afce:	4631      	mov	r1, r6
 800afd0:	4628      	mov	r0, r5
 800afd2:	9205      	str	r2, [sp, #20]
 800afd4:	47b8      	blx	r7
 800afd6:	3001      	adds	r0, #1
 800afd8:	f43f ae97 	beq.w	800ad0a <_printf_float+0xc2>
 800afdc:	9a05      	ldr	r2, [sp, #20]
 800afde:	f10b 0b01 	add.w	fp, fp, #1
 800afe2:	e7b9      	b.n	800af58 <_printf_float+0x310>
 800afe4:	ee18 3a10 	vmov	r3, s16
 800afe8:	4652      	mov	r2, sl
 800afea:	4631      	mov	r1, r6
 800afec:	4628      	mov	r0, r5
 800afee:	47b8      	blx	r7
 800aff0:	3001      	adds	r0, #1
 800aff2:	d1be      	bne.n	800af72 <_printf_float+0x32a>
 800aff4:	e689      	b.n	800ad0a <_printf_float+0xc2>
 800aff6:	9a05      	ldr	r2, [sp, #20]
 800aff8:	464b      	mov	r3, r9
 800affa:	4442      	add	r2, r8
 800affc:	4631      	mov	r1, r6
 800affe:	4628      	mov	r0, r5
 800b000:	47b8      	blx	r7
 800b002:	3001      	adds	r0, #1
 800b004:	d1c1      	bne.n	800af8a <_printf_float+0x342>
 800b006:	e680      	b.n	800ad0a <_printf_float+0xc2>
 800b008:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b00a:	2a01      	cmp	r2, #1
 800b00c:	dc01      	bgt.n	800b012 <_printf_float+0x3ca>
 800b00e:	07db      	lsls	r3, r3, #31
 800b010:	d538      	bpl.n	800b084 <_printf_float+0x43c>
 800b012:	2301      	movs	r3, #1
 800b014:	4642      	mov	r2, r8
 800b016:	4631      	mov	r1, r6
 800b018:	4628      	mov	r0, r5
 800b01a:	47b8      	blx	r7
 800b01c:	3001      	adds	r0, #1
 800b01e:	f43f ae74 	beq.w	800ad0a <_printf_float+0xc2>
 800b022:	ee18 3a10 	vmov	r3, s16
 800b026:	4652      	mov	r2, sl
 800b028:	4631      	mov	r1, r6
 800b02a:	4628      	mov	r0, r5
 800b02c:	47b8      	blx	r7
 800b02e:	3001      	adds	r0, #1
 800b030:	f43f ae6b 	beq.w	800ad0a <_printf_float+0xc2>
 800b034:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b038:	2200      	movs	r2, #0
 800b03a:	2300      	movs	r3, #0
 800b03c:	f7f5 fd54 	bl	8000ae8 <__aeabi_dcmpeq>
 800b040:	b9d8      	cbnz	r0, 800b07a <_printf_float+0x432>
 800b042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b044:	f108 0201 	add.w	r2, r8, #1
 800b048:	3b01      	subs	r3, #1
 800b04a:	4631      	mov	r1, r6
 800b04c:	4628      	mov	r0, r5
 800b04e:	47b8      	blx	r7
 800b050:	3001      	adds	r0, #1
 800b052:	d10e      	bne.n	800b072 <_printf_float+0x42a>
 800b054:	e659      	b.n	800ad0a <_printf_float+0xc2>
 800b056:	2301      	movs	r3, #1
 800b058:	4652      	mov	r2, sl
 800b05a:	4631      	mov	r1, r6
 800b05c:	4628      	mov	r0, r5
 800b05e:	47b8      	blx	r7
 800b060:	3001      	adds	r0, #1
 800b062:	f43f ae52 	beq.w	800ad0a <_printf_float+0xc2>
 800b066:	f108 0801 	add.w	r8, r8, #1
 800b06a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b06c:	3b01      	subs	r3, #1
 800b06e:	4543      	cmp	r3, r8
 800b070:	dcf1      	bgt.n	800b056 <_printf_float+0x40e>
 800b072:	464b      	mov	r3, r9
 800b074:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b078:	e6dc      	b.n	800ae34 <_printf_float+0x1ec>
 800b07a:	f04f 0800 	mov.w	r8, #0
 800b07e:	f104 0a1a 	add.w	sl, r4, #26
 800b082:	e7f2      	b.n	800b06a <_printf_float+0x422>
 800b084:	2301      	movs	r3, #1
 800b086:	4642      	mov	r2, r8
 800b088:	e7df      	b.n	800b04a <_printf_float+0x402>
 800b08a:	2301      	movs	r3, #1
 800b08c:	464a      	mov	r2, r9
 800b08e:	4631      	mov	r1, r6
 800b090:	4628      	mov	r0, r5
 800b092:	47b8      	blx	r7
 800b094:	3001      	adds	r0, #1
 800b096:	f43f ae38 	beq.w	800ad0a <_printf_float+0xc2>
 800b09a:	f108 0801 	add.w	r8, r8, #1
 800b09e:	68e3      	ldr	r3, [r4, #12]
 800b0a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b0a2:	1a5b      	subs	r3, r3, r1
 800b0a4:	4543      	cmp	r3, r8
 800b0a6:	dcf0      	bgt.n	800b08a <_printf_float+0x442>
 800b0a8:	e6fa      	b.n	800aea0 <_printf_float+0x258>
 800b0aa:	f04f 0800 	mov.w	r8, #0
 800b0ae:	f104 0919 	add.w	r9, r4, #25
 800b0b2:	e7f4      	b.n	800b09e <_printf_float+0x456>

0800b0b4 <_printf_common>:
 800b0b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0b8:	4616      	mov	r6, r2
 800b0ba:	4699      	mov	r9, r3
 800b0bc:	688a      	ldr	r2, [r1, #8]
 800b0be:	690b      	ldr	r3, [r1, #16]
 800b0c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	bfb8      	it	lt
 800b0c8:	4613      	movlt	r3, r2
 800b0ca:	6033      	str	r3, [r6, #0]
 800b0cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b0d0:	4607      	mov	r7, r0
 800b0d2:	460c      	mov	r4, r1
 800b0d4:	b10a      	cbz	r2, 800b0da <_printf_common+0x26>
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	6033      	str	r3, [r6, #0]
 800b0da:	6823      	ldr	r3, [r4, #0]
 800b0dc:	0699      	lsls	r1, r3, #26
 800b0de:	bf42      	ittt	mi
 800b0e0:	6833      	ldrmi	r3, [r6, #0]
 800b0e2:	3302      	addmi	r3, #2
 800b0e4:	6033      	strmi	r3, [r6, #0]
 800b0e6:	6825      	ldr	r5, [r4, #0]
 800b0e8:	f015 0506 	ands.w	r5, r5, #6
 800b0ec:	d106      	bne.n	800b0fc <_printf_common+0x48>
 800b0ee:	f104 0a19 	add.w	sl, r4, #25
 800b0f2:	68e3      	ldr	r3, [r4, #12]
 800b0f4:	6832      	ldr	r2, [r6, #0]
 800b0f6:	1a9b      	subs	r3, r3, r2
 800b0f8:	42ab      	cmp	r3, r5
 800b0fa:	dc26      	bgt.n	800b14a <_printf_common+0x96>
 800b0fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b100:	1e13      	subs	r3, r2, #0
 800b102:	6822      	ldr	r2, [r4, #0]
 800b104:	bf18      	it	ne
 800b106:	2301      	movne	r3, #1
 800b108:	0692      	lsls	r2, r2, #26
 800b10a:	d42b      	bmi.n	800b164 <_printf_common+0xb0>
 800b10c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b110:	4649      	mov	r1, r9
 800b112:	4638      	mov	r0, r7
 800b114:	47c0      	blx	r8
 800b116:	3001      	adds	r0, #1
 800b118:	d01e      	beq.n	800b158 <_printf_common+0xa4>
 800b11a:	6823      	ldr	r3, [r4, #0]
 800b11c:	68e5      	ldr	r5, [r4, #12]
 800b11e:	6832      	ldr	r2, [r6, #0]
 800b120:	f003 0306 	and.w	r3, r3, #6
 800b124:	2b04      	cmp	r3, #4
 800b126:	bf08      	it	eq
 800b128:	1aad      	subeq	r5, r5, r2
 800b12a:	68a3      	ldr	r3, [r4, #8]
 800b12c:	6922      	ldr	r2, [r4, #16]
 800b12e:	bf0c      	ite	eq
 800b130:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b134:	2500      	movne	r5, #0
 800b136:	4293      	cmp	r3, r2
 800b138:	bfc4      	itt	gt
 800b13a:	1a9b      	subgt	r3, r3, r2
 800b13c:	18ed      	addgt	r5, r5, r3
 800b13e:	2600      	movs	r6, #0
 800b140:	341a      	adds	r4, #26
 800b142:	42b5      	cmp	r5, r6
 800b144:	d11a      	bne.n	800b17c <_printf_common+0xc8>
 800b146:	2000      	movs	r0, #0
 800b148:	e008      	b.n	800b15c <_printf_common+0xa8>
 800b14a:	2301      	movs	r3, #1
 800b14c:	4652      	mov	r2, sl
 800b14e:	4649      	mov	r1, r9
 800b150:	4638      	mov	r0, r7
 800b152:	47c0      	blx	r8
 800b154:	3001      	adds	r0, #1
 800b156:	d103      	bne.n	800b160 <_printf_common+0xac>
 800b158:	f04f 30ff 	mov.w	r0, #4294967295
 800b15c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b160:	3501      	adds	r5, #1
 800b162:	e7c6      	b.n	800b0f2 <_printf_common+0x3e>
 800b164:	18e1      	adds	r1, r4, r3
 800b166:	1c5a      	adds	r2, r3, #1
 800b168:	2030      	movs	r0, #48	; 0x30
 800b16a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b16e:	4422      	add	r2, r4
 800b170:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b174:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b178:	3302      	adds	r3, #2
 800b17a:	e7c7      	b.n	800b10c <_printf_common+0x58>
 800b17c:	2301      	movs	r3, #1
 800b17e:	4622      	mov	r2, r4
 800b180:	4649      	mov	r1, r9
 800b182:	4638      	mov	r0, r7
 800b184:	47c0      	blx	r8
 800b186:	3001      	adds	r0, #1
 800b188:	d0e6      	beq.n	800b158 <_printf_common+0xa4>
 800b18a:	3601      	adds	r6, #1
 800b18c:	e7d9      	b.n	800b142 <_printf_common+0x8e>
	...

0800b190 <_printf_i>:
 800b190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b194:	7e0f      	ldrb	r7, [r1, #24]
 800b196:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b198:	2f78      	cmp	r7, #120	; 0x78
 800b19a:	4691      	mov	r9, r2
 800b19c:	4680      	mov	r8, r0
 800b19e:	460c      	mov	r4, r1
 800b1a0:	469a      	mov	sl, r3
 800b1a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b1a6:	d807      	bhi.n	800b1b8 <_printf_i+0x28>
 800b1a8:	2f62      	cmp	r7, #98	; 0x62
 800b1aa:	d80a      	bhi.n	800b1c2 <_printf_i+0x32>
 800b1ac:	2f00      	cmp	r7, #0
 800b1ae:	f000 80d8 	beq.w	800b362 <_printf_i+0x1d2>
 800b1b2:	2f58      	cmp	r7, #88	; 0x58
 800b1b4:	f000 80a3 	beq.w	800b2fe <_printf_i+0x16e>
 800b1b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b1c0:	e03a      	b.n	800b238 <_printf_i+0xa8>
 800b1c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b1c6:	2b15      	cmp	r3, #21
 800b1c8:	d8f6      	bhi.n	800b1b8 <_printf_i+0x28>
 800b1ca:	a101      	add	r1, pc, #4	; (adr r1, 800b1d0 <_printf_i+0x40>)
 800b1cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b1d0:	0800b229 	.word	0x0800b229
 800b1d4:	0800b23d 	.word	0x0800b23d
 800b1d8:	0800b1b9 	.word	0x0800b1b9
 800b1dc:	0800b1b9 	.word	0x0800b1b9
 800b1e0:	0800b1b9 	.word	0x0800b1b9
 800b1e4:	0800b1b9 	.word	0x0800b1b9
 800b1e8:	0800b23d 	.word	0x0800b23d
 800b1ec:	0800b1b9 	.word	0x0800b1b9
 800b1f0:	0800b1b9 	.word	0x0800b1b9
 800b1f4:	0800b1b9 	.word	0x0800b1b9
 800b1f8:	0800b1b9 	.word	0x0800b1b9
 800b1fc:	0800b349 	.word	0x0800b349
 800b200:	0800b26d 	.word	0x0800b26d
 800b204:	0800b32b 	.word	0x0800b32b
 800b208:	0800b1b9 	.word	0x0800b1b9
 800b20c:	0800b1b9 	.word	0x0800b1b9
 800b210:	0800b36b 	.word	0x0800b36b
 800b214:	0800b1b9 	.word	0x0800b1b9
 800b218:	0800b26d 	.word	0x0800b26d
 800b21c:	0800b1b9 	.word	0x0800b1b9
 800b220:	0800b1b9 	.word	0x0800b1b9
 800b224:	0800b333 	.word	0x0800b333
 800b228:	682b      	ldr	r3, [r5, #0]
 800b22a:	1d1a      	adds	r2, r3, #4
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	602a      	str	r2, [r5, #0]
 800b230:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b234:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b238:	2301      	movs	r3, #1
 800b23a:	e0a3      	b.n	800b384 <_printf_i+0x1f4>
 800b23c:	6820      	ldr	r0, [r4, #0]
 800b23e:	6829      	ldr	r1, [r5, #0]
 800b240:	0606      	lsls	r6, r0, #24
 800b242:	f101 0304 	add.w	r3, r1, #4
 800b246:	d50a      	bpl.n	800b25e <_printf_i+0xce>
 800b248:	680e      	ldr	r6, [r1, #0]
 800b24a:	602b      	str	r3, [r5, #0]
 800b24c:	2e00      	cmp	r6, #0
 800b24e:	da03      	bge.n	800b258 <_printf_i+0xc8>
 800b250:	232d      	movs	r3, #45	; 0x2d
 800b252:	4276      	negs	r6, r6
 800b254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b258:	485e      	ldr	r0, [pc, #376]	; (800b3d4 <_printf_i+0x244>)
 800b25a:	230a      	movs	r3, #10
 800b25c:	e019      	b.n	800b292 <_printf_i+0x102>
 800b25e:	680e      	ldr	r6, [r1, #0]
 800b260:	602b      	str	r3, [r5, #0]
 800b262:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b266:	bf18      	it	ne
 800b268:	b236      	sxthne	r6, r6
 800b26a:	e7ef      	b.n	800b24c <_printf_i+0xbc>
 800b26c:	682b      	ldr	r3, [r5, #0]
 800b26e:	6820      	ldr	r0, [r4, #0]
 800b270:	1d19      	adds	r1, r3, #4
 800b272:	6029      	str	r1, [r5, #0]
 800b274:	0601      	lsls	r1, r0, #24
 800b276:	d501      	bpl.n	800b27c <_printf_i+0xec>
 800b278:	681e      	ldr	r6, [r3, #0]
 800b27a:	e002      	b.n	800b282 <_printf_i+0xf2>
 800b27c:	0646      	lsls	r6, r0, #25
 800b27e:	d5fb      	bpl.n	800b278 <_printf_i+0xe8>
 800b280:	881e      	ldrh	r6, [r3, #0]
 800b282:	4854      	ldr	r0, [pc, #336]	; (800b3d4 <_printf_i+0x244>)
 800b284:	2f6f      	cmp	r7, #111	; 0x6f
 800b286:	bf0c      	ite	eq
 800b288:	2308      	moveq	r3, #8
 800b28a:	230a      	movne	r3, #10
 800b28c:	2100      	movs	r1, #0
 800b28e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b292:	6865      	ldr	r5, [r4, #4]
 800b294:	60a5      	str	r5, [r4, #8]
 800b296:	2d00      	cmp	r5, #0
 800b298:	bfa2      	ittt	ge
 800b29a:	6821      	ldrge	r1, [r4, #0]
 800b29c:	f021 0104 	bicge.w	r1, r1, #4
 800b2a0:	6021      	strge	r1, [r4, #0]
 800b2a2:	b90e      	cbnz	r6, 800b2a8 <_printf_i+0x118>
 800b2a4:	2d00      	cmp	r5, #0
 800b2a6:	d04d      	beq.n	800b344 <_printf_i+0x1b4>
 800b2a8:	4615      	mov	r5, r2
 800b2aa:	fbb6 f1f3 	udiv	r1, r6, r3
 800b2ae:	fb03 6711 	mls	r7, r3, r1, r6
 800b2b2:	5dc7      	ldrb	r7, [r0, r7]
 800b2b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b2b8:	4637      	mov	r7, r6
 800b2ba:	42bb      	cmp	r3, r7
 800b2bc:	460e      	mov	r6, r1
 800b2be:	d9f4      	bls.n	800b2aa <_printf_i+0x11a>
 800b2c0:	2b08      	cmp	r3, #8
 800b2c2:	d10b      	bne.n	800b2dc <_printf_i+0x14c>
 800b2c4:	6823      	ldr	r3, [r4, #0]
 800b2c6:	07de      	lsls	r6, r3, #31
 800b2c8:	d508      	bpl.n	800b2dc <_printf_i+0x14c>
 800b2ca:	6923      	ldr	r3, [r4, #16]
 800b2cc:	6861      	ldr	r1, [r4, #4]
 800b2ce:	4299      	cmp	r1, r3
 800b2d0:	bfde      	ittt	le
 800b2d2:	2330      	movle	r3, #48	; 0x30
 800b2d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b2d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b2dc:	1b52      	subs	r2, r2, r5
 800b2de:	6122      	str	r2, [r4, #16]
 800b2e0:	f8cd a000 	str.w	sl, [sp]
 800b2e4:	464b      	mov	r3, r9
 800b2e6:	aa03      	add	r2, sp, #12
 800b2e8:	4621      	mov	r1, r4
 800b2ea:	4640      	mov	r0, r8
 800b2ec:	f7ff fee2 	bl	800b0b4 <_printf_common>
 800b2f0:	3001      	adds	r0, #1
 800b2f2:	d14c      	bne.n	800b38e <_printf_i+0x1fe>
 800b2f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2f8:	b004      	add	sp, #16
 800b2fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2fe:	4835      	ldr	r0, [pc, #212]	; (800b3d4 <_printf_i+0x244>)
 800b300:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b304:	6829      	ldr	r1, [r5, #0]
 800b306:	6823      	ldr	r3, [r4, #0]
 800b308:	f851 6b04 	ldr.w	r6, [r1], #4
 800b30c:	6029      	str	r1, [r5, #0]
 800b30e:	061d      	lsls	r5, r3, #24
 800b310:	d514      	bpl.n	800b33c <_printf_i+0x1ac>
 800b312:	07df      	lsls	r7, r3, #31
 800b314:	bf44      	itt	mi
 800b316:	f043 0320 	orrmi.w	r3, r3, #32
 800b31a:	6023      	strmi	r3, [r4, #0]
 800b31c:	b91e      	cbnz	r6, 800b326 <_printf_i+0x196>
 800b31e:	6823      	ldr	r3, [r4, #0]
 800b320:	f023 0320 	bic.w	r3, r3, #32
 800b324:	6023      	str	r3, [r4, #0]
 800b326:	2310      	movs	r3, #16
 800b328:	e7b0      	b.n	800b28c <_printf_i+0xfc>
 800b32a:	6823      	ldr	r3, [r4, #0]
 800b32c:	f043 0320 	orr.w	r3, r3, #32
 800b330:	6023      	str	r3, [r4, #0]
 800b332:	2378      	movs	r3, #120	; 0x78
 800b334:	4828      	ldr	r0, [pc, #160]	; (800b3d8 <_printf_i+0x248>)
 800b336:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b33a:	e7e3      	b.n	800b304 <_printf_i+0x174>
 800b33c:	0659      	lsls	r1, r3, #25
 800b33e:	bf48      	it	mi
 800b340:	b2b6      	uxthmi	r6, r6
 800b342:	e7e6      	b.n	800b312 <_printf_i+0x182>
 800b344:	4615      	mov	r5, r2
 800b346:	e7bb      	b.n	800b2c0 <_printf_i+0x130>
 800b348:	682b      	ldr	r3, [r5, #0]
 800b34a:	6826      	ldr	r6, [r4, #0]
 800b34c:	6961      	ldr	r1, [r4, #20]
 800b34e:	1d18      	adds	r0, r3, #4
 800b350:	6028      	str	r0, [r5, #0]
 800b352:	0635      	lsls	r5, r6, #24
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	d501      	bpl.n	800b35c <_printf_i+0x1cc>
 800b358:	6019      	str	r1, [r3, #0]
 800b35a:	e002      	b.n	800b362 <_printf_i+0x1d2>
 800b35c:	0670      	lsls	r0, r6, #25
 800b35e:	d5fb      	bpl.n	800b358 <_printf_i+0x1c8>
 800b360:	8019      	strh	r1, [r3, #0]
 800b362:	2300      	movs	r3, #0
 800b364:	6123      	str	r3, [r4, #16]
 800b366:	4615      	mov	r5, r2
 800b368:	e7ba      	b.n	800b2e0 <_printf_i+0x150>
 800b36a:	682b      	ldr	r3, [r5, #0]
 800b36c:	1d1a      	adds	r2, r3, #4
 800b36e:	602a      	str	r2, [r5, #0]
 800b370:	681d      	ldr	r5, [r3, #0]
 800b372:	6862      	ldr	r2, [r4, #4]
 800b374:	2100      	movs	r1, #0
 800b376:	4628      	mov	r0, r5
 800b378:	f7f4 ff42 	bl	8000200 <memchr>
 800b37c:	b108      	cbz	r0, 800b382 <_printf_i+0x1f2>
 800b37e:	1b40      	subs	r0, r0, r5
 800b380:	6060      	str	r0, [r4, #4]
 800b382:	6863      	ldr	r3, [r4, #4]
 800b384:	6123      	str	r3, [r4, #16]
 800b386:	2300      	movs	r3, #0
 800b388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b38c:	e7a8      	b.n	800b2e0 <_printf_i+0x150>
 800b38e:	6923      	ldr	r3, [r4, #16]
 800b390:	462a      	mov	r2, r5
 800b392:	4649      	mov	r1, r9
 800b394:	4640      	mov	r0, r8
 800b396:	47d0      	blx	sl
 800b398:	3001      	adds	r0, #1
 800b39a:	d0ab      	beq.n	800b2f4 <_printf_i+0x164>
 800b39c:	6823      	ldr	r3, [r4, #0]
 800b39e:	079b      	lsls	r3, r3, #30
 800b3a0:	d413      	bmi.n	800b3ca <_printf_i+0x23a>
 800b3a2:	68e0      	ldr	r0, [r4, #12]
 800b3a4:	9b03      	ldr	r3, [sp, #12]
 800b3a6:	4298      	cmp	r0, r3
 800b3a8:	bfb8      	it	lt
 800b3aa:	4618      	movlt	r0, r3
 800b3ac:	e7a4      	b.n	800b2f8 <_printf_i+0x168>
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	4632      	mov	r2, r6
 800b3b2:	4649      	mov	r1, r9
 800b3b4:	4640      	mov	r0, r8
 800b3b6:	47d0      	blx	sl
 800b3b8:	3001      	adds	r0, #1
 800b3ba:	d09b      	beq.n	800b2f4 <_printf_i+0x164>
 800b3bc:	3501      	adds	r5, #1
 800b3be:	68e3      	ldr	r3, [r4, #12]
 800b3c0:	9903      	ldr	r1, [sp, #12]
 800b3c2:	1a5b      	subs	r3, r3, r1
 800b3c4:	42ab      	cmp	r3, r5
 800b3c6:	dcf2      	bgt.n	800b3ae <_printf_i+0x21e>
 800b3c8:	e7eb      	b.n	800b3a2 <_printf_i+0x212>
 800b3ca:	2500      	movs	r5, #0
 800b3cc:	f104 0619 	add.w	r6, r4, #25
 800b3d0:	e7f5      	b.n	800b3be <_printf_i+0x22e>
 800b3d2:	bf00      	nop
 800b3d4:	0800f186 	.word	0x0800f186
 800b3d8:	0800f197 	.word	0x0800f197

0800b3dc <iprintf>:
 800b3dc:	b40f      	push	{r0, r1, r2, r3}
 800b3de:	4b0a      	ldr	r3, [pc, #40]	; (800b408 <iprintf+0x2c>)
 800b3e0:	b513      	push	{r0, r1, r4, lr}
 800b3e2:	681c      	ldr	r4, [r3, #0]
 800b3e4:	b124      	cbz	r4, 800b3f0 <iprintf+0x14>
 800b3e6:	69a3      	ldr	r3, [r4, #24]
 800b3e8:	b913      	cbnz	r3, 800b3f0 <iprintf+0x14>
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	f7ff fa1c 	bl	800a828 <__sinit>
 800b3f0:	ab05      	add	r3, sp, #20
 800b3f2:	9a04      	ldr	r2, [sp, #16]
 800b3f4:	68a1      	ldr	r1, [r4, #8]
 800b3f6:	9301      	str	r3, [sp, #4]
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	f001 ff85 	bl	800d308 <_vfiprintf_r>
 800b3fe:	b002      	add	sp, #8
 800b400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b404:	b004      	add	sp, #16
 800b406:	4770      	bx	lr
 800b408:	20000060 	.word	0x20000060

0800b40c <_puts_r>:
 800b40c:	b570      	push	{r4, r5, r6, lr}
 800b40e:	460e      	mov	r6, r1
 800b410:	4605      	mov	r5, r0
 800b412:	b118      	cbz	r0, 800b41c <_puts_r+0x10>
 800b414:	6983      	ldr	r3, [r0, #24]
 800b416:	b90b      	cbnz	r3, 800b41c <_puts_r+0x10>
 800b418:	f7ff fa06 	bl	800a828 <__sinit>
 800b41c:	69ab      	ldr	r3, [r5, #24]
 800b41e:	68ac      	ldr	r4, [r5, #8]
 800b420:	b913      	cbnz	r3, 800b428 <_puts_r+0x1c>
 800b422:	4628      	mov	r0, r5
 800b424:	f7ff fa00 	bl	800a828 <__sinit>
 800b428:	4b2c      	ldr	r3, [pc, #176]	; (800b4dc <_puts_r+0xd0>)
 800b42a:	429c      	cmp	r4, r3
 800b42c:	d120      	bne.n	800b470 <_puts_r+0x64>
 800b42e:	686c      	ldr	r4, [r5, #4]
 800b430:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b432:	07db      	lsls	r3, r3, #31
 800b434:	d405      	bmi.n	800b442 <_puts_r+0x36>
 800b436:	89a3      	ldrh	r3, [r4, #12]
 800b438:	0598      	lsls	r0, r3, #22
 800b43a:	d402      	bmi.n	800b442 <_puts_r+0x36>
 800b43c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b43e:	f7ff fab6 	bl	800a9ae <__retarget_lock_acquire_recursive>
 800b442:	89a3      	ldrh	r3, [r4, #12]
 800b444:	0719      	lsls	r1, r3, #28
 800b446:	d51d      	bpl.n	800b484 <_puts_r+0x78>
 800b448:	6923      	ldr	r3, [r4, #16]
 800b44a:	b1db      	cbz	r3, 800b484 <_puts_r+0x78>
 800b44c:	3e01      	subs	r6, #1
 800b44e:	68a3      	ldr	r3, [r4, #8]
 800b450:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b454:	3b01      	subs	r3, #1
 800b456:	60a3      	str	r3, [r4, #8]
 800b458:	bb39      	cbnz	r1, 800b4aa <_puts_r+0x9e>
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	da38      	bge.n	800b4d0 <_puts_r+0xc4>
 800b45e:	4622      	mov	r2, r4
 800b460:	210a      	movs	r1, #10
 800b462:	4628      	mov	r0, r5
 800b464:	f000 f934 	bl	800b6d0 <__swbuf_r>
 800b468:	3001      	adds	r0, #1
 800b46a:	d011      	beq.n	800b490 <_puts_r+0x84>
 800b46c:	250a      	movs	r5, #10
 800b46e:	e011      	b.n	800b494 <_puts_r+0x88>
 800b470:	4b1b      	ldr	r3, [pc, #108]	; (800b4e0 <_puts_r+0xd4>)
 800b472:	429c      	cmp	r4, r3
 800b474:	d101      	bne.n	800b47a <_puts_r+0x6e>
 800b476:	68ac      	ldr	r4, [r5, #8]
 800b478:	e7da      	b.n	800b430 <_puts_r+0x24>
 800b47a:	4b1a      	ldr	r3, [pc, #104]	; (800b4e4 <_puts_r+0xd8>)
 800b47c:	429c      	cmp	r4, r3
 800b47e:	bf08      	it	eq
 800b480:	68ec      	ldreq	r4, [r5, #12]
 800b482:	e7d5      	b.n	800b430 <_puts_r+0x24>
 800b484:	4621      	mov	r1, r4
 800b486:	4628      	mov	r0, r5
 800b488:	f000 f986 	bl	800b798 <__swsetup_r>
 800b48c:	2800      	cmp	r0, #0
 800b48e:	d0dd      	beq.n	800b44c <_puts_r+0x40>
 800b490:	f04f 35ff 	mov.w	r5, #4294967295
 800b494:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b496:	07da      	lsls	r2, r3, #31
 800b498:	d405      	bmi.n	800b4a6 <_puts_r+0x9a>
 800b49a:	89a3      	ldrh	r3, [r4, #12]
 800b49c:	059b      	lsls	r3, r3, #22
 800b49e:	d402      	bmi.n	800b4a6 <_puts_r+0x9a>
 800b4a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4a2:	f7ff fa85 	bl	800a9b0 <__retarget_lock_release_recursive>
 800b4a6:	4628      	mov	r0, r5
 800b4a8:	bd70      	pop	{r4, r5, r6, pc}
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	da04      	bge.n	800b4b8 <_puts_r+0xac>
 800b4ae:	69a2      	ldr	r2, [r4, #24]
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	dc06      	bgt.n	800b4c2 <_puts_r+0xb6>
 800b4b4:	290a      	cmp	r1, #10
 800b4b6:	d004      	beq.n	800b4c2 <_puts_r+0xb6>
 800b4b8:	6823      	ldr	r3, [r4, #0]
 800b4ba:	1c5a      	adds	r2, r3, #1
 800b4bc:	6022      	str	r2, [r4, #0]
 800b4be:	7019      	strb	r1, [r3, #0]
 800b4c0:	e7c5      	b.n	800b44e <_puts_r+0x42>
 800b4c2:	4622      	mov	r2, r4
 800b4c4:	4628      	mov	r0, r5
 800b4c6:	f000 f903 	bl	800b6d0 <__swbuf_r>
 800b4ca:	3001      	adds	r0, #1
 800b4cc:	d1bf      	bne.n	800b44e <_puts_r+0x42>
 800b4ce:	e7df      	b.n	800b490 <_puts_r+0x84>
 800b4d0:	6823      	ldr	r3, [r4, #0]
 800b4d2:	250a      	movs	r5, #10
 800b4d4:	1c5a      	adds	r2, r3, #1
 800b4d6:	6022      	str	r2, [r4, #0]
 800b4d8:	701d      	strb	r5, [r3, #0]
 800b4da:	e7db      	b.n	800b494 <_puts_r+0x88>
 800b4dc:	0800f130 	.word	0x0800f130
 800b4e0:	0800f150 	.word	0x0800f150
 800b4e4:	0800f110 	.word	0x0800f110

0800b4e8 <puts>:
 800b4e8:	4b02      	ldr	r3, [pc, #8]	; (800b4f4 <puts+0xc>)
 800b4ea:	4601      	mov	r1, r0
 800b4ec:	6818      	ldr	r0, [r3, #0]
 800b4ee:	f7ff bf8d 	b.w	800b40c <_puts_r>
 800b4f2:	bf00      	nop
 800b4f4:	20000060 	.word	0x20000060

0800b4f8 <cleanup_glue>:
 800b4f8:	b538      	push	{r3, r4, r5, lr}
 800b4fa:	460c      	mov	r4, r1
 800b4fc:	6809      	ldr	r1, [r1, #0]
 800b4fe:	4605      	mov	r5, r0
 800b500:	b109      	cbz	r1, 800b506 <cleanup_glue+0xe>
 800b502:	f7ff fff9 	bl	800b4f8 <cleanup_glue>
 800b506:	4621      	mov	r1, r4
 800b508:	4628      	mov	r0, r5
 800b50a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b50e:	f001 bd29 	b.w	800cf64 <_free_r>
	...

0800b514 <_reclaim_reent>:
 800b514:	4b2c      	ldr	r3, [pc, #176]	; (800b5c8 <_reclaim_reent+0xb4>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	4283      	cmp	r3, r0
 800b51a:	b570      	push	{r4, r5, r6, lr}
 800b51c:	4604      	mov	r4, r0
 800b51e:	d051      	beq.n	800b5c4 <_reclaim_reent+0xb0>
 800b520:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b522:	b143      	cbz	r3, 800b536 <_reclaim_reent+0x22>
 800b524:	68db      	ldr	r3, [r3, #12]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d14a      	bne.n	800b5c0 <_reclaim_reent+0xac>
 800b52a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b52c:	6819      	ldr	r1, [r3, #0]
 800b52e:	b111      	cbz	r1, 800b536 <_reclaim_reent+0x22>
 800b530:	4620      	mov	r0, r4
 800b532:	f001 fd17 	bl	800cf64 <_free_r>
 800b536:	6961      	ldr	r1, [r4, #20]
 800b538:	b111      	cbz	r1, 800b540 <_reclaim_reent+0x2c>
 800b53a:	4620      	mov	r0, r4
 800b53c:	f001 fd12 	bl	800cf64 <_free_r>
 800b540:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b542:	b111      	cbz	r1, 800b54a <_reclaim_reent+0x36>
 800b544:	4620      	mov	r0, r4
 800b546:	f001 fd0d 	bl	800cf64 <_free_r>
 800b54a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b54c:	b111      	cbz	r1, 800b554 <_reclaim_reent+0x40>
 800b54e:	4620      	mov	r0, r4
 800b550:	f001 fd08 	bl	800cf64 <_free_r>
 800b554:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b556:	b111      	cbz	r1, 800b55e <_reclaim_reent+0x4a>
 800b558:	4620      	mov	r0, r4
 800b55a:	f001 fd03 	bl	800cf64 <_free_r>
 800b55e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b560:	b111      	cbz	r1, 800b568 <_reclaim_reent+0x54>
 800b562:	4620      	mov	r0, r4
 800b564:	f001 fcfe 	bl	800cf64 <_free_r>
 800b568:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b56a:	b111      	cbz	r1, 800b572 <_reclaim_reent+0x5e>
 800b56c:	4620      	mov	r0, r4
 800b56e:	f001 fcf9 	bl	800cf64 <_free_r>
 800b572:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b574:	b111      	cbz	r1, 800b57c <_reclaim_reent+0x68>
 800b576:	4620      	mov	r0, r4
 800b578:	f001 fcf4 	bl	800cf64 <_free_r>
 800b57c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b57e:	b111      	cbz	r1, 800b586 <_reclaim_reent+0x72>
 800b580:	4620      	mov	r0, r4
 800b582:	f001 fcef 	bl	800cf64 <_free_r>
 800b586:	69a3      	ldr	r3, [r4, #24]
 800b588:	b1e3      	cbz	r3, 800b5c4 <_reclaim_reent+0xb0>
 800b58a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b58c:	4620      	mov	r0, r4
 800b58e:	4798      	blx	r3
 800b590:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b592:	b1b9      	cbz	r1, 800b5c4 <_reclaim_reent+0xb0>
 800b594:	4620      	mov	r0, r4
 800b596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b59a:	f7ff bfad 	b.w	800b4f8 <cleanup_glue>
 800b59e:	5949      	ldr	r1, [r1, r5]
 800b5a0:	b941      	cbnz	r1, 800b5b4 <_reclaim_reent+0xa0>
 800b5a2:	3504      	adds	r5, #4
 800b5a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5a6:	2d80      	cmp	r5, #128	; 0x80
 800b5a8:	68d9      	ldr	r1, [r3, #12]
 800b5aa:	d1f8      	bne.n	800b59e <_reclaim_reent+0x8a>
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	f001 fcd9 	bl	800cf64 <_free_r>
 800b5b2:	e7ba      	b.n	800b52a <_reclaim_reent+0x16>
 800b5b4:	680e      	ldr	r6, [r1, #0]
 800b5b6:	4620      	mov	r0, r4
 800b5b8:	f001 fcd4 	bl	800cf64 <_free_r>
 800b5bc:	4631      	mov	r1, r6
 800b5be:	e7ef      	b.n	800b5a0 <_reclaim_reent+0x8c>
 800b5c0:	2500      	movs	r5, #0
 800b5c2:	e7ef      	b.n	800b5a4 <_reclaim_reent+0x90>
 800b5c4:	bd70      	pop	{r4, r5, r6, pc}
 800b5c6:	bf00      	nop
 800b5c8:	20000060 	.word	0x20000060

0800b5cc <_sbrk_r>:
 800b5cc:	b538      	push	{r3, r4, r5, lr}
 800b5ce:	4d06      	ldr	r5, [pc, #24]	; (800b5e8 <_sbrk_r+0x1c>)
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	4604      	mov	r4, r0
 800b5d4:	4608      	mov	r0, r1
 800b5d6:	602b      	str	r3, [r5, #0]
 800b5d8:	f7f8 fb12 	bl	8003c00 <_sbrk>
 800b5dc:	1c43      	adds	r3, r0, #1
 800b5de:	d102      	bne.n	800b5e6 <_sbrk_r+0x1a>
 800b5e0:	682b      	ldr	r3, [r5, #0]
 800b5e2:	b103      	cbz	r3, 800b5e6 <_sbrk_r+0x1a>
 800b5e4:	6023      	str	r3, [r4, #0]
 800b5e6:	bd38      	pop	{r3, r4, r5, pc}
 800b5e8:	2000449c 	.word	0x2000449c

0800b5ec <siprintf>:
 800b5ec:	b40e      	push	{r1, r2, r3}
 800b5ee:	b500      	push	{lr}
 800b5f0:	b09c      	sub	sp, #112	; 0x70
 800b5f2:	ab1d      	add	r3, sp, #116	; 0x74
 800b5f4:	9002      	str	r0, [sp, #8]
 800b5f6:	9006      	str	r0, [sp, #24]
 800b5f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b5fc:	4809      	ldr	r0, [pc, #36]	; (800b624 <siprintf+0x38>)
 800b5fe:	9107      	str	r1, [sp, #28]
 800b600:	9104      	str	r1, [sp, #16]
 800b602:	4909      	ldr	r1, [pc, #36]	; (800b628 <siprintf+0x3c>)
 800b604:	f853 2b04 	ldr.w	r2, [r3], #4
 800b608:	9105      	str	r1, [sp, #20]
 800b60a:	6800      	ldr	r0, [r0, #0]
 800b60c:	9301      	str	r3, [sp, #4]
 800b60e:	a902      	add	r1, sp, #8
 800b610:	f001 fd50 	bl	800d0b4 <_svfiprintf_r>
 800b614:	9b02      	ldr	r3, [sp, #8]
 800b616:	2200      	movs	r2, #0
 800b618:	701a      	strb	r2, [r3, #0]
 800b61a:	b01c      	add	sp, #112	; 0x70
 800b61c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b620:	b003      	add	sp, #12
 800b622:	4770      	bx	lr
 800b624:	20000060 	.word	0x20000060
 800b628:	ffff0208 	.word	0xffff0208

0800b62c <__sread>:
 800b62c:	b510      	push	{r4, lr}
 800b62e:	460c      	mov	r4, r1
 800b630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b634:	f001 ff98 	bl	800d568 <_read_r>
 800b638:	2800      	cmp	r0, #0
 800b63a:	bfab      	itete	ge
 800b63c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b63e:	89a3      	ldrhlt	r3, [r4, #12]
 800b640:	181b      	addge	r3, r3, r0
 800b642:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b646:	bfac      	ite	ge
 800b648:	6563      	strge	r3, [r4, #84]	; 0x54
 800b64a:	81a3      	strhlt	r3, [r4, #12]
 800b64c:	bd10      	pop	{r4, pc}

0800b64e <__swrite>:
 800b64e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b652:	461f      	mov	r7, r3
 800b654:	898b      	ldrh	r3, [r1, #12]
 800b656:	05db      	lsls	r3, r3, #23
 800b658:	4605      	mov	r5, r0
 800b65a:	460c      	mov	r4, r1
 800b65c:	4616      	mov	r6, r2
 800b65e:	d505      	bpl.n	800b66c <__swrite+0x1e>
 800b660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b664:	2302      	movs	r3, #2
 800b666:	2200      	movs	r2, #0
 800b668:	f001 f856 	bl	800c718 <_lseek_r>
 800b66c:	89a3      	ldrh	r3, [r4, #12]
 800b66e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b672:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b676:	81a3      	strh	r3, [r4, #12]
 800b678:	4632      	mov	r2, r6
 800b67a:	463b      	mov	r3, r7
 800b67c:	4628      	mov	r0, r5
 800b67e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b682:	f000 b877 	b.w	800b774 <_write_r>

0800b686 <__sseek>:
 800b686:	b510      	push	{r4, lr}
 800b688:	460c      	mov	r4, r1
 800b68a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b68e:	f001 f843 	bl	800c718 <_lseek_r>
 800b692:	1c43      	adds	r3, r0, #1
 800b694:	89a3      	ldrh	r3, [r4, #12]
 800b696:	bf15      	itete	ne
 800b698:	6560      	strne	r0, [r4, #84]	; 0x54
 800b69a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b69e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b6a2:	81a3      	strheq	r3, [r4, #12]
 800b6a4:	bf18      	it	ne
 800b6a6:	81a3      	strhne	r3, [r4, #12]
 800b6a8:	bd10      	pop	{r4, pc}

0800b6aa <__sclose>:
 800b6aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6ae:	f000 b8e1 	b.w	800b874 <_close_r>

0800b6b2 <strcat>:
 800b6b2:	b510      	push	{r4, lr}
 800b6b4:	4602      	mov	r2, r0
 800b6b6:	7814      	ldrb	r4, [r2, #0]
 800b6b8:	4613      	mov	r3, r2
 800b6ba:	3201      	adds	r2, #1
 800b6bc:	2c00      	cmp	r4, #0
 800b6be:	d1fa      	bne.n	800b6b6 <strcat+0x4>
 800b6c0:	3b01      	subs	r3, #1
 800b6c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b6c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b6ca:	2a00      	cmp	r2, #0
 800b6cc:	d1f9      	bne.n	800b6c2 <strcat+0x10>
 800b6ce:	bd10      	pop	{r4, pc}

0800b6d0 <__swbuf_r>:
 800b6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6d2:	460e      	mov	r6, r1
 800b6d4:	4614      	mov	r4, r2
 800b6d6:	4605      	mov	r5, r0
 800b6d8:	b118      	cbz	r0, 800b6e2 <__swbuf_r+0x12>
 800b6da:	6983      	ldr	r3, [r0, #24]
 800b6dc:	b90b      	cbnz	r3, 800b6e2 <__swbuf_r+0x12>
 800b6de:	f7ff f8a3 	bl	800a828 <__sinit>
 800b6e2:	4b21      	ldr	r3, [pc, #132]	; (800b768 <__swbuf_r+0x98>)
 800b6e4:	429c      	cmp	r4, r3
 800b6e6:	d12b      	bne.n	800b740 <__swbuf_r+0x70>
 800b6e8:	686c      	ldr	r4, [r5, #4]
 800b6ea:	69a3      	ldr	r3, [r4, #24]
 800b6ec:	60a3      	str	r3, [r4, #8]
 800b6ee:	89a3      	ldrh	r3, [r4, #12]
 800b6f0:	071a      	lsls	r2, r3, #28
 800b6f2:	d52f      	bpl.n	800b754 <__swbuf_r+0x84>
 800b6f4:	6923      	ldr	r3, [r4, #16]
 800b6f6:	b36b      	cbz	r3, 800b754 <__swbuf_r+0x84>
 800b6f8:	6923      	ldr	r3, [r4, #16]
 800b6fa:	6820      	ldr	r0, [r4, #0]
 800b6fc:	1ac0      	subs	r0, r0, r3
 800b6fe:	6963      	ldr	r3, [r4, #20]
 800b700:	b2f6      	uxtb	r6, r6
 800b702:	4283      	cmp	r3, r0
 800b704:	4637      	mov	r7, r6
 800b706:	dc04      	bgt.n	800b712 <__swbuf_r+0x42>
 800b708:	4621      	mov	r1, r4
 800b70a:	4628      	mov	r0, r5
 800b70c:	f000 ffc4 	bl	800c698 <_fflush_r>
 800b710:	bb30      	cbnz	r0, 800b760 <__swbuf_r+0x90>
 800b712:	68a3      	ldr	r3, [r4, #8]
 800b714:	3b01      	subs	r3, #1
 800b716:	60a3      	str	r3, [r4, #8]
 800b718:	6823      	ldr	r3, [r4, #0]
 800b71a:	1c5a      	adds	r2, r3, #1
 800b71c:	6022      	str	r2, [r4, #0]
 800b71e:	701e      	strb	r6, [r3, #0]
 800b720:	6963      	ldr	r3, [r4, #20]
 800b722:	3001      	adds	r0, #1
 800b724:	4283      	cmp	r3, r0
 800b726:	d004      	beq.n	800b732 <__swbuf_r+0x62>
 800b728:	89a3      	ldrh	r3, [r4, #12]
 800b72a:	07db      	lsls	r3, r3, #31
 800b72c:	d506      	bpl.n	800b73c <__swbuf_r+0x6c>
 800b72e:	2e0a      	cmp	r6, #10
 800b730:	d104      	bne.n	800b73c <__swbuf_r+0x6c>
 800b732:	4621      	mov	r1, r4
 800b734:	4628      	mov	r0, r5
 800b736:	f000 ffaf 	bl	800c698 <_fflush_r>
 800b73a:	b988      	cbnz	r0, 800b760 <__swbuf_r+0x90>
 800b73c:	4638      	mov	r0, r7
 800b73e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b740:	4b0a      	ldr	r3, [pc, #40]	; (800b76c <__swbuf_r+0x9c>)
 800b742:	429c      	cmp	r4, r3
 800b744:	d101      	bne.n	800b74a <__swbuf_r+0x7a>
 800b746:	68ac      	ldr	r4, [r5, #8]
 800b748:	e7cf      	b.n	800b6ea <__swbuf_r+0x1a>
 800b74a:	4b09      	ldr	r3, [pc, #36]	; (800b770 <__swbuf_r+0xa0>)
 800b74c:	429c      	cmp	r4, r3
 800b74e:	bf08      	it	eq
 800b750:	68ec      	ldreq	r4, [r5, #12]
 800b752:	e7ca      	b.n	800b6ea <__swbuf_r+0x1a>
 800b754:	4621      	mov	r1, r4
 800b756:	4628      	mov	r0, r5
 800b758:	f000 f81e 	bl	800b798 <__swsetup_r>
 800b75c:	2800      	cmp	r0, #0
 800b75e:	d0cb      	beq.n	800b6f8 <__swbuf_r+0x28>
 800b760:	f04f 37ff 	mov.w	r7, #4294967295
 800b764:	e7ea      	b.n	800b73c <__swbuf_r+0x6c>
 800b766:	bf00      	nop
 800b768:	0800f130 	.word	0x0800f130
 800b76c:	0800f150 	.word	0x0800f150
 800b770:	0800f110 	.word	0x0800f110

0800b774 <_write_r>:
 800b774:	b538      	push	{r3, r4, r5, lr}
 800b776:	4d07      	ldr	r5, [pc, #28]	; (800b794 <_write_r+0x20>)
 800b778:	4604      	mov	r4, r0
 800b77a:	4608      	mov	r0, r1
 800b77c:	4611      	mov	r1, r2
 800b77e:	2200      	movs	r2, #0
 800b780:	602a      	str	r2, [r5, #0]
 800b782:	461a      	mov	r2, r3
 800b784:	f7f6 fbca 	bl	8001f1c <_write>
 800b788:	1c43      	adds	r3, r0, #1
 800b78a:	d102      	bne.n	800b792 <_write_r+0x1e>
 800b78c:	682b      	ldr	r3, [r5, #0]
 800b78e:	b103      	cbz	r3, 800b792 <_write_r+0x1e>
 800b790:	6023      	str	r3, [r4, #0]
 800b792:	bd38      	pop	{r3, r4, r5, pc}
 800b794:	2000449c 	.word	0x2000449c

0800b798 <__swsetup_r>:
 800b798:	4b32      	ldr	r3, [pc, #200]	; (800b864 <__swsetup_r+0xcc>)
 800b79a:	b570      	push	{r4, r5, r6, lr}
 800b79c:	681d      	ldr	r5, [r3, #0]
 800b79e:	4606      	mov	r6, r0
 800b7a0:	460c      	mov	r4, r1
 800b7a2:	b125      	cbz	r5, 800b7ae <__swsetup_r+0x16>
 800b7a4:	69ab      	ldr	r3, [r5, #24]
 800b7a6:	b913      	cbnz	r3, 800b7ae <__swsetup_r+0x16>
 800b7a8:	4628      	mov	r0, r5
 800b7aa:	f7ff f83d 	bl	800a828 <__sinit>
 800b7ae:	4b2e      	ldr	r3, [pc, #184]	; (800b868 <__swsetup_r+0xd0>)
 800b7b0:	429c      	cmp	r4, r3
 800b7b2:	d10f      	bne.n	800b7d4 <__swsetup_r+0x3c>
 800b7b4:	686c      	ldr	r4, [r5, #4]
 800b7b6:	89a3      	ldrh	r3, [r4, #12]
 800b7b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7bc:	0719      	lsls	r1, r3, #28
 800b7be:	d42c      	bmi.n	800b81a <__swsetup_r+0x82>
 800b7c0:	06dd      	lsls	r5, r3, #27
 800b7c2:	d411      	bmi.n	800b7e8 <__swsetup_r+0x50>
 800b7c4:	2309      	movs	r3, #9
 800b7c6:	6033      	str	r3, [r6, #0]
 800b7c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b7cc:	81a3      	strh	r3, [r4, #12]
 800b7ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b7d2:	e03e      	b.n	800b852 <__swsetup_r+0xba>
 800b7d4:	4b25      	ldr	r3, [pc, #148]	; (800b86c <__swsetup_r+0xd4>)
 800b7d6:	429c      	cmp	r4, r3
 800b7d8:	d101      	bne.n	800b7de <__swsetup_r+0x46>
 800b7da:	68ac      	ldr	r4, [r5, #8]
 800b7dc:	e7eb      	b.n	800b7b6 <__swsetup_r+0x1e>
 800b7de:	4b24      	ldr	r3, [pc, #144]	; (800b870 <__swsetup_r+0xd8>)
 800b7e0:	429c      	cmp	r4, r3
 800b7e2:	bf08      	it	eq
 800b7e4:	68ec      	ldreq	r4, [r5, #12]
 800b7e6:	e7e6      	b.n	800b7b6 <__swsetup_r+0x1e>
 800b7e8:	0758      	lsls	r0, r3, #29
 800b7ea:	d512      	bpl.n	800b812 <__swsetup_r+0x7a>
 800b7ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7ee:	b141      	cbz	r1, 800b802 <__swsetup_r+0x6a>
 800b7f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7f4:	4299      	cmp	r1, r3
 800b7f6:	d002      	beq.n	800b7fe <__swsetup_r+0x66>
 800b7f8:	4630      	mov	r0, r6
 800b7fa:	f001 fbb3 	bl	800cf64 <_free_r>
 800b7fe:	2300      	movs	r3, #0
 800b800:	6363      	str	r3, [r4, #52]	; 0x34
 800b802:	89a3      	ldrh	r3, [r4, #12]
 800b804:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b808:	81a3      	strh	r3, [r4, #12]
 800b80a:	2300      	movs	r3, #0
 800b80c:	6063      	str	r3, [r4, #4]
 800b80e:	6923      	ldr	r3, [r4, #16]
 800b810:	6023      	str	r3, [r4, #0]
 800b812:	89a3      	ldrh	r3, [r4, #12]
 800b814:	f043 0308 	orr.w	r3, r3, #8
 800b818:	81a3      	strh	r3, [r4, #12]
 800b81a:	6923      	ldr	r3, [r4, #16]
 800b81c:	b94b      	cbnz	r3, 800b832 <__swsetup_r+0x9a>
 800b81e:	89a3      	ldrh	r3, [r4, #12]
 800b820:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b828:	d003      	beq.n	800b832 <__swsetup_r+0x9a>
 800b82a:	4621      	mov	r1, r4
 800b82c:	4630      	mov	r0, r6
 800b82e:	f000 ffab 	bl	800c788 <__smakebuf_r>
 800b832:	89a0      	ldrh	r0, [r4, #12]
 800b834:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b838:	f010 0301 	ands.w	r3, r0, #1
 800b83c:	d00a      	beq.n	800b854 <__swsetup_r+0xbc>
 800b83e:	2300      	movs	r3, #0
 800b840:	60a3      	str	r3, [r4, #8]
 800b842:	6963      	ldr	r3, [r4, #20]
 800b844:	425b      	negs	r3, r3
 800b846:	61a3      	str	r3, [r4, #24]
 800b848:	6923      	ldr	r3, [r4, #16]
 800b84a:	b943      	cbnz	r3, 800b85e <__swsetup_r+0xc6>
 800b84c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b850:	d1ba      	bne.n	800b7c8 <__swsetup_r+0x30>
 800b852:	bd70      	pop	{r4, r5, r6, pc}
 800b854:	0781      	lsls	r1, r0, #30
 800b856:	bf58      	it	pl
 800b858:	6963      	ldrpl	r3, [r4, #20]
 800b85a:	60a3      	str	r3, [r4, #8]
 800b85c:	e7f4      	b.n	800b848 <__swsetup_r+0xb0>
 800b85e:	2000      	movs	r0, #0
 800b860:	e7f7      	b.n	800b852 <__swsetup_r+0xba>
 800b862:	bf00      	nop
 800b864:	20000060 	.word	0x20000060
 800b868:	0800f130 	.word	0x0800f130
 800b86c:	0800f150 	.word	0x0800f150
 800b870:	0800f110 	.word	0x0800f110

0800b874 <_close_r>:
 800b874:	b538      	push	{r3, r4, r5, lr}
 800b876:	4d06      	ldr	r5, [pc, #24]	; (800b890 <_close_r+0x1c>)
 800b878:	2300      	movs	r3, #0
 800b87a:	4604      	mov	r4, r0
 800b87c:	4608      	mov	r0, r1
 800b87e:	602b      	str	r3, [r5, #0]
 800b880:	f7f8 f989 	bl	8003b96 <_close>
 800b884:	1c43      	adds	r3, r0, #1
 800b886:	d102      	bne.n	800b88e <_close_r+0x1a>
 800b888:	682b      	ldr	r3, [r5, #0]
 800b88a:	b103      	cbz	r3, 800b88e <_close_r+0x1a>
 800b88c:	6023      	str	r3, [r4, #0]
 800b88e:	bd38      	pop	{r3, r4, r5, pc}
 800b890:	2000449c 	.word	0x2000449c

0800b894 <quorem>:
 800b894:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b898:	6903      	ldr	r3, [r0, #16]
 800b89a:	690c      	ldr	r4, [r1, #16]
 800b89c:	42a3      	cmp	r3, r4
 800b89e:	4607      	mov	r7, r0
 800b8a0:	f2c0 8081 	blt.w	800b9a6 <quorem+0x112>
 800b8a4:	3c01      	subs	r4, #1
 800b8a6:	f101 0814 	add.w	r8, r1, #20
 800b8aa:	f100 0514 	add.w	r5, r0, #20
 800b8ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b8b2:	9301      	str	r3, [sp, #4]
 800b8b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b8b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b8bc:	3301      	adds	r3, #1
 800b8be:	429a      	cmp	r2, r3
 800b8c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b8c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b8c8:	fbb2 f6f3 	udiv	r6, r2, r3
 800b8cc:	d331      	bcc.n	800b932 <quorem+0x9e>
 800b8ce:	f04f 0e00 	mov.w	lr, #0
 800b8d2:	4640      	mov	r0, r8
 800b8d4:	46ac      	mov	ip, r5
 800b8d6:	46f2      	mov	sl, lr
 800b8d8:	f850 2b04 	ldr.w	r2, [r0], #4
 800b8dc:	b293      	uxth	r3, r2
 800b8de:	fb06 e303 	mla	r3, r6, r3, lr
 800b8e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b8e6:	b29b      	uxth	r3, r3
 800b8e8:	ebaa 0303 	sub.w	r3, sl, r3
 800b8ec:	f8dc a000 	ldr.w	sl, [ip]
 800b8f0:	0c12      	lsrs	r2, r2, #16
 800b8f2:	fa13 f38a 	uxtah	r3, r3, sl
 800b8f6:	fb06 e202 	mla	r2, r6, r2, lr
 800b8fa:	9300      	str	r3, [sp, #0]
 800b8fc:	9b00      	ldr	r3, [sp, #0]
 800b8fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b902:	b292      	uxth	r2, r2
 800b904:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b908:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b90c:	f8bd 3000 	ldrh.w	r3, [sp]
 800b910:	4581      	cmp	r9, r0
 800b912:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b916:	f84c 3b04 	str.w	r3, [ip], #4
 800b91a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b91e:	d2db      	bcs.n	800b8d8 <quorem+0x44>
 800b920:	f855 300b 	ldr.w	r3, [r5, fp]
 800b924:	b92b      	cbnz	r3, 800b932 <quorem+0x9e>
 800b926:	9b01      	ldr	r3, [sp, #4]
 800b928:	3b04      	subs	r3, #4
 800b92a:	429d      	cmp	r5, r3
 800b92c:	461a      	mov	r2, r3
 800b92e:	d32e      	bcc.n	800b98e <quorem+0xfa>
 800b930:	613c      	str	r4, [r7, #16]
 800b932:	4638      	mov	r0, r7
 800b934:	f001 f9fe 	bl	800cd34 <__mcmp>
 800b938:	2800      	cmp	r0, #0
 800b93a:	db24      	blt.n	800b986 <quorem+0xf2>
 800b93c:	3601      	adds	r6, #1
 800b93e:	4628      	mov	r0, r5
 800b940:	f04f 0c00 	mov.w	ip, #0
 800b944:	f858 2b04 	ldr.w	r2, [r8], #4
 800b948:	f8d0 e000 	ldr.w	lr, [r0]
 800b94c:	b293      	uxth	r3, r2
 800b94e:	ebac 0303 	sub.w	r3, ip, r3
 800b952:	0c12      	lsrs	r2, r2, #16
 800b954:	fa13 f38e 	uxtah	r3, r3, lr
 800b958:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b95c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b960:	b29b      	uxth	r3, r3
 800b962:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b966:	45c1      	cmp	r9, r8
 800b968:	f840 3b04 	str.w	r3, [r0], #4
 800b96c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b970:	d2e8      	bcs.n	800b944 <quorem+0xb0>
 800b972:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b976:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b97a:	b922      	cbnz	r2, 800b986 <quorem+0xf2>
 800b97c:	3b04      	subs	r3, #4
 800b97e:	429d      	cmp	r5, r3
 800b980:	461a      	mov	r2, r3
 800b982:	d30a      	bcc.n	800b99a <quorem+0x106>
 800b984:	613c      	str	r4, [r7, #16]
 800b986:	4630      	mov	r0, r6
 800b988:	b003      	add	sp, #12
 800b98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b98e:	6812      	ldr	r2, [r2, #0]
 800b990:	3b04      	subs	r3, #4
 800b992:	2a00      	cmp	r2, #0
 800b994:	d1cc      	bne.n	800b930 <quorem+0x9c>
 800b996:	3c01      	subs	r4, #1
 800b998:	e7c7      	b.n	800b92a <quorem+0x96>
 800b99a:	6812      	ldr	r2, [r2, #0]
 800b99c:	3b04      	subs	r3, #4
 800b99e:	2a00      	cmp	r2, #0
 800b9a0:	d1f0      	bne.n	800b984 <quorem+0xf0>
 800b9a2:	3c01      	subs	r4, #1
 800b9a4:	e7eb      	b.n	800b97e <quorem+0xea>
 800b9a6:	2000      	movs	r0, #0
 800b9a8:	e7ee      	b.n	800b988 <quorem+0xf4>
 800b9aa:	0000      	movs	r0, r0
 800b9ac:	0000      	movs	r0, r0
	...

0800b9b0 <_dtoa_r>:
 800b9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9b4:	ed2d 8b04 	vpush	{d8-d9}
 800b9b8:	ec57 6b10 	vmov	r6, r7, d0
 800b9bc:	b093      	sub	sp, #76	; 0x4c
 800b9be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b9c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b9c4:	9106      	str	r1, [sp, #24]
 800b9c6:	ee10 aa10 	vmov	sl, s0
 800b9ca:	4604      	mov	r4, r0
 800b9cc:	9209      	str	r2, [sp, #36]	; 0x24
 800b9ce:	930c      	str	r3, [sp, #48]	; 0x30
 800b9d0:	46bb      	mov	fp, r7
 800b9d2:	b975      	cbnz	r5, 800b9f2 <_dtoa_r+0x42>
 800b9d4:	2010      	movs	r0, #16
 800b9d6:	f000 ff17 	bl	800c808 <malloc>
 800b9da:	4602      	mov	r2, r0
 800b9dc:	6260      	str	r0, [r4, #36]	; 0x24
 800b9de:	b920      	cbnz	r0, 800b9ea <_dtoa_r+0x3a>
 800b9e0:	4ba7      	ldr	r3, [pc, #668]	; (800bc80 <_dtoa_r+0x2d0>)
 800b9e2:	21ea      	movs	r1, #234	; 0xea
 800b9e4:	48a7      	ldr	r0, [pc, #668]	; (800bc84 <_dtoa_r+0x2d4>)
 800b9e6:	f001 fdd1 	bl	800d58c <__assert_func>
 800b9ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b9ee:	6005      	str	r5, [r0, #0]
 800b9f0:	60c5      	str	r5, [r0, #12]
 800b9f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b9f4:	6819      	ldr	r1, [r3, #0]
 800b9f6:	b151      	cbz	r1, 800ba0e <_dtoa_r+0x5e>
 800b9f8:	685a      	ldr	r2, [r3, #4]
 800b9fa:	604a      	str	r2, [r1, #4]
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	4093      	lsls	r3, r2
 800ba00:	608b      	str	r3, [r1, #8]
 800ba02:	4620      	mov	r0, r4
 800ba04:	f000 ff54 	bl	800c8b0 <_Bfree>
 800ba08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	601a      	str	r2, [r3, #0]
 800ba0e:	1e3b      	subs	r3, r7, #0
 800ba10:	bfaa      	itet	ge
 800ba12:	2300      	movge	r3, #0
 800ba14:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ba18:	f8c8 3000 	strge.w	r3, [r8]
 800ba1c:	4b9a      	ldr	r3, [pc, #616]	; (800bc88 <_dtoa_r+0x2d8>)
 800ba1e:	bfbc      	itt	lt
 800ba20:	2201      	movlt	r2, #1
 800ba22:	f8c8 2000 	strlt.w	r2, [r8]
 800ba26:	ea33 030b 	bics.w	r3, r3, fp
 800ba2a:	d11b      	bne.n	800ba64 <_dtoa_r+0xb4>
 800ba2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba2e:	f242 730f 	movw	r3, #9999	; 0x270f
 800ba32:	6013      	str	r3, [r2, #0]
 800ba34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ba38:	4333      	orrs	r3, r6
 800ba3a:	f000 8592 	beq.w	800c562 <_dtoa_r+0xbb2>
 800ba3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba40:	b963      	cbnz	r3, 800ba5c <_dtoa_r+0xac>
 800ba42:	4b92      	ldr	r3, [pc, #584]	; (800bc8c <_dtoa_r+0x2dc>)
 800ba44:	e022      	b.n	800ba8c <_dtoa_r+0xdc>
 800ba46:	4b92      	ldr	r3, [pc, #584]	; (800bc90 <_dtoa_r+0x2e0>)
 800ba48:	9301      	str	r3, [sp, #4]
 800ba4a:	3308      	adds	r3, #8
 800ba4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ba4e:	6013      	str	r3, [r2, #0]
 800ba50:	9801      	ldr	r0, [sp, #4]
 800ba52:	b013      	add	sp, #76	; 0x4c
 800ba54:	ecbd 8b04 	vpop	{d8-d9}
 800ba58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba5c:	4b8b      	ldr	r3, [pc, #556]	; (800bc8c <_dtoa_r+0x2dc>)
 800ba5e:	9301      	str	r3, [sp, #4]
 800ba60:	3303      	adds	r3, #3
 800ba62:	e7f3      	b.n	800ba4c <_dtoa_r+0x9c>
 800ba64:	2200      	movs	r2, #0
 800ba66:	2300      	movs	r3, #0
 800ba68:	4650      	mov	r0, sl
 800ba6a:	4659      	mov	r1, fp
 800ba6c:	f7f5 f83c 	bl	8000ae8 <__aeabi_dcmpeq>
 800ba70:	ec4b ab19 	vmov	d9, sl, fp
 800ba74:	4680      	mov	r8, r0
 800ba76:	b158      	cbz	r0, 800ba90 <_dtoa_r+0xe0>
 800ba78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	6013      	str	r3, [r2, #0]
 800ba7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	f000 856b 	beq.w	800c55c <_dtoa_r+0xbac>
 800ba86:	4883      	ldr	r0, [pc, #524]	; (800bc94 <_dtoa_r+0x2e4>)
 800ba88:	6018      	str	r0, [r3, #0]
 800ba8a:	1e43      	subs	r3, r0, #1
 800ba8c:	9301      	str	r3, [sp, #4]
 800ba8e:	e7df      	b.n	800ba50 <_dtoa_r+0xa0>
 800ba90:	ec4b ab10 	vmov	d0, sl, fp
 800ba94:	aa10      	add	r2, sp, #64	; 0x40
 800ba96:	a911      	add	r1, sp, #68	; 0x44
 800ba98:	4620      	mov	r0, r4
 800ba9a:	f001 f9f1 	bl	800ce80 <__d2b>
 800ba9e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800baa2:	ee08 0a10 	vmov	s16, r0
 800baa6:	2d00      	cmp	r5, #0
 800baa8:	f000 8084 	beq.w	800bbb4 <_dtoa_r+0x204>
 800baac:	ee19 3a90 	vmov	r3, s19
 800bab0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bab4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bab8:	4656      	mov	r6, sl
 800baba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800babe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bac2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800bac6:	4b74      	ldr	r3, [pc, #464]	; (800bc98 <_dtoa_r+0x2e8>)
 800bac8:	2200      	movs	r2, #0
 800baca:	4630      	mov	r0, r6
 800bacc:	4639      	mov	r1, r7
 800bace:	f7f4 fbeb 	bl	80002a8 <__aeabi_dsub>
 800bad2:	a365      	add	r3, pc, #404	; (adr r3, 800bc68 <_dtoa_r+0x2b8>)
 800bad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad8:	f7f4 fd9e 	bl	8000618 <__aeabi_dmul>
 800badc:	a364      	add	r3, pc, #400	; (adr r3, 800bc70 <_dtoa_r+0x2c0>)
 800bade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae2:	f7f4 fbe3 	bl	80002ac <__adddf3>
 800bae6:	4606      	mov	r6, r0
 800bae8:	4628      	mov	r0, r5
 800baea:	460f      	mov	r7, r1
 800baec:	f7f4 fd2a 	bl	8000544 <__aeabi_i2d>
 800baf0:	a361      	add	r3, pc, #388	; (adr r3, 800bc78 <_dtoa_r+0x2c8>)
 800baf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf6:	f7f4 fd8f 	bl	8000618 <__aeabi_dmul>
 800bafa:	4602      	mov	r2, r0
 800bafc:	460b      	mov	r3, r1
 800bafe:	4630      	mov	r0, r6
 800bb00:	4639      	mov	r1, r7
 800bb02:	f7f4 fbd3 	bl	80002ac <__adddf3>
 800bb06:	4606      	mov	r6, r0
 800bb08:	460f      	mov	r7, r1
 800bb0a:	f7f5 f835 	bl	8000b78 <__aeabi_d2iz>
 800bb0e:	2200      	movs	r2, #0
 800bb10:	9000      	str	r0, [sp, #0]
 800bb12:	2300      	movs	r3, #0
 800bb14:	4630      	mov	r0, r6
 800bb16:	4639      	mov	r1, r7
 800bb18:	f7f4 fff0 	bl	8000afc <__aeabi_dcmplt>
 800bb1c:	b150      	cbz	r0, 800bb34 <_dtoa_r+0x184>
 800bb1e:	9800      	ldr	r0, [sp, #0]
 800bb20:	f7f4 fd10 	bl	8000544 <__aeabi_i2d>
 800bb24:	4632      	mov	r2, r6
 800bb26:	463b      	mov	r3, r7
 800bb28:	f7f4 ffde 	bl	8000ae8 <__aeabi_dcmpeq>
 800bb2c:	b910      	cbnz	r0, 800bb34 <_dtoa_r+0x184>
 800bb2e:	9b00      	ldr	r3, [sp, #0]
 800bb30:	3b01      	subs	r3, #1
 800bb32:	9300      	str	r3, [sp, #0]
 800bb34:	9b00      	ldr	r3, [sp, #0]
 800bb36:	2b16      	cmp	r3, #22
 800bb38:	d85a      	bhi.n	800bbf0 <_dtoa_r+0x240>
 800bb3a:	9a00      	ldr	r2, [sp, #0]
 800bb3c:	4b57      	ldr	r3, [pc, #348]	; (800bc9c <_dtoa_r+0x2ec>)
 800bb3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb46:	ec51 0b19 	vmov	r0, r1, d9
 800bb4a:	f7f4 ffd7 	bl	8000afc <__aeabi_dcmplt>
 800bb4e:	2800      	cmp	r0, #0
 800bb50:	d050      	beq.n	800bbf4 <_dtoa_r+0x244>
 800bb52:	9b00      	ldr	r3, [sp, #0]
 800bb54:	3b01      	subs	r3, #1
 800bb56:	9300      	str	r3, [sp, #0]
 800bb58:	2300      	movs	r3, #0
 800bb5a:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bb5e:	1b5d      	subs	r5, r3, r5
 800bb60:	1e6b      	subs	r3, r5, #1
 800bb62:	9305      	str	r3, [sp, #20]
 800bb64:	bf45      	ittet	mi
 800bb66:	f1c5 0301 	rsbmi	r3, r5, #1
 800bb6a:	9304      	strmi	r3, [sp, #16]
 800bb6c:	2300      	movpl	r3, #0
 800bb6e:	2300      	movmi	r3, #0
 800bb70:	bf4c      	ite	mi
 800bb72:	9305      	strmi	r3, [sp, #20]
 800bb74:	9304      	strpl	r3, [sp, #16]
 800bb76:	9b00      	ldr	r3, [sp, #0]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	db3d      	blt.n	800bbf8 <_dtoa_r+0x248>
 800bb7c:	9b05      	ldr	r3, [sp, #20]
 800bb7e:	9a00      	ldr	r2, [sp, #0]
 800bb80:	920a      	str	r2, [sp, #40]	; 0x28
 800bb82:	4413      	add	r3, r2
 800bb84:	9305      	str	r3, [sp, #20]
 800bb86:	2300      	movs	r3, #0
 800bb88:	9307      	str	r3, [sp, #28]
 800bb8a:	9b06      	ldr	r3, [sp, #24]
 800bb8c:	2b09      	cmp	r3, #9
 800bb8e:	f200 8089 	bhi.w	800bca4 <_dtoa_r+0x2f4>
 800bb92:	2b05      	cmp	r3, #5
 800bb94:	bfc4      	itt	gt
 800bb96:	3b04      	subgt	r3, #4
 800bb98:	9306      	strgt	r3, [sp, #24]
 800bb9a:	9b06      	ldr	r3, [sp, #24]
 800bb9c:	f1a3 0302 	sub.w	r3, r3, #2
 800bba0:	bfcc      	ite	gt
 800bba2:	2500      	movgt	r5, #0
 800bba4:	2501      	movle	r5, #1
 800bba6:	2b03      	cmp	r3, #3
 800bba8:	f200 8087 	bhi.w	800bcba <_dtoa_r+0x30a>
 800bbac:	e8df f003 	tbb	[pc, r3]
 800bbb0:	59383a2d 	.word	0x59383a2d
 800bbb4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bbb8:	441d      	add	r5, r3
 800bbba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bbbe:	2b20      	cmp	r3, #32
 800bbc0:	bfc1      	itttt	gt
 800bbc2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bbc6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bbca:	fa0b f303 	lslgt.w	r3, fp, r3
 800bbce:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bbd2:	bfda      	itte	le
 800bbd4:	f1c3 0320 	rsble	r3, r3, #32
 800bbd8:	fa06 f003 	lslle.w	r0, r6, r3
 800bbdc:	4318      	orrgt	r0, r3
 800bbde:	f7f4 fca1 	bl	8000524 <__aeabi_ui2d>
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	4606      	mov	r6, r0
 800bbe6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bbea:	3d01      	subs	r5, #1
 800bbec:	930e      	str	r3, [sp, #56]	; 0x38
 800bbee:	e76a      	b.n	800bac6 <_dtoa_r+0x116>
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	e7b2      	b.n	800bb5a <_dtoa_r+0x1aa>
 800bbf4:	900b      	str	r0, [sp, #44]	; 0x2c
 800bbf6:	e7b1      	b.n	800bb5c <_dtoa_r+0x1ac>
 800bbf8:	9b04      	ldr	r3, [sp, #16]
 800bbfa:	9a00      	ldr	r2, [sp, #0]
 800bbfc:	1a9b      	subs	r3, r3, r2
 800bbfe:	9304      	str	r3, [sp, #16]
 800bc00:	4253      	negs	r3, r2
 800bc02:	9307      	str	r3, [sp, #28]
 800bc04:	2300      	movs	r3, #0
 800bc06:	930a      	str	r3, [sp, #40]	; 0x28
 800bc08:	e7bf      	b.n	800bb8a <_dtoa_r+0x1da>
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	9308      	str	r3, [sp, #32]
 800bc0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	dc55      	bgt.n	800bcc0 <_dtoa_r+0x310>
 800bc14:	2301      	movs	r3, #1
 800bc16:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bc1a:	461a      	mov	r2, r3
 800bc1c:	9209      	str	r2, [sp, #36]	; 0x24
 800bc1e:	e00c      	b.n	800bc3a <_dtoa_r+0x28a>
 800bc20:	2301      	movs	r3, #1
 800bc22:	e7f3      	b.n	800bc0c <_dtoa_r+0x25c>
 800bc24:	2300      	movs	r3, #0
 800bc26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc28:	9308      	str	r3, [sp, #32]
 800bc2a:	9b00      	ldr	r3, [sp, #0]
 800bc2c:	4413      	add	r3, r2
 800bc2e:	9302      	str	r3, [sp, #8]
 800bc30:	3301      	adds	r3, #1
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	9303      	str	r3, [sp, #12]
 800bc36:	bfb8      	it	lt
 800bc38:	2301      	movlt	r3, #1
 800bc3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	6042      	str	r2, [r0, #4]
 800bc40:	2204      	movs	r2, #4
 800bc42:	f102 0614 	add.w	r6, r2, #20
 800bc46:	429e      	cmp	r6, r3
 800bc48:	6841      	ldr	r1, [r0, #4]
 800bc4a:	d93d      	bls.n	800bcc8 <_dtoa_r+0x318>
 800bc4c:	4620      	mov	r0, r4
 800bc4e:	f000 fdef 	bl	800c830 <_Balloc>
 800bc52:	9001      	str	r0, [sp, #4]
 800bc54:	2800      	cmp	r0, #0
 800bc56:	d13b      	bne.n	800bcd0 <_dtoa_r+0x320>
 800bc58:	4b11      	ldr	r3, [pc, #68]	; (800bca0 <_dtoa_r+0x2f0>)
 800bc5a:	4602      	mov	r2, r0
 800bc5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bc60:	e6c0      	b.n	800b9e4 <_dtoa_r+0x34>
 800bc62:	2301      	movs	r3, #1
 800bc64:	e7df      	b.n	800bc26 <_dtoa_r+0x276>
 800bc66:	bf00      	nop
 800bc68:	636f4361 	.word	0x636f4361
 800bc6c:	3fd287a7 	.word	0x3fd287a7
 800bc70:	8b60c8b3 	.word	0x8b60c8b3
 800bc74:	3fc68a28 	.word	0x3fc68a28
 800bc78:	509f79fb 	.word	0x509f79fb
 800bc7c:	3fd34413 	.word	0x3fd34413
 800bc80:	0800f1b5 	.word	0x0800f1b5
 800bc84:	0800f1cc 	.word	0x0800f1cc
 800bc88:	7ff00000 	.word	0x7ff00000
 800bc8c:	0800f1b1 	.word	0x0800f1b1
 800bc90:	0800f1a8 	.word	0x0800f1a8
 800bc94:	0800f185 	.word	0x0800f185
 800bc98:	3ff80000 	.word	0x3ff80000
 800bc9c:	0800f2c0 	.word	0x0800f2c0
 800bca0:	0800f227 	.word	0x0800f227
 800bca4:	2501      	movs	r5, #1
 800bca6:	2300      	movs	r3, #0
 800bca8:	9306      	str	r3, [sp, #24]
 800bcaa:	9508      	str	r5, [sp, #32]
 800bcac:	f04f 33ff 	mov.w	r3, #4294967295
 800bcb0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	2312      	movs	r3, #18
 800bcb8:	e7b0      	b.n	800bc1c <_dtoa_r+0x26c>
 800bcba:	2301      	movs	r3, #1
 800bcbc:	9308      	str	r3, [sp, #32]
 800bcbe:	e7f5      	b.n	800bcac <_dtoa_r+0x2fc>
 800bcc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcc2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bcc6:	e7b8      	b.n	800bc3a <_dtoa_r+0x28a>
 800bcc8:	3101      	adds	r1, #1
 800bcca:	6041      	str	r1, [r0, #4]
 800bccc:	0052      	lsls	r2, r2, #1
 800bcce:	e7b8      	b.n	800bc42 <_dtoa_r+0x292>
 800bcd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcd2:	9a01      	ldr	r2, [sp, #4]
 800bcd4:	601a      	str	r2, [r3, #0]
 800bcd6:	9b03      	ldr	r3, [sp, #12]
 800bcd8:	2b0e      	cmp	r3, #14
 800bcda:	f200 809d 	bhi.w	800be18 <_dtoa_r+0x468>
 800bcde:	2d00      	cmp	r5, #0
 800bce0:	f000 809a 	beq.w	800be18 <_dtoa_r+0x468>
 800bce4:	9b00      	ldr	r3, [sp, #0]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	dd32      	ble.n	800bd50 <_dtoa_r+0x3a0>
 800bcea:	4ab7      	ldr	r2, [pc, #732]	; (800bfc8 <_dtoa_r+0x618>)
 800bcec:	f003 030f 	and.w	r3, r3, #15
 800bcf0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bcf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bcf8:	9b00      	ldr	r3, [sp, #0]
 800bcfa:	05d8      	lsls	r0, r3, #23
 800bcfc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bd00:	d516      	bpl.n	800bd30 <_dtoa_r+0x380>
 800bd02:	4bb2      	ldr	r3, [pc, #712]	; (800bfcc <_dtoa_r+0x61c>)
 800bd04:	ec51 0b19 	vmov	r0, r1, d9
 800bd08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bd0c:	f7f4 fdae 	bl	800086c <__aeabi_ddiv>
 800bd10:	f007 070f 	and.w	r7, r7, #15
 800bd14:	4682      	mov	sl, r0
 800bd16:	468b      	mov	fp, r1
 800bd18:	2503      	movs	r5, #3
 800bd1a:	4eac      	ldr	r6, [pc, #688]	; (800bfcc <_dtoa_r+0x61c>)
 800bd1c:	b957      	cbnz	r7, 800bd34 <_dtoa_r+0x384>
 800bd1e:	4642      	mov	r2, r8
 800bd20:	464b      	mov	r3, r9
 800bd22:	4650      	mov	r0, sl
 800bd24:	4659      	mov	r1, fp
 800bd26:	f7f4 fda1 	bl	800086c <__aeabi_ddiv>
 800bd2a:	4682      	mov	sl, r0
 800bd2c:	468b      	mov	fp, r1
 800bd2e:	e028      	b.n	800bd82 <_dtoa_r+0x3d2>
 800bd30:	2502      	movs	r5, #2
 800bd32:	e7f2      	b.n	800bd1a <_dtoa_r+0x36a>
 800bd34:	07f9      	lsls	r1, r7, #31
 800bd36:	d508      	bpl.n	800bd4a <_dtoa_r+0x39a>
 800bd38:	4640      	mov	r0, r8
 800bd3a:	4649      	mov	r1, r9
 800bd3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bd40:	f7f4 fc6a 	bl	8000618 <__aeabi_dmul>
 800bd44:	3501      	adds	r5, #1
 800bd46:	4680      	mov	r8, r0
 800bd48:	4689      	mov	r9, r1
 800bd4a:	107f      	asrs	r7, r7, #1
 800bd4c:	3608      	adds	r6, #8
 800bd4e:	e7e5      	b.n	800bd1c <_dtoa_r+0x36c>
 800bd50:	f000 809b 	beq.w	800be8a <_dtoa_r+0x4da>
 800bd54:	9b00      	ldr	r3, [sp, #0]
 800bd56:	4f9d      	ldr	r7, [pc, #628]	; (800bfcc <_dtoa_r+0x61c>)
 800bd58:	425e      	negs	r6, r3
 800bd5a:	4b9b      	ldr	r3, [pc, #620]	; (800bfc8 <_dtoa_r+0x618>)
 800bd5c:	f006 020f 	and.w	r2, r6, #15
 800bd60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd68:	ec51 0b19 	vmov	r0, r1, d9
 800bd6c:	f7f4 fc54 	bl	8000618 <__aeabi_dmul>
 800bd70:	1136      	asrs	r6, r6, #4
 800bd72:	4682      	mov	sl, r0
 800bd74:	468b      	mov	fp, r1
 800bd76:	2300      	movs	r3, #0
 800bd78:	2502      	movs	r5, #2
 800bd7a:	2e00      	cmp	r6, #0
 800bd7c:	d17a      	bne.n	800be74 <_dtoa_r+0x4c4>
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d1d3      	bne.n	800bd2a <_dtoa_r+0x37a>
 800bd82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	f000 8082 	beq.w	800be8e <_dtoa_r+0x4de>
 800bd8a:	4b91      	ldr	r3, [pc, #580]	; (800bfd0 <_dtoa_r+0x620>)
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	4650      	mov	r0, sl
 800bd90:	4659      	mov	r1, fp
 800bd92:	f7f4 feb3 	bl	8000afc <__aeabi_dcmplt>
 800bd96:	2800      	cmp	r0, #0
 800bd98:	d079      	beq.n	800be8e <_dtoa_r+0x4de>
 800bd9a:	9b03      	ldr	r3, [sp, #12]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d076      	beq.n	800be8e <_dtoa_r+0x4de>
 800bda0:	9b02      	ldr	r3, [sp, #8]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	dd36      	ble.n	800be14 <_dtoa_r+0x464>
 800bda6:	9b00      	ldr	r3, [sp, #0]
 800bda8:	4650      	mov	r0, sl
 800bdaa:	4659      	mov	r1, fp
 800bdac:	1e5f      	subs	r7, r3, #1
 800bdae:	2200      	movs	r2, #0
 800bdb0:	4b88      	ldr	r3, [pc, #544]	; (800bfd4 <_dtoa_r+0x624>)
 800bdb2:	f7f4 fc31 	bl	8000618 <__aeabi_dmul>
 800bdb6:	9e02      	ldr	r6, [sp, #8]
 800bdb8:	4682      	mov	sl, r0
 800bdba:	468b      	mov	fp, r1
 800bdbc:	3501      	adds	r5, #1
 800bdbe:	4628      	mov	r0, r5
 800bdc0:	f7f4 fbc0 	bl	8000544 <__aeabi_i2d>
 800bdc4:	4652      	mov	r2, sl
 800bdc6:	465b      	mov	r3, fp
 800bdc8:	f7f4 fc26 	bl	8000618 <__aeabi_dmul>
 800bdcc:	4b82      	ldr	r3, [pc, #520]	; (800bfd8 <_dtoa_r+0x628>)
 800bdce:	2200      	movs	r2, #0
 800bdd0:	f7f4 fa6c 	bl	80002ac <__adddf3>
 800bdd4:	46d0      	mov	r8, sl
 800bdd6:	46d9      	mov	r9, fp
 800bdd8:	4682      	mov	sl, r0
 800bdda:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bdde:	2e00      	cmp	r6, #0
 800bde0:	d158      	bne.n	800be94 <_dtoa_r+0x4e4>
 800bde2:	4b7e      	ldr	r3, [pc, #504]	; (800bfdc <_dtoa_r+0x62c>)
 800bde4:	2200      	movs	r2, #0
 800bde6:	4640      	mov	r0, r8
 800bde8:	4649      	mov	r1, r9
 800bdea:	f7f4 fa5d 	bl	80002a8 <__aeabi_dsub>
 800bdee:	4652      	mov	r2, sl
 800bdf0:	465b      	mov	r3, fp
 800bdf2:	4680      	mov	r8, r0
 800bdf4:	4689      	mov	r9, r1
 800bdf6:	f7f4 fe9f 	bl	8000b38 <__aeabi_dcmpgt>
 800bdfa:	2800      	cmp	r0, #0
 800bdfc:	f040 8295 	bne.w	800c32a <_dtoa_r+0x97a>
 800be00:	4652      	mov	r2, sl
 800be02:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800be06:	4640      	mov	r0, r8
 800be08:	4649      	mov	r1, r9
 800be0a:	f7f4 fe77 	bl	8000afc <__aeabi_dcmplt>
 800be0e:	2800      	cmp	r0, #0
 800be10:	f040 8289 	bne.w	800c326 <_dtoa_r+0x976>
 800be14:	ec5b ab19 	vmov	sl, fp, d9
 800be18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	f2c0 8148 	blt.w	800c0b0 <_dtoa_r+0x700>
 800be20:	9a00      	ldr	r2, [sp, #0]
 800be22:	2a0e      	cmp	r2, #14
 800be24:	f300 8144 	bgt.w	800c0b0 <_dtoa_r+0x700>
 800be28:	4b67      	ldr	r3, [pc, #412]	; (800bfc8 <_dtoa_r+0x618>)
 800be2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800be32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be34:	2b00      	cmp	r3, #0
 800be36:	f280 80d5 	bge.w	800bfe4 <_dtoa_r+0x634>
 800be3a:	9b03      	ldr	r3, [sp, #12]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	f300 80d1 	bgt.w	800bfe4 <_dtoa_r+0x634>
 800be42:	f040 826f 	bne.w	800c324 <_dtoa_r+0x974>
 800be46:	4b65      	ldr	r3, [pc, #404]	; (800bfdc <_dtoa_r+0x62c>)
 800be48:	2200      	movs	r2, #0
 800be4a:	4640      	mov	r0, r8
 800be4c:	4649      	mov	r1, r9
 800be4e:	f7f4 fbe3 	bl	8000618 <__aeabi_dmul>
 800be52:	4652      	mov	r2, sl
 800be54:	465b      	mov	r3, fp
 800be56:	f7f4 fe65 	bl	8000b24 <__aeabi_dcmpge>
 800be5a:	9e03      	ldr	r6, [sp, #12]
 800be5c:	4637      	mov	r7, r6
 800be5e:	2800      	cmp	r0, #0
 800be60:	f040 8245 	bne.w	800c2ee <_dtoa_r+0x93e>
 800be64:	9d01      	ldr	r5, [sp, #4]
 800be66:	2331      	movs	r3, #49	; 0x31
 800be68:	f805 3b01 	strb.w	r3, [r5], #1
 800be6c:	9b00      	ldr	r3, [sp, #0]
 800be6e:	3301      	adds	r3, #1
 800be70:	9300      	str	r3, [sp, #0]
 800be72:	e240      	b.n	800c2f6 <_dtoa_r+0x946>
 800be74:	07f2      	lsls	r2, r6, #31
 800be76:	d505      	bpl.n	800be84 <_dtoa_r+0x4d4>
 800be78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be7c:	f7f4 fbcc 	bl	8000618 <__aeabi_dmul>
 800be80:	3501      	adds	r5, #1
 800be82:	2301      	movs	r3, #1
 800be84:	1076      	asrs	r6, r6, #1
 800be86:	3708      	adds	r7, #8
 800be88:	e777      	b.n	800bd7a <_dtoa_r+0x3ca>
 800be8a:	2502      	movs	r5, #2
 800be8c:	e779      	b.n	800bd82 <_dtoa_r+0x3d2>
 800be8e:	9f00      	ldr	r7, [sp, #0]
 800be90:	9e03      	ldr	r6, [sp, #12]
 800be92:	e794      	b.n	800bdbe <_dtoa_r+0x40e>
 800be94:	9901      	ldr	r1, [sp, #4]
 800be96:	4b4c      	ldr	r3, [pc, #304]	; (800bfc8 <_dtoa_r+0x618>)
 800be98:	4431      	add	r1, r6
 800be9a:	910d      	str	r1, [sp, #52]	; 0x34
 800be9c:	9908      	ldr	r1, [sp, #32]
 800be9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bea2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bea6:	2900      	cmp	r1, #0
 800bea8:	d043      	beq.n	800bf32 <_dtoa_r+0x582>
 800beaa:	494d      	ldr	r1, [pc, #308]	; (800bfe0 <_dtoa_r+0x630>)
 800beac:	2000      	movs	r0, #0
 800beae:	f7f4 fcdd 	bl	800086c <__aeabi_ddiv>
 800beb2:	4652      	mov	r2, sl
 800beb4:	465b      	mov	r3, fp
 800beb6:	f7f4 f9f7 	bl	80002a8 <__aeabi_dsub>
 800beba:	9d01      	ldr	r5, [sp, #4]
 800bebc:	4682      	mov	sl, r0
 800bebe:	468b      	mov	fp, r1
 800bec0:	4649      	mov	r1, r9
 800bec2:	4640      	mov	r0, r8
 800bec4:	f7f4 fe58 	bl	8000b78 <__aeabi_d2iz>
 800bec8:	4606      	mov	r6, r0
 800beca:	f7f4 fb3b 	bl	8000544 <__aeabi_i2d>
 800bece:	4602      	mov	r2, r0
 800bed0:	460b      	mov	r3, r1
 800bed2:	4640      	mov	r0, r8
 800bed4:	4649      	mov	r1, r9
 800bed6:	f7f4 f9e7 	bl	80002a8 <__aeabi_dsub>
 800beda:	3630      	adds	r6, #48	; 0x30
 800bedc:	f805 6b01 	strb.w	r6, [r5], #1
 800bee0:	4652      	mov	r2, sl
 800bee2:	465b      	mov	r3, fp
 800bee4:	4680      	mov	r8, r0
 800bee6:	4689      	mov	r9, r1
 800bee8:	f7f4 fe08 	bl	8000afc <__aeabi_dcmplt>
 800beec:	2800      	cmp	r0, #0
 800beee:	d163      	bne.n	800bfb8 <_dtoa_r+0x608>
 800bef0:	4642      	mov	r2, r8
 800bef2:	464b      	mov	r3, r9
 800bef4:	4936      	ldr	r1, [pc, #216]	; (800bfd0 <_dtoa_r+0x620>)
 800bef6:	2000      	movs	r0, #0
 800bef8:	f7f4 f9d6 	bl	80002a8 <__aeabi_dsub>
 800befc:	4652      	mov	r2, sl
 800befe:	465b      	mov	r3, fp
 800bf00:	f7f4 fdfc 	bl	8000afc <__aeabi_dcmplt>
 800bf04:	2800      	cmp	r0, #0
 800bf06:	f040 80b5 	bne.w	800c074 <_dtoa_r+0x6c4>
 800bf0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf0c:	429d      	cmp	r5, r3
 800bf0e:	d081      	beq.n	800be14 <_dtoa_r+0x464>
 800bf10:	4b30      	ldr	r3, [pc, #192]	; (800bfd4 <_dtoa_r+0x624>)
 800bf12:	2200      	movs	r2, #0
 800bf14:	4650      	mov	r0, sl
 800bf16:	4659      	mov	r1, fp
 800bf18:	f7f4 fb7e 	bl	8000618 <__aeabi_dmul>
 800bf1c:	4b2d      	ldr	r3, [pc, #180]	; (800bfd4 <_dtoa_r+0x624>)
 800bf1e:	4682      	mov	sl, r0
 800bf20:	468b      	mov	fp, r1
 800bf22:	4640      	mov	r0, r8
 800bf24:	4649      	mov	r1, r9
 800bf26:	2200      	movs	r2, #0
 800bf28:	f7f4 fb76 	bl	8000618 <__aeabi_dmul>
 800bf2c:	4680      	mov	r8, r0
 800bf2e:	4689      	mov	r9, r1
 800bf30:	e7c6      	b.n	800bec0 <_dtoa_r+0x510>
 800bf32:	4650      	mov	r0, sl
 800bf34:	4659      	mov	r1, fp
 800bf36:	f7f4 fb6f 	bl	8000618 <__aeabi_dmul>
 800bf3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf3c:	9d01      	ldr	r5, [sp, #4]
 800bf3e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bf40:	4682      	mov	sl, r0
 800bf42:	468b      	mov	fp, r1
 800bf44:	4649      	mov	r1, r9
 800bf46:	4640      	mov	r0, r8
 800bf48:	f7f4 fe16 	bl	8000b78 <__aeabi_d2iz>
 800bf4c:	4606      	mov	r6, r0
 800bf4e:	f7f4 faf9 	bl	8000544 <__aeabi_i2d>
 800bf52:	3630      	adds	r6, #48	; 0x30
 800bf54:	4602      	mov	r2, r0
 800bf56:	460b      	mov	r3, r1
 800bf58:	4640      	mov	r0, r8
 800bf5a:	4649      	mov	r1, r9
 800bf5c:	f7f4 f9a4 	bl	80002a8 <__aeabi_dsub>
 800bf60:	f805 6b01 	strb.w	r6, [r5], #1
 800bf64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf66:	429d      	cmp	r5, r3
 800bf68:	4680      	mov	r8, r0
 800bf6a:	4689      	mov	r9, r1
 800bf6c:	f04f 0200 	mov.w	r2, #0
 800bf70:	d124      	bne.n	800bfbc <_dtoa_r+0x60c>
 800bf72:	4b1b      	ldr	r3, [pc, #108]	; (800bfe0 <_dtoa_r+0x630>)
 800bf74:	4650      	mov	r0, sl
 800bf76:	4659      	mov	r1, fp
 800bf78:	f7f4 f998 	bl	80002ac <__adddf3>
 800bf7c:	4602      	mov	r2, r0
 800bf7e:	460b      	mov	r3, r1
 800bf80:	4640      	mov	r0, r8
 800bf82:	4649      	mov	r1, r9
 800bf84:	f7f4 fdd8 	bl	8000b38 <__aeabi_dcmpgt>
 800bf88:	2800      	cmp	r0, #0
 800bf8a:	d173      	bne.n	800c074 <_dtoa_r+0x6c4>
 800bf8c:	4652      	mov	r2, sl
 800bf8e:	465b      	mov	r3, fp
 800bf90:	4913      	ldr	r1, [pc, #76]	; (800bfe0 <_dtoa_r+0x630>)
 800bf92:	2000      	movs	r0, #0
 800bf94:	f7f4 f988 	bl	80002a8 <__aeabi_dsub>
 800bf98:	4602      	mov	r2, r0
 800bf9a:	460b      	mov	r3, r1
 800bf9c:	4640      	mov	r0, r8
 800bf9e:	4649      	mov	r1, r9
 800bfa0:	f7f4 fdac 	bl	8000afc <__aeabi_dcmplt>
 800bfa4:	2800      	cmp	r0, #0
 800bfa6:	f43f af35 	beq.w	800be14 <_dtoa_r+0x464>
 800bfaa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bfac:	1e6b      	subs	r3, r5, #1
 800bfae:	930f      	str	r3, [sp, #60]	; 0x3c
 800bfb0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bfb4:	2b30      	cmp	r3, #48	; 0x30
 800bfb6:	d0f8      	beq.n	800bfaa <_dtoa_r+0x5fa>
 800bfb8:	9700      	str	r7, [sp, #0]
 800bfba:	e049      	b.n	800c050 <_dtoa_r+0x6a0>
 800bfbc:	4b05      	ldr	r3, [pc, #20]	; (800bfd4 <_dtoa_r+0x624>)
 800bfbe:	f7f4 fb2b 	bl	8000618 <__aeabi_dmul>
 800bfc2:	4680      	mov	r8, r0
 800bfc4:	4689      	mov	r9, r1
 800bfc6:	e7bd      	b.n	800bf44 <_dtoa_r+0x594>
 800bfc8:	0800f2c0 	.word	0x0800f2c0
 800bfcc:	0800f298 	.word	0x0800f298
 800bfd0:	3ff00000 	.word	0x3ff00000
 800bfd4:	40240000 	.word	0x40240000
 800bfd8:	401c0000 	.word	0x401c0000
 800bfdc:	40140000 	.word	0x40140000
 800bfe0:	3fe00000 	.word	0x3fe00000
 800bfe4:	9d01      	ldr	r5, [sp, #4]
 800bfe6:	4656      	mov	r6, sl
 800bfe8:	465f      	mov	r7, fp
 800bfea:	4642      	mov	r2, r8
 800bfec:	464b      	mov	r3, r9
 800bfee:	4630      	mov	r0, r6
 800bff0:	4639      	mov	r1, r7
 800bff2:	f7f4 fc3b 	bl	800086c <__aeabi_ddiv>
 800bff6:	f7f4 fdbf 	bl	8000b78 <__aeabi_d2iz>
 800bffa:	4682      	mov	sl, r0
 800bffc:	f7f4 faa2 	bl	8000544 <__aeabi_i2d>
 800c000:	4642      	mov	r2, r8
 800c002:	464b      	mov	r3, r9
 800c004:	f7f4 fb08 	bl	8000618 <__aeabi_dmul>
 800c008:	4602      	mov	r2, r0
 800c00a:	460b      	mov	r3, r1
 800c00c:	4630      	mov	r0, r6
 800c00e:	4639      	mov	r1, r7
 800c010:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c014:	f7f4 f948 	bl	80002a8 <__aeabi_dsub>
 800c018:	f805 6b01 	strb.w	r6, [r5], #1
 800c01c:	9e01      	ldr	r6, [sp, #4]
 800c01e:	9f03      	ldr	r7, [sp, #12]
 800c020:	1bae      	subs	r6, r5, r6
 800c022:	42b7      	cmp	r7, r6
 800c024:	4602      	mov	r2, r0
 800c026:	460b      	mov	r3, r1
 800c028:	d135      	bne.n	800c096 <_dtoa_r+0x6e6>
 800c02a:	f7f4 f93f 	bl	80002ac <__adddf3>
 800c02e:	4642      	mov	r2, r8
 800c030:	464b      	mov	r3, r9
 800c032:	4606      	mov	r6, r0
 800c034:	460f      	mov	r7, r1
 800c036:	f7f4 fd7f 	bl	8000b38 <__aeabi_dcmpgt>
 800c03a:	b9d0      	cbnz	r0, 800c072 <_dtoa_r+0x6c2>
 800c03c:	4642      	mov	r2, r8
 800c03e:	464b      	mov	r3, r9
 800c040:	4630      	mov	r0, r6
 800c042:	4639      	mov	r1, r7
 800c044:	f7f4 fd50 	bl	8000ae8 <__aeabi_dcmpeq>
 800c048:	b110      	cbz	r0, 800c050 <_dtoa_r+0x6a0>
 800c04a:	f01a 0f01 	tst.w	sl, #1
 800c04e:	d110      	bne.n	800c072 <_dtoa_r+0x6c2>
 800c050:	4620      	mov	r0, r4
 800c052:	ee18 1a10 	vmov	r1, s16
 800c056:	f000 fc2b 	bl	800c8b0 <_Bfree>
 800c05a:	2300      	movs	r3, #0
 800c05c:	9800      	ldr	r0, [sp, #0]
 800c05e:	702b      	strb	r3, [r5, #0]
 800c060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c062:	3001      	adds	r0, #1
 800c064:	6018      	str	r0, [r3, #0]
 800c066:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c068:	2b00      	cmp	r3, #0
 800c06a:	f43f acf1 	beq.w	800ba50 <_dtoa_r+0xa0>
 800c06e:	601d      	str	r5, [r3, #0]
 800c070:	e4ee      	b.n	800ba50 <_dtoa_r+0xa0>
 800c072:	9f00      	ldr	r7, [sp, #0]
 800c074:	462b      	mov	r3, r5
 800c076:	461d      	mov	r5, r3
 800c078:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c07c:	2a39      	cmp	r2, #57	; 0x39
 800c07e:	d106      	bne.n	800c08e <_dtoa_r+0x6de>
 800c080:	9a01      	ldr	r2, [sp, #4]
 800c082:	429a      	cmp	r2, r3
 800c084:	d1f7      	bne.n	800c076 <_dtoa_r+0x6c6>
 800c086:	9901      	ldr	r1, [sp, #4]
 800c088:	2230      	movs	r2, #48	; 0x30
 800c08a:	3701      	adds	r7, #1
 800c08c:	700a      	strb	r2, [r1, #0]
 800c08e:	781a      	ldrb	r2, [r3, #0]
 800c090:	3201      	adds	r2, #1
 800c092:	701a      	strb	r2, [r3, #0]
 800c094:	e790      	b.n	800bfb8 <_dtoa_r+0x608>
 800c096:	4ba6      	ldr	r3, [pc, #664]	; (800c330 <_dtoa_r+0x980>)
 800c098:	2200      	movs	r2, #0
 800c09a:	f7f4 fabd 	bl	8000618 <__aeabi_dmul>
 800c09e:	2200      	movs	r2, #0
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	4606      	mov	r6, r0
 800c0a4:	460f      	mov	r7, r1
 800c0a6:	f7f4 fd1f 	bl	8000ae8 <__aeabi_dcmpeq>
 800c0aa:	2800      	cmp	r0, #0
 800c0ac:	d09d      	beq.n	800bfea <_dtoa_r+0x63a>
 800c0ae:	e7cf      	b.n	800c050 <_dtoa_r+0x6a0>
 800c0b0:	9a08      	ldr	r2, [sp, #32]
 800c0b2:	2a00      	cmp	r2, #0
 800c0b4:	f000 80d7 	beq.w	800c266 <_dtoa_r+0x8b6>
 800c0b8:	9a06      	ldr	r2, [sp, #24]
 800c0ba:	2a01      	cmp	r2, #1
 800c0bc:	f300 80ba 	bgt.w	800c234 <_dtoa_r+0x884>
 800c0c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c0c2:	2a00      	cmp	r2, #0
 800c0c4:	f000 80b2 	beq.w	800c22c <_dtoa_r+0x87c>
 800c0c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c0cc:	9e07      	ldr	r6, [sp, #28]
 800c0ce:	9d04      	ldr	r5, [sp, #16]
 800c0d0:	9a04      	ldr	r2, [sp, #16]
 800c0d2:	441a      	add	r2, r3
 800c0d4:	9204      	str	r2, [sp, #16]
 800c0d6:	9a05      	ldr	r2, [sp, #20]
 800c0d8:	2101      	movs	r1, #1
 800c0da:	441a      	add	r2, r3
 800c0dc:	4620      	mov	r0, r4
 800c0de:	9205      	str	r2, [sp, #20]
 800c0e0:	f000 fc9e 	bl	800ca20 <__i2b>
 800c0e4:	4607      	mov	r7, r0
 800c0e6:	2d00      	cmp	r5, #0
 800c0e8:	dd0c      	ble.n	800c104 <_dtoa_r+0x754>
 800c0ea:	9b05      	ldr	r3, [sp, #20]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	dd09      	ble.n	800c104 <_dtoa_r+0x754>
 800c0f0:	42ab      	cmp	r3, r5
 800c0f2:	9a04      	ldr	r2, [sp, #16]
 800c0f4:	bfa8      	it	ge
 800c0f6:	462b      	movge	r3, r5
 800c0f8:	1ad2      	subs	r2, r2, r3
 800c0fa:	9204      	str	r2, [sp, #16]
 800c0fc:	9a05      	ldr	r2, [sp, #20]
 800c0fe:	1aed      	subs	r5, r5, r3
 800c100:	1ad3      	subs	r3, r2, r3
 800c102:	9305      	str	r3, [sp, #20]
 800c104:	9b07      	ldr	r3, [sp, #28]
 800c106:	b31b      	cbz	r3, 800c150 <_dtoa_r+0x7a0>
 800c108:	9b08      	ldr	r3, [sp, #32]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	f000 80af 	beq.w	800c26e <_dtoa_r+0x8be>
 800c110:	2e00      	cmp	r6, #0
 800c112:	dd13      	ble.n	800c13c <_dtoa_r+0x78c>
 800c114:	4639      	mov	r1, r7
 800c116:	4632      	mov	r2, r6
 800c118:	4620      	mov	r0, r4
 800c11a:	f000 fd41 	bl	800cba0 <__pow5mult>
 800c11e:	ee18 2a10 	vmov	r2, s16
 800c122:	4601      	mov	r1, r0
 800c124:	4607      	mov	r7, r0
 800c126:	4620      	mov	r0, r4
 800c128:	f000 fc90 	bl	800ca4c <__multiply>
 800c12c:	ee18 1a10 	vmov	r1, s16
 800c130:	4680      	mov	r8, r0
 800c132:	4620      	mov	r0, r4
 800c134:	f000 fbbc 	bl	800c8b0 <_Bfree>
 800c138:	ee08 8a10 	vmov	s16, r8
 800c13c:	9b07      	ldr	r3, [sp, #28]
 800c13e:	1b9a      	subs	r2, r3, r6
 800c140:	d006      	beq.n	800c150 <_dtoa_r+0x7a0>
 800c142:	ee18 1a10 	vmov	r1, s16
 800c146:	4620      	mov	r0, r4
 800c148:	f000 fd2a 	bl	800cba0 <__pow5mult>
 800c14c:	ee08 0a10 	vmov	s16, r0
 800c150:	2101      	movs	r1, #1
 800c152:	4620      	mov	r0, r4
 800c154:	f000 fc64 	bl	800ca20 <__i2b>
 800c158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	4606      	mov	r6, r0
 800c15e:	f340 8088 	ble.w	800c272 <_dtoa_r+0x8c2>
 800c162:	461a      	mov	r2, r3
 800c164:	4601      	mov	r1, r0
 800c166:	4620      	mov	r0, r4
 800c168:	f000 fd1a 	bl	800cba0 <__pow5mult>
 800c16c:	9b06      	ldr	r3, [sp, #24]
 800c16e:	2b01      	cmp	r3, #1
 800c170:	4606      	mov	r6, r0
 800c172:	f340 8081 	ble.w	800c278 <_dtoa_r+0x8c8>
 800c176:	f04f 0800 	mov.w	r8, #0
 800c17a:	6933      	ldr	r3, [r6, #16]
 800c17c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c180:	6918      	ldr	r0, [r3, #16]
 800c182:	f000 fbfd 	bl	800c980 <__hi0bits>
 800c186:	f1c0 0020 	rsb	r0, r0, #32
 800c18a:	9b05      	ldr	r3, [sp, #20]
 800c18c:	4418      	add	r0, r3
 800c18e:	f010 001f 	ands.w	r0, r0, #31
 800c192:	f000 8092 	beq.w	800c2ba <_dtoa_r+0x90a>
 800c196:	f1c0 0320 	rsb	r3, r0, #32
 800c19a:	2b04      	cmp	r3, #4
 800c19c:	f340 808a 	ble.w	800c2b4 <_dtoa_r+0x904>
 800c1a0:	f1c0 001c 	rsb	r0, r0, #28
 800c1a4:	9b04      	ldr	r3, [sp, #16]
 800c1a6:	4403      	add	r3, r0
 800c1a8:	9304      	str	r3, [sp, #16]
 800c1aa:	9b05      	ldr	r3, [sp, #20]
 800c1ac:	4403      	add	r3, r0
 800c1ae:	4405      	add	r5, r0
 800c1b0:	9305      	str	r3, [sp, #20]
 800c1b2:	9b04      	ldr	r3, [sp, #16]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	dd07      	ble.n	800c1c8 <_dtoa_r+0x818>
 800c1b8:	ee18 1a10 	vmov	r1, s16
 800c1bc:	461a      	mov	r2, r3
 800c1be:	4620      	mov	r0, r4
 800c1c0:	f000 fd48 	bl	800cc54 <__lshift>
 800c1c4:	ee08 0a10 	vmov	s16, r0
 800c1c8:	9b05      	ldr	r3, [sp, #20]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	dd05      	ble.n	800c1da <_dtoa_r+0x82a>
 800c1ce:	4631      	mov	r1, r6
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	4620      	mov	r0, r4
 800c1d4:	f000 fd3e 	bl	800cc54 <__lshift>
 800c1d8:	4606      	mov	r6, r0
 800c1da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d06e      	beq.n	800c2be <_dtoa_r+0x90e>
 800c1e0:	ee18 0a10 	vmov	r0, s16
 800c1e4:	4631      	mov	r1, r6
 800c1e6:	f000 fda5 	bl	800cd34 <__mcmp>
 800c1ea:	2800      	cmp	r0, #0
 800c1ec:	da67      	bge.n	800c2be <_dtoa_r+0x90e>
 800c1ee:	9b00      	ldr	r3, [sp, #0]
 800c1f0:	3b01      	subs	r3, #1
 800c1f2:	ee18 1a10 	vmov	r1, s16
 800c1f6:	9300      	str	r3, [sp, #0]
 800c1f8:	220a      	movs	r2, #10
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	4620      	mov	r0, r4
 800c1fe:	f000 fb79 	bl	800c8f4 <__multadd>
 800c202:	9b08      	ldr	r3, [sp, #32]
 800c204:	ee08 0a10 	vmov	s16, r0
 800c208:	2b00      	cmp	r3, #0
 800c20a:	f000 81b1 	beq.w	800c570 <_dtoa_r+0xbc0>
 800c20e:	2300      	movs	r3, #0
 800c210:	4639      	mov	r1, r7
 800c212:	220a      	movs	r2, #10
 800c214:	4620      	mov	r0, r4
 800c216:	f000 fb6d 	bl	800c8f4 <__multadd>
 800c21a:	9b02      	ldr	r3, [sp, #8]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	4607      	mov	r7, r0
 800c220:	f300 808e 	bgt.w	800c340 <_dtoa_r+0x990>
 800c224:	9b06      	ldr	r3, [sp, #24]
 800c226:	2b02      	cmp	r3, #2
 800c228:	dc51      	bgt.n	800c2ce <_dtoa_r+0x91e>
 800c22a:	e089      	b.n	800c340 <_dtoa_r+0x990>
 800c22c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c22e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c232:	e74b      	b.n	800c0cc <_dtoa_r+0x71c>
 800c234:	9b03      	ldr	r3, [sp, #12]
 800c236:	1e5e      	subs	r6, r3, #1
 800c238:	9b07      	ldr	r3, [sp, #28]
 800c23a:	42b3      	cmp	r3, r6
 800c23c:	bfbf      	itttt	lt
 800c23e:	9b07      	ldrlt	r3, [sp, #28]
 800c240:	9607      	strlt	r6, [sp, #28]
 800c242:	1af2      	sublt	r2, r6, r3
 800c244:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c246:	bfb6      	itet	lt
 800c248:	189b      	addlt	r3, r3, r2
 800c24a:	1b9e      	subge	r6, r3, r6
 800c24c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c24e:	9b03      	ldr	r3, [sp, #12]
 800c250:	bfb8      	it	lt
 800c252:	2600      	movlt	r6, #0
 800c254:	2b00      	cmp	r3, #0
 800c256:	bfb7      	itett	lt
 800c258:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c25c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c260:	1a9d      	sublt	r5, r3, r2
 800c262:	2300      	movlt	r3, #0
 800c264:	e734      	b.n	800c0d0 <_dtoa_r+0x720>
 800c266:	9e07      	ldr	r6, [sp, #28]
 800c268:	9d04      	ldr	r5, [sp, #16]
 800c26a:	9f08      	ldr	r7, [sp, #32]
 800c26c:	e73b      	b.n	800c0e6 <_dtoa_r+0x736>
 800c26e:	9a07      	ldr	r2, [sp, #28]
 800c270:	e767      	b.n	800c142 <_dtoa_r+0x792>
 800c272:	9b06      	ldr	r3, [sp, #24]
 800c274:	2b01      	cmp	r3, #1
 800c276:	dc18      	bgt.n	800c2aa <_dtoa_r+0x8fa>
 800c278:	f1ba 0f00 	cmp.w	sl, #0
 800c27c:	d115      	bne.n	800c2aa <_dtoa_r+0x8fa>
 800c27e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c282:	b993      	cbnz	r3, 800c2aa <_dtoa_r+0x8fa>
 800c284:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c288:	0d1b      	lsrs	r3, r3, #20
 800c28a:	051b      	lsls	r3, r3, #20
 800c28c:	b183      	cbz	r3, 800c2b0 <_dtoa_r+0x900>
 800c28e:	9b04      	ldr	r3, [sp, #16]
 800c290:	3301      	adds	r3, #1
 800c292:	9304      	str	r3, [sp, #16]
 800c294:	9b05      	ldr	r3, [sp, #20]
 800c296:	3301      	adds	r3, #1
 800c298:	9305      	str	r3, [sp, #20]
 800c29a:	f04f 0801 	mov.w	r8, #1
 800c29e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	f47f af6a 	bne.w	800c17a <_dtoa_r+0x7ca>
 800c2a6:	2001      	movs	r0, #1
 800c2a8:	e76f      	b.n	800c18a <_dtoa_r+0x7da>
 800c2aa:	f04f 0800 	mov.w	r8, #0
 800c2ae:	e7f6      	b.n	800c29e <_dtoa_r+0x8ee>
 800c2b0:	4698      	mov	r8, r3
 800c2b2:	e7f4      	b.n	800c29e <_dtoa_r+0x8ee>
 800c2b4:	f43f af7d 	beq.w	800c1b2 <_dtoa_r+0x802>
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	301c      	adds	r0, #28
 800c2bc:	e772      	b.n	800c1a4 <_dtoa_r+0x7f4>
 800c2be:	9b03      	ldr	r3, [sp, #12]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	dc37      	bgt.n	800c334 <_dtoa_r+0x984>
 800c2c4:	9b06      	ldr	r3, [sp, #24]
 800c2c6:	2b02      	cmp	r3, #2
 800c2c8:	dd34      	ble.n	800c334 <_dtoa_r+0x984>
 800c2ca:	9b03      	ldr	r3, [sp, #12]
 800c2cc:	9302      	str	r3, [sp, #8]
 800c2ce:	9b02      	ldr	r3, [sp, #8]
 800c2d0:	b96b      	cbnz	r3, 800c2ee <_dtoa_r+0x93e>
 800c2d2:	4631      	mov	r1, r6
 800c2d4:	2205      	movs	r2, #5
 800c2d6:	4620      	mov	r0, r4
 800c2d8:	f000 fb0c 	bl	800c8f4 <__multadd>
 800c2dc:	4601      	mov	r1, r0
 800c2de:	4606      	mov	r6, r0
 800c2e0:	ee18 0a10 	vmov	r0, s16
 800c2e4:	f000 fd26 	bl	800cd34 <__mcmp>
 800c2e8:	2800      	cmp	r0, #0
 800c2ea:	f73f adbb 	bgt.w	800be64 <_dtoa_r+0x4b4>
 800c2ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2f0:	9d01      	ldr	r5, [sp, #4]
 800c2f2:	43db      	mvns	r3, r3
 800c2f4:	9300      	str	r3, [sp, #0]
 800c2f6:	f04f 0800 	mov.w	r8, #0
 800c2fa:	4631      	mov	r1, r6
 800c2fc:	4620      	mov	r0, r4
 800c2fe:	f000 fad7 	bl	800c8b0 <_Bfree>
 800c302:	2f00      	cmp	r7, #0
 800c304:	f43f aea4 	beq.w	800c050 <_dtoa_r+0x6a0>
 800c308:	f1b8 0f00 	cmp.w	r8, #0
 800c30c:	d005      	beq.n	800c31a <_dtoa_r+0x96a>
 800c30e:	45b8      	cmp	r8, r7
 800c310:	d003      	beq.n	800c31a <_dtoa_r+0x96a>
 800c312:	4641      	mov	r1, r8
 800c314:	4620      	mov	r0, r4
 800c316:	f000 facb 	bl	800c8b0 <_Bfree>
 800c31a:	4639      	mov	r1, r7
 800c31c:	4620      	mov	r0, r4
 800c31e:	f000 fac7 	bl	800c8b0 <_Bfree>
 800c322:	e695      	b.n	800c050 <_dtoa_r+0x6a0>
 800c324:	2600      	movs	r6, #0
 800c326:	4637      	mov	r7, r6
 800c328:	e7e1      	b.n	800c2ee <_dtoa_r+0x93e>
 800c32a:	9700      	str	r7, [sp, #0]
 800c32c:	4637      	mov	r7, r6
 800c32e:	e599      	b.n	800be64 <_dtoa_r+0x4b4>
 800c330:	40240000 	.word	0x40240000
 800c334:	9b08      	ldr	r3, [sp, #32]
 800c336:	2b00      	cmp	r3, #0
 800c338:	f000 80ca 	beq.w	800c4d0 <_dtoa_r+0xb20>
 800c33c:	9b03      	ldr	r3, [sp, #12]
 800c33e:	9302      	str	r3, [sp, #8]
 800c340:	2d00      	cmp	r5, #0
 800c342:	dd05      	ble.n	800c350 <_dtoa_r+0x9a0>
 800c344:	4639      	mov	r1, r7
 800c346:	462a      	mov	r2, r5
 800c348:	4620      	mov	r0, r4
 800c34a:	f000 fc83 	bl	800cc54 <__lshift>
 800c34e:	4607      	mov	r7, r0
 800c350:	f1b8 0f00 	cmp.w	r8, #0
 800c354:	d05b      	beq.n	800c40e <_dtoa_r+0xa5e>
 800c356:	6879      	ldr	r1, [r7, #4]
 800c358:	4620      	mov	r0, r4
 800c35a:	f000 fa69 	bl	800c830 <_Balloc>
 800c35e:	4605      	mov	r5, r0
 800c360:	b928      	cbnz	r0, 800c36e <_dtoa_r+0x9be>
 800c362:	4b87      	ldr	r3, [pc, #540]	; (800c580 <_dtoa_r+0xbd0>)
 800c364:	4602      	mov	r2, r0
 800c366:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c36a:	f7ff bb3b 	b.w	800b9e4 <_dtoa_r+0x34>
 800c36e:	693a      	ldr	r2, [r7, #16]
 800c370:	3202      	adds	r2, #2
 800c372:	0092      	lsls	r2, r2, #2
 800c374:	f107 010c 	add.w	r1, r7, #12
 800c378:	300c      	adds	r0, #12
 800c37a:	f7fe fb1a 	bl	800a9b2 <memcpy>
 800c37e:	2201      	movs	r2, #1
 800c380:	4629      	mov	r1, r5
 800c382:	4620      	mov	r0, r4
 800c384:	f000 fc66 	bl	800cc54 <__lshift>
 800c388:	9b01      	ldr	r3, [sp, #4]
 800c38a:	f103 0901 	add.w	r9, r3, #1
 800c38e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c392:	4413      	add	r3, r2
 800c394:	9305      	str	r3, [sp, #20]
 800c396:	f00a 0301 	and.w	r3, sl, #1
 800c39a:	46b8      	mov	r8, r7
 800c39c:	9304      	str	r3, [sp, #16]
 800c39e:	4607      	mov	r7, r0
 800c3a0:	4631      	mov	r1, r6
 800c3a2:	ee18 0a10 	vmov	r0, s16
 800c3a6:	f7ff fa75 	bl	800b894 <quorem>
 800c3aa:	4641      	mov	r1, r8
 800c3ac:	9002      	str	r0, [sp, #8]
 800c3ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c3b2:	ee18 0a10 	vmov	r0, s16
 800c3b6:	f000 fcbd 	bl	800cd34 <__mcmp>
 800c3ba:	463a      	mov	r2, r7
 800c3bc:	9003      	str	r0, [sp, #12]
 800c3be:	4631      	mov	r1, r6
 800c3c0:	4620      	mov	r0, r4
 800c3c2:	f000 fcd3 	bl	800cd6c <__mdiff>
 800c3c6:	68c2      	ldr	r2, [r0, #12]
 800c3c8:	f109 3bff 	add.w	fp, r9, #4294967295
 800c3cc:	4605      	mov	r5, r0
 800c3ce:	bb02      	cbnz	r2, 800c412 <_dtoa_r+0xa62>
 800c3d0:	4601      	mov	r1, r0
 800c3d2:	ee18 0a10 	vmov	r0, s16
 800c3d6:	f000 fcad 	bl	800cd34 <__mcmp>
 800c3da:	4602      	mov	r2, r0
 800c3dc:	4629      	mov	r1, r5
 800c3de:	4620      	mov	r0, r4
 800c3e0:	9207      	str	r2, [sp, #28]
 800c3e2:	f000 fa65 	bl	800c8b0 <_Bfree>
 800c3e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c3ea:	ea43 0102 	orr.w	r1, r3, r2
 800c3ee:	9b04      	ldr	r3, [sp, #16]
 800c3f0:	430b      	orrs	r3, r1
 800c3f2:	464d      	mov	r5, r9
 800c3f4:	d10f      	bne.n	800c416 <_dtoa_r+0xa66>
 800c3f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c3fa:	d02a      	beq.n	800c452 <_dtoa_r+0xaa2>
 800c3fc:	9b03      	ldr	r3, [sp, #12]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	dd02      	ble.n	800c408 <_dtoa_r+0xa58>
 800c402:	9b02      	ldr	r3, [sp, #8]
 800c404:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c408:	f88b a000 	strb.w	sl, [fp]
 800c40c:	e775      	b.n	800c2fa <_dtoa_r+0x94a>
 800c40e:	4638      	mov	r0, r7
 800c410:	e7ba      	b.n	800c388 <_dtoa_r+0x9d8>
 800c412:	2201      	movs	r2, #1
 800c414:	e7e2      	b.n	800c3dc <_dtoa_r+0xa2c>
 800c416:	9b03      	ldr	r3, [sp, #12]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	db04      	blt.n	800c426 <_dtoa_r+0xa76>
 800c41c:	9906      	ldr	r1, [sp, #24]
 800c41e:	430b      	orrs	r3, r1
 800c420:	9904      	ldr	r1, [sp, #16]
 800c422:	430b      	orrs	r3, r1
 800c424:	d122      	bne.n	800c46c <_dtoa_r+0xabc>
 800c426:	2a00      	cmp	r2, #0
 800c428:	ddee      	ble.n	800c408 <_dtoa_r+0xa58>
 800c42a:	ee18 1a10 	vmov	r1, s16
 800c42e:	2201      	movs	r2, #1
 800c430:	4620      	mov	r0, r4
 800c432:	f000 fc0f 	bl	800cc54 <__lshift>
 800c436:	4631      	mov	r1, r6
 800c438:	ee08 0a10 	vmov	s16, r0
 800c43c:	f000 fc7a 	bl	800cd34 <__mcmp>
 800c440:	2800      	cmp	r0, #0
 800c442:	dc03      	bgt.n	800c44c <_dtoa_r+0xa9c>
 800c444:	d1e0      	bne.n	800c408 <_dtoa_r+0xa58>
 800c446:	f01a 0f01 	tst.w	sl, #1
 800c44a:	d0dd      	beq.n	800c408 <_dtoa_r+0xa58>
 800c44c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c450:	d1d7      	bne.n	800c402 <_dtoa_r+0xa52>
 800c452:	2339      	movs	r3, #57	; 0x39
 800c454:	f88b 3000 	strb.w	r3, [fp]
 800c458:	462b      	mov	r3, r5
 800c45a:	461d      	mov	r5, r3
 800c45c:	3b01      	subs	r3, #1
 800c45e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c462:	2a39      	cmp	r2, #57	; 0x39
 800c464:	d071      	beq.n	800c54a <_dtoa_r+0xb9a>
 800c466:	3201      	adds	r2, #1
 800c468:	701a      	strb	r2, [r3, #0]
 800c46a:	e746      	b.n	800c2fa <_dtoa_r+0x94a>
 800c46c:	2a00      	cmp	r2, #0
 800c46e:	dd07      	ble.n	800c480 <_dtoa_r+0xad0>
 800c470:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c474:	d0ed      	beq.n	800c452 <_dtoa_r+0xaa2>
 800c476:	f10a 0301 	add.w	r3, sl, #1
 800c47a:	f88b 3000 	strb.w	r3, [fp]
 800c47e:	e73c      	b.n	800c2fa <_dtoa_r+0x94a>
 800c480:	9b05      	ldr	r3, [sp, #20]
 800c482:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c486:	4599      	cmp	r9, r3
 800c488:	d047      	beq.n	800c51a <_dtoa_r+0xb6a>
 800c48a:	ee18 1a10 	vmov	r1, s16
 800c48e:	2300      	movs	r3, #0
 800c490:	220a      	movs	r2, #10
 800c492:	4620      	mov	r0, r4
 800c494:	f000 fa2e 	bl	800c8f4 <__multadd>
 800c498:	45b8      	cmp	r8, r7
 800c49a:	ee08 0a10 	vmov	s16, r0
 800c49e:	f04f 0300 	mov.w	r3, #0
 800c4a2:	f04f 020a 	mov.w	r2, #10
 800c4a6:	4641      	mov	r1, r8
 800c4a8:	4620      	mov	r0, r4
 800c4aa:	d106      	bne.n	800c4ba <_dtoa_r+0xb0a>
 800c4ac:	f000 fa22 	bl	800c8f4 <__multadd>
 800c4b0:	4680      	mov	r8, r0
 800c4b2:	4607      	mov	r7, r0
 800c4b4:	f109 0901 	add.w	r9, r9, #1
 800c4b8:	e772      	b.n	800c3a0 <_dtoa_r+0x9f0>
 800c4ba:	f000 fa1b 	bl	800c8f4 <__multadd>
 800c4be:	4639      	mov	r1, r7
 800c4c0:	4680      	mov	r8, r0
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	220a      	movs	r2, #10
 800c4c6:	4620      	mov	r0, r4
 800c4c8:	f000 fa14 	bl	800c8f4 <__multadd>
 800c4cc:	4607      	mov	r7, r0
 800c4ce:	e7f1      	b.n	800c4b4 <_dtoa_r+0xb04>
 800c4d0:	9b03      	ldr	r3, [sp, #12]
 800c4d2:	9302      	str	r3, [sp, #8]
 800c4d4:	9d01      	ldr	r5, [sp, #4]
 800c4d6:	ee18 0a10 	vmov	r0, s16
 800c4da:	4631      	mov	r1, r6
 800c4dc:	f7ff f9da 	bl	800b894 <quorem>
 800c4e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c4e4:	9b01      	ldr	r3, [sp, #4]
 800c4e6:	f805 ab01 	strb.w	sl, [r5], #1
 800c4ea:	1aea      	subs	r2, r5, r3
 800c4ec:	9b02      	ldr	r3, [sp, #8]
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	dd09      	ble.n	800c506 <_dtoa_r+0xb56>
 800c4f2:	ee18 1a10 	vmov	r1, s16
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	220a      	movs	r2, #10
 800c4fa:	4620      	mov	r0, r4
 800c4fc:	f000 f9fa 	bl	800c8f4 <__multadd>
 800c500:	ee08 0a10 	vmov	s16, r0
 800c504:	e7e7      	b.n	800c4d6 <_dtoa_r+0xb26>
 800c506:	9b02      	ldr	r3, [sp, #8]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	bfc8      	it	gt
 800c50c:	461d      	movgt	r5, r3
 800c50e:	9b01      	ldr	r3, [sp, #4]
 800c510:	bfd8      	it	le
 800c512:	2501      	movle	r5, #1
 800c514:	441d      	add	r5, r3
 800c516:	f04f 0800 	mov.w	r8, #0
 800c51a:	ee18 1a10 	vmov	r1, s16
 800c51e:	2201      	movs	r2, #1
 800c520:	4620      	mov	r0, r4
 800c522:	f000 fb97 	bl	800cc54 <__lshift>
 800c526:	4631      	mov	r1, r6
 800c528:	ee08 0a10 	vmov	s16, r0
 800c52c:	f000 fc02 	bl	800cd34 <__mcmp>
 800c530:	2800      	cmp	r0, #0
 800c532:	dc91      	bgt.n	800c458 <_dtoa_r+0xaa8>
 800c534:	d102      	bne.n	800c53c <_dtoa_r+0xb8c>
 800c536:	f01a 0f01 	tst.w	sl, #1
 800c53a:	d18d      	bne.n	800c458 <_dtoa_r+0xaa8>
 800c53c:	462b      	mov	r3, r5
 800c53e:	461d      	mov	r5, r3
 800c540:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c544:	2a30      	cmp	r2, #48	; 0x30
 800c546:	d0fa      	beq.n	800c53e <_dtoa_r+0xb8e>
 800c548:	e6d7      	b.n	800c2fa <_dtoa_r+0x94a>
 800c54a:	9a01      	ldr	r2, [sp, #4]
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d184      	bne.n	800c45a <_dtoa_r+0xaaa>
 800c550:	9b00      	ldr	r3, [sp, #0]
 800c552:	3301      	adds	r3, #1
 800c554:	9300      	str	r3, [sp, #0]
 800c556:	2331      	movs	r3, #49	; 0x31
 800c558:	7013      	strb	r3, [r2, #0]
 800c55a:	e6ce      	b.n	800c2fa <_dtoa_r+0x94a>
 800c55c:	4b09      	ldr	r3, [pc, #36]	; (800c584 <_dtoa_r+0xbd4>)
 800c55e:	f7ff ba95 	b.w	800ba8c <_dtoa_r+0xdc>
 800c562:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c564:	2b00      	cmp	r3, #0
 800c566:	f47f aa6e 	bne.w	800ba46 <_dtoa_r+0x96>
 800c56a:	4b07      	ldr	r3, [pc, #28]	; (800c588 <_dtoa_r+0xbd8>)
 800c56c:	f7ff ba8e 	b.w	800ba8c <_dtoa_r+0xdc>
 800c570:	9b02      	ldr	r3, [sp, #8]
 800c572:	2b00      	cmp	r3, #0
 800c574:	dcae      	bgt.n	800c4d4 <_dtoa_r+0xb24>
 800c576:	9b06      	ldr	r3, [sp, #24]
 800c578:	2b02      	cmp	r3, #2
 800c57a:	f73f aea8 	bgt.w	800c2ce <_dtoa_r+0x91e>
 800c57e:	e7a9      	b.n	800c4d4 <_dtoa_r+0xb24>
 800c580:	0800f227 	.word	0x0800f227
 800c584:	0800f184 	.word	0x0800f184
 800c588:	0800f1a8 	.word	0x0800f1a8

0800c58c <__sflush_r>:
 800c58c:	898a      	ldrh	r2, [r1, #12]
 800c58e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c592:	4605      	mov	r5, r0
 800c594:	0710      	lsls	r0, r2, #28
 800c596:	460c      	mov	r4, r1
 800c598:	d458      	bmi.n	800c64c <__sflush_r+0xc0>
 800c59a:	684b      	ldr	r3, [r1, #4]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	dc05      	bgt.n	800c5ac <__sflush_r+0x20>
 800c5a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	dc02      	bgt.n	800c5ac <__sflush_r+0x20>
 800c5a6:	2000      	movs	r0, #0
 800c5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c5ae:	2e00      	cmp	r6, #0
 800c5b0:	d0f9      	beq.n	800c5a6 <__sflush_r+0x1a>
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c5b8:	682f      	ldr	r7, [r5, #0]
 800c5ba:	602b      	str	r3, [r5, #0]
 800c5bc:	d032      	beq.n	800c624 <__sflush_r+0x98>
 800c5be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c5c0:	89a3      	ldrh	r3, [r4, #12]
 800c5c2:	075a      	lsls	r2, r3, #29
 800c5c4:	d505      	bpl.n	800c5d2 <__sflush_r+0x46>
 800c5c6:	6863      	ldr	r3, [r4, #4]
 800c5c8:	1ac0      	subs	r0, r0, r3
 800c5ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c5cc:	b10b      	cbz	r3, 800c5d2 <__sflush_r+0x46>
 800c5ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c5d0:	1ac0      	subs	r0, r0, r3
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	4602      	mov	r2, r0
 800c5d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c5d8:	6a21      	ldr	r1, [r4, #32]
 800c5da:	4628      	mov	r0, r5
 800c5dc:	47b0      	blx	r6
 800c5de:	1c43      	adds	r3, r0, #1
 800c5e0:	89a3      	ldrh	r3, [r4, #12]
 800c5e2:	d106      	bne.n	800c5f2 <__sflush_r+0x66>
 800c5e4:	6829      	ldr	r1, [r5, #0]
 800c5e6:	291d      	cmp	r1, #29
 800c5e8:	d82c      	bhi.n	800c644 <__sflush_r+0xb8>
 800c5ea:	4a2a      	ldr	r2, [pc, #168]	; (800c694 <__sflush_r+0x108>)
 800c5ec:	40ca      	lsrs	r2, r1
 800c5ee:	07d6      	lsls	r6, r2, #31
 800c5f0:	d528      	bpl.n	800c644 <__sflush_r+0xb8>
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	6062      	str	r2, [r4, #4]
 800c5f6:	04d9      	lsls	r1, r3, #19
 800c5f8:	6922      	ldr	r2, [r4, #16]
 800c5fa:	6022      	str	r2, [r4, #0]
 800c5fc:	d504      	bpl.n	800c608 <__sflush_r+0x7c>
 800c5fe:	1c42      	adds	r2, r0, #1
 800c600:	d101      	bne.n	800c606 <__sflush_r+0x7a>
 800c602:	682b      	ldr	r3, [r5, #0]
 800c604:	b903      	cbnz	r3, 800c608 <__sflush_r+0x7c>
 800c606:	6560      	str	r0, [r4, #84]	; 0x54
 800c608:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c60a:	602f      	str	r7, [r5, #0]
 800c60c:	2900      	cmp	r1, #0
 800c60e:	d0ca      	beq.n	800c5a6 <__sflush_r+0x1a>
 800c610:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c614:	4299      	cmp	r1, r3
 800c616:	d002      	beq.n	800c61e <__sflush_r+0x92>
 800c618:	4628      	mov	r0, r5
 800c61a:	f000 fca3 	bl	800cf64 <_free_r>
 800c61e:	2000      	movs	r0, #0
 800c620:	6360      	str	r0, [r4, #52]	; 0x34
 800c622:	e7c1      	b.n	800c5a8 <__sflush_r+0x1c>
 800c624:	6a21      	ldr	r1, [r4, #32]
 800c626:	2301      	movs	r3, #1
 800c628:	4628      	mov	r0, r5
 800c62a:	47b0      	blx	r6
 800c62c:	1c41      	adds	r1, r0, #1
 800c62e:	d1c7      	bne.n	800c5c0 <__sflush_r+0x34>
 800c630:	682b      	ldr	r3, [r5, #0]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d0c4      	beq.n	800c5c0 <__sflush_r+0x34>
 800c636:	2b1d      	cmp	r3, #29
 800c638:	d001      	beq.n	800c63e <__sflush_r+0xb2>
 800c63a:	2b16      	cmp	r3, #22
 800c63c:	d101      	bne.n	800c642 <__sflush_r+0xb6>
 800c63e:	602f      	str	r7, [r5, #0]
 800c640:	e7b1      	b.n	800c5a6 <__sflush_r+0x1a>
 800c642:	89a3      	ldrh	r3, [r4, #12]
 800c644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c648:	81a3      	strh	r3, [r4, #12]
 800c64a:	e7ad      	b.n	800c5a8 <__sflush_r+0x1c>
 800c64c:	690f      	ldr	r7, [r1, #16]
 800c64e:	2f00      	cmp	r7, #0
 800c650:	d0a9      	beq.n	800c5a6 <__sflush_r+0x1a>
 800c652:	0793      	lsls	r3, r2, #30
 800c654:	680e      	ldr	r6, [r1, #0]
 800c656:	bf08      	it	eq
 800c658:	694b      	ldreq	r3, [r1, #20]
 800c65a:	600f      	str	r7, [r1, #0]
 800c65c:	bf18      	it	ne
 800c65e:	2300      	movne	r3, #0
 800c660:	eba6 0807 	sub.w	r8, r6, r7
 800c664:	608b      	str	r3, [r1, #8]
 800c666:	f1b8 0f00 	cmp.w	r8, #0
 800c66a:	dd9c      	ble.n	800c5a6 <__sflush_r+0x1a>
 800c66c:	6a21      	ldr	r1, [r4, #32]
 800c66e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c670:	4643      	mov	r3, r8
 800c672:	463a      	mov	r2, r7
 800c674:	4628      	mov	r0, r5
 800c676:	47b0      	blx	r6
 800c678:	2800      	cmp	r0, #0
 800c67a:	dc06      	bgt.n	800c68a <__sflush_r+0xfe>
 800c67c:	89a3      	ldrh	r3, [r4, #12]
 800c67e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c682:	81a3      	strh	r3, [r4, #12]
 800c684:	f04f 30ff 	mov.w	r0, #4294967295
 800c688:	e78e      	b.n	800c5a8 <__sflush_r+0x1c>
 800c68a:	4407      	add	r7, r0
 800c68c:	eba8 0800 	sub.w	r8, r8, r0
 800c690:	e7e9      	b.n	800c666 <__sflush_r+0xda>
 800c692:	bf00      	nop
 800c694:	20400001 	.word	0x20400001

0800c698 <_fflush_r>:
 800c698:	b538      	push	{r3, r4, r5, lr}
 800c69a:	690b      	ldr	r3, [r1, #16]
 800c69c:	4605      	mov	r5, r0
 800c69e:	460c      	mov	r4, r1
 800c6a0:	b913      	cbnz	r3, 800c6a8 <_fflush_r+0x10>
 800c6a2:	2500      	movs	r5, #0
 800c6a4:	4628      	mov	r0, r5
 800c6a6:	bd38      	pop	{r3, r4, r5, pc}
 800c6a8:	b118      	cbz	r0, 800c6b2 <_fflush_r+0x1a>
 800c6aa:	6983      	ldr	r3, [r0, #24]
 800c6ac:	b90b      	cbnz	r3, 800c6b2 <_fflush_r+0x1a>
 800c6ae:	f7fe f8bb 	bl	800a828 <__sinit>
 800c6b2:	4b14      	ldr	r3, [pc, #80]	; (800c704 <_fflush_r+0x6c>)
 800c6b4:	429c      	cmp	r4, r3
 800c6b6:	d11b      	bne.n	800c6f0 <_fflush_r+0x58>
 800c6b8:	686c      	ldr	r4, [r5, #4]
 800c6ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d0ef      	beq.n	800c6a2 <_fflush_r+0xa>
 800c6c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c6c4:	07d0      	lsls	r0, r2, #31
 800c6c6:	d404      	bmi.n	800c6d2 <_fflush_r+0x3a>
 800c6c8:	0599      	lsls	r1, r3, #22
 800c6ca:	d402      	bmi.n	800c6d2 <_fflush_r+0x3a>
 800c6cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c6ce:	f7fe f96e 	bl	800a9ae <__retarget_lock_acquire_recursive>
 800c6d2:	4628      	mov	r0, r5
 800c6d4:	4621      	mov	r1, r4
 800c6d6:	f7ff ff59 	bl	800c58c <__sflush_r>
 800c6da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c6dc:	07da      	lsls	r2, r3, #31
 800c6de:	4605      	mov	r5, r0
 800c6e0:	d4e0      	bmi.n	800c6a4 <_fflush_r+0xc>
 800c6e2:	89a3      	ldrh	r3, [r4, #12]
 800c6e4:	059b      	lsls	r3, r3, #22
 800c6e6:	d4dd      	bmi.n	800c6a4 <_fflush_r+0xc>
 800c6e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c6ea:	f7fe f961 	bl	800a9b0 <__retarget_lock_release_recursive>
 800c6ee:	e7d9      	b.n	800c6a4 <_fflush_r+0xc>
 800c6f0:	4b05      	ldr	r3, [pc, #20]	; (800c708 <_fflush_r+0x70>)
 800c6f2:	429c      	cmp	r4, r3
 800c6f4:	d101      	bne.n	800c6fa <_fflush_r+0x62>
 800c6f6:	68ac      	ldr	r4, [r5, #8]
 800c6f8:	e7df      	b.n	800c6ba <_fflush_r+0x22>
 800c6fa:	4b04      	ldr	r3, [pc, #16]	; (800c70c <_fflush_r+0x74>)
 800c6fc:	429c      	cmp	r4, r3
 800c6fe:	bf08      	it	eq
 800c700:	68ec      	ldreq	r4, [r5, #12]
 800c702:	e7da      	b.n	800c6ba <_fflush_r+0x22>
 800c704:	0800f130 	.word	0x0800f130
 800c708:	0800f150 	.word	0x0800f150
 800c70c:	0800f110 	.word	0x0800f110

0800c710 <_localeconv_r>:
 800c710:	4800      	ldr	r0, [pc, #0]	; (800c714 <_localeconv_r+0x4>)
 800c712:	4770      	bx	lr
 800c714:	200001b4 	.word	0x200001b4

0800c718 <_lseek_r>:
 800c718:	b538      	push	{r3, r4, r5, lr}
 800c71a:	4d07      	ldr	r5, [pc, #28]	; (800c738 <_lseek_r+0x20>)
 800c71c:	4604      	mov	r4, r0
 800c71e:	4608      	mov	r0, r1
 800c720:	4611      	mov	r1, r2
 800c722:	2200      	movs	r2, #0
 800c724:	602a      	str	r2, [r5, #0]
 800c726:	461a      	mov	r2, r3
 800c728:	f7f7 fa5c 	bl	8003be4 <_lseek>
 800c72c:	1c43      	adds	r3, r0, #1
 800c72e:	d102      	bne.n	800c736 <_lseek_r+0x1e>
 800c730:	682b      	ldr	r3, [r5, #0]
 800c732:	b103      	cbz	r3, 800c736 <_lseek_r+0x1e>
 800c734:	6023      	str	r3, [r4, #0]
 800c736:	bd38      	pop	{r3, r4, r5, pc}
 800c738:	2000449c 	.word	0x2000449c

0800c73c <__swhatbuf_r>:
 800c73c:	b570      	push	{r4, r5, r6, lr}
 800c73e:	460e      	mov	r6, r1
 800c740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c744:	2900      	cmp	r1, #0
 800c746:	b096      	sub	sp, #88	; 0x58
 800c748:	4614      	mov	r4, r2
 800c74a:	461d      	mov	r5, r3
 800c74c:	da08      	bge.n	800c760 <__swhatbuf_r+0x24>
 800c74e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c752:	2200      	movs	r2, #0
 800c754:	602a      	str	r2, [r5, #0]
 800c756:	061a      	lsls	r2, r3, #24
 800c758:	d410      	bmi.n	800c77c <__swhatbuf_r+0x40>
 800c75a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c75e:	e00e      	b.n	800c77e <__swhatbuf_r+0x42>
 800c760:	466a      	mov	r2, sp
 800c762:	f000 ff43 	bl	800d5ec <_fstat_r>
 800c766:	2800      	cmp	r0, #0
 800c768:	dbf1      	blt.n	800c74e <__swhatbuf_r+0x12>
 800c76a:	9a01      	ldr	r2, [sp, #4]
 800c76c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c770:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c774:	425a      	negs	r2, r3
 800c776:	415a      	adcs	r2, r3
 800c778:	602a      	str	r2, [r5, #0]
 800c77a:	e7ee      	b.n	800c75a <__swhatbuf_r+0x1e>
 800c77c:	2340      	movs	r3, #64	; 0x40
 800c77e:	2000      	movs	r0, #0
 800c780:	6023      	str	r3, [r4, #0]
 800c782:	b016      	add	sp, #88	; 0x58
 800c784:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c788 <__smakebuf_r>:
 800c788:	898b      	ldrh	r3, [r1, #12]
 800c78a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c78c:	079d      	lsls	r5, r3, #30
 800c78e:	4606      	mov	r6, r0
 800c790:	460c      	mov	r4, r1
 800c792:	d507      	bpl.n	800c7a4 <__smakebuf_r+0x1c>
 800c794:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c798:	6023      	str	r3, [r4, #0]
 800c79a:	6123      	str	r3, [r4, #16]
 800c79c:	2301      	movs	r3, #1
 800c79e:	6163      	str	r3, [r4, #20]
 800c7a0:	b002      	add	sp, #8
 800c7a2:	bd70      	pop	{r4, r5, r6, pc}
 800c7a4:	ab01      	add	r3, sp, #4
 800c7a6:	466a      	mov	r2, sp
 800c7a8:	f7ff ffc8 	bl	800c73c <__swhatbuf_r>
 800c7ac:	9900      	ldr	r1, [sp, #0]
 800c7ae:	4605      	mov	r5, r0
 800c7b0:	4630      	mov	r0, r6
 800c7b2:	f7fe f935 	bl	800aa20 <_malloc_r>
 800c7b6:	b948      	cbnz	r0, 800c7cc <__smakebuf_r+0x44>
 800c7b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7bc:	059a      	lsls	r2, r3, #22
 800c7be:	d4ef      	bmi.n	800c7a0 <__smakebuf_r+0x18>
 800c7c0:	f023 0303 	bic.w	r3, r3, #3
 800c7c4:	f043 0302 	orr.w	r3, r3, #2
 800c7c8:	81a3      	strh	r3, [r4, #12]
 800c7ca:	e7e3      	b.n	800c794 <__smakebuf_r+0xc>
 800c7cc:	4b0d      	ldr	r3, [pc, #52]	; (800c804 <__smakebuf_r+0x7c>)
 800c7ce:	62b3      	str	r3, [r6, #40]	; 0x28
 800c7d0:	89a3      	ldrh	r3, [r4, #12]
 800c7d2:	6020      	str	r0, [r4, #0]
 800c7d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c7d8:	81a3      	strh	r3, [r4, #12]
 800c7da:	9b00      	ldr	r3, [sp, #0]
 800c7dc:	6163      	str	r3, [r4, #20]
 800c7de:	9b01      	ldr	r3, [sp, #4]
 800c7e0:	6120      	str	r0, [r4, #16]
 800c7e2:	b15b      	cbz	r3, 800c7fc <__smakebuf_r+0x74>
 800c7e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7e8:	4630      	mov	r0, r6
 800c7ea:	f000 ff11 	bl	800d610 <_isatty_r>
 800c7ee:	b128      	cbz	r0, 800c7fc <__smakebuf_r+0x74>
 800c7f0:	89a3      	ldrh	r3, [r4, #12]
 800c7f2:	f023 0303 	bic.w	r3, r3, #3
 800c7f6:	f043 0301 	orr.w	r3, r3, #1
 800c7fa:	81a3      	strh	r3, [r4, #12]
 800c7fc:	89a0      	ldrh	r0, [r4, #12]
 800c7fe:	4305      	orrs	r5, r0
 800c800:	81a5      	strh	r5, [r4, #12]
 800c802:	e7cd      	b.n	800c7a0 <__smakebuf_r+0x18>
 800c804:	0800a7c1 	.word	0x0800a7c1

0800c808 <malloc>:
 800c808:	4b02      	ldr	r3, [pc, #8]	; (800c814 <malloc+0xc>)
 800c80a:	4601      	mov	r1, r0
 800c80c:	6818      	ldr	r0, [r3, #0]
 800c80e:	f7fe b907 	b.w	800aa20 <_malloc_r>
 800c812:	bf00      	nop
 800c814:	20000060 	.word	0x20000060

0800c818 <__malloc_lock>:
 800c818:	4801      	ldr	r0, [pc, #4]	; (800c820 <__malloc_lock+0x8>)
 800c81a:	f7fe b8c8 	b.w	800a9ae <__retarget_lock_acquire_recursive>
 800c81e:	bf00      	nop
 800c820:	20004490 	.word	0x20004490

0800c824 <__malloc_unlock>:
 800c824:	4801      	ldr	r0, [pc, #4]	; (800c82c <__malloc_unlock+0x8>)
 800c826:	f7fe b8c3 	b.w	800a9b0 <__retarget_lock_release_recursive>
 800c82a:	bf00      	nop
 800c82c:	20004490 	.word	0x20004490

0800c830 <_Balloc>:
 800c830:	b570      	push	{r4, r5, r6, lr}
 800c832:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c834:	4604      	mov	r4, r0
 800c836:	460d      	mov	r5, r1
 800c838:	b976      	cbnz	r6, 800c858 <_Balloc+0x28>
 800c83a:	2010      	movs	r0, #16
 800c83c:	f7ff ffe4 	bl	800c808 <malloc>
 800c840:	4602      	mov	r2, r0
 800c842:	6260      	str	r0, [r4, #36]	; 0x24
 800c844:	b920      	cbnz	r0, 800c850 <_Balloc+0x20>
 800c846:	4b18      	ldr	r3, [pc, #96]	; (800c8a8 <_Balloc+0x78>)
 800c848:	4818      	ldr	r0, [pc, #96]	; (800c8ac <_Balloc+0x7c>)
 800c84a:	2166      	movs	r1, #102	; 0x66
 800c84c:	f000 fe9e 	bl	800d58c <__assert_func>
 800c850:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c854:	6006      	str	r6, [r0, #0]
 800c856:	60c6      	str	r6, [r0, #12]
 800c858:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c85a:	68f3      	ldr	r3, [r6, #12]
 800c85c:	b183      	cbz	r3, 800c880 <_Balloc+0x50>
 800c85e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c860:	68db      	ldr	r3, [r3, #12]
 800c862:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c866:	b9b8      	cbnz	r0, 800c898 <_Balloc+0x68>
 800c868:	2101      	movs	r1, #1
 800c86a:	fa01 f605 	lsl.w	r6, r1, r5
 800c86e:	1d72      	adds	r2, r6, #5
 800c870:	0092      	lsls	r2, r2, #2
 800c872:	4620      	mov	r0, r4
 800c874:	f000 fb60 	bl	800cf38 <_calloc_r>
 800c878:	b160      	cbz	r0, 800c894 <_Balloc+0x64>
 800c87a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c87e:	e00e      	b.n	800c89e <_Balloc+0x6e>
 800c880:	2221      	movs	r2, #33	; 0x21
 800c882:	2104      	movs	r1, #4
 800c884:	4620      	mov	r0, r4
 800c886:	f000 fb57 	bl	800cf38 <_calloc_r>
 800c88a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c88c:	60f0      	str	r0, [r6, #12]
 800c88e:	68db      	ldr	r3, [r3, #12]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d1e4      	bne.n	800c85e <_Balloc+0x2e>
 800c894:	2000      	movs	r0, #0
 800c896:	bd70      	pop	{r4, r5, r6, pc}
 800c898:	6802      	ldr	r2, [r0, #0]
 800c89a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c89e:	2300      	movs	r3, #0
 800c8a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c8a4:	e7f7      	b.n	800c896 <_Balloc+0x66>
 800c8a6:	bf00      	nop
 800c8a8:	0800f1b5 	.word	0x0800f1b5
 800c8ac:	0800f238 	.word	0x0800f238

0800c8b0 <_Bfree>:
 800c8b0:	b570      	push	{r4, r5, r6, lr}
 800c8b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c8b4:	4605      	mov	r5, r0
 800c8b6:	460c      	mov	r4, r1
 800c8b8:	b976      	cbnz	r6, 800c8d8 <_Bfree+0x28>
 800c8ba:	2010      	movs	r0, #16
 800c8bc:	f7ff ffa4 	bl	800c808 <malloc>
 800c8c0:	4602      	mov	r2, r0
 800c8c2:	6268      	str	r0, [r5, #36]	; 0x24
 800c8c4:	b920      	cbnz	r0, 800c8d0 <_Bfree+0x20>
 800c8c6:	4b09      	ldr	r3, [pc, #36]	; (800c8ec <_Bfree+0x3c>)
 800c8c8:	4809      	ldr	r0, [pc, #36]	; (800c8f0 <_Bfree+0x40>)
 800c8ca:	218a      	movs	r1, #138	; 0x8a
 800c8cc:	f000 fe5e 	bl	800d58c <__assert_func>
 800c8d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c8d4:	6006      	str	r6, [r0, #0]
 800c8d6:	60c6      	str	r6, [r0, #12]
 800c8d8:	b13c      	cbz	r4, 800c8ea <_Bfree+0x3a>
 800c8da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c8dc:	6862      	ldr	r2, [r4, #4]
 800c8de:	68db      	ldr	r3, [r3, #12]
 800c8e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c8e4:	6021      	str	r1, [r4, #0]
 800c8e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c8ea:	bd70      	pop	{r4, r5, r6, pc}
 800c8ec:	0800f1b5 	.word	0x0800f1b5
 800c8f0:	0800f238 	.word	0x0800f238

0800c8f4 <__multadd>:
 800c8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8f8:	690d      	ldr	r5, [r1, #16]
 800c8fa:	4607      	mov	r7, r0
 800c8fc:	460c      	mov	r4, r1
 800c8fe:	461e      	mov	r6, r3
 800c900:	f101 0c14 	add.w	ip, r1, #20
 800c904:	2000      	movs	r0, #0
 800c906:	f8dc 3000 	ldr.w	r3, [ip]
 800c90a:	b299      	uxth	r1, r3
 800c90c:	fb02 6101 	mla	r1, r2, r1, r6
 800c910:	0c1e      	lsrs	r6, r3, #16
 800c912:	0c0b      	lsrs	r3, r1, #16
 800c914:	fb02 3306 	mla	r3, r2, r6, r3
 800c918:	b289      	uxth	r1, r1
 800c91a:	3001      	adds	r0, #1
 800c91c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c920:	4285      	cmp	r5, r0
 800c922:	f84c 1b04 	str.w	r1, [ip], #4
 800c926:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c92a:	dcec      	bgt.n	800c906 <__multadd+0x12>
 800c92c:	b30e      	cbz	r6, 800c972 <__multadd+0x7e>
 800c92e:	68a3      	ldr	r3, [r4, #8]
 800c930:	42ab      	cmp	r3, r5
 800c932:	dc19      	bgt.n	800c968 <__multadd+0x74>
 800c934:	6861      	ldr	r1, [r4, #4]
 800c936:	4638      	mov	r0, r7
 800c938:	3101      	adds	r1, #1
 800c93a:	f7ff ff79 	bl	800c830 <_Balloc>
 800c93e:	4680      	mov	r8, r0
 800c940:	b928      	cbnz	r0, 800c94e <__multadd+0x5a>
 800c942:	4602      	mov	r2, r0
 800c944:	4b0c      	ldr	r3, [pc, #48]	; (800c978 <__multadd+0x84>)
 800c946:	480d      	ldr	r0, [pc, #52]	; (800c97c <__multadd+0x88>)
 800c948:	21b5      	movs	r1, #181	; 0xb5
 800c94a:	f000 fe1f 	bl	800d58c <__assert_func>
 800c94e:	6922      	ldr	r2, [r4, #16]
 800c950:	3202      	adds	r2, #2
 800c952:	f104 010c 	add.w	r1, r4, #12
 800c956:	0092      	lsls	r2, r2, #2
 800c958:	300c      	adds	r0, #12
 800c95a:	f7fe f82a 	bl	800a9b2 <memcpy>
 800c95e:	4621      	mov	r1, r4
 800c960:	4638      	mov	r0, r7
 800c962:	f7ff ffa5 	bl	800c8b0 <_Bfree>
 800c966:	4644      	mov	r4, r8
 800c968:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c96c:	3501      	adds	r5, #1
 800c96e:	615e      	str	r6, [r3, #20]
 800c970:	6125      	str	r5, [r4, #16]
 800c972:	4620      	mov	r0, r4
 800c974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c978:	0800f227 	.word	0x0800f227
 800c97c:	0800f238 	.word	0x0800f238

0800c980 <__hi0bits>:
 800c980:	0c03      	lsrs	r3, r0, #16
 800c982:	041b      	lsls	r3, r3, #16
 800c984:	b9d3      	cbnz	r3, 800c9bc <__hi0bits+0x3c>
 800c986:	0400      	lsls	r0, r0, #16
 800c988:	2310      	movs	r3, #16
 800c98a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c98e:	bf04      	itt	eq
 800c990:	0200      	lsleq	r0, r0, #8
 800c992:	3308      	addeq	r3, #8
 800c994:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c998:	bf04      	itt	eq
 800c99a:	0100      	lsleq	r0, r0, #4
 800c99c:	3304      	addeq	r3, #4
 800c99e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c9a2:	bf04      	itt	eq
 800c9a4:	0080      	lsleq	r0, r0, #2
 800c9a6:	3302      	addeq	r3, #2
 800c9a8:	2800      	cmp	r0, #0
 800c9aa:	db05      	blt.n	800c9b8 <__hi0bits+0x38>
 800c9ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c9b0:	f103 0301 	add.w	r3, r3, #1
 800c9b4:	bf08      	it	eq
 800c9b6:	2320      	moveq	r3, #32
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	4770      	bx	lr
 800c9bc:	2300      	movs	r3, #0
 800c9be:	e7e4      	b.n	800c98a <__hi0bits+0xa>

0800c9c0 <__lo0bits>:
 800c9c0:	6803      	ldr	r3, [r0, #0]
 800c9c2:	f013 0207 	ands.w	r2, r3, #7
 800c9c6:	4601      	mov	r1, r0
 800c9c8:	d00b      	beq.n	800c9e2 <__lo0bits+0x22>
 800c9ca:	07da      	lsls	r2, r3, #31
 800c9cc:	d423      	bmi.n	800ca16 <__lo0bits+0x56>
 800c9ce:	0798      	lsls	r0, r3, #30
 800c9d0:	bf49      	itett	mi
 800c9d2:	085b      	lsrmi	r3, r3, #1
 800c9d4:	089b      	lsrpl	r3, r3, #2
 800c9d6:	2001      	movmi	r0, #1
 800c9d8:	600b      	strmi	r3, [r1, #0]
 800c9da:	bf5c      	itt	pl
 800c9dc:	600b      	strpl	r3, [r1, #0]
 800c9de:	2002      	movpl	r0, #2
 800c9e0:	4770      	bx	lr
 800c9e2:	b298      	uxth	r0, r3
 800c9e4:	b9a8      	cbnz	r0, 800ca12 <__lo0bits+0x52>
 800c9e6:	0c1b      	lsrs	r3, r3, #16
 800c9e8:	2010      	movs	r0, #16
 800c9ea:	b2da      	uxtb	r2, r3
 800c9ec:	b90a      	cbnz	r2, 800c9f2 <__lo0bits+0x32>
 800c9ee:	3008      	adds	r0, #8
 800c9f0:	0a1b      	lsrs	r3, r3, #8
 800c9f2:	071a      	lsls	r2, r3, #28
 800c9f4:	bf04      	itt	eq
 800c9f6:	091b      	lsreq	r3, r3, #4
 800c9f8:	3004      	addeq	r0, #4
 800c9fa:	079a      	lsls	r2, r3, #30
 800c9fc:	bf04      	itt	eq
 800c9fe:	089b      	lsreq	r3, r3, #2
 800ca00:	3002      	addeq	r0, #2
 800ca02:	07da      	lsls	r2, r3, #31
 800ca04:	d403      	bmi.n	800ca0e <__lo0bits+0x4e>
 800ca06:	085b      	lsrs	r3, r3, #1
 800ca08:	f100 0001 	add.w	r0, r0, #1
 800ca0c:	d005      	beq.n	800ca1a <__lo0bits+0x5a>
 800ca0e:	600b      	str	r3, [r1, #0]
 800ca10:	4770      	bx	lr
 800ca12:	4610      	mov	r0, r2
 800ca14:	e7e9      	b.n	800c9ea <__lo0bits+0x2a>
 800ca16:	2000      	movs	r0, #0
 800ca18:	4770      	bx	lr
 800ca1a:	2020      	movs	r0, #32
 800ca1c:	4770      	bx	lr
	...

0800ca20 <__i2b>:
 800ca20:	b510      	push	{r4, lr}
 800ca22:	460c      	mov	r4, r1
 800ca24:	2101      	movs	r1, #1
 800ca26:	f7ff ff03 	bl	800c830 <_Balloc>
 800ca2a:	4602      	mov	r2, r0
 800ca2c:	b928      	cbnz	r0, 800ca3a <__i2b+0x1a>
 800ca2e:	4b05      	ldr	r3, [pc, #20]	; (800ca44 <__i2b+0x24>)
 800ca30:	4805      	ldr	r0, [pc, #20]	; (800ca48 <__i2b+0x28>)
 800ca32:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ca36:	f000 fda9 	bl	800d58c <__assert_func>
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	6144      	str	r4, [r0, #20]
 800ca3e:	6103      	str	r3, [r0, #16]
 800ca40:	bd10      	pop	{r4, pc}
 800ca42:	bf00      	nop
 800ca44:	0800f227 	.word	0x0800f227
 800ca48:	0800f238 	.word	0x0800f238

0800ca4c <__multiply>:
 800ca4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca50:	4691      	mov	r9, r2
 800ca52:	690a      	ldr	r2, [r1, #16]
 800ca54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ca58:	429a      	cmp	r2, r3
 800ca5a:	bfb8      	it	lt
 800ca5c:	460b      	movlt	r3, r1
 800ca5e:	460c      	mov	r4, r1
 800ca60:	bfbc      	itt	lt
 800ca62:	464c      	movlt	r4, r9
 800ca64:	4699      	movlt	r9, r3
 800ca66:	6927      	ldr	r7, [r4, #16]
 800ca68:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ca6c:	68a3      	ldr	r3, [r4, #8]
 800ca6e:	6861      	ldr	r1, [r4, #4]
 800ca70:	eb07 060a 	add.w	r6, r7, sl
 800ca74:	42b3      	cmp	r3, r6
 800ca76:	b085      	sub	sp, #20
 800ca78:	bfb8      	it	lt
 800ca7a:	3101      	addlt	r1, #1
 800ca7c:	f7ff fed8 	bl	800c830 <_Balloc>
 800ca80:	b930      	cbnz	r0, 800ca90 <__multiply+0x44>
 800ca82:	4602      	mov	r2, r0
 800ca84:	4b44      	ldr	r3, [pc, #272]	; (800cb98 <__multiply+0x14c>)
 800ca86:	4845      	ldr	r0, [pc, #276]	; (800cb9c <__multiply+0x150>)
 800ca88:	f240 115d 	movw	r1, #349	; 0x15d
 800ca8c:	f000 fd7e 	bl	800d58c <__assert_func>
 800ca90:	f100 0514 	add.w	r5, r0, #20
 800ca94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ca98:	462b      	mov	r3, r5
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	4543      	cmp	r3, r8
 800ca9e:	d321      	bcc.n	800cae4 <__multiply+0x98>
 800caa0:	f104 0314 	add.w	r3, r4, #20
 800caa4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800caa8:	f109 0314 	add.w	r3, r9, #20
 800caac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cab0:	9202      	str	r2, [sp, #8]
 800cab2:	1b3a      	subs	r2, r7, r4
 800cab4:	3a15      	subs	r2, #21
 800cab6:	f022 0203 	bic.w	r2, r2, #3
 800caba:	3204      	adds	r2, #4
 800cabc:	f104 0115 	add.w	r1, r4, #21
 800cac0:	428f      	cmp	r7, r1
 800cac2:	bf38      	it	cc
 800cac4:	2204      	movcc	r2, #4
 800cac6:	9201      	str	r2, [sp, #4]
 800cac8:	9a02      	ldr	r2, [sp, #8]
 800caca:	9303      	str	r3, [sp, #12]
 800cacc:	429a      	cmp	r2, r3
 800cace:	d80c      	bhi.n	800caea <__multiply+0x9e>
 800cad0:	2e00      	cmp	r6, #0
 800cad2:	dd03      	ble.n	800cadc <__multiply+0x90>
 800cad4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d05a      	beq.n	800cb92 <__multiply+0x146>
 800cadc:	6106      	str	r6, [r0, #16]
 800cade:	b005      	add	sp, #20
 800cae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cae4:	f843 2b04 	str.w	r2, [r3], #4
 800cae8:	e7d8      	b.n	800ca9c <__multiply+0x50>
 800caea:	f8b3 a000 	ldrh.w	sl, [r3]
 800caee:	f1ba 0f00 	cmp.w	sl, #0
 800caf2:	d024      	beq.n	800cb3e <__multiply+0xf2>
 800caf4:	f104 0e14 	add.w	lr, r4, #20
 800caf8:	46a9      	mov	r9, r5
 800cafa:	f04f 0c00 	mov.w	ip, #0
 800cafe:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cb02:	f8d9 1000 	ldr.w	r1, [r9]
 800cb06:	fa1f fb82 	uxth.w	fp, r2
 800cb0a:	b289      	uxth	r1, r1
 800cb0c:	fb0a 110b 	mla	r1, sl, fp, r1
 800cb10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cb14:	f8d9 2000 	ldr.w	r2, [r9]
 800cb18:	4461      	add	r1, ip
 800cb1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cb1e:	fb0a c20b 	mla	r2, sl, fp, ip
 800cb22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cb26:	b289      	uxth	r1, r1
 800cb28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cb2c:	4577      	cmp	r7, lr
 800cb2e:	f849 1b04 	str.w	r1, [r9], #4
 800cb32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cb36:	d8e2      	bhi.n	800cafe <__multiply+0xb2>
 800cb38:	9a01      	ldr	r2, [sp, #4]
 800cb3a:	f845 c002 	str.w	ip, [r5, r2]
 800cb3e:	9a03      	ldr	r2, [sp, #12]
 800cb40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cb44:	3304      	adds	r3, #4
 800cb46:	f1b9 0f00 	cmp.w	r9, #0
 800cb4a:	d020      	beq.n	800cb8e <__multiply+0x142>
 800cb4c:	6829      	ldr	r1, [r5, #0]
 800cb4e:	f104 0c14 	add.w	ip, r4, #20
 800cb52:	46ae      	mov	lr, r5
 800cb54:	f04f 0a00 	mov.w	sl, #0
 800cb58:	f8bc b000 	ldrh.w	fp, [ip]
 800cb5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cb60:	fb09 220b 	mla	r2, r9, fp, r2
 800cb64:	4492      	add	sl, r2
 800cb66:	b289      	uxth	r1, r1
 800cb68:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cb6c:	f84e 1b04 	str.w	r1, [lr], #4
 800cb70:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cb74:	f8be 1000 	ldrh.w	r1, [lr]
 800cb78:	0c12      	lsrs	r2, r2, #16
 800cb7a:	fb09 1102 	mla	r1, r9, r2, r1
 800cb7e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800cb82:	4567      	cmp	r7, ip
 800cb84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cb88:	d8e6      	bhi.n	800cb58 <__multiply+0x10c>
 800cb8a:	9a01      	ldr	r2, [sp, #4]
 800cb8c:	50a9      	str	r1, [r5, r2]
 800cb8e:	3504      	adds	r5, #4
 800cb90:	e79a      	b.n	800cac8 <__multiply+0x7c>
 800cb92:	3e01      	subs	r6, #1
 800cb94:	e79c      	b.n	800cad0 <__multiply+0x84>
 800cb96:	bf00      	nop
 800cb98:	0800f227 	.word	0x0800f227
 800cb9c:	0800f238 	.word	0x0800f238

0800cba0 <__pow5mult>:
 800cba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cba4:	4615      	mov	r5, r2
 800cba6:	f012 0203 	ands.w	r2, r2, #3
 800cbaa:	4606      	mov	r6, r0
 800cbac:	460f      	mov	r7, r1
 800cbae:	d007      	beq.n	800cbc0 <__pow5mult+0x20>
 800cbb0:	4c25      	ldr	r4, [pc, #148]	; (800cc48 <__pow5mult+0xa8>)
 800cbb2:	3a01      	subs	r2, #1
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cbba:	f7ff fe9b 	bl	800c8f4 <__multadd>
 800cbbe:	4607      	mov	r7, r0
 800cbc0:	10ad      	asrs	r5, r5, #2
 800cbc2:	d03d      	beq.n	800cc40 <__pow5mult+0xa0>
 800cbc4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cbc6:	b97c      	cbnz	r4, 800cbe8 <__pow5mult+0x48>
 800cbc8:	2010      	movs	r0, #16
 800cbca:	f7ff fe1d 	bl	800c808 <malloc>
 800cbce:	4602      	mov	r2, r0
 800cbd0:	6270      	str	r0, [r6, #36]	; 0x24
 800cbd2:	b928      	cbnz	r0, 800cbe0 <__pow5mult+0x40>
 800cbd4:	4b1d      	ldr	r3, [pc, #116]	; (800cc4c <__pow5mult+0xac>)
 800cbd6:	481e      	ldr	r0, [pc, #120]	; (800cc50 <__pow5mult+0xb0>)
 800cbd8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cbdc:	f000 fcd6 	bl	800d58c <__assert_func>
 800cbe0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cbe4:	6004      	str	r4, [r0, #0]
 800cbe6:	60c4      	str	r4, [r0, #12]
 800cbe8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cbec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cbf0:	b94c      	cbnz	r4, 800cc06 <__pow5mult+0x66>
 800cbf2:	f240 2171 	movw	r1, #625	; 0x271
 800cbf6:	4630      	mov	r0, r6
 800cbf8:	f7ff ff12 	bl	800ca20 <__i2b>
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	f8c8 0008 	str.w	r0, [r8, #8]
 800cc02:	4604      	mov	r4, r0
 800cc04:	6003      	str	r3, [r0, #0]
 800cc06:	f04f 0900 	mov.w	r9, #0
 800cc0a:	07eb      	lsls	r3, r5, #31
 800cc0c:	d50a      	bpl.n	800cc24 <__pow5mult+0x84>
 800cc0e:	4639      	mov	r1, r7
 800cc10:	4622      	mov	r2, r4
 800cc12:	4630      	mov	r0, r6
 800cc14:	f7ff ff1a 	bl	800ca4c <__multiply>
 800cc18:	4639      	mov	r1, r7
 800cc1a:	4680      	mov	r8, r0
 800cc1c:	4630      	mov	r0, r6
 800cc1e:	f7ff fe47 	bl	800c8b0 <_Bfree>
 800cc22:	4647      	mov	r7, r8
 800cc24:	106d      	asrs	r5, r5, #1
 800cc26:	d00b      	beq.n	800cc40 <__pow5mult+0xa0>
 800cc28:	6820      	ldr	r0, [r4, #0]
 800cc2a:	b938      	cbnz	r0, 800cc3c <__pow5mult+0x9c>
 800cc2c:	4622      	mov	r2, r4
 800cc2e:	4621      	mov	r1, r4
 800cc30:	4630      	mov	r0, r6
 800cc32:	f7ff ff0b 	bl	800ca4c <__multiply>
 800cc36:	6020      	str	r0, [r4, #0]
 800cc38:	f8c0 9000 	str.w	r9, [r0]
 800cc3c:	4604      	mov	r4, r0
 800cc3e:	e7e4      	b.n	800cc0a <__pow5mult+0x6a>
 800cc40:	4638      	mov	r0, r7
 800cc42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc46:	bf00      	nop
 800cc48:	0800f388 	.word	0x0800f388
 800cc4c:	0800f1b5 	.word	0x0800f1b5
 800cc50:	0800f238 	.word	0x0800f238

0800cc54 <__lshift>:
 800cc54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc58:	460c      	mov	r4, r1
 800cc5a:	6849      	ldr	r1, [r1, #4]
 800cc5c:	6923      	ldr	r3, [r4, #16]
 800cc5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cc62:	68a3      	ldr	r3, [r4, #8]
 800cc64:	4607      	mov	r7, r0
 800cc66:	4691      	mov	r9, r2
 800cc68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cc6c:	f108 0601 	add.w	r6, r8, #1
 800cc70:	42b3      	cmp	r3, r6
 800cc72:	db0b      	blt.n	800cc8c <__lshift+0x38>
 800cc74:	4638      	mov	r0, r7
 800cc76:	f7ff fddb 	bl	800c830 <_Balloc>
 800cc7a:	4605      	mov	r5, r0
 800cc7c:	b948      	cbnz	r0, 800cc92 <__lshift+0x3e>
 800cc7e:	4602      	mov	r2, r0
 800cc80:	4b2a      	ldr	r3, [pc, #168]	; (800cd2c <__lshift+0xd8>)
 800cc82:	482b      	ldr	r0, [pc, #172]	; (800cd30 <__lshift+0xdc>)
 800cc84:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cc88:	f000 fc80 	bl	800d58c <__assert_func>
 800cc8c:	3101      	adds	r1, #1
 800cc8e:	005b      	lsls	r3, r3, #1
 800cc90:	e7ee      	b.n	800cc70 <__lshift+0x1c>
 800cc92:	2300      	movs	r3, #0
 800cc94:	f100 0114 	add.w	r1, r0, #20
 800cc98:	f100 0210 	add.w	r2, r0, #16
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	4553      	cmp	r3, sl
 800cca0:	db37      	blt.n	800cd12 <__lshift+0xbe>
 800cca2:	6920      	ldr	r0, [r4, #16]
 800cca4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cca8:	f104 0314 	add.w	r3, r4, #20
 800ccac:	f019 091f 	ands.w	r9, r9, #31
 800ccb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ccb4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ccb8:	d02f      	beq.n	800cd1a <__lshift+0xc6>
 800ccba:	f1c9 0e20 	rsb	lr, r9, #32
 800ccbe:	468a      	mov	sl, r1
 800ccc0:	f04f 0c00 	mov.w	ip, #0
 800ccc4:	681a      	ldr	r2, [r3, #0]
 800ccc6:	fa02 f209 	lsl.w	r2, r2, r9
 800ccca:	ea42 020c 	orr.w	r2, r2, ip
 800ccce:	f84a 2b04 	str.w	r2, [sl], #4
 800ccd2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccd6:	4298      	cmp	r0, r3
 800ccd8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ccdc:	d8f2      	bhi.n	800ccc4 <__lshift+0x70>
 800ccde:	1b03      	subs	r3, r0, r4
 800cce0:	3b15      	subs	r3, #21
 800cce2:	f023 0303 	bic.w	r3, r3, #3
 800cce6:	3304      	adds	r3, #4
 800cce8:	f104 0215 	add.w	r2, r4, #21
 800ccec:	4290      	cmp	r0, r2
 800ccee:	bf38      	it	cc
 800ccf0:	2304      	movcc	r3, #4
 800ccf2:	f841 c003 	str.w	ip, [r1, r3]
 800ccf6:	f1bc 0f00 	cmp.w	ip, #0
 800ccfa:	d001      	beq.n	800cd00 <__lshift+0xac>
 800ccfc:	f108 0602 	add.w	r6, r8, #2
 800cd00:	3e01      	subs	r6, #1
 800cd02:	4638      	mov	r0, r7
 800cd04:	612e      	str	r6, [r5, #16]
 800cd06:	4621      	mov	r1, r4
 800cd08:	f7ff fdd2 	bl	800c8b0 <_Bfree>
 800cd0c:	4628      	mov	r0, r5
 800cd0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd12:	f842 0f04 	str.w	r0, [r2, #4]!
 800cd16:	3301      	adds	r3, #1
 800cd18:	e7c1      	b.n	800cc9e <__lshift+0x4a>
 800cd1a:	3904      	subs	r1, #4
 800cd1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd20:	f841 2f04 	str.w	r2, [r1, #4]!
 800cd24:	4298      	cmp	r0, r3
 800cd26:	d8f9      	bhi.n	800cd1c <__lshift+0xc8>
 800cd28:	e7ea      	b.n	800cd00 <__lshift+0xac>
 800cd2a:	bf00      	nop
 800cd2c:	0800f227 	.word	0x0800f227
 800cd30:	0800f238 	.word	0x0800f238

0800cd34 <__mcmp>:
 800cd34:	b530      	push	{r4, r5, lr}
 800cd36:	6902      	ldr	r2, [r0, #16]
 800cd38:	690c      	ldr	r4, [r1, #16]
 800cd3a:	1b12      	subs	r2, r2, r4
 800cd3c:	d10e      	bne.n	800cd5c <__mcmp+0x28>
 800cd3e:	f100 0314 	add.w	r3, r0, #20
 800cd42:	3114      	adds	r1, #20
 800cd44:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cd48:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cd4c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cd50:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cd54:	42a5      	cmp	r5, r4
 800cd56:	d003      	beq.n	800cd60 <__mcmp+0x2c>
 800cd58:	d305      	bcc.n	800cd66 <__mcmp+0x32>
 800cd5a:	2201      	movs	r2, #1
 800cd5c:	4610      	mov	r0, r2
 800cd5e:	bd30      	pop	{r4, r5, pc}
 800cd60:	4283      	cmp	r3, r0
 800cd62:	d3f3      	bcc.n	800cd4c <__mcmp+0x18>
 800cd64:	e7fa      	b.n	800cd5c <__mcmp+0x28>
 800cd66:	f04f 32ff 	mov.w	r2, #4294967295
 800cd6a:	e7f7      	b.n	800cd5c <__mcmp+0x28>

0800cd6c <__mdiff>:
 800cd6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd70:	460c      	mov	r4, r1
 800cd72:	4606      	mov	r6, r0
 800cd74:	4611      	mov	r1, r2
 800cd76:	4620      	mov	r0, r4
 800cd78:	4690      	mov	r8, r2
 800cd7a:	f7ff ffdb 	bl	800cd34 <__mcmp>
 800cd7e:	1e05      	subs	r5, r0, #0
 800cd80:	d110      	bne.n	800cda4 <__mdiff+0x38>
 800cd82:	4629      	mov	r1, r5
 800cd84:	4630      	mov	r0, r6
 800cd86:	f7ff fd53 	bl	800c830 <_Balloc>
 800cd8a:	b930      	cbnz	r0, 800cd9a <__mdiff+0x2e>
 800cd8c:	4b3a      	ldr	r3, [pc, #232]	; (800ce78 <__mdiff+0x10c>)
 800cd8e:	4602      	mov	r2, r0
 800cd90:	f240 2132 	movw	r1, #562	; 0x232
 800cd94:	4839      	ldr	r0, [pc, #228]	; (800ce7c <__mdiff+0x110>)
 800cd96:	f000 fbf9 	bl	800d58c <__assert_func>
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cda0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cda4:	bfa4      	itt	ge
 800cda6:	4643      	movge	r3, r8
 800cda8:	46a0      	movge	r8, r4
 800cdaa:	4630      	mov	r0, r6
 800cdac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cdb0:	bfa6      	itte	ge
 800cdb2:	461c      	movge	r4, r3
 800cdb4:	2500      	movge	r5, #0
 800cdb6:	2501      	movlt	r5, #1
 800cdb8:	f7ff fd3a 	bl	800c830 <_Balloc>
 800cdbc:	b920      	cbnz	r0, 800cdc8 <__mdiff+0x5c>
 800cdbe:	4b2e      	ldr	r3, [pc, #184]	; (800ce78 <__mdiff+0x10c>)
 800cdc0:	4602      	mov	r2, r0
 800cdc2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cdc6:	e7e5      	b.n	800cd94 <__mdiff+0x28>
 800cdc8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cdcc:	6926      	ldr	r6, [r4, #16]
 800cdce:	60c5      	str	r5, [r0, #12]
 800cdd0:	f104 0914 	add.w	r9, r4, #20
 800cdd4:	f108 0514 	add.w	r5, r8, #20
 800cdd8:	f100 0e14 	add.w	lr, r0, #20
 800cddc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cde0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cde4:	f108 0210 	add.w	r2, r8, #16
 800cde8:	46f2      	mov	sl, lr
 800cdea:	2100      	movs	r1, #0
 800cdec:	f859 3b04 	ldr.w	r3, [r9], #4
 800cdf0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cdf4:	fa1f f883 	uxth.w	r8, r3
 800cdf8:	fa11 f18b 	uxtah	r1, r1, fp
 800cdfc:	0c1b      	lsrs	r3, r3, #16
 800cdfe:	eba1 0808 	sub.w	r8, r1, r8
 800ce02:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ce06:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ce0a:	fa1f f888 	uxth.w	r8, r8
 800ce0e:	1419      	asrs	r1, r3, #16
 800ce10:	454e      	cmp	r6, r9
 800ce12:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ce16:	f84a 3b04 	str.w	r3, [sl], #4
 800ce1a:	d8e7      	bhi.n	800cdec <__mdiff+0x80>
 800ce1c:	1b33      	subs	r3, r6, r4
 800ce1e:	3b15      	subs	r3, #21
 800ce20:	f023 0303 	bic.w	r3, r3, #3
 800ce24:	3304      	adds	r3, #4
 800ce26:	3415      	adds	r4, #21
 800ce28:	42a6      	cmp	r6, r4
 800ce2a:	bf38      	it	cc
 800ce2c:	2304      	movcc	r3, #4
 800ce2e:	441d      	add	r5, r3
 800ce30:	4473      	add	r3, lr
 800ce32:	469e      	mov	lr, r3
 800ce34:	462e      	mov	r6, r5
 800ce36:	4566      	cmp	r6, ip
 800ce38:	d30e      	bcc.n	800ce58 <__mdiff+0xec>
 800ce3a:	f10c 0203 	add.w	r2, ip, #3
 800ce3e:	1b52      	subs	r2, r2, r5
 800ce40:	f022 0203 	bic.w	r2, r2, #3
 800ce44:	3d03      	subs	r5, #3
 800ce46:	45ac      	cmp	ip, r5
 800ce48:	bf38      	it	cc
 800ce4a:	2200      	movcc	r2, #0
 800ce4c:	441a      	add	r2, r3
 800ce4e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ce52:	b17b      	cbz	r3, 800ce74 <__mdiff+0x108>
 800ce54:	6107      	str	r7, [r0, #16]
 800ce56:	e7a3      	b.n	800cda0 <__mdiff+0x34>
 800ce58:	f856 8b04 	ldr.w	r8, [r6], #4
 800ce5c:	fa11 f288 	uxtah	r2, r1, r8
 800ce60:	1414      	asrs	r4, r2, #16
 800ce62:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ce66:	b292      	uxth	r2, r2
 800ce68:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ce6c:	f84e 2b04 	str.w	r2, [lr], #4
 800ce70:	1421      	asrs	r1, r4, #16
 800ce72:	e7e0      	b.n	800ce36 <__mdiff+0xca>
 800ce74:	3f01      	subs	r7, #1
 800ce76:	e7ea      	b.n	800ce4e <__mdiff+0xe2>
 800ce78:	0800f227 	.word	0x0800f227
 800ce7c:	0800f238 	.word	0x0800f238

0800ce80 <__d2b>:
 800ce80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ce84:	4689      	mov	r9, r1
 800ce86:	2101      	movs	r1, #1
 800ce88:	ec57 6b10 	vmov	r6, r7, d0
 800ce8c:	4690      	mov	r8, r2
 800ce8e:	f7ff fccf 	bl	800c830 <_Balloc>
 800ce92:	4604      	mov	r4, r0
 800ce94:	b930      	cbnz	r0, 800cea4 <__d2b+0x24>
 800ce96:	4602      	mov	r2, r0
 800ce98:	4b25      	ldr	r3, [pc, #148]	; (800cf30 <__d2b+0xb0>)
 800ce9a:	4826      	ldr	r0, [pc, #152]	; (800cf34 <__d2b+0xb4>)
 800ce9c:	f240 310a 	movw	r1, #778	; 0x30a
 800cea0:	f000 fb74 	bl	800d58c <__assert_func>
 800cea4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cea8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ceac:	bb35      	cbnz	r5, 800cefc <__d2b+0x7c>
 800ceae:	2e00      	cmp	r6, #0
 800ceb0:	9301      	str	r3, [sp, #4]
 800ceb2:	d028      	beq.n	800cf06 <__d2b+0x86>
 800ceb4:	4668      	mov	r0, sp
 800ceb6:	9600      	str	r6, [sp, #0]
 800ceb8:	f7ff fd82 	bl	800c9c0 <__lo0bits>
 800cebc:	9900      	ldr	r1, [sp, #0]
 800cebe:	b300      	cbz	r0, 800cf02 <__d2b+0x82>
 800cec0:	9a01      	ldr	r2, [sp, #4]
 800cec2:	f1c0 0320 	rsb	r3, r0, #32
 800cec6:	fa02 f303 	lsl.w	r3, r2, r3
 800ceca:	430b      	orrs	r3, r1
 800cecc:	40c2      	lsrs	r2, r0
 800cece:	6163      	str	r3, [r4, #20]
 800ced0:	9201      	str	r2, [sp, #4]
 800ced2:	9b01      	ldr	r3, [sp, #4]
 800ced4:	61a3      	str	r3, [r4, #24]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	bf14      	ite	ne
 800ceda:	2202      	movne	r2, #2
 800cedc:	2201      	moveq	r2, #1
 800cede:	6122      	str	r2, [r4, #16]
 800cee0:	b1d5      	cbz	r5, 800cf18 <__d2b+0x98>
 800cee2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cee6:	4405      	add	r5, r0
 800cee8:	f8c9 5000 	str.w	r5, [r9]
 800ceec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cef0:	f8c8 0000 	str.w	r0, [r8]
 800cef4:	4620      	mov	r0, r4
 800cef6:	b003      	add	sp, #12
 800cef8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cefc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cf00:	e7d5      	b.n	800ceae <__d2b+0x2e>
 800cf02:	6161      	str	r1, [r4, #20]
 800cf04:	e7e5      	b.n	800ced2 <__d2b+0x52>
 800cf06:	a801      	add	r0, sp, #4
 800cf08:	f7ff fd5a 	bl	800c9c0 <__lo0bits>
 800cf0c:	9b01      	ldr	r3, [sp, #4]
 800cf0e:	6163      	str	r3, [r4, #20]
 800cf10:	2201      	movs	r2, #1
 800cf12:	6122      	str	r2, [r4, #16]
 800cf14:	3020      	adds	r0, #32
 800cf16:	e7e3      	b.n	800cee0 <__d2b+0x60>
 800cf18:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cf1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cf20:	f8c9 0000 	str.w	r0, [r9]
 800cf24:	6918      	ldr	r0, [r3, #16]
 800cf26:	f7ff fd2b 	bl	800c980 <__hi0bits>
 800cf2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cf2e:	e7df      	b.n	800cef0 <__d2b+0x70>
 800cf30:	0800f227 	.word	0x0800f227
 800cf34:	0800f238 	.word	0x0800f238

0800cf38 <_calloc_r>:
 800cf38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf3a:	fba1 2402 	umull	r2, r4, r1, r2
 800cf3e:	b94c      	cbnz	r4, 800cf54 <_calloc_r+0x1c>
 800cf40:	4611      	mov	r1, r2
 800cf42:	9201      	str	r2, [sp, #4]
 800cf44:	f7fd fd6c 	bl	800aa20 <_malloc_r>
 800cf48:	9a01      	ldr	r2, [sp, #4]
 800cf4a:	4605      	mov	r5, r0
 800cf4c:	b930      	cbnz	r0, 800cf5c <_calloc_r+0x24>
 800cf4e:	4628      	mov	r0, r5
 800cf50:	b003      	add	sp, #12
 800cf52:	bd30      	pop	{r4, r5, pc}
 800cf54:	220c      	movs	r2, #12
 800cf56:	6002      	str	r2, [r0, #0]
 800cf58:	2500      	movs	r5, #0
 800cf5a:	e7f8      	b.n	800cf4e <_calloc_r+0x16>
 800cf5c:	4621      	mov	r1, r4
 800cf5e:	f7fd fd36 	bl	800a9ce <memset>
 800cf62:	e7f4      	b.n	800cf4e <_calloc_r+0x16>

0800cf64 <_free_r>:
 800cf64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf66:	2900      	cmp	r1, #0
 800cf68:	d044      	beq.n	800cff4 <_free_r+0x90>
 800cf6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf6e:	9001      	str	r0, [sp, #4]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	f1a1 0404 	sub.w	r4, r1, #4
 800cf76:	bfb8      	it	lt
 800cf78:	18e4      	addlt	r4, r4, r3
 800cf7a:	f7ff fc4d 	bl	800c818 <__malloc_lock>
 800cf7e:	4a1e      	ldr	r2, [pc, #120]	; (800cff8 <_free_r+0x94>)
 800cf80:	9801      	ldr	r0, [sp, #4]
 800cf82:	6813      	ldr	r3, [r2, #0]
 800cf84:	b933      	cbnz	r3, 800cf94 <_free_r+0x30>
 800cf86:	6063      	str	r3, [r4, #4]
 800cf88:	6014      	str	r4, [r2, #0]
 800cf8a:	b003      	add	sp, #12
 800cf8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf90:	f7ff bc48 	b.w	800c824 <__malloc_unlock>
 800cf94:	42a3      	cmp	r3, r4
 800cf96:	d908      	bls.n	800cfaa <_free_r+0x46>
 800cf98:	6825      	ldr	r5, [r4, #0]
 800cf9a:	1961      	adds	r1, r4, r5
 800cf9c:	428b      	cmp	r3, r1
 800cf9e:	bf01      	itttt	eq
 800cfa0:	6819      	ldreq	r1, [r3, #0]
 800cfa2:	685b      	ldreq	r3, [r3, #4]
 800cfa4:	1949      	addeq	r1, r1, r5
 800cfa6:	6021      	streq	r1, [r4, #0]
 800cfa8:	e7ed      	b.n	800cf86 <_free_r+0x22>
 800cfaa:	461a      	mov	r2, r3
 800cfac:	685b      	ldr	r3, [r3, #4]
 800cfae:	b10b      	cbz	r3, 800cfb4 <_free_r+0x50>
 800cfb0:	42a3      	cmp	r3, r4
 800cfb2:	d9fa      	bls.n	800cfaa <_free_r+0x46>
 800cfb4:	6811      	ldr	r1, [r2, #0]
 800cfb6:	1855      	adds	r5, r2, r1
 800cfb8:	42a5      	cmp	r5, r4
 800cfba:	d10b      	bne.n	800cfd4 <_free_r+0x70>
 800cfbc:	6824      	ldr	r4, [r4, #0]
 800cfbe:	4421      	add	r1, r4
 800cfc0:	1854      	adds	r4, r2, r1
 800cfc2:	42a3      	cmp	r3, r4
 800cfc4:	6011      	str	r1, [r2, #0]
 800cfc6:	d1e0      	bne.n	800cf8a <_free_r+0x26>
 800cfc8:	681c      	ldr	r4, [r3, #0]
 800cfca:	685b      	ldr	r3, [r3, #4]
 800cfcc:	6053      	str	r3, [r2, #4]
 800cfce:	4421      	add	r1, r4
 800cfd0:	6011      	str	r1, [r2, #0]
 800cfd2:	e7da      	b.n	800cf8a <_free_r+0x26>
 800cfd4:	d902      	bls.n	800cfdc <_free_r+0x78>
 800cfd6:	230c      	movs	r3, #12
 800cfd8:	6003      	str	r3, [r0, #0]
 800cfda:	e7d6      	b.n	800cf8a <_free_r+0x26>
 800cfdc:	6825      	ldr	r5, [r4, #0]
 800cfde:	1961      	adds	r1, r4, r5
 800cfe0:	428b      	cmp	r3, r1
 800cfe2:	bf04      	itt	eq
 800cfe4:	6819      	ldreq	r1, [r3, #0]
 800cfe6:	685b      	ldreq	r3, [r3, #4]
 800cfe8:	6063      	str	r3, [r4, #4]
 800cfea:	bf04      	itt	eq
 800cfec:	1949      	addeq	r1, r1, r5
 800cfee:	6021      	streq	r1, [r4, #0]
 800cff0:	6054      	str	r4, [r2, #4]
 800cff2:	e7ca      	b.n	800cf8a <_free_r+0x26>
 800cff4:	b003      	add	sp, #12
 800cff6:	bd30      	pop	{r4, r5, pc}
 800cff8:	20004494 	.word	0x20004494

0800cffc <__ssputs_r>:
 800cffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d000:	688e      	ldr	r6, [r1, #8]
 800d002:	429e      	cmp	r6, r3
 800d004:	4682      	mov	sl, r0
 800d006:	460c      	mov	r4, r1
 800d008:	4690      	mov	r8, r2
 800d00a:	461f      	mov	r7, r3
 800d00c:	d838      	bhi.n	800d080 <__ssputs_r+0x84>
 800d00e:	898a      	ldrh	r2, [r1, #12]
 800d010:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d014:	d032      	beq.n	800d07c <__ssputs_r+0x80>
 800d016:	6825      	ldr	r5, [r4, #0]
 800d018:	6909      	ldr	r1, [r1, #16]
 800d01a:	eba5 0901 	sub.w	r9, r5, r1
 800d01e:	6965      	ldr	r5, [r4, #20]
 800d020:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d024:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d028:	3301      	adds	r3, #1
 800d02a:	444b      	add	r3, r9
 800d02c:	106d      	asrs	r5, r5, #1
 800d02e:	429d      	cmp	r5, r3
 800d030:	bf38      	it	cc
 800d032:	461d      	movcc	r5, r3
 800d034:	0553      	lsls	r3, r2, #21
 800d036:	d531      	bpl.n	800d09c <__ssputs_r+0xa0>
 800d038:	4629      	mov	r1, r5
 800d03a:	f7fd fcf1 	bl	800aa20 <_malloc_r>
 800d03e:	4606      	mov	r6, r0
 800d040:	b950      	cbnz	r0, 800d058 <__ssputs_r+0x5c>
 800d042:	230c      	movs	r3, #12
 800d044:	f8ca 3000 	str.w	r3, [sl]
 800d048:	89a3      	ldrh	r3, [r4, #12]
 800d04a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d04e:	81a3      	strh	r3, [r4, #12]
 800d050:	f04f 30ff 	mov.w	r0, #4294967295
 800d054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d058:	6921      	ldr	r1, [r4, #16]
 800d05a:	464a      	mov	r2, r9
 800d05c:	f7fd fca9 	bl	800a9b2 <memcpy>
 800d060:	89a3      	ldrh	r3, [r4, #12]
 800d062:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d06a:	81a3      	strh	r3, [r4, #12]
 800d06c:	6126      	str	r6, [r4, #16]
 800d06e:	6165      	str	r5, [r4, #20]
 800d070:	444e      	add	r6, r9
 800d072:	eba5 0509 	sub.w	r5, r5, r9
 800d076:	6026      	str	r6, [r4, #0]
 800d078:	60a5      	str	r5, [r4, #8]
 800d07a:	463e      	mov	r6, r7
 800d07c:	42be      	cmp	r6, r7
 800d07e:	d900      	bls.n	800d082 <__ssputs_r+0x86>
 800d080:	463e      	mov	r6, r7
 800d082:	6820      	ldr	r0, [r4, #0]
 800d084:	4632      	mov	r2, r6
 800d086:	4641      	mov	r1, r8
 800d088:	f000 fae4 	bl	800d654 <memmove>
 800d08c:	68a3      	ldr	r3, [r4, #8]
 800d08e:	1b9b      	subs	r3, r3, r6
 800d090:	60a3      	str	r3, [r4, #8]
 800d092:	6823      	ldr	r3, [r4, #0]
 800d094:	4433      	add	r3, r6
 800d096:	6023      	str	r3, [r4, #0]
 800d098:	2000      	movs	r0, #0
 800d09a:	e7db      	b.n	800d054 <__ssputs_r+0x58>
 800d09c:	462a      	mov	r2, r5
 800d09e:	f000 faf3 	bl	800d688 <_realloc_r>
 800d0a2:	4606      	mov	r6, r0
 800d0a4:	2800      	cmp	r0, #0
 800d0a6:	d1e1      	bne.n	800d06c <__ssputs_r+0x70>
 800d0a8:	6921      	ldr	r1, [r4, #16]
 800d0aa:	4650      	mov	r0, sl
 800d0ac:	f7ff ff5a 	bl	800cf64 <_free_r>
 800d0b0:	e7c7      	b.n	800d042 <__ssputs_r+0x46>
	...

0800d0b4 <_svfiprintf_r>:
 800d0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0b8:	4698      	mov	r8, r3
 800d0ba:	898b      	ldrh	r3, [r1, #12]
 800d0bc:	061b      	lsls	r3, r3, #24
 800d0be:	b09d      	sub	sp, #116	; 0x74
 800d0c0:	4607      	mov	r7, r0
 800d0c2:	460d      	mov	r5, r1
 800d0c4:	4614      	mov	r4, r2
 800d0c6:	d50e      	bpl.n	800d0e6 <_svfiprintf_r+0x32>
 800d0c8:	690b      	ldr	r3, [r1, #16]
 800d0ca:	b963      	cbnz	r3, 800d0e6 <_svfiprintf_r+0x32>
 800d0cc:	2140      	movs	r1, #64	; 0x40
 800d0ce:	f7fd fca7 	bl	800aa20 <_malloc_r>
 800d0d2:	6028      	str	r0, [r5, #0]
 800d0d4:	6128      	str	r0, [r5, #16]
 800d0d6:	b920      	cbnz	r0, 800d0e2 <_svfiprintf_r+0x2e>
 800d0d8:	230c      	movs	r3, #12
 800d0da:	603b      	str	r3, [r7, #0]
 800d0dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d0e0:	e0d1      	b.n	800d286 <_svfiprintf_r+0x1d2>
 800d0e2:	2340      	movs	r3, #64	; 0x40
 800d0e4:	616b      	str	r3, [r5, #20]
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	9309      	str	r3, [sp, #36]	; 0x24
 800d0ea:	2320      	movs	r3, #32
 800d0ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d0f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d0f4:	2330      	movs	r3, #48	; 0x30
 800d0f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d2a0 <_svfiprintf_r+0x1ec>
 800d0fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d0fe:	f04f 0901 	mov.w	r9, #1
 800d102:	4623      	mov	r3, r4
 800d104:	469a      	mov	sl, r3
 800d106:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d10a:	b10a      	cbz	r2, 800d110 <_svfiprintf_r+0x5c>
 800d10c:	2a25      	cmp	r2, #37	; 0x25
 800d10e:	d1f9      	bne.n	800d104 <_svfiprintf_r+0x50>
 800d110:	ebba 0b04 	subs.w	fp, sl, r4
 800d114:	d00b      	beq.n	800d12e <_svfiprintf_r+0x7a>
 800d116:	465b      	mov	r3, fp
 800d118:	4622      	mov	r2, r4
 800d11a:	4629      	mov	r1, r5
 800d11c:	4638      	mov	r0, r7
 800d11e:	f7ff ff6d 	bl	800cffc <__ssputs_r>
 800d122:	3001      	adds	r0, #1
 800d124:	f000 80aa 	beq.w	800d27c <_svfiprintf_r+0x1c8>
 800d128:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d12a:	445a      	add	r2, fp
 800d12c:	9209      	str	r2, [sp, #36]	; 0x24
 800d12e:	f89a 3000 	ldrb.w	r3, [sl]
 800d132:	2b00      	cmp	r3, #0
 800d134:	f000 80a2 	beq.w	800d27c <_svfiprintf_r+0x1c8>
 800d138:	2300      	movs	r3, #0
 800d13a:	f04f 32ff 	mov.w	r2, #4294967295
 800d13e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d142:	f10a 0a01 	add.w	sl, sl, #1
 800d146:	9304      	str	r3, [sp, #16]
 800d148:	9307      	str	r3, [sp, #28]
 800d14a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d14e:	931a      	str	r3, [sp, #104]	; 0x68
 800d150:	4654      	mov	r4, sl
 800d152:	2205      	movs	r2, #5
 800d154:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d158:	4851      	ldr	r0, [pc, #324]	; (800d2a0 <_svfiprintf_r+0x1ec>)
 800d15a:	f7f3 f851 	bl	8000200 <memchr>
 800d15e:	9a04      	ldr	r2, [sp, #16]
 800d160:	b9d8      	cbnz	r0, 800d19a <_svfiprintf_r+0xe6>
 800d162:	06d0      	lsls	r0, r2, #27
 800d164:	bf44      	itt	mi
 800d166:	2320      	movmi	r3, #32
 800d168:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d16c:	0711      	lsls	r1, r2, #28
 800d16e:	bf44      	itt	mi
 800d170:	232b      	movmi	r3, #43	; 0x2b
 800d172:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d176:	f89a 3000 	ldrb.w	r3, [sl]
 800d17a:	2b2a      	cmp	r3, #42	; 0x2a
 800d17c:	d015      	beq.n	800d1aa <_svfiprintf_r+0xf6>
 800d17e:	9a07      	ldr	r2, [sp, #28]
 800d180:	4654      	mov	r4, sl
 800d182:	2000      	movs	r0, #0
 800d184:	f04f 0c0a 	mov.w	ip, #10
 800d188:	4621      	mov	r1, r4
 800d18a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d18e:	3b30      	subs	r3, #48	; 0x30
 800d190:	2b09      	cmp	r3, #9
 800d192:	d94e      	bls.n	800d232 <_svfiprintf_r+0x17e>
 800d194:	b1b0      	cbz	r0, 800d1c4 <_svfiprintf_r+0x110>
 800d196:	9207      	str	r2, [sp, #28]
 800d198:	e014      	b.n	800d1c4 <_svfiprintf_r+0x110>
 800d19a:	eba0 0308 	sub.w	r3, r0, r8
 800d19e:	fa09 f303 	lsl.w	r3, r9, r3
 800d1a2:	4313      	orrs	r3, r2
 800d1a4:	9304      	str	r3, [sp, #16]
 800d1a6:	46a2      	mov	sl, r4
 800d1a8:	e7d2      	b.n	800d150 <_svfiprintf_r+0x9c>
 800d1aa:	9b03      	ldr	r3, [sp, #12]
 800d1ac:	1d19      	adds	r1, r3, #4
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	9103      	str	r1, [sp, #12]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	bfbb      	ittet	lt
 800d1b6:	425b      	neglt	r3, r3
 800d1b8:	f042 0202 	orrlt.w	r2, r2, #2
 800d1bc:	9307      	strge	r3, [sp, #28]
 800d1be:	9307      	strlt	r3, [sp, #28]
 800d1c0:	bfb8      	it	lt
 800d1c2:	9204      	strlt	r2, [sp, #16]
 800d1c4:	7823      	ldrb	r3, [r4, #0]
 800d1c6:	2b2e      	cmp	r3, #46	; 0x2e
 800d1c8:	d10c      	bne.n	800d1e4 <_svfiprintf_r+0x130>
 800d1ca:	7863      	ldrb	r3, [r4, #1]
 800d1cc:	2b2a      	cmp	r3, #42	; 0x2a
 800d1ce:	d135      	bne.n	800d23c <_svfiprintf_r+0x188>
 800d1d0:	9b03      	ldr	r3, [sp, #12]
 800d1d2:	1d1a      	adds	r2, r3, #4
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	9203      	str	r2, [sp, #12]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	bfb8      	it	lt
 800d1dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800d1e0:	3402      	adds	r4, #2
 800d1e2:	9305      	str	r3, [sp, #20]
 800d1e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d2b0 <_svfiprintf_r+0x1fc>
 800d1e8:	7821      	ldrb	r1, [r4, #0]
 800d1ea:	2203      	movs	r2, #3
 800d1ec:	4650      	mov	r0, sl
 800d1ee:	f7f3 f807 	bl	8000200 <memchr>
 800d1f2:	b140      	cbz	r0, 800d206 <_svfiprintf_r+0x152>
 800d1f4:	2340      	movs	r3, #64	; 0x40
 800d1f6:	eba0 000a 	sub.w	r0, r0, sl
 800d1fa:	fa03 f000 	lsl.w	r0, r3, r0
 800d1fe:	9b04      	ldr	r3, [sp, #16]
 800d200:	4303      	orrs	r3, r0
 800d202:	3401      	adds	r4, #1
 800d204:	9304      	str	r3, [sp, #16]
 800d206:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d20a:	4826      	ldr	r0, [pc, #152]	; (800d2a4 <_svfiprintf_r+0x1f0>)
 800d20c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d210:	2206      	movs	r2, #6
 800d212:	f7f2 fff5 	bl	8000200 <memchr>
 800d216:	2800      	cmp	r0, #0
 800d218:	d038      	beq.n	800d28c <_svfiprintf_r+0x1d8>
 800d21a:	4b23      	ldr	r3, [pc, #140]	; (800d2a8 <_svfiprintf_r+0x1f4>)
 800d21c:	bb1b      	cbnz	r3, 800d266 <_svfiprintf_r+0x1b2>
 800d21e:	9b03      	ldr	r3, [sp, #12]
 800d220:	3307      	adds	r3, #7
 800d222:	f023 0307 	bic.w	r3, r3, #7
 800d226:	3308      	adds	r3, #8
 800d228:	9303      	str	r3, [sp, #12]
 800d22a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d22c:	4433      	add	r3, r6
 800d22e:	9309      	str	r3, [sp, #36]	; 0x24
 800d230:	e767      	b.n	800d102 <_svfiprintf_r+0x4e>
 800d232:	fb0c 3202 	mla	r2, ip, r2, r3
 800d236:	460c      	mov	r4, r1
 800d238:	2001      	movs	r0, #1
 800d23a:	e7a5      	b.n	800d188 <_svfiprintf_r+0xd4>
 800d23c:	2300      	movs	r3, #0
 800d23e:	3401      	adds	r4, #1
 800d240:	9305      	str	r3, [sp, #20]
 800d242:	4619      	mov	r1, r3
 800d244:	f04f 0c0a 	mov.w	ip, #10
 800d248:	4620      	mov	r0, r4
 800d24a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d24e:	3a30      	subs	r2, #48	; 0x30
 800d250:	2a09      	cmp	r2, #9
 800d252:	d903      	bls.n	800d25c <_svfiprintf_r+0x1a8>
 800d254:	2b00      	cmp	r3, #0
 800d256:	d0c5      	beq.n	800d1e4 <_svfiprintf_r+0x130>
 800d258:	9105      	str	r1, [sp, #20]
 800d25a:	e7c3      	b.n	800d1e4 <_svfiprintf_r+0x130>
 800d25c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d260:	4604      	mov	r4, r0
 800d262:	2301      	movs	r3, #1
 800d264:	e7f0      	b.n	800d248 <_svfiprintf_r+0x194>
 800d266:	ab03      	add	r3, sp, #12
 800d268:	9300      	str	r3, [sp, #0]
 800d26a:	462a      	mov	r2, r5
 800d26c:	4b0f      	ldr	r3, [pc, #60]	; (800d2ac <_svfiprintf_r+0x1f8>)
 800d26e:	a904      	add	r1, sp, #16
 800d270:	4638      	mov	r0, r7
 800d272:	f7fd fce9 	bl	800ac48 <_printf_float>
 800d276:	1c42      	adds	r2, r0, #1
 800d278:	4606      	mov	r6, r0
 800d27a:	d1d6      	bne.n	800d22a <_svfiprintf_r+0x176>
 800d27c:	89ab      	ldrh	r3, [r5, #12]
 800d27e:	065b      	lsls	r3, r3, #25
 800d280:	f53f af2c 	bmi.w	800d0dc <_svfiprintf_r+0x28>
 800d284:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d286:	b01d      	add	sp, #116	; 0x74
 800d288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d28c:	ab03      	add	r3, sp, #12
 800d28e:	9300      	str	r3, [sp, #0]
 800d290:	462a      	mov	r2, r5
 800d292:	4b06      	ldr	r3, [pc, #24]	; (800d2ac <_svfiprintf_r+0x1f8>)
 800d294:	a904      	add	r1, sp, #16
 800d296:	4638      	mov	r0, r7
 800d298:	f7fd ff7a 	bl	800b190 <_printf_i>
 800d29c:	e7eb      	b.n	800d276 <_svfiprintf_r+0x1c2>
 800d29e:	bf00      	nop
 800d2a0:	0800f394 	.word	0x0800f394
 800d2a4:	0800f39e 	.word	0x0800f39e
 800d2a8:	0800ac49 	.word	0x0800ac49
 800d2ac:	0800cffd 	.word	0x0800cffd
 800d2b0:	0800f39a 	.word	0x0800f39a

0800d2b4 <__sfputc_r>:
 800d2b4:	6893      	ldr	r3, [r2, #8]
 800d2b6:	3b01      	subs	r3, #1
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	b410      	push	{r4}
 800d2bc:	6093      	str	r3, [r2, #8]
 800d2be:	da08      	bge.n	800d2d2 <__sfputc_r+0x1e>
 800d2c0:	6994      	ldr	r4, [r2, #24]
 800d2c2:	42a3      	cmp	r3, r4
 800d2c4:	db01      	blt.n	800d2ca <__sfputc_r+0x16>
 800d2c6:	290a      	cmp	r1, #10
 800d2c8:	d103      	bne.n	800d2d2 <__sfputc_r+0x1e>
 800d2ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2ce:	f7fe b9ff 	b.w	800b6d0 <__swbuf_r>
 800d2d2:	6813      	ldr	r3, [r2, #0]
 800d2d4:	1c58      	adds	r0, r3, #1
 800d2d6:	6010      	str	r0, [r2, #0]
 800d2d8:	7019      	strb	r1, [r3, #0]
 800d2da:	4608      	mov	r0, r1
 800d2dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2e0:	4770      	bx	lr

0800d2e2 <__sfputs_r>:
 800d2e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2e4:	4606      	mov	r6, r0
 800d2e6:	460f      	mov	r7, r1
 800d2e8:	4614      	mov	r4, r2
 800d2ea:	18d5      	adds	r5, r2, r3
 800d2ec:	42ac      	cmp	r4, r5
 800d2ee:	d101      	bne.n	800d2f4 <__sfputs_r+0x12>
 800d2f0:	2000      	movs	r0, #0
 800d2f2:	e007      	b.n	800d304 <__sfputs_r+0x22>
 800d2f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2f8:	463a      	mov	r2, r7
 800d2fa:	4630      	mov	r0, r6
 800d2fc:	f7ff ffda 	bl	800d2b4 <__sfputc_r>
 800d300:	1c43      	adds	r3, r0, #1
 800d302:	d1f3      	bne.n	800d2ec <__sfputs_r+0xa>
 800d304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d308 <_vfiprintf_r>:
 800d308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d30c:	460d      	mov	r5, r1
 800d30e:	b09d      	sub	sp, #116	; 0x74
 800d310:	4614      	mov	r4, r2
 800d312:	4698      	mov	r8, r3
 800d314:	4606      	mov	r6, r0
 800d316:	b118      	cbz	r0, 800d320 <_vfiprintf_r+0x18>
 800d318:	6983      	ldr	r3, [r0, #24]
 800d31a:	b90b      	cbnz	r3, 800d320 <_vfiprintf_r+0x18>
 800d31c:	f7fd fa84 	bl	800a828 <__sinit>
 800d320:	4b89      	ldr	r3, [pc, #548]	; (800d548 <_vfiprintf_r+0x240>)
 800d322:	429d      	cmp	r5, r3
 800d324:	d11b      	bne.n	800d35e <_vfiprintf_r+0x56>
 800d326:	6875      	ldr	r5, [r6, #4]
 800d328:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d32a:	07d9      	lsls	r1, r3, #31
 800d32c:	d405      	bmi.n	800d33a <_vfiprintf_r+0x32>
 800d32e:	89ab      	ldrh	r3, [r5, #12]
 800d330:	059a      	lsls	r2, r3, #22
 800d332:	d402      	bmi.n	800d33a <_vfiprintf_r+0x32>
 800d334:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d336:	f7fd fb3a 	bl	800a9ae <__retarget_lock_acquire_recursive>
 800d33a:	89ab      	ldrh	r3, [r5, #12]
 800d33c:	071b      	lsls	r3, r3, #28
 800d33e:	d501      	bpl.n	800d344 <_vfiprintf_r+0x3c>
 800d340:	692b      	ldr	r3, [r5, #16]
 800d342:	b9eb      	cbnz	r3, 800d380 <_vfiprintf_r+0x78>
 800d344:	4629      	mov	r1, r5
 800d346:	4630      	mov	r0, r6
 800d348:	f7fe fa26 	bl	800b798 <__swsetup_r>
 800d34c:	b1c0      	cbz	r0, 800d380 <_vfiprintf_r+0x78>
 800d34e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d350:	07dc      	lsls	r4, r3, #31
 800d352:	d50e      	bpl.n	800d372 <_vfiprintf_r+0x6a>
 800d354:	f04f 30ff 	mov.w	r0, #4294967295
 800d358:	b01d      	add	sp, #116	; 0x74
 800d35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d35e:	4b7b      	ldr	r3, [pc, #492]	; (800d54c <_vfiprintf_r+0x244>)
 800d360:	429d      	cmp	r5, r3
 800d362:	d101      	bne.n	800d368 <_vfiprintf_r+0x60>
 800d364:	68b5      	ldr	r5, [r6, #8]
 800d366:	e7df      	b.n	800d328 <_vfiprintf_r+0x20>
 800d368:	4b79      	ldr	r3, [pc, #484]	; (800d550 <_vfiprintf_r+0x248>)
 800d36a:	429d      	cmp	r5, r3
 800d36c:	bf08      	it	eq
 800d36e:	68f5      	ldreq	r5, [r6, #12]
 800d370:	e7da      	b.n	800d328 <_vfiprintf_r+0x20>
 800d372:	89ab      	ldrh	r3, [r5, #12]
 800d374:	0598      	lsls	r0, r3, #22
 800d376:	d4ed      	bmi.n	800d354 <_vfiprintf_r+0x4c>
 800d378:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d37a:	f7fd fb19 	bl	800a9b0 <__retarget_lock_release_recursive>
 800d37e:	e7e9      	b.n	800d354 <_vfiprintf_r+0x4c>
 800d380:	2300      	movs	r3, #0
 800d382:	9309      	str	r3, [sp, #36]	; 0x24
 800d384:	2320      	movs	r3, #32
 800d386:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d38a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d38e:	2330      	movs	r3, #48	; 0x30
 800d390:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d554 <_vfiprintf_r+0x24c>
 800d394:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d398:	f04f 0901 	mov.w	r9, #1
 800d39c:	4623      	mov	r3, r4
 800d39e:	469a      	mov	sl, r3
 800d3a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3a4:	b10a      	cbz	r2, 800d3aa <_vfiprintf_r+0xa2>
 800d3a6:	2a25      	cmp	r2, #37	; 0x25
 800d3a8:	d1f9      	bne.n	800d39e <_vfiprintf_r+0x96>
 800d3aa:	ebba 0b04 	subs.w	fp, sl, r4
 800d3ae:	d00b      	beq.n	800d3c8 <_vfiprintf_r+0xc0>
 800d3b0:	465b      	mov	r3, fp
 800d3b2:	4622      	mov	r2, r4
 800d3b4:	4629      	mov	r1, r5
 800d3b6:	4630      	mov	r0, r6
 800d3b8:	f7ff ff93 	bl	800d2e2 <__sfputs_r>
 800d3bc:	3001      	adds	r0, #1
 800d3be:	f000 80aa 	beq.w	800d516 <_vfiprintf_r+0x20e>
 800d3c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d3c4:	445a      	add	r2, fp
 800d3c6:	9209      	str	r2, [sp, #36]	; 0x24
 800d3c8:	f89a 3000 	ldrb.w	r3, [sl]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	f000 80a2 	beq.w	800d516 <_vfiprintf_r+0x20e>
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	f04f 32ff 	mov.w	r2, #4294967295
 800d3d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3dc:	f10a 0a01 	add.w	sl, sl, #1
 800d3e0:	9304      	str	r3, [sp, #16]
 800d3e2:	9307      	str	r3, [sp, #28]
 800d3e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d3e8:	931a      	str	r3, [sp, #104]	; 0x68
 800d3ea:	4654      	mov	r4, sl
 800d3ec:	2205      	movs	r2, #5
 800d3ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3f2:	4858      	ldr	r0, [pc, #352]	; (800d554 <_vfiprintf_r+0x24c>)
 800d3f4:	f7f2 ff04 	bl	8000200 <memchr>
 800d3f8:	9a04      	ldr	r2, [sp, #16]
 800d3fa:	b9d8      	cbnz	r0, 800d434 <_vfiprintf_r+0x12c>
 800d3fc:	06d1      	lsls	r1, r2, #27
 800d3fe:	bf44      	itt	mi
 800d400:	2320      	movmi	r3, #32
 800d402:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d406:	0713      	lsls	r3, r2, #28
 800d408:	bf44      	itt	mi
 800d40a:	232b      	movmi	r3, #43	; 0x2b
 800d40c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d410:	f89a 3000 	ldrb.w	r3, [sl]
 800d414:	2b2a      	cmp	r3, #42	; 0x2a
 800d416:	d015      	beq.n	800d444 <_vfiprintf_r+0x13c>
 800d418:	9a07      	ldr	r2, [sp, #28]
 800d41a:	4654      	mov	r4, sl
 800d41c:	2000      	movs	r0, #0
 800d41e:	f04f 0c0a 	mov.w	ip, #10
 800d422:	4621      	mov	r1, r4
 800d424:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d428:	3b30      	subs	r3, #48	; 0x30
 800d42a:	2b09      	cmp	r3, #9
 800d42c:	d94e      	bls.n	800d4cc <_vfiprintf_r+0x1c4>
 800d42e:	b1b0      	cbz	r0, 800d45e <_vfiprintf_r+0x156>
 800d430:	9207      	str	r2, [sp, #28]
 800d432:	e014      	b.n	800d45e <_vfiprintf_r+0x156>
 800d434:	eba0 0308 	sub.w	r3, r0, r8
 800d438:	fa09 f303 	lsl.w	r3, r9, r3
 800d43c:	4313      	orrs	r3, r2
 800d43e:	9304      	str	r3, [sp, #16]
 800d440:	46a2      	mov	sl, r4
 800d442:	e7d2      	b.n	800d3ea <_vfiprintf_r+0xe2>
 800d444:	9b03      	ldr	r3, [sp, #12]
 800d446:	1d19      	adds	r1, r3, #4
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	9103      	str	r1, [sp, #12]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	bfbb      	ittet	lt
 800d450:	425b      	neglt	r3, r3
 800d452:	f042 0202 	orrlt.w	r2, r2, #2
 800d456:	9307      	strge	r3, [sp, #28]
 800d458:	9307      	strlt	r3, [sp, #28]
 800d45a:	bfb8      	it	lt
 800d45c:	9204      	strlt	r2, [sp, #16]
 800d45e:	7823      	ldrb	r3, [r4, #0]
 800d460:	2b2e      	cmp	r3, #46	; 0x2e
 800d462:	d10c      	bne.n	800d47e <_vfiprintf_r+0x176>
 800d464:	7863      	ldrb	r3, [r4, #1]
 800d466:	2b2a      	cmp	r3, #42	; 0x2a
 800d468:	d135      	bne.n	800d4d6 <_vfiprintf_r+0x1ce>
 800d46a:	9b03      	ldr	r3, [sp, #12]
 800d46c:	1d1a      	adds	r2, r3, #4
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	9203      	str	r2, [sp, #12]
 800d472:	2b00      	cmp	r3, #0
 800d474:	bfb8      	it	lt
 800d476:	f04f 33ff 	movlt.w	r3, #4294967295
 800d47a:	3402      	adds	r4, #2
 800d47c:	9305      	str	r3, [sp, #20]
 800d47e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d564 <_vfiprintf_r+0x25c>
 800d482:	7821      	ldrb	r1, [r4, #0]
 800d484:	2203      	movs	r2, #3
 800d486:	4650      	mov	r0, sl
 800d488:	f7f2 feba 	bl	8000200 <memchr>
 800d48c:	b140      	cbz	r0, 800d4a0 <_vfiprintf_r+0x198>
 800d48e:	2340      	movs	r3, #64	; 0x40
 800d490:	eba0 000a 	sub.w	r0, r0, sl
 800d494:	fa03 f000 	lsl.w	r0, r3, r0
 800d498:	9b04      	ldr	r3, [sp, #16]
 800d49a:	4303      	orrs	r3, r0
 800d49c:	3401      	adds	r4, #1
 800d49e:	9304      	str	r3, [sp, #16]
 800d4a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4a4:	482c      	ldr	r0, [pc, #176]	; (800d558 <_vfiprintf_r+0x250>)
 800d4a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d4aa:	2206      	movs	r2, #6
 800d4ac:	f7f2 fea8 	bl	8000200 <memchr>
 800d4b0:	2800      	cmp	r0, #0
 800d4b2:	d03f      	beq.n	800d534 <_vfiprintf_r+0x22c>
 800d4b4:	4b29      	ldr	r3, [pc, #164]	; (800d55c <_vfiprintf_r+0x254>)
 800d4b6:	bb1b      	cbnz	r3, 800d500 <_vfiprintf_r+0x1f8>
 800d4b8:	9b03      	ldr	r3, [sp, #12]
 800d4ba:	3307      	adds	r3, #7
 800d4bc:	f023 0307 	bic.w	r3, r3, #7
 800d4c0:	3308      	adds	r3, #8
 800d4c2:	9303      	str	r3, [sp, #12]
 800d4c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4c6:	443b      	add	r3, r7
 800d4c8:	9309      	str	r3, [sp, #36]	; 0x24
 800d4ca:	e767      	b.n	800d39c <_vfiprintf_r+0x94>
 800d4cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4d0:	460c      	mov	r4, r1
 800d4d2:	2001      	movs	r0, #1
 800d4d4:	e7a5      	b.n	800d422 <_vfiprintf_r+0x11a>
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	3401      	adds	r4, #1
 800d4da:	9305      	str	r3, [sp, #20]
 800d4dc:	4619      	mov	r1, r3
 800d4de:	f04f 0c0a 	mov.w	ip, #10
 800d4e2:	4620      	mov	r0, r4
 800d4e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4e8:	3a30      	subs	r2, #48	; 0x30
 800d4ea:	2a09      	cmp	r2, #9
 800d4ec:	d903      	bls.n	800d4f6 <_vfiprintf_r+0x1ee>
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d0c5      	beq.n	800d47e <_vfiprintf_r+0x176>
 800d4f2:	9105      	str	r1, [sp, #20]
 800d4f4:	e7c3      	b.n	800d47e <_vfiprintf_r+0x176>
 800d4f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d4fa:	4604      	mov	r4, r0
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	e7f0      	b.n	800d4e2 <_vfiprintf_r+0x1da>
 800d500:	ab03      	add	r3, sp, #12
 800d502:	9300      	str	r3, [sp, #0]
 800d504:	462a      	mov	r2, r5
 800d506:	4b16      	ldr	r3, [pc, #88]	; (800d560 <_vfiprintf_r+0x258>)
 800d508:	a904      	add	r1, sp, #16
 800d50a:	4630      	mov	r0, r6
 800d50c:	f7fd fb9c 	bl	800ac48 <_printf_float>
 800d510:	4607      	mov	r7, r0
 800d512:	1c78      	adds	r0, r7, #1
 800d514:	d1d6      	bne.n	800d4c4 <_vfiprintf_r+0x1bc>
 800d516:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d518:	07d9      	lsls	r1, r3, #31
 800d51a:	d405      	bmi.n	800d528 <_vfiprintf_r+0x220>
 800d51c:	89ab      	ldrh	r3, [r5, #12]
 800d51e:	059a      	lsls	r2, r3, #22
 800d520:	d402      	bmi.n	800d528 <_vfiprintf_r+0x220>
 800d522:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d524:	f7fd fa44 	bl	800a9b0 <__retarget_lock_release_recursive>
 800d528:	89ab      	ldrh	r3, [r5, #12]
 800d52a:	065b      	lsls	r3, r3, #25
 800d52c:	f53f af12 	bmi.w	800d354 <_vfiprintf_r+0x4c>
 800d530:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d532:	e711      	b.n	800d358 <_vfiprintf_r+0x50>
 800d534:	ab03      	add	r3, sp, #12
 800d536:	9300      	str	r3, [sp, #0]
 800d538:	462a      	mov	r2, r5
 800d53a:	4b09      	ldr	r3, [pc, #36]	; (800d560 <_vfiprintf_r+0x258>)
 800d53c:	a904      	add	r1, sp, #16
 800d53e:	4630      	mov	r0, r6
 800d540:	f7fd fe26 	bl	800b190 <_printf_i>
 800d544:	e7e4      	b.n	800d510 <_vfiprintf_r+0x208>
 800d546:	bf00      	nop
 800d548:	0800f130 	.word	0x0800f130
 800d54c:	0800f150 	.word	0x0800f150
 800d550:	0800f110 	.word	0x0800f110
 800d554:	0800f394 	.word	0x0800f394
 800d558:	0800f39e 	.word	0x0800f39e
 800d55c:	0800ac49 	.word	0x0800ac49
 800d560:	0800d2e3 	.word	0x0800d2e3
 800d564:	0800f39a 	.word	0x0800f39a

0800d568 <_read_r>:
 800d568:	b538      	push	{r3, r4, r5, lr}
 800d56a:	4d07      	ldr	r5, [pc, #28]	; (800d588 <_read_r+0x20>)
 800d56c:	4604      	mov	r4, r0
 800d56e:	4608      	mov	r0, r1
 800d570:	4611      	mov	r1, r2
 800d572:	2200      	movs	r2, #0
 800d574:	602a      	str	r2, [r5, #0]
 800d576:	461a      	mov	r2, r3
 800d578:	f7f6 faf0 	bl	8003b5c <_read>
 800d57c:	1c43      	adds	r3, r0, #1
 800d57e:	d102      	bne.n	800d586 <_read_r+0x1e>
 800d580:	682b      	ldr	r3, [r5, #0]
 800d582:	b103      	cbz	r3, 800d586 <_read_r+0x1e>
 800d584:	6023      	str	r3, [r4, #0]
 800d586:	bd38      	pop	{r3, r4, r5, pc}
 800d588:	2000449c 	.word	0x2000449c

0800d58c <__assert_func>:
 800d58c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d58e:	4614      	mov	r4, r2
 800d590:	461a      	mov	r2, r3
 800d592:	4b09      	ldr	r3, [pc, #36]	; (800d5b8 <__assert_func+0x2c>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	4605      	mov	r5, r0
 800d598:	68d8      	ldr	r0, [r3, #12]
 800d59a:	b14c      	cbz	r4, 800d5b0 <__assert_func+0x24>
 800d59c:	4b07      	ldr	r3, [pc, #28]	; (800d5bc <__assert_func+0x30>)
 800d59e:	9100      	str	r1, [sp, #0]
 800d5a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d5a4:	4906      	ldr	r1, [pc, #24]	; (800d5c0 <__assert_func+0x34>)
 800d5a6:	462b      	mov	r3, r5
 800d5a8:	f000 f80e 	bl	800d5c8 <fiprintf>
 800d5ac:	f000 f8a8 	bl	800d700 <abort>
 800d5b0:	4b04      	ldr	r3, [pc, #16]	; (800d5c4 <__assert_func+0x38>)
 800d5b2:	461c      	mov	r4, r3
 800d5b4:	e7f3      	b.n	800d59e <__assert_func+0x12>
 800d5b6:	bf00      	nop
 800d5b8:	20000060 	.word	0x20000060
 800d5bc:	0800f3a5 	.word	0x0800f3a5
 800d5c0:	0800f3b2 	.word	0x0800f3b2
 800d5c4:	0800f3e0 	.word	0x0800f3e0

0800d5c8 <fiprintf>:
 800d5c8:	b40e      	push	{r1, r2, r3}
 800d5ca:	b503      	push	{r0, r1, lr}
 800d5cc:	4601      	mov	r1, r0
 800d5ce:	ab03      	add	r3, sp, #12
 800d5d0:	4805      	ldr	r0, [pc, #20]	; (800d5e8 <fiprintf+0x20>)
 800d5d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5d6:	6800      	ldr	r0, [r0, #0]
 800d5d8:	9301      	str	r3, [sp, #4]
 800d5da:	f7ff fe95 	bl	800d308 <_vfiprintf_r>
 800d5de:	b002      	add	sp, #8
 800d5e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d5e4:	b003      	add	sp, #12
 800d5e6:	4770      	bx	lr
 800d5e8:	20000060 	.word	0x20000060

0800d5ec <_fstat_r>:
 800d5ec:	b538      	push	{r3, r4, r5, lr}
 800d5ee:	4d07      	ldr	r5, [pc, #28]	; (800d60c <_fstat_r+0x20>)
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	4604      	mov	r4, r0
 800d5f4:	4608      	mov	r0, r1
 800d5f6:	4611      	mov	r1, r2
 800d5f8:	602b      	str	r3, [r5, #0]
 800d5fa:	f7f6 fad8 	bl	8003bae <_fstat>
 800d5fe:	1c43      	adds	r3, r0, #1
 800d600:	d102      	bne.n	800d608 <_fstat_r+0x1c>
 800d602:	682b      	ldr	r3, [r5, #0]
 800d604:	b103      	cbz	r3, 800d608 <_fstat_r+0x1c>
 800d606:	6023      	str	r3, [r4, #0]
 800d608:	bd38      	pop	{r3, r4, r5, pc}
 800d60a:	bf00      	nop
 800d60c:	2000449c 	.word	0x2000449c

0800d610 <_isatty_r>:
 800d610:	b538      	push	{r3, r4, r5, lr}
 800d612:	4d06      	ldr	r5, [pc, #24]	; (800d62c <_isatty_r+0x1c>)
 800d614:	2300      	movs	r3, #0
 800d616:	4604      	mov	r4, r0
 800d618:	4608      	mov	r0, r1
 800d61a:	602b      	str	r3, [r5, #0]
 800d61c:	f7f6 fad7 	bl	8003bce <_isatty>
 800d620:	1c43      	adds	r3, r0, #1
 800d622:	d102      	bne.n	800d62a <_isatty_r+0x1a>
 800d624:	682b      	ldr	r3, [r5, #0]
 800d626:	b103      	cbz	r3, 800d62a <_isatty_r+0x1a>
 800d628:	6023      	str	r3, [r4, #0]
 800d62a:	bd38      	pop	{r3, r4, r5, pc}
 800d62c:	2000449c 	.word	0x2000449c

0800d630 <__ascii_mbtowc>:
 800d630:	b082      	sub	sp, #8
 800d632:	b901      	cbnz	r1, 800d636 <__ascii_mbtowc+0x6>
 800d634:	a901      	add	r1, sp, #4
 800d636:	b142      	cbz	r2, 800d64a <__ascii_mbtowc+0x1a>
 800d638:	b14b      	cbz	r3, 800d64e <__ascii_mbtowc+0x1e>
 800d63a:	7813      	ldrb	r3, [r2, #0]
 800d63c:	600b      	str	r3, [r1, #0]
 800d63e:	7812      	ldrb	r2, [r2, #0]
 800d640:	1e10      	subs	r0, r2, #0
 800d642:	bf18      	it	ne
 800d644:	2001      	movne	r0, #1
 800d646:	b002      	add	sp, #8
 800d648:	4770      	bx	lr
 800d64a:	4610      	mov	r0, r2
 800d64c:	e7fb      	b.n	800d646 <__ascii_mbtowc+0x16>
 800d64e:	f06f 0001 	mvn.w	r0, #1
 800d652:	e7f8      	b.n	800d646 <__ascii_mbtowc+0x16>

0800d654 <memmove>:
 800d654:	4288      	cmp	r0, r1
 800d656:	b510      	push	{r4, lr}
 800d658:	eb01 0402 	add.w	r4, r1, r2
 800d65c:	d902      	bls.n	800d664 <memmove+0x10>
 800d65e:	4284      	cmp	r4, r0
 800d660:	4623      	mov	r3, r4
 800d662:	d807      	bhi.n	800d674 <memmove+0x20>
 800d664:	1e43      	subs	r3, r0, #1
 800d666:	42a1      	cmp	r1, r4
 800d668:	d008      	beq.n	800d67c <memmove+0x28>
 800d66a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d66e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d672:	e7f8      	b.n	800d666 <memmove+0x12>
 800d674:	4402      	add	r2, r0
 800d676:	4601      	mov	r1, r0
 800d678:	428a      	cmp	r2, r1
 800d67a:	d100      	bne.n	800d67e <memmove+0x2a>
 800d67c:	bd10      	pop	{r4, pc}
 800d67e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d682:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d686:	e7f7      	b.n	800d678 <memmove+0x24>

0800d688 <_realloc_r>:
 800d688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d68c:	4680      	mov	r8, r0
 800d68e:	4614      	mov	r4, r2
 800d690:	460e      	mov	r6, r1
 800d692:	b921      	cbnz	r1, 800d69e <_realloc_r+0x16>
 800d694:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d698:	4611      	mov	r1, r2
 800d69a:	f7fd b9c1 	b.w	800aa20 <_malloc_r>
 800d69e:	b92a      	cbnz	r2, 800d6ac <_realloc_r+0x24>
 800d6a0:	f7ff fc60 	bl	800cf64 <_free_r>
 800d6a4:	4625      	mov	r5, r4
 800d6a6:	4628      	mov	r0, r5
 800d6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6ac:	f000 f82f 	bl	800d70e <_malloc_usable_size_r>
 800d6b0:	4284      	cmp	r4, r0
 800d6b2:	4607      	mov	r7, r0
 800d6b4:	d802      	bhi.n	800d6bc <_realloc_r+0x34>
 800d6b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d6ba:	d812      	bhi.n	800d6e2 <_realloc_r+0x5a>
 800d6bc:	4621      	mov	r1, r4
 800d6be:	4640      	mov	r0, r8
 800d6c0:	f7fd f9ae 	bl	800aa20 <_malloc_r>
 800d6c4:	4605      	mov	r5, r0
 800d6c6:	2800      	cmp	r0, #0
 800d6c8:	d0ed      	beq.n	800d6a6 <_realloc_r+0x1e>
 800d6ca:	42bc      	cmp	r4, r7
 800d6cc:	4622      	mov	r2, r4
 800d6ce:	4631      	mov	r1, r6
 800d6d0:	bf28      	it	cs
 800d6d2:	463a      	movcs	r2, r7
 800d6d4:	f7fd f96d 	bl	800a9b2 <memcpy>
 800d6d8:	4631      	mov	r1, r6
 800d6da:	4640      	mov	r0, r8
 800d6dc:	f7ff fc42 	bl	800cf64 <_free_r>
 800d6e0:	e7e1      	b.n	800d6a6 <_realloc_r+0x1e>
 800d6e2:	4635      	mov	r5, r6
 800d6e4:	e7df      	b.n	800d6a6 <_realloc_r+0x1e>

0800d6e6 <__ascii_wctomb>:
 800d6e6:	b149      	cbz	r1, 800d6fc <__ascii_wctomb+0x16>
 800d6e8:	2aff      	cmp	r2, #255	; 0xff
 800d6ea:	bf85      	ittet	hi
 800d6ec:	238a      	movhi	r3, #138	; 0x8a
 800d6ee:	6003      	strhi	r3, [r0, #0]
 800d6f0:	700a      	strbls	r2, [r1, #0]
 800d6f2:	f04f 30ff 	movhi.w	r0, #4294967295
 800d6f6:	bf98      	it	ls
 800d6f8:	2001      	movls	r0, #1
 800d6fa:	4770      	bx	lr
 800d6fc:	4608      	mov	r0, r1
 800d6fe:	4770      	bx	lr

0800d700 <abort>:
 800d700:	b508      	push	{r3, lr}
 800d702:	2006      	movs	r0, #6
 800d704:	f000 f834 	bl	800d770 <raise>
 800d708:	2001      	movs	r0, #1
 800d70a:	f7f6 fa1d 	bl	8003b48 <_exit>

0800d70e <_malloc_usable_size_r>:
 800d70e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d712:	1f18      	subs	r0, r3, #4
 800d714:	2b00      	cmp	r3, #0
 800d716:	bfbc      	itt	lt
 800d718:	580b      	ldrlt	r3, [r1, r0]
 800d71a:	18c0      	addlt	r0, r0, r3
 800d71c:	4770      	bx	lr

0800d71e <_raise_r>:
 800d71e:	291f      	cmp	r1, #31
 800d720:	b538      	push	{r3, r4, r5, lr}
 800d722:	4604      	mov	r4, r0
 800d724:	460d      	mov	r5, r1
 800d726:	d904      	bls.n	800d732 <_raise_r+0x14>
 800d728:	2316      	movs	r3, #22
 800d72a:	6003      	str	r3, [r0, #0]
 800d72c:	f04f 30ff 	mov.w	r0, #4294967295
 800d730:	bd38      	pop	{r3, r4, r5, pc}
 800d732:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d734:	b112      	cbz	r2, 800d73c <_raise_r+0x1e>
 800d736:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d73a:	b94b      	cbnz	r3, 800d750 <_raise_r+0x32>
 800d73c:	4620      	mov	r0, r4
 800d73e:	f000 f831 	bl	800d7a4 <_getpid_r>
 800d742:	462a      	mov	r2, r5
 800d744:	4601      	mov	r1, r0
 800d746:	4620      	mov	r0, r4
 800d748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d74c:	f000 b818 	b.w	800d780 <_kill_r>
 800d750:	2b01      	cmp	r3, #1
 800d752:	d00a      	beq.n	800d76a <_raise_r+0x4c>
 800d754:	1c59      	adds	r1, r3, #1
 800d756:	d103      	bne.n	800d760 <_raise_r+0x42>
 800d758:	2316      	movs	r3, #22
 800d75a:	6003      	str	r3, [r0, #0]
 800d75c:	2001      	movs	r0, #1
 800d75e:	e7e7      	b.n	800d730 <_raise_r+0x12>
 800d760:	2400      	movs	r4, #0
 800d762:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d766:	4628      	mov	r0, r5
 800d768:	4798      	blx	r3
 800d76a:	2000      	movs	r0, #0
 800d76c:	e7e0      	b.n	800d730 <_raise_r+0x12>
	...

0800d770 <raise>:
 800d770:	4b02      	ldr	r3, [pc, #8]	; (800d77c <raise+0xc>)
 800d772:	4601      	mov	r1, r0
 800d774:	6818      	ldr	r0, [r3, #0]
 800d776:	f7ff bfd2 	b.w	800d71e <_raise_r>
 800d77a:	bf00      	nop
 800d77c:	20000060 	.word	0x20000060

0800d780 <_kill_r>:
 800d780:	b538      	push	{r3, r4, r5, lr}
 800d782:	4d07      	ldr	r5, [pc, #28]	; (800d7a0 <_kill_r+0x20>)
 800d784:	2300      	movs	r3, #0
 800d786:	4604      	mov	r4, r0
 800d788:	4608      	mov	r0, r1
 800d78a:	4611      	mov	r1, r2
 800d78c:	602b      	str	r3, [r5, #0]
 800d78e:	f7f6 f9cb 	bl	8003b28 <_kill>
 800d792:	1c43      	adds	r3, r0, #1
 800d794:	d102      	bne.n	800d79c <_kill_r+0x1c>
 800d796:	682b      	ldr	r3, [r5, #0]
 800d798:	b103      	cbz	r3, 800d79c <_kill_r+0x1c>
 800d79a:	6023      	str	r3, [r4, #0]
 800d79c:	bd38      	pop	{r3, r4, r5, pc}
 800d79e:	bf00      	nop
 800d7a0:	2000449c 	.word	0x2000449c

0800d7a4 <_getpid_r>:
 800d7a4:	f7f6 b9b8 	b.w	8003b18 <_getpid>

0800d7a8 <cos>:
 800d7a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d7aa:	ec53 2b10 	vmov	r2, r3, d0
 800d7ae:	4826      	ldr	r0, [pc, #152]	; (800d848 <cos+0xa0>)
 800d7b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d7b4:	4281      	cmp	r1, r0
 800d7b6:	dc06      	bgt.n	800d7c6 <cos+0x1e>
 800d7b8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d840 <cos+0x98>
 800d7bc:	b005      	add	sp, #20
 800d7be:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7c2:	f000 bc59 	b.w	800e078 <__kernel_cos>
 800d7c6:	4821      	ldr	r0, [pc, #132]	; (800d84c <cos+0xa4>)
 800d7c8:	4281      	cmp	r1, r0
 800d7ca:	dd09      	ble.n	800d7e0 <cos+0x38>
 800d7cc:	ee10 0a10 	vmov	r0, s0
 800d7d0:	4619      	mov	r1, r3
 800d7d2:	f7f2 fd69 	bl	80002a8 <__aeabi_dsub>
 800d7d6:	ec41 0b10 	vmov	d0, r0, r1
 800d7da:	b005      	add	sp, #20
 800d7dc:	f85d fb04 	ldr.w	pc, [sp], #4
 800d7e0:	4668      	mov	r0, sp
 800d7e2:	f000 f989 	bl	800daf8 <__ieee754_rem_pio2>
 800d7e6:	f000 0003 	and.w	r0, r0, #3
 800d7ea:	2801      	cmp	r0, #1
 800d7ec:	d00b      	beq.n	800d806 <cos+0x5e>
 800d7ee:	2802      	cmp	r0, #2
 800d7f0:	d016      	beq.n	800d820 <cos+0x78>
 800d7f2:	b9e0      	cbnz	r0, 800d82e <cos+0x86>
 800d7f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d7f8:	ed9d 0b00 	vldr	d0, [sp]
 800d7fc:	f000 fc3c 	bl	800e078 <__kernel_cos>
 800d800:	ec51 0b10 	vmov	r0, r1, d0
 800d804:	e7e7      	b.n	800d7d6 <cos+0x2e>
 800d806:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d80a:	ed9d 0b00 	vldr	d0, [sp]
 800d80e:	f001 f84b 	bl	800e8a8 <__kernel_sin>
 800d812:	ec53 2b10 	vmov	r2, r3, d0
 800d816:	ee10 0a10 	vmov	r0, s0
 800d81a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d81e:	e7da      	b.n	800d7d6 <cos+0x2e>
 800d820:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d824:	ed9d 0b00 	vldr	d0, [sp]
 800d828:	f000 fc26 	bl	800e078 <__kernel_cos>
 800d82c:	e7f1      	b.n	800d812 <cos+0x6a>
 800d82e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d832:	ed9d 0b00 	vldr	d0, [sp]
 800d836:	2001      	movs	r0, #1
 800d838:	f001 f836 	bl	800e8a8 <__kernel_sin>
 800d83c:	e7e0      	b.n	800d800 <cos+0x58>
 800d83e:	bf00      	nop
	...
 800d848:	3fe921fb 	.word	0x3fe921fb
 800d84c:	7fefffff 	.word	0x7fefffff

0800d850 <sin>:
 800d850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d852:	ec53 2b10 	vmov	r2, r3, d0
 800d856:	4828      	ldr	r0, [pc, #160]	; (800d8f8 <sin+0xa8>)
 800d858:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d85c:	4281      	cmp	r1, r0
 800d85e:	dc07      	bgt.n	800d870 <sin+0x20>
 800d860:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800d8f0 <sin+0xa0>
 800d864:	2000      	movs	r0, #0
 800d866:	b005      	add	sp, #20
 800d868:	f85d eb04 	ldr.w	lr, [sp], #4
 800d86c:	f001 b81c 	b.w	800e8a8 <__kernel_sin>
 800d870:	4822      	ldr	r0, [pc, #136]	; (800d8fc <sin+0xac>)
 800d872:	4281      	cmp	r1, r0
 800d874:	dd09      	ble.n	800d88a <sin+0x3a>
 800d876:	ee10 0a10 	vmov	r0, s0
 800d87a:	4619      	mov	r1, r3
 800d87c:	f7f2 fd14 	bl	80002a8 <__aeabi_dsub>
 800d880:	ec41 0b10 	vmov	d0, r0, r1
 800d884:	b005      	add	sp, #20
 800d886:	f85d fb04 	ldr.w	pc, [sp], #4
 800d88a:	4668      	mov	r0, sp
 800d88c:	f000 f934 	bl	800daf8 <__ieee754_rem_pio2>
 800d890:	f000 0003 	and.w	r0, r0, #3
 800d894:	2801      	cmp	r0, #1
 800d896:	d00c      	beq.n	800d8b2 <sin+0x62>
 800d898:	2802      	cmp	r0, #2
 800d89a:	d011      	beq.n	800d8c0 <sin+0x70>
 800d89c:	b9f0      	cbnz	r0, 800d8dc <sin+0x8c>
 800d89e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d8a2:	ed9d 0b00 	vldr	d0, [sp]
 800d8a6:	2001      	movs	r0, #1
 800d8a8:	f000 fffe 	bl	800e8a8 <__kernel_sin>
 800d8ac:	ec51 0b10 	vmov	r0, r1, d0
 800d8b0:	e7e6      	b.n	800d880 <sin+0x30>
 800d8b2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d8b6:	ed9d 0b00 	vldr	d0, [sp]
 800d8ba:	f000 fbdd 	bl	800e078 <__kernel_cos>
 800d8be:	e7f5      	b.n	800d8ac <sin+0x5c>
 800d8c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d8c4:	ed9d 0b00 	vldr	d0, [sp]
 800d8c8:	2001      	movs	r0, #1
 800d8ca:	f000 ffed 	bl	800e8a8 <__kernel_sin>
 800d8ce:	ec53 2b10 	vmov	r2, r3, d0
 800d8d2:	ee10 0a10 	vmov	r0, s0
 800d8d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d8da:	e7d1      	b.n	800d880 <sin+0x30>
 800d8dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d8e0:	ed9d 0b00 	vldr	d0, [sp]
 800d8e4:	f000 fbc8 	bl	800e078 <__kernel_cos>
 800d8e8:	e7f1      	b.n	800d8ce <sin+0x7e>
 800d8ea:	bf00      	nop
 800d8ec:	f3af 8000 	nop.w
	...
 800d8f8:	3fe921fb 	.word	0x3fe921fb
 800d8fc:	7fefffff 	.word	0x7fefffff

0800d900 <atan2>:
 800d900:	f000 b82e 	b.w	800d960 <__ieee754_atan2>

0800d904 <sqrt>:
 800d904:	b538      	push	{r3, r4, r5, lr}
 800d906:	ed2d 8b02 	vpush	{d8}
 800d90a:	ec55 4b10 	vmov	r4, r5, d0
 800d90e:	f000 faff 	bl	800df10 <__ieee754_sqrt>
 800d912:	4622      	mov	r2, r4
 800d914:	462b      	mov	r3, r5
 800d916:	4620      	mov	r0, r4
 800d918:	4629      	mov	r1, r5
 800d91a:	eeb0 8a40 	vmov.f32	s16, s0
 800d91e:	eef0 8a60 	vmov.f32	s17, s1
 800d922:	f7f3 f913 	bl	8000b4c <__aeabi_dcmpun>
 800d926:	b990      	cbnz	r0, 800d94e <sqrt+0x4a>
 800d928:	2200      	movs	r2, #0
 800d92a:	2300      	movs	r3, #0
 800d92c:	4620      	mov	r0, r4
 800d92e:	4629      	mov	r1, r5
 800d930:	f7f3 f8e4 	bl	8000afc <__aeabi_dcmplt>
 800d934:	b158      	cbz	r0, 800d94e <sqrt+0x4a>
 800d936:	f7fc ff19 	bl	800a76c <__errno>
 800d93a:	2321      	movs	r3, #33	; 0x21
 800d93c:	6003      	str	r3, [r0, #0]
 800d93e:	2200      	movs	r2, #0
 800d940:	2300      	movs	r3, #0
 800d942:	4610      	mov	r0, r2
 800d944:	4619      	mov	r1, r3
 800d946:	f7f2 ff91 	bl	800086c <__aeabi_ddiv>
 800d94a:	ec41 0b18 	vmov	d8, r0, r1
 800d94e:	eeb0 0a48 	vmov.f32	s0, s16
 800d952:	eef0 0a68 	vmov.f32	s1, s17
 800d956:	ecbd 8b02 	vpop	{d8}
 800d95a:	bd38      	pop	{r3, r4, r5, pc}
 800d95c:	0000      	movs	r0, r0
	...

0800d960 <__ieee754_atan2>:
 800d960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d964:	ec57 6b11 	vmov	r6, r7, d1
 800d968:	4273      	negs	r3, r6
 800d96a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800daf0 <__ieee754_atan2+0x190>
 800d96e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800d972:	4333      	orrs	r3, r6
 800d974:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d978:	4573      	cmp	r3, lr
 800d97a:	ec51 0b10 	vmov	r0, r1, d0
 800d97e:	ee11 8a10 	vmov	r8, s2
 800d982:	d80a      	bhi.n	800d99a <__ieee754_atan2+0x3a>
 800d984:	4244      	negs	r4, r0
 800d986:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d98a:	4304      	orrs	r4, r0
 800d98c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800d990:	4574      	cmp	r4, lr
 800d992:	ee10 9a10 	vmov	r9, s0
 800d996:	468c      	mov	ip, r1
 800d998:	d907      	bls.n	800d9aa <__ieee754_atan2+0x4a>
 800d99a:	4632      	mov	r2, r6
 800d99c:	463b      	mov	r3, r7
 800d99e:	f7f2 fc85 	bl	80002ac <__adddf3>
 800d9a2:	ec41 0b10 	vmov	d0, r0, r1
 800d9a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9aa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800d9ae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d9b2:	4334      	orrs	r4, r6
 800d9b4:	d103      	bne.n	800d9be <__ieee754_atan2+0x5e>
 800d9b6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9ba:	f001 b835 	b.w	800ea28 <atan>
 800d9be:	17bc      	asrs	r4, r7, #30
 800d9c0:	f004 0402 	and.w	r4, r4, #2
 800d9c4:	ea53 0909 	orrs.w	r9, r3, r9
 800d9c8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800d9cc:	d107      	bne.n	800d9de <__ieee754_atan2+0x7e>
 800d9ce:	2c02      	cmp	r4, #2
 800d9d0:	d060      	beq.n	800da94 <__ieee754_atan2+0x134>
 800d9d2:	2c03      	cmp	r4, #3
 800d9d4:	d1e5      	bne.n	800d9a2 <__ieee754_atan2+0x42>
 800d9d6:	a142      	add	r1, pc, #264	; (adr r1, 800dae0 <__ieee754_atan2+0x180>)
 800d9d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9dc:	e7e1      	b.n	800d9a2 <__ieee754_atan2+0x42>
 800d9de:	ea52 0808 	orrs.w	r8, r2, r8
 800d9e2:	d106      	bne.n	800d9f2 <__ieee754_atan2+0x92>
 800d9e4:	f1bc 0f00 	cmp.w	ip, #0
 800d9e8:	da5f      	bge.n	800daaa <__ieee754_atan2+0x14a>
 800d9ea:	a13f      	add	r1, pc, #252	; (adr r1, 800dae8 <__ieee754_atan2+0x188>)
 800d9ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9f0:	e7d7      	b.n	800d9a2 <__ieee754_atan2+0x42>
 800d9f2:	4572      	cmp	r2, lr
 800d9f4:	d10f      	bne.n	800da16 <__ieee754_atan2+0xb6>
 800d9f6:	4293      	cmp	r3, r2
 800d9f8:	f104 34ff 	add.w	r4, r4, #4294967295
 800d9fc:	d107      	bne.n	800da0e <__ieee754_atan2+0xae>
 800d9fe:	2c02      	cmp	r4, #2
 800da00:	d84c      	bhi.n	800da9c <__ieee754_atan2+0x13c>
 800da02:	4b35      	ldr	r3, [pc, #212]	; (800dad8 <__ieee754_atan2+0x178>)
 800da04:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800da08:	e9d4 0100 	ldrd	r0, r1, [r4]
 800da0c:	e7c9      	b.n	800d9a2 <__ieee754_atan2+0x42>
 800da0e:	2c02      	cmp	r4, #2
 800da10:	d848      	bhi.n	800daa4 <__ieee754_atan2+0x144>
 800da12:	4b32      	ldr	r3, [pc, #200]	; (800dadc <__ieee754_atan2+0x17c>)
 800da14:	e7f6      	b.n	800da04 <__ieee754_atan2+0xa4>
 800da16:	4573      	cmp	r3, lr
 800da18:	d0e4      	beq.n	800d9e4 <__ieee754_atan2+0x84>
 800da1a:	1a9b      	subs	r3, r3, r2
 800da1c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800da20:	ea4f 5223 	mov.w	r2, r3, asr #20
 800da24:	da1e      	bge.n	800da64 <__ieee754_atan2+0x104>
 800da26:	2f00      	cmp	r7, #0
 800da28:	da01      	bge.n	800da2e <__ieee754_atan2+0xce>
 800da2a:	323c      	adds	r2, #60	; 0x3c
 800da2c:	db1e      	blt.n	800da6c <__ieee754_atan2+0x10c>
 800da2e:	4632      	mov	r2, r6
 800da30:	463b      	mov	r3, r7
 800da32:	f7f2 ff1b 	bl	800086c <__aeabi_ddiv>
 800da36:	ec41 0b10 	vmov	d0, r0, r1
 800da3a:	f001 f995 	bl	800ed68 <fabs>
 800da3e:	f000 fff3 	bl	800ea28 <atan>
 800da42:	ec51 0b10 	vmov	r0, r1, d0
 800da46:	2c01      	cmp	r4, #1
 800da48:	d013      	beq.n	800da72 <__ieee754_atan2+0x112>
 800da4a:	2c02      	cmp	r4, #2
 800da4c:	d015      	beq.n	800da7a <__ieee754_atan2+0x11a>
 800da4e:	2c00      	cmp	r4, #0
 800da50:	d0a7      	beq.n	800d9a2 <__ieee754_atan2+0x42>
 800da52:	a319      	add	r3, pc, #100	; (adr r3, 800dab8 <__ieee754_atan2+0x158>)
 800da54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da58:	f7f2 fc26 	bl	80002a8 <__aeabi_dsub>
 800da5c:	a318      	add	r3, pc, #96	; (adr r3, 800dac0 <__ieee754_atan2+0x160>)
 800da5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da62:	e014      	b.n	800da8e <__ieee754_atan2+0x12e>
 800da64:	a118      	add	r1, pc, #96	; (adr r1, 800dac8 <__ieee754_atan2+0x168>)
 800da66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da6a:	e7ec      	b.n	800da46 <__ieee754_atan2+0xe6>
 800da6c:	2000      	movs	r0, #0
 800da6e:	2100      	movs	r1, #0
 800da70:	e7e9      	b.n	800da46 <__ieee754_atan2+0xe6>
 800da72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800da76:	4619      	mov	r1, r3
 800da78:	e793      	b.n	800d9a2 <__ieee754_atan2+0x42>
 800da7a:	a30f      	add	r3, pc, #60	; (adr r3, 800dab8 <__ieee754_atan2+0x158>)
 800da7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da80:	f7f2 fc12 	bl	80002a8 <__aeabi_dsub>
 800da84:	4602      	mov	r2, r0
 800da86:	460b      	mov	r3, r1
 800da88:	a10d      	add	r1, pc, #52	; (adr r1, 800dac0 <__ieee754_atan2+0x160>)
 800da8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da8e:	f7f2 fc0b 	bl	80002a8 <__aeabi_dsub>
 800da92:	e786      	b.n	800d9a2 <__ieee754_atan2+0x42>
 800da94:	a10a      	add	r1, pc, #40	; (adr r1, 800dac0 <__ieee754_atan2+0x160>)
 800da96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da9a:	e782      	b.n	800d9a2 <__ieee754_atan2+0x42>
 800da9c:	a10c      	add	r1, pc, #48	; (adr r1, 800dad0 <__ieee754_atan2+0x170>)
 800da9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800daa2:	e77e      	b.n	800d9a2 <__ieee754_atan2+0x42>
 800daa4:	2000      	movs	r0, #0
 800daa6:	2100      	movs	r1, #0
 800daa8:	e77b      	b.n	800d9a2 <__ieee754_atan2+0x42>
 800daaa:	a107      	add	r1, pc, #28	; (adr r1, 800dac8 <__ieee754_atan2+0x168>)
 800daac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dab0:	e777      	b.n	800d9a2 <__ieee754_atan2+0x42>
 800dab2:	bf00      	nop
 800dab4:	f3af 8000 	nop.w
 800dab8:	33145c07 	.word	0x33145c07
 800dabc:	3ca1a626 	.word	0x3ca1a626
 800dac0:	54442d18 	.word	0x54442d18
 800dac4:	400921fb 	.word	0x400921fb
 800dac8:	54442d18 	.word	0x54442d18
 800dacc:	3ff921fb 	.word	0x3ff921fb
 800dad0:	54442d18 	.word	0x54442d18
 800dad4:	3fe921fb 	.word	0x3fe921fb
 800dad8:	0800f4f0 	.word	0x0800f4f0
 800dadc:	0800f508 	.word	0x0800f508
 800dae0:	54442d18 	.word	0x54442d18
 800dae4:	c00921fb 	.word	0xc00921fb
 800dae8:	54442d18 	.word	0x54442d18
 800daec:	bff921fb 	.word	0xbff921fb
 800daf0:	7ff00000 	.word	0x7ff00000
 800daf4:	00000000 	.word	0x00000000

0800daf8 <__ieee754_rem_pio2>:
 800daf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dafc:	ed2d 8b02 	vpush	{d8}
 800db00:	ec55 4b10 	vmov	r4, r5, d0
 800db04:	4bca      	ldr	r3, [pc, #808]	; (800de30 <__ieee754_rem_pio2+0x338>)
 800db06:	b08b      	sub	sp, #44	; 0x2c
 800db08:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800db0c:	4598      	cmp	r8, r3
 800db0e:	4682      	mov	sl, r0
 800db10:	9502      	str	r5, [sp, #8]
 800db12:	dc08      	bgt.n	800db26 <__ieee754_rem_pio2+0x2e>
 800db14:	2200      	movs	r2, #0
 800db16:	2300      	movs	r3, #0
 800db18:	ed80 0b00 	vstr	d0, [r0]
 800db1c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800db20:	f04f 0b00 	mov.w	fp, #0
 800db24:	e028      	b.n	800db78 <__ieee754_rem_pio2+0x80>
 800db26:	4bc3      	ldr	r3, [pc, #780]	; (800de34 <__ieee754_rem_pio2+0x33c>)
 800db28:	4598      	cmp	r8, r3
 800db2a:	dc78      	bgt.n	800dc1e <__ieee754_rem_pio2+0x126>
 800db2c:	9b02      	ldr	r3, [sp, #8]
 800db2e:	4ec2      	ldr	r6, [pc, #776]	; (800de38 <__ieee754_rem_pio2+0x340>)
 800db30:	2b00      	cmp	r3, #0
 800db32:	ee10 0a10 	vmov	r0, s0
 800db36:	a3b0      	add	r3, pc, #704	; (adr r3, 800ddf8 <__ieee754_rem_pio2+0x300>)
 800db38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db3c:	4629      	mov	r1, r5
 800db3e:	dd39      	ble.n	800dbb4 <__ieee754_rem_pio2+0xbc>
 800db40:	f7f2 fbb2 	bl	80002a8 <__aeabi_dsub>
 800db44:	45b0      	cmp	r8, r6
 800db46:	4604      	mov	r4, r0
 800db48:	460d      	mov	r5, r1
 800db4a:	d01b      	beq.n	800db84 <__ieee754_rem_pio2+0x8c>
 800db4c:	a3ac      	add	r3, pc, #688	; (adr r3, 800de00 <__ieee754_rem_pio2+0x308>)
 800db4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db52:	f7f2 fba9 	bl	80002a8 <__aeabi_dsub>
 800db56:	4602      	mov	r2, r0
 800db58:	460b      	mov	r3, r1
 800db5a:	e9ca 2300 	strd	r2, r3, [sl]
 800db5e:	4620      	mov	r0, r4
 800db60:	4629      	mov	r1, r5
 800db62:	f7f2 fba1 	bl	80002a8 <__aeabi_dsub>
 800db66:	a3a6      	add	r3, pc, #664	; (adr r3, 800de00 <__ieee754_rem_pio2+0x308>)
 800db68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db6c:	f7f2 fb9c 	bl	80002a8 <__aeabi_dsub>
 800db70:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800db74:	f04f 0b01 	mov.w	fp, #1
 800db78:	4658      	mov	r0, fp
 800db7a:	b00b      	add	sp, #44	; 0x2c
 800db7c:	ecbd 8b02 	vpop	{d8}
 800db80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db84:	a3a0      	add	r3, pc, #640	; (adr r3, 800de08 <__ieee754_rem_pio2+0x310>)
 800db86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db8a:	f7f2 fb8d 	bl	80002a8 <__aeabi_dsub>
 800db8e:	a3a0      	add	r3, pc, #640	; (adr r3, 800de10 <__ieee754_rem_pio2+0x318>)
 800db90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db94:	4604      	mov	r4, r0
 800db96:	460d      	mov	r5, r1
 800db98:	f7f2 fb86 	bl	80002a8 <__aeabi_dsub>
 800db9c:	4602      	mov	r2, r0
 800db9e:	460b      	mov	r3, r1
 800dba0:	e9ca 2300 	strd	r2, r3, [sl]
 800dba4:	4620      	mov	r0, r4
 800dba6:	4629      	mov	r1, r5
 800dba8:	f7f2 fb7e 	bl	80002a8 <__aeabi_dsub>
 800dbac:	a398      	add	r3, pc, #608	; (adr r3, 800de10 <__ieee754_rem_pio2+0x318>)
 800dbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb2:	e7db      	b.n	800db6c <__ieee754_rem_pio2+0x74>
 800dbb4:	f7f2 fb7a 	bl	80002ac <__adddf3>
 800dbb8:	45b0      	cmp	r8, r6
 800dbba:	4604      	mov	r4, r0
 800dbbc:	460d      	mov	r5, r1
 800dbbe:	d016      	beq.n	800dbee <__ieee754_rem_pio2+0xf6>
 800dbc0:	a38f      	add	r3, pc, #572	; (adr r3, 800de00 <__ieee754_rem_pio2+0x308>)
 800dbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc6:	f7f2 fb71 	bl	80002ac <__adddf3>
 800dbca:	4602      	mov	r2, r0
 800dbcc:	460b      	mov	r3, r1
 800dbce:	e9ca 2300 	strd	r2, r3, [sl]
 800dbd2:	4620      	mov	r0, r4
 800dbd4:	4629      	mov	r1, r5
 800dbd6:	f7f2 fb67 	bl	80002a8 <__aeabi_dsub>
 800dbda:	a389      	add	r3, pc, #548	; (adr r3, 800de00 <__ieee754_rem_pio2+0x308>)
 800dbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe0:	f7f2 fb64 	bl	80002ac <__adddf3>
 800dbe4:	f04f 3bff 	mov.w	fp, #4294967295
 800dbe8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dbec:	e7c4      	b.n	800db78 <__ieee754_rem_pio2+0x80>
 800dbee:	a386      	add	r3, pc, #536	; (adr r3, 800de08 <__ieee754_rem_pio2+0x310>)
 800dbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf4:	f7f2 fb5a 	bl	80002ac <__adddf3>
 800dbf8:	a385      	add	r3, pc, #532	; (adr r3, 800de10 <__ieee754_rem_pio2+0x318>)
 800dbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbfe:	4604      	mov	r4, r0
 800dc00:	460d      	mov	r5, r1
 800dc02:	f7f2 fb53 	bl	80002ac <__adddf3>
 800dc06:	4602      	mov	r2, r0
 800dc08:	460b      	mov	r3, r1
 800dc0a:	e9ca 2300 	strd	r2, r3, [sl]
 800dc0e:	4620      	mov	r0, r4
 800dc10:	4629      	mov	r1, r5
 800dc12:	f7f2 fb49 	bl	80002a8 <__aeabi_dsub>
 800dc16:	a37e      	add	r3, pc, #504	; (adr r3, 800de10 <__ieee754_rem_pio2+0x318>)
 800dc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc1c:	e7e0      	b.n	800dbe0 <__ieee754_rem_pio2+0xe8>
 800dc1e:	4b87      	ldr	r3, [pc, #540]	; (800de3c <__ieee754_rem_pio2+0x344>)
 800dc20:	4598      	cmp	r8, r3
 800dc22:	f300 80d9 	bgt.w	800ddd8 <__ieee754_rem_pio2+0x2e0>
 800dc26:	f001 f89f 	bl	800ed68 <fabs>
 800dc2a:	ec55 4b10 	vmov	r4, r5, d0
 800dc2e:	ee10 0a10 	vmov	r0, s0
 800dc32:	a379      	add	r3, pc, #484	; (adr r3, 800de18 <__ieee754_rem_pio2+0x320>)
 800dc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc38:	4629      	mov	r1, r5
 800dc3a:	f7f2 fced 	bl	8000618 <__aeabi_dmul>
 800dc3e:	4b80      	ldr	r3, [pc, #512]	; (800de40 <__ieee754_rem_pio2+0x348>)
 800dc40:	2200      	movs	r2, #0
 800dc42:	f7f2 fb33 	bl	80002ac <__adddf3>
 800dc46:	f7f2 ff97 	bl	8000b78 <__aeabi_d2iz>
 800dc4a:	4683      	mov	fp, r0
 800dc4c:	f7f2 fc7a 	bl	8000544 <__aeabi_i2d>
 800dc50:	4602      	mov	r2, r0
 800dc52:	460b      	mov	r3, r1
 800dc54:	ec43 2b18 	vmov	d8, r2, r3
 800dc58:	a367      	add	r3, pc, #412	; (adr r3, 800ddf8 <__ieee754_rem_pio2+0x300>)
 800dc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc5e:	f7f2 fcdb 	bl	8000618 <__aeabi_dmul>
 800dc62:	4602      	mov	r2, r0
 800dc64:	460b      	mov	r3, r1
 800dc66:	4620      	mov	r0, r4
 800dc68:	4629      	mov	r1, r5
 800dc6a:	f7f2 fb1d 	bl	80002a8 <__aeabi_dsub>
 800dc6e:	a364      	add	r3, pc, #400	; (adr r3, 800de00 <__ieee754_rem_pio2+0x308>)
 800dc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc74:	4606      	mov	r6, r0
 800dc76:	460f      	mov	r7, r1
 800dc78:	ec51 0b18 	vmov	r0, r1, d8
 800dc7c:	f7f2 fccc 	bl	8000618 <__aeabi_dmul>
 800dc80:	f1bb 0f1f 	cmp.w	fp, #31
 800dc84:	4604      	mov	r4, r0
 800dc86:	460d      	mov	r5, r1
 800dc88:	dc0d      	bgt.n	800dca6 <__ieee754_rem_pio2+0x1ae>
 800dc8a:	4b6e      	ldr	r3, [pc, #440]	; (800de44 <__ieee754_rem_pio2+0x34c>)
 800dc8c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800dc90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc94:	4543      	cmp	r3, r8
 800dc96:	d006      	beq.n	800dca6 <__ieee754_rem_pio2+0x1ae>
 800dc98:	4622      	mov	r2, r4
 800dc9a:	462b      	mov	r3, r5
 800dc9c:	4630      	mov	r0, r6
 800dc9e:	4639      	mov	r1, r7
 800dca0:	f7f2 fb02 	bl	80002a8 <__aeabi_dsub>
 800dca4:	e00f      	b.n	800dcc6 <__ieee754_rem_pio2+0x1ce>
 800dca6:	462b      	mov	r3, r5
 800dca8:	4622      	mov	r2, r4
 800dcaa:	4630      	mov	r0, r6
 800dcac:	4639      	mov	r1, r7
 800dcae:	f7f2 fafb 	bl	80002a8 <__aeabi_dsub>
 800dcb2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800dcb6:	9303      	str	r3, [sp, #12]
 800dcb8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dcbc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800dcc0:	f1b8 0f10 	cmp.w	r8, #16
 800dcc4:	dc02      	bgt.n	800dccc <__ieee754_rem_pio2+0x1d4>
 800dcc6:	e9ca 0100 	strd	r0, r1, [sl]
 800dcca:	e039      	b.n	800dd40 <__ieee754_rem_pio2+0x248>
 800dccc:	a34e      	add	r3, pc, #312	; (adr r3, 800de08 <__ieee754_rem_pio2+0x310>)
 800dcce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcd2:	ec51 0b18 	vmov	r0, r1, d8
 800dcd6:	f7f2 fc9f 	bl	8000618 <__aeabi_dmul>
 800dcda:	4604      	mov	r4, r0
 800dcdc:	460d      	mov	r5, r1
 800dcde:	4602      	mov	r2, r0
 800dce0:	460b      	mov	r3, r1
 800dce2:	4630      	mov	r0, r6
 800dce4:	4639      	mov	r1, r7
 800dce6:	f7f2 fadf 	bl	80002a8 <__aeabi_dsub>
 800dcea:	4602      	mov	r2, r0
 800dcec:	460b      	mov	r3, r1
 800dcee:	4680      	mov	r8, r0
 800dcf0:	4689      	mov	r9, r1
 800dcf2:	4630      	mov	r0, r6
 800dcf4:	4639      	mov	r1, r7
 800dcf6:	f7f2 fad7 	bl	80002a8 <__aeabi_dsub>
 800dcfa:	4622      	mov	r2, r4
 800dcfc:	462b      	mov	r3, r5
 800dcfe:	f7f2 fad3 	bl	80002a8 <__aeabi_dsub>
 800dd02:	a343      	add	r3, pc, #268	; (adr r3, 800de10 <__ieee754_rem_pio2+0x318>)
 800dd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd08:	4604      	mov	r4, r0
 800dd0a:	460d      	mov	r5, r1
 800dd0c:	ec51 0b18 	vmov	r0, r1, d8
 800dd10:	f7f2 fc82 	bl	8000618 <__aeabi_dmul>
 800dd14:	4622      	mov	r2, r4
 800dd16:	462b      	mov	r3, r5
 800dd18:	f7f2 fac6 	bl	80002a8 <__aeabi_dsub>
 800dd1c:	4602      	mov	r2, r0
 800dd1e:	460b      	mov	r3, r1
 800dd20:	4604      	mov	r4, r0
 800dd22:	460d      	mov	r5, r1
 800dd24:	4640      	mov	r0, r8
 800dd26:	4649      	mov	r1, r9
 800dd28:	f7f2 fabe 	bl	80002a8 <__aeabi_dsub>
 800dd2c:	9a03      	ldr	r2, [sp, #12]
 800dd2e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dd32:	1ad3      	subs	r3, r2, r3
 800dd34:	2b31      	cmp	r3, #49	; 0x31
 800dd36:	dc24      	bgt.n	800dd82 <__ieee754_rem_pio2+0x28a>
 800dd38:	e9ca 0100 	strd	r0, r1, [sl]
 800dd3c:	4646      	mov	r6, r8
 800dd3e:	464f      	mov	r7, r9
 800dd40:	e9da 8900 	ldrd	r8, r9, [sl]
 800dd44:	4630      	mov	r0, r6
 800dd46:	4642      	mov	r2, r8
 800dd48:	464b      	mov	r3, r9
 800dd4a:	4639      	mov	r1, r7
 800dd4c:	f7f2 faac 	bl	80002a8 <__aeabi_dsub>
 800dd50:	462b      	mov	r3, r5
 800dd52:	4622      	mov	r2, r4
 800dd54:	f7f2 faa8 	bl	80002a8 <__aeabi_dsub>
 800dd58:	9b02      	ldr	r3, [sp, #8]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dd60:	f6bf af0a 	bge.w	800db78 <__ieee754_rem_pio2+0x80>
 800dd64:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dd68:	f8ca 3004 	str.w	r3, [sl, #4]
 800dd6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd70:	f8ca 8000 	str.w	r8, [sl]
 800dd74:	f8ca 0008 	str.w	r0, [sl, #8]
 800dd78:	f8ca 300c 	str.w	r3, [sl, #12]
 800dd7c:	f1cb 0b00 	rsb	fp, fp, #0
 800dd80:	e6fa      	b.n	800db78 <__ieee754_rem_pio2+0x80>
 800dd82:	a327      	add	r3, pc, #156	; (adr r3, 800de20 <__ieee754_rem_pio2+0x328>)
 800dd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd88:	ec51 0b18 	vmov	r0, r1, d8
 800dd8c:	f7f2 fc44 	bl	8000618 <__aeabi_dmul>
 800dd90:	4604      	mov	r4, r0
 800dd92:	460d      	mov	r5, r1
 800dd94:	4602      	mov	r2, r0
 800dd96:	460b      	mov	r3, r1
 800dd98:	4640      	mov	r0, r8
 800dd9a:	4649      	mov	r1, r9
 800dd9c:	f7f2 fa84 	bl	80002a8 <__aeabi_dsub>
 800dda0:	4602      	mov	r2, r0
 800dda2:	460b      	mov	r3, r1
 800dda4:	4606      	mov	r6, r0
 800dda6:	460f      	mov	r7, r1
 800dda8:	4640      	mov	r0, r8
 800ddaa:	4649      	mov	r1, r9
 800ddac:	f7f2 fa7c 	bl	80002a8 <__aeabi_dsub>
 800ddb0:	4622      	mov	r2, r4
 800ddb2:	462b      	mov	r3, r5
 800ddb4:	f7f2 fa78 	bl	80002a8 <__aeabi_dsub>
 800ddb8:	a31b      	add	r3, pc, #108	; (adr r3, 800de28 <__ieee754_rem_pio2+0x330>)
 800ddba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddbe:	4604      	mov	r4, r0
 800ddc0:	460d      	mov	r5, r1
 800ddc2:	ec51 0b18 	vmov	r0, r1, d8
 800ddc6:	f7f2 fc27 	bl	8000618 <__aeabi_dmul>
 800ddca:	4622      	mov	r2, r4
 800ddcc:	462b      	mov	r3, r5
 800ddce:	f7f2 fa6b 	bl	80002a8 <__aeabi_dsub>
 800ddd2:	4604      	mov	r4, r0
 800ddd4:	460d      	mov	r5, r1
 800ddd6:	e75f      	b.n	800dc98 <__ieee754_rem_pio2+0x1a0>
 800ddd8:	4b1b      	ldr	r3, [pc, #108]	; (800de48 <__ieee754_rem_pio2+0x350>)
 800ddda:	4598      	cmp	r8, r3
 800dddc:	dd36      	ble.n	800de4c <__ieee754_rem_pio2+0x354>
 800ddde:	ee10 2a10 	vmov	r2, s0
 800dde2:	462b      	mov	r3, r5
 800dde4:	4620      	mov	r0, r4
 800dde6:	4629      	mov	r1, r5
 800dde8:	f7f2 fa5e 	bl	80002a8 <__aeabi_dsub>
 800ddec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ddf0:	e9ca 0100 	strd	r0, r1, [sl]
 800ddf4:	e694      	b.n	800db20 <__ieee754_rem_pio2+0x28>
 800ddf6:	bf00      	nop
 800ddf8:	54400000 	.word	0x54400000
 800ddfc:	3ff921fb 	.word	0x3ff921fb
 800de00:	1a626331 	.word	0x1a626331
 800de04:	3dd0b461 	.word	0x3dd0b461
 800de08:	1a600000 	.word	0x1a600000
 800de0c:	3dd0b461 	.word	0x3dd0b461
 800de10:	2e037073 	.word	0x2e037073
 800de14:	3ba3198a 	.word	0x3ba3198a
 800de18:	6dc9c883 	.word	0x6dc9c883
 800de1c:	3fe45f30 	.word	0x3fe45f30
 800de20:	2e000000 	.word	0x2e000000
 800de24:	3ba3198a 	.word	0x3ba3198a
 800de28:	252049c1 	.word	0x252049c1
 800de2c:	397b839a 	.word	0x397b839a
 800de30:	3fe921fb 	.word	0x3fe921fb
 800de34:	4002d97b 	.word	0x4002d97b
 800de38:	3ff921fb 	.word	0x3ff921fb
 800de3c:	413921fb 	.word	0x413921fb
 800de40:	3fe00000 	.word	0x3fe00000
 800de44:	0800f520 	.word	0x0800f520
 800de48:	7fefffff 	.word	0x7fefffff
 800de4c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800de50:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800de54:	ee10 0a10 	vmov	r0, s0
 800de58:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800de5c:	ee10 6a10 	vmov	r6, s0
 800de60:	460f      	mov	r7, r1
 800de62:	f7f2 fe89 	bl	8000b78 <__aeabi_d2iz>
 800de66:	f7f2 fb6d 	bl	8000544 <__aeabi_i2d>
 800de6a:	4602      	mov	r2, r0
 800de6c:	460b      	mov	r3, r1
 800de6e:	4630      	mov	r0, r6
 800de70:	4639      	mov	r1, r7
 800de72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800de76:	f7f2 fa17 	bl	80002a8 <__aeabi_dsub>
 800de7a:	4b23      	ldr	r3, [pc, #140]	; (800df08 <__ieee754_rem_pio2+0x410>)
 800de7c:	2200      	movs	r2, #0
 800de7e:	f7f2 fbcb 	bl	8000618 <__aeabi_dmul>
 800de82:	460f      	mov	r7, r1
 800de84:	4606      	mov	r6, r0
 800de86:	f7f2 fe77 	bl	8000b78 <__aeabi_d2iz>
 800de8a:	f7f2 fb5b 	bl	8000544 <__aeabi_i2d>
 800de8e:	4602      	mov	r2, r0
 800de90:	460b      	mov	r3, r1
 800de92:	4630      	mov	r0, r6
 800de94:	4639      	mov	r1, r7
 800de96:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800de9a:	f7f2 fa05 	bl	80002a8 <__aeabi_dsub>
 800de9e:	4b1a      	ldr	r3, [pc, #104]	; (800df08 <__ieee754_rem_pio2+0x410>)
 800dea0:	2200      	movs	r2, #0
 800dea2:	f7f2 fbb9 	bl	8000618 <__aeabi_dmul>
 800dea6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800deaa:	ad04      	add	r5, sp, #16
 800deac:	f04f 0803 	mov.w	r8, #3
 800deb0:	46a9      	mov	r9, r5
 800deb2:	2600      	movs	r6, #0
 800deb4:	2700      	movs	r7, #0
 800deb6:	4632      	mov	r2, r6
 800deb8:	463b      	mov	r3, r7
 800deba:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800debe:	46c3      	mov	fp, r8
 800dec0:	3d08      	subs	r5, #8
 800dec2:	f108 38ff 	add.w	r8, r8, #4294967295
 800dec6:	f7f2 fe0f 	bl	8000ae8 <__aeabi_dcmpeq>
 800deca:	2800      	cmp	r0, #0
 800decc:	d1f3      	bne.n	800deb6 <__ieee754_rem_pio2+0x3be>
 800dece:	4b0f      	ldr	r3, [pc, #60]	; (800df0c <__ieee754_rem_pio2+0x414>)
 800ded0:	9301      	str	r3, [sp, #4]
 800ded2:	2302      	movs	r3, #2
 800ded4:	9300      	str	r3, [sp, #0]
 800ded6:	4622      	mov	r2, r4
 800ded8:	465b      	mov	r3, fp
 800deda:	4651      	mov	r1, sl
 800dedc:	4648      	mov	r0, r9
 800dede:	f000 f993 	bl	800e208 <__kernel_rem_pio2>
 800dee2:	9b02      	ldr	r3, [sp, #8]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	4683      	mov	fp, r0
 800dee8:	f6bf ae46 	bge.w	800db78 <__ieee754_rem_pio2+0x80>
 800deec:	e9da 2100 	ldrd	r2, r1, [sl]
 800def0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800def4:	e9ca 2300 	strd	r2, r3, [sl]
 800def8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800defc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800df00:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800df04:	e73a      	b.n	800dd7c <__ieee754_rem_pio2+0x284>
 800df06:	bf00      	nop
 800df08:	41700000 	.word	0x41700000
 800df0c:	0800f5a0 	.word	0x0800f5a0

0800df10 <__ieee754_sqrt>:
 800df10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df14:	ec55 4b10 	vmov	r4, r5, d0
 800df18:	4e55      	ldr	r6, [pc, #340]	; (800e070 <__ieee754_sqrt+0x160>)
 800df1a:	43ae      	bics	r6, r5
 800df1c:	ee10 0a10 	vmov	r0, s0
 800df20:	ee10 3a10 	vmov	r3, s0
 800df24:	462a      	mov	r2, r5
 800df26:	4629      	mov	r1, r5
 800df28:	d110      	bne.n	800df4c <__ieee754_sqrt+0x3c>
 800df2a:	ee10 2a10 	vmov	r2, s0
 800df2e:	462b      	mov	r3, r5
 800df30:	f7f2 fb72 	bl	8000618 <__aeabi_dmul>
 800df34:	4602      	mov	r2, r0
 800df36:	460b      	mov	r3, r1
 800df38:	4620      	mov	r0, r4
 800df3a:	4629      	mov	r1, r5
 800df3c:	f7f2 f9b6 	bl	80002ac <__adddf3>
 800df40:	4604      	mov	r4, r0
 800df42:	460d      	mov	r5, r1
 800df44:	ec45 4b10 	vmov	d0, r4, r5
 800df48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df4c:	2d00      	cmp	r5, #0
 800df4e:	dc10      	bgt.n	800df72 <__ieee754_sqrt+0x62>
 800df50:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800df54:	4330      	orrs	r0, r6
 800df56:	d0f5      	beq.n	800df44 <__ieee754_sqrt+0x34>
 800df58:	b15d      	cbz	r5, 800df72 <__ieee754_sqrt+0x62>
 800df5a:	ee10 2a10 	vmov	r2, s0
 800df5e:	462b      	mov	r3, r5
 800df60:	ee10 0a10 	vmov	r0, s0
 800df64:	f7f2 f9a0 	bl	80002a8 <__aeabi_dsub>
 800df68:	4602      	mov	r2, r0
 800df6a:	460b      	mov	r3, r1
 800df6c:	f7f2 fc7e 	bl	800086c <__aeabi_ddiv>
 800df70:	e7e6      	b.n	800df40 <__ieee754_sqrt+0x30>
 800df72:	1512      	asrs	r2, r2, #20
 800df74:	d074      	beq.n	800e060 <__ieee754_sqrt+0x150>
 800df76:	07d4      	lsls	r4, r2, #31
 800df78:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800df7c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800df80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800df84:	bf5e      	ittt	pl
 800df86:	0fda      	lsrpl	r2, r3, #31
 800df88:	005b      	lslpl	r3, r3, #1
 800df8a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800df8e:	2400      	movs	r4, #0
 800df90:	0fda      	lsrs	r2, r3, #31
 800df92:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800df96:	107f      	asrs	r7, r7, #1
 800df98:	005b      	lsls	r3, r3, #1
 800df9a:	2516      	movs	r5, #22
 800df9c:	4620      	mov	r0, r4
 800df9e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800dfa2:	1886      	adds	r6, r0, r2
 800dfa4:	428e      	cmp	r6, r1
 800dfa6:	bfde      	ittt	le
 800dfa8:	1b89      	suble	r1, r1, r6
 800dfaa:	18b0      	addle	r0, r6, r2
 800dfac:	18a4      	addle	r4, r4, r2
 800dfae:	0049      	lsls	r1, r1, #1
 800dfb0:	3d01      	subs	r5, #1
 800dfb2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800dfb6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800dfba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dfbe:	d1f0      	bne.n	800dfa2 <__ieee754_sqrt+0x92>
 800dfc0:	462a      	mov	r2, r5
 800dfc2:	f04f 0e20 	mov.w	lr, #32
 800dfc6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800dfca:	4281      	cmp	r1, r0
 800dfcc:	eb06 0c05 	add.w	ip, r6, r5
 800dfd0:	dc02      	bgt.n	800dfd8 <__ieee754_sqrt+0xc8>
 800dfd2:	d113      	bne.n	800dffc <__ieee754_sqrt+0xec>
 800dfd4:	459c      	cmp	ip, r3
 800dfd6:	d811      	bhi.n	800dffc <__ieee754_sqrt+0xec>
 800dfd8:	f1bc 0f00 	cmp.w	ip, #0
 800dfdc:	eb0c 0506 	add.w	r5, ip, r6
 800dfe0:	da43      	bge.n	800e06a <__ieee754_sqrt+0x15a>
 800dfe2:	2d00      	cmp	r5, #0
 800dfe4:	db41      	blt.n	800e06a <__ieee754_sqrt+0x15a>
 800dfe6:	f100 0801 	add.w	r8, r0, #1
 800dfea:	1a09      	subs	r1, r1, r0
 800dfec:	459c      	cmp	ip, r3
 800dfee:	bf88      	it	hi
 800dff0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800dff4:	eba3 030c 	sub.w	r3, r3, ip
 800dff8:	4432      	add	r2, r6
 800dffa:	4640      	mov	r0, r8
 800dffc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800e000:	f1be 0e01 	subs.w	lr, lr, #1
 800e004:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800e008:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e00c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e010:	d1db      	bne.n	800dfca <__ieee754_sqrt+0xba>
 800e012:	430b      	orrs	r3, r1
 800e014:	d006      	beq.n	800e024 <__ieee754_sqrt+0x114>
 800e016:	1c50      	adds	r0, r2, #1
 800e018:	bf13      	iteet	ne
 800e01a:	3201      	addne	r2, #1
 800e01c:	3401      	addeq	r4, #1
 800e01e:	4672      	moveq	r2, lr
 800e020:	f022 0201 	bicne.w	r2, r2, #1
 800e024:	1063      	asrs	r3, r4, #1
 800e026:	0852      	lsrs	r2, r2, #1
 800e028:	07e1      	lsls	r1, r4, #31
 800e02a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800e02e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800e032:	bf48      	it	mi
 800e034:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800e038:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800e03c:	4614      	mov	r4, r2
 800e03e:	e781      	b.n	800df44 <__ieee754_sqrt+0x34>
 800e040:	0ad9      	lsrs	r1, r3, #11
 800e042:	3815      	subs	r0, #21
 800e044:	055b      	lsls	r3, r3, #21
 800e046:	2900      	cmp	r1, #0
 800e048:	d0fa      	beq.n	800e040 <__ieee754_sqrt+0x130>
 800e04a:	02cd      	lsls	r5, r1, #11
 800e04c:	d50a      	bpl.n	800e064 <__ieee754_sqrt+0x154>
 800e04e:	f1c2 0420 	rsb	r4, r2, #32
 800e052:	fa23 f404 	lsr.w	r4, r3, r4
 800e056:	1e55      	subs	r5, r2, #1
 800e058:	4093      	lsls	r3, r2
 800e05a:	4321      	orrs	r1, r4
 800e05c:	1b42      	subs	r2, r0, r5
 800e05e:	e78a      	b.n	800df76 <__ieee754_sqrt+0x66>
 800e060:	4610      	mov	r0, r2
 800e062:	e7f0      	b.n	800e046 <__ieee754_sqrt+0x136>
 800e064:	0049      	lsls	r1, r1, #1
 800e066:	3201      	adds	r2, #1
 800e068:	e7ef      	b.n	800e04a <__ieee754_sqrt+0x13a>
 800e06a:	4680      	mov	r8, r0
 800e06c:	e7bd      	b.n	800dfea <__ieee754_sqrt+0xda>
 800e06e:	bf00      	nop
 800e070:	7ff00000 	.word	0x7ff00000
 800e074:	00000000 	.word	0x00000000

0800e078 <__kernel_cos>:
 800e078:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e07c:	ec57 6b10 	vmov	r6, r7, d0
 800e080:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800e084:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800e088:	ed8d 1b00 	vstr	d1, [sp]
 800e08c:	da07      	bge.n	800e09e <__kernel_cos+0x26>
 800e08e:	ee10 0a10 	vmov	r0, s0
 800e092:	4639      	mov	r1, r7
 800e094:	f7f2 fd70 	bl	8000b78 <__aeabi_d2iz>
 800e098:	2800      	cmp	r0, #0
 800e09a:	f000 8088 	beq.w	800e1ae <__kernel_cos+0x136>
 800e09e:	4632      	mov	r2, r6
 800e0a0:	463b      	mov	r3, r7
 800e0a2:	4630      	mov	r0, r6
 800e0a4:	4639      	mov	r1, r7
 800e0a6:	f7f2 fab7 	bl	8000618 <__aeabi_dmul>
 800e0aa:	4b51      	ldr	r3, [pc, #324]	; (800e1f0 <__kernel_cos+0x178>)
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	4604      	mov	r4, r0
 800e0b0:	460d      	mov	r5, r1
 800e0b2:	f7f2 fab1 	bl	8000618 <__aeabi_dmul>
 800e0b6:	a340      	add	r3, pc, #256	; (adr r3, 800e1b8 <__kernel_cos+0x140>)
 800e0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0bc:	4682      	mov	sl, r0
 800e0be:	468b      	mov	fp, r1
 800e0c0:	4620      	mov	r0, r4
 800e0c2:	4629      	mov	r1, r5
 800e0c4:	f7f2 faa8 	bl	8000618 <__aeabi_dmul>
 800e0c8:	a33d      	add	r3, pc, #244	; (adr r3, 800e1c0 <__kernel_cos+0x148>)
 800e0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ce:	f7f2 f8ed 	bl	80002ac <__adddf3>
 800e0d2:	4622      	mov	r2, r4
 800e0d4:	462b      	mov	r3, r5
 800e0d6:	f7f2 fa9f 	bl	8000618 <__aeabi_dmul>
 800e0da:	a33b      	add	r3, pc, #236	; (adr r3, 800e1c8 <__kernel_cos+0x150>)
 800e0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e0:	f7f2 f8e2 	bl	80002a8 <__aeabi_dsub>
 800e0e4:	4622      	mov	r2, r4
 800e0e6:	462b      	mov	r3, r5
 800e0e8:	f7f2 fa96 	bl	8000618 <__aeabi_dmul>
 800e0ec:	a338      	add	r3, pc, #224	; (adr r3, 800e1d0 <__kernel_cos+0x158>)
 800e0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f2:	f7f2 f8db 	bl	80002ac <__adddf3>
 800e0f6:	4622      	mov	r2, r4
 800e0f8:	462b      	mov	r3, r5
 800e0fa:	f7f2 fa8d 	bl	8000618 <__aeabi_dmul>
 800e0fe:	a336      	add	r3, pc, #216	; (adr r3, 800e1d8 <__kernel_cos+0x160>)
 800e100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e104:	f7f2 f8d0 	bl	80002a8 <__aeabi_dsub>
 800e108:	4622      	mov	r2, r4
 800e10a:	462b      	mov	r3, r5
 800e10c:	f7f2 fa84 	bl	8000618 <__aeabi_dmul>
 800e110:	a333      	add	r3, pc, #204	; (adr r3, 800e1e0 <__kernel_cos+0x168>)
 800e112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e116:	f7f2 f8c9 	bl	80002ac <__adddf3>
 800e11a:	4622      	mov	r2, r4
 800e11c:	462b      	mov	r3, r5
 800e11e:	f7f2 fa7b 	bl	8000618 <__aeabi_dmul>
 800e122:	4622      	mov	r2, r4
 800e124:	462b      	mov	r3, r5
 800e126:	f7f2 fa77 	bl	8000618 <__aeabi_dmul>
 800e12a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e12e:	4604      	mov	r4, r0
 800e130:	460d      	mov	r5, r1
 800e132:	4630      	mov	r0, r6
 800e134:	4639      	mov	r1, r7
 800e136:	f7f2 fa6f 	bl	8000618 <__aeabi_dmul>
 800e13a:	460b      	mov	r3, r1
 800e13c:	4602      	mov	r2, r0
 800e13e:	4629      	mov	r1, r5
 800e140:	4620      	mov	r0, r4
 800e142:	f7f2 f8b1 	bl	80002a8 <__aeabi_dsub>
 800e146:	4b2b      	ldr	r3, [pc, #172]	; (800e1f4 <__kernel_cos+0x17c>)
 800e148:	4598      	cmp	r8, r3
 800e14a:	4606      	mov	r6, r0
 800e14c:	460f      	mov	r7, r1
 800e14e:	dc10      	bgt.n	800e172 <__kernel_cos+0xfa>
 800e150:	4602      	mov	r2, r0
 800e152:	460b      	mov	r3, r1
 800e154:	4650      	mov	r0, sl
 800e156:	4659      	mov	r1, fp
 800e158:	f7f2 f8a6 	bl	80002a8 <__aeabi_dsub>
 800e15c:	460b      	mov	r3, r1
 800e15e:	4926      	ldr	r1, [pc, #152]	; (800e1f8 <__kernel_cos+0x180>)
 800e160:	4602      	mov	r2, r0
 800e162:	2000      	movs	r0, #0
 800e164:	f7f2 f8a0 	bl	80002a8 <__aeabi_dsub>
 800e168:	ec41 0b10 	vmov	d0, r0, r1
 800e16c:	b003      	add	sp, #12
 800e16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e172:	4b22      	ldr	r3, [pc, #136]	; (800e1fc <__kernel_cos+0x184>)
 800e174:	4920      	ldr	r1, [pc, #128]	; (800e1f8 <__kernel_cos+0x180>)
 800e176:	4598      	cmp	r8, r3
 800e178:	bfcc      	ite	gt
 800e17a:	4d21      	ldrgt	r5, [pc, #132]	; (800e200 <__kernel_cos+0x188>)
 800e17c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800e180:	2400      	movs	r4, #0
 800e182:	4622      	mov	r2, r4
 800e184:	462b      	mov	r3, r5
 800e186:	2000      	movs	r0, #0
 800e188:	f7f2 f88e 	bl	80002a8 <__aeabi_dsub>
 800e18c:	4622      	mov	r2, r4
 800e18e:	4680      	mov	r8, r0
 800e190:	4689      	mov	r9, r1
 800e192:	462b      	mov	r3, r5
 800e194:	4650      	mov	r0, sl
 800e196:	4659      	mov	r1, fp
 800e198:	f7f2 f886 	bl	80002a8 <__aeabi_dsub>
 800e19c:	4632      	mov	r2, r6
 800e19e:	463b      	mov	r3, r7
 800e1a0:	f7f2 f882 	bl	80002a8 <__aeabi_dsub>
 800e1a4:	4602      	mov	r2, r0
 800e1a6:	460b      	mov	r3, r1
 800e1a8:	4640      	mov	r0, r8
 800e1aa:	4649      	mov	r1, r9
 800e1ac:	e7da      	b.n	800e164 <__kernel_cos+0xec>
 800e1ae:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800e1e8 <__kernel_cos+0x170>
 800e1b2:	e7db      	b.n	800e16c <__kernel_cos+0xf4>
 800e1b4:	f3af 8000 	nop.w
 800e1b8:	be8838d4 	.word	0xbe8838d4
 800e1bc:	bda8fae9 	.word	0xbda8fae9
 800e1c0:	bdb4b1c4 	.word	0xbdb4b1c4
 800e1c4:	3e21ee9e 	.word	0x3e21ee9e
 800e1c8:	809c52ad 	.word	0x809c52ad
 800e1cc:	3e927e4f 	.word	0x3e927e4f
 800e1d0:	19cb1590 	.word	0x19cb1590
 800e1d4:	3efa01a0 	.word	0x3efa01a0
 800e1d8:	16c15177 	.word	0x16c15177
 800e1dc:	3f56c16c 	.word	0x3f56c16c
 800e1e0:	5555554c 	.word	0x5555554c
 800e1e4:	3fa55555 	.word	0x3fa55555
 800e1e8:	00000000 	.word	0x00000000
 800e1ec:	3ff00000 	.word	0x3ff00000
 800e1f0:	3fe00000 	.word	0x3fe00000
 800e1f4:	3fd33332 	.word	0x3fd33332
 800e1f8:	3ff00000 	.word	0x3ff00000
 800e1fc:	3fe90000 	.word	0x3fe90000
 800e200:	3fd20000 	.word	0x3fd20000
 800e204:	00000000 	.word	0x00000000

0800e208 <__kernel_rem_pio2>:
 800e208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e20c:	ed2d 8b02 	vpush	{d8}
 800e210:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800e214:	f112 0f14 	cmn.w	r2, #20
 800e218:	9308      	str	r3, [sp, #32]
 800e21a:	9101      	str	r1, [sp, #4]
 800e21c:	4bc4      	ldr	r3, [pc, #784]	; (800e530 <__kernel_rem_pio2+0x328>)
 800e21e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800e220:	900b      	str	r0, [sp, #44]	; 0x2c
 800e222:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e226:	9302      	str	r3, [sp, #8]
 800e228:	9b08      	ldr	r3, [sp, #32]
 800e22a:	f103 33ff 	add.w	r3, r3, #4294967295
 800e22e:	bfa8      	it	ge
 800e230:	1ed4      	subge	r4, r2, #3
 800e232:	9306      	str	r3, [sp, #24]
 800e234:	bfb2      	itee	lt
 800e236:	2400      	movlt	r4, #0
 800e238:	2318      	movge	r3, #24
 800e23a:	fb94 f4f3 	sdivge	r4, r4, r3
 800e23e:	f06f 0317 	mvn.w	r3, #23
 800e242:	fb04 3303 	mla	r3, r4, r3, r3
 800e246:	eb03 0a02 	add.w	sl, r3, r2
 800e24a:	9b02      	ldr	r3, [sp, #8]
 800e24c:	9a06      	ldr	r2, [sp, #24]
 800e24e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800e520 <__kernel_rem_pio2+0x318>
 800e252:	eb03 0802 	add.w	r8, r3, r2
 800e256:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e258:	1aa7      	subs	r7, r4, r2
 800e25a:	ae22      	add	r6, sp, #136	; 0x88
 800e25c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e260:	2500      	movs	r5, #0
 800e262:	4545      	cmp	r5, r8
 800e264:	dd13      	ble.n	800e28e <__kernel_rem_pio2+0x86>
 800e266:	9b08      	ldr	r3, [sp, #32]
 800e268:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800e520 <__kernel_rem_pio2+0x318>
 800e26c:	aa22      	add	r2, sp, #136	; 0x88
 800e26e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e272:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800e276:	f04f 0800 	mov.w	r8, #0
 800e27a:	9b02      	ldr	r3, [sp, #8]
 800e27c:	4598      	cmp	r8, r3
 800e27e:	dc2f      	bgt.n	800e2e0 <__kernel_rem_pio2+0xd8>
 800e280:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e284:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800e288:	462f      	mov	r7, r5
 800e28a:	2600      	movs	r6, #0
 800e28c:	e01b      	b.n	800e2c6 <__kernel_rem_pio2+0xbe>
 800e28e:	42ef      	cmn	r7, r5
 800e290:	d407      	bmi.n	800e2a2 <__kernel_rem_pio2+0x9a>
 800e292:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e296:	f7f2 f955 	bl	8000544 <__aeabi_i2d>
 800e29a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e29e:	3501      	adds	r5, #1
 800e2a0:	e7df      	b.n	800e262 <__kernel_rem_pio2+0x5a>
 800e2a2:	ec51 0b18 	vmov	r0, r1, d8
 800e2a6:	e7f8      	b.n	800e29a <__kernel_rem_pio2+0x92>
 800e2a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2ac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e2b0:	f7f2 f9b2 	bl	8000618 <__aeabi_dmul>
 800e2b4:	4602      	mov	r2, r0
 800e2b6:	460b      	mov	r3, r1
 800e2b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e2bc:	f7f1 fff6 	bl	80002ac <__adddf3>
 800e2c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e2c4:	3601      	adds	r6, #1
 800e2c6:	9b06      	ldr	r3, [sp, #24]
 800e2c8:	429e      	cmp	r6, r3
 800e2ca:	f1a7 0708 	sub.w	r7, r7, #8
 800e2ce:	ddeb      	ble.n	800e2a8 <__kernel_rem_pio2+0xa0>
 800e2d0:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e2d4:	f108 0801 	add.w	r8, r8, #1
 800e2d8:	ecab 7b02 	vstmia	fp!, {d7}
 800e2dc:	3508      	adds	r5, #8
 800e2de:	e7cc      	b.n	800e27a <__kernel_rem_pio2+0x72>
 800e2e0:	9b02      	ldr	r3, [sp, #8]
 800e2e2:	aa0e      	add	r2, sp, #56	; 0x38
 800e2e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e2e8:	930d      	str	r3, [sp, #52]	; 0x34
 800e2ea:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e2ec:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e2f0:	9c02      	ldr	r4, [sp, #8]
 800e2f2:	930c      	str	r3, [sp, #48]	; 0x30
 800e2f4:	00e3      	lsls	r3, r4, #3
 800e2f6:	930a      	str	r3, [sp, #40]	; 0x28
 800e2f8:	ab9a      	add	r3, sp, #616	; 0x268
 800e2fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e2fe:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e302:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800e306:	ab72      	add	r3, sp, #456	; 0x1c8
 800e308:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e30c:	46c3      	mov	fp, r8
 800e30e:	46a1      	mov	r9, r4
 800e310:	f1b9 0f00 	cmp.w	r9, #0
 800e314:	f1a5 0508 	sub.w	r5, r5, #8
 800e318:	dc77      	bgt.n	800e40a <__kernel_rem_pio2+0x202>
 800e31a:	ec47 6b10 	vmov	d0, r6, r7
 800e31e:	4650      	mov	r0, sl
 800e320:	f000 fdae 	bl	800ee80 <scalbn>
 800e324:	ec57 6b10 	vmov	r6, r7, d0
 800e328:	2200      	movs	r2, #0
 800e32a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e32e:	ee10 0a10 	vmov	r0, s0
 800e332:	4639      	mov	r1, r7
 800e334:	f7f2 f970 	bl	8000618 <__aeabi_dmul>
 800e338:	ec41 0b10 	vmov	d0, r0, r1
 800e33c:	f000 fd20 	bl	800ed80 <floor>
 800e340:	4b7c      	ldr	r3, [pc, #496]	; (800e534 <__kernel_rem_pio2+0x32c>)
 800e342:	ec51 0b10 	vmov	r0, r1, d0
 800e346:	2200      	movs	r2, #0
 800e348:	f7f2 f966 	bl	8000618 <__aeabi_dmul>
 800e34c:	4602      	mov	r2, r0
 800e34e:	460b      	mov	r3, r1
 800e350:	4630      	mov	r0, r6
 800e352:	4639      	mov	r1, r7
 800e354:	f7f1 ffa8 	bl	80002a8 <__aeabi_dsub>
 800e358:	460f      	mov	r7, r1
 800e35a:	4606      	mov	r6, r0
 800e35c:	f7f2 fc0c 	bl	8000b78 <__aeabi_d2iz>
 800e360:	9004      	str	r0, [sp, #16]
 800e362:	f7f2 f8ef 	bl	8000544 <__aeabi_i2d>
 800e366:	4602      	mov	r2, r0
 800e368:	460b      	mov	r3, r1
 800e36a:	4630      	mov	r0, r6
 800e36c:	4639      	mov	r1, r7
 800e36e:	f7f1 ff9b 	bl	80002a8 <__aeabi_dsub>
 800e372:	f1ba 0f00 	cmp.w	sl, #0
 800e376:	4606      	mov	r6, r0
 800e378:	460f      	mov	r7, r1
 800e37a:	dd6d      	ble.n	800e458 <__kernel_rem_pio2+0x250>
 800e37c:	1e62      	subs	r2, r4, #1
 800e37e:	ab0e      	add	r3, sp, #56	; 0x38
 800e380:	9d04      	ldr	r5, [sp, #16]
 800e382:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e386:	f1ca 0118 	rsb	r1, sl, #24
 800e38a:	fa40 f301 	asr.w	r3, r0, r1
 800e38e:	441d      	add	r5, r3
 800e390:	408b      	lsls	r3, r1
 800e392:	1ac0      	subs	r0, r0, r3
 800e394:	ab0e      	add	r3, sp, #56	; 0x38
 800e396:	9504      	str	r5, [sp, #16]
 800e398:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e39c:	f1ca 0317 	rsb	r3, sl, #23
 800e3a0:	fa40 fb03 	asr.w	fp, r0, r3
 800e3a4:	f1bb 0f00 	cmp.w	fp, #0
 800e3a8:	dd65      	ble.n	800e476 <__kernel_rem_pio2+0x26e>
 800e3aa:	9b04      	ldr	r3, [sp, #16]
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	3301      	adds	r3, #1
 800e3b0:	9304      	str	r3, [sp, #16]
 800e3b2:	4615      	mov	r5, r2
 800e3b4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e3b8:	4294      	cmp	r4, r2
 800e3ba:	f300 809c 	bgt.w	800e4f6 <__kernel_rem_pio2+0x2ee>
 800e3be:	f1ba 0f00 	cmp.w	sl, #0
 800e3c2:	dd07      	ble.n	800e3d4 <__kernel_rem_pio2+0x1cc>
 800e3c4:	f1ba 0f01 	cmp.w	sl, #1
 800e3c8:	f000 80c0 	beq.w	800e54c <__kernel_rem_pio2+0x344>
 800e3cc:	f1ba 0f02 	cmp.w	sl, #2
 800e3d0:	f000 80c6 	beq.w	800e560 <__kernel_rem_pio2+0x358>
 800e3d4:	f1bb 0f02 	cmp.w	fp, #2
 800e3d8:	d14d      	bne.n	800e476 <__kernel_rem_pio2+0x26e>
 800e3da:	4632      	mov	r2, r6
 800e3dc:	463b      	mov	r3, r7
 800e3de:	4956      	ldr	r1, [pc, #344]	; (800e538 <__kernel_rem_pio2+0x330>)
 800e3e0:	2000      	movs	r0, #0
 800e3e2:	f7f1 ff61 	bl	80002a8 <__aeabi_dsub>
 800e3e6:	4606      	mov	r6, r0
 800e3e8:	460f      	mov	r7, r1
 800e3ea:	2d00      	cmp	r5, #0
 800e3ec:	d043      	beq.n	800e476 <__kernel_rem_pio2+0x26e>
 800e3ee:	4650      	mov	r0, sl
 800e3f0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800e528 <__kernel_rem_pio2+0x320>
 800e3f4:	f000 fd44 	bl	800ee80 <scalbn>
 800e3f8:	4630      	mov	r0, r6
 800e3fa:	4639      	mov	r1, r7
 800e3fc:	ec53 2b10 	vmov	r2, r3, d0
 800e400:	f7f1 ff52 	bl	80002a8 <__aeabi_dsub>
 800e404:	4606      	mov	r6, r0
 800e406:	460f      	mov	r7, r1
 800e408:	e035      	b.n	800e476 <__kernel_rem_pio2+0x26e>
 800e40a:	4b4c      	ldr	r3, [pc, #304]	; (800e53c <__kernel_rem_pio2+0x334>)
 800e40c:	2200      	movs	r2, #0
 800e40e:	4630      	mov	r0, r6
 800e410:	4639      	mov	r1, r7
 800e412:	f7f2 f901 	bl	8000618 <__aeabi_dmul>
 800e416:	f7f2 fbaf 	bl	8000b78 <__aeabi_d2iz>
 800e41a:	f7f2 f893 	bl	8000544 <__aeabi_i2d>
 800e41e:	4602      	mov	r2, r0
 800e420:	460b      	mov	r3, r1
 800e422:	ec43 2b18 	vmov	d8, r2, r3
 800e426:	4b46      	ldr	r3, [pc, #280]	; (800e540 <__kernel_rem_pio2+0x338>)
 800e428:	2200      	movs	r2, #0
 800e42a:	f7f2 f8f5 	bl	8000618 <__aeabi_dmul>
 800e42e:	4602      	mov	r2, r0
 800e430:	460b      	mov	r3, r1
 800e432:	4630      	mov	r0, r6
 800e434:	4639      	mov	r1, r7
 800e436:	f7f1 ff37 	bl	80002a8 <__aeabi_dsub>
 800e43a:	f7f2 fb9d 	bl	8000b78 <__aeabi_d2iz>
 800e43e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e442:	f84b 0b04 	str.w	r0, [fp], #4
 800e446:	ec51 0b18 	vmov	r0, r1, d8
 800e44a:	f7f1 ff2f 	bl	80002ac <__adddf3>
 800e44e:	f109 39ff 	add.w	r9, r9, #4294967295
 800e452:	4606      	mov	r6, r0
 800e454:	460f      	mov	r7, r1
 800e456:	e75b      	b.n	800e310 <__kernel_rem_pio2+0x108>
 800e458:	d106      	bne.n	800e468 <__kernel_rem_pio2+0x260>
 800e45a:	1e63      	subs	r3, r4, #1
 800e45c:	aa0e      	add	r2, sp, #56	; 0x38
 800e45e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e462:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800e466:	e79d      	b.n	800e3a4 <__kernel_rem_pio2+0x19c>
 800e468:	4b36      	ldr	r3, [pc, #216]	; (800e544 <__kernel_rem_pio2+0x33c>)
 800e46a:	2200      	movs	r2, #0
 800e46c:	f7f2 fb5a 	bl	8000b24 <__aeabi_dcmpge>
 800e470:	2800      	cmp	r0, #0
 800e472:	d13d      	bne.n	800e4f0 <__kernel_rem_pio2+0x2e8>
 800e474:	4683      	mov	fp, r0
 800e476:	2200      	movs	r2, #0
 800e478:	2300      	movs	r3, #0
 800e47a:	4630      	mov	r0, r6
 800e47c:	4639      	mov	r1, r7
 800e47e:	f7f2 fb33 	bl	8000ae8 <__aeabi_dcmpeq>
 800e482:	2800      	cmp	r0, #0
 800e484:	f000 80c0 	beq.w	800e608 <__kernel_rem_pio2+0x400>
 800e488:	1e65      	subs	r5, r4, #1
 800e48a:	462b      	mov	r3, r5
 800e48c:	2200      	movs	r2, #0
 800e48e:	9902      	ldr	r1, [sp, #8]
 800e490:	428b      	cmp	r3, r1
 800e492:	da6c      	bge.n	800e56e <__kernel_rem_pio2+0x366>
 800e494:	2a00      	cmp	r2, #0
 800e496:	f000 8089 	beq.w	800e5ac <__kernel_rem_pio2+0x3a4>
 800e49a:	ab0e      	add	r3, sp, #56	; 0x38
 800e49c:	f1aa 0a18 	sub.w	sl, sl, #24
 800e4a0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	f000 80ad 	beq.w	800e604 <__kernel_rem_pio2+0x3fc>
 800e4aa:	4650      	mov	r0, sl
 800e4ac:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800e528 <__kernel_rem_pio2+0x320>
 800e4b0:	f000 fce6 	bl	800ee80 <scalbn>
 800e4b4:	ab9a      	add	r3, sp, #616	; 0x268
 800e4b6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e4ba:	ec57 6b10 	vmov	r6, r7, d0
 800e4be:	00ec      	lsls	r4, r5, #3
 800e4c0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800e4c4:	46aa      	mov	sl, r5
 800e4c6:	f1ba 0f00 	cmp.w	sl, #0
 800e4ca:	f280 80d6 	bge.w	800e67a <__kernel_rem_pio2+0x472>
 800e4ce:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800e520 <__kernel_rem_pio2+0x318>
 800e4d2:	462e      	mov	r6, r5
 800e4d4:	2e00      	cmp	r6, #0
 800e4d6:	f2c0 8104 	blt.w	800e6e2 <__kernel_rem_pio2+0x4da>
 800e4da:	ab72      	add	r3, sp, #456	; 0x1c8
 800e4dc:	ed8d 8b06 	vstr	d8, [sp, #24]
 800e4e0:	f8df a064 	ldr.w	sl, [pc, #100]	; 800e548 <__kernel_rem_pio2+0x340>
 800e4e4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800e4e8:	f04f 0800 	mov.w	r8, #0
 800e4ec:	1baf      	subs	r7, r5, r6
 800e4ee:	e0ea      	b.n	800e6c6 <__kernel_rem_pio2+0x4be>
 800e4f0:	f04f 0b02 	mov.w	fp, #2
 800e4f4:	e759      	b.n	800e3aa <__kernel_rem_pio2+0x1a2>
 800e4f6:	f8d8 3000 	ldr.w	r3, [r8]
 800e4fa:	b955      	cbnz	r5, 800e512 <__kernel_rem_pio2+0x30a>
 800e4fc:	b123      	cbz	r3, 800e508 <__kernel_rem_pio2+0x300>
 800e4fe:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e502:	f8c8 3000 	str.w	r3, [r8]
 800e506:	2301      	movs	r3, #1
 800e508:	3201      	adds	r2, #1
 800e50a:	f108 0804 	add.w	r8, r8, #4
 800e50e:	461d      	mov	r5, r3
 800e510:	e752      	b.n	800e3b8 <__kernel_rem_pio2+0x1b0>
 800e512:	1acb      	subs	r3, r1, r3
 800e514:	f8c8 3000 	str.w	r3, [r8]
 800e518:	462b      	mov	r3, r5
 800e51a:	e7f5      	b.n	800e508 <__kernel_rem_pio2+0x300>
 800e51c:	f3af 8000 	nop.w
	...
 800e52c:	3ff00000 	.word	0x3ff00000
 800e530:	0800f6e8 	.word	0x0800f6e8
 800e534:	40200000 	.word	0x40200000
 800e538:	3ff00000 	.word	0x3ff00000
 800e53c:	3e700000 	.word	0x3e700000
 800e540:	41700000 	.word	0x41700000
 800e544:	3fe00000 	.word	0x3fe00000
 800e548:	0800f6a8 	.word	0x0800f6a8
 800e54c:	1e62      	subs	r2, r4, #1
 800e54e:	ab0e      	add	r3, sp, #56	; 0x38
 800e550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e554:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e558:	a90e      	add	r1, sp, #56	; 0x38
 800e55a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e55e:	e739      	b.n	800e3d4 <__kernel_rem_pio2+0x1cc>
 800e560:	1e62      	subs	r2, r4, #1
 800e562:	ab0e      	add	r3, sp, #56	; 0x38
 800e564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e568:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e56c:	e7f4      	b.n	800e558 <__kernel_rem_pio2+0x350>
 800e56e:	a90e      	add	r1, sp, #56	; 0x38
 800e570:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e574:	3b01      	subs	r3, #1
 800e576:	430a      	orrs	r2, r1
 800e578:	e789      	b.n	800e48e <__kernel_rem_pio2+0x286>
 800e57a:	3301      	adds	r3, #1
 800e57c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e580:	2900      	cmp	r1, #0
 800e582:	d0fa      	beq.n	800e57a <__kernel_rem_pio2+0x372>
 800e584:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e586:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800e58a:	446a      	add	r2, sp
 800e58c:	3a98      	subs	r2, #152	; 0x98
 800e58e:	920a      	str	r2, [sp, #40]	; 0x28
 800e590:	9a08      	ldr	r2, [sp, #32]
 800e592:	18e3      	adds	r3, r4, r3
 800e594:	18a5      	adds	r5, r4, r2
 800e596:	aa22      	add	r2, sp, #136	; 0x88
 800e598:	f104 0801 	add.w	r8, r4, #1
 800e59c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800e5a0:	9304      	str	r3, [sp, #16]
 800e5a2:	9b04      	ldr	r3, [sp, #16]
 800e5a4:	4543      	cmp	r3, r8
 800e5a6:	da04      	bge.n	800e5b2 <__kernel_rem_pio2+0x3aa>
 800e5a8:	461c      	mov	r4, r3
 800e5aa:	e6a3      	b.n	800e2f4 <__kernel_rem_pio2+0xec>
 800e5ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e5ae:	2301      	movs	r3, #1
 800e5b0:	e7e4      	b.n	800e57c <__kernel_rem_pio2+0x374>
 800e5b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e5b4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e5b8:	f7f1 ffc4 	bl	8000544 <__aeabi_i2d>
 800e5bc:	e8e5 0102 	strd	r0, r1, [r5], #8
 800e5c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5c2:	46ab      	mov	fp, r5
 800e5c4:	461c      	mov	r4, r3
 800e5c6:	f04f 0900 	mov.w	r9, #0
 800e5ca:	2600      	movs	r6, #0
 800e5cc:	2700      	movs	r7, #0
 800e5ce:	9b06      	ldr	r3, [sp, #24]
 800e5d0:	4599      	cmp	r9, r3
 800e5d2:	dd06      	ble.n	800e5e2 <__kernel_rem_pio2+0x3da>
 800e5d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5d6:	e8e3 6702 	strd	r6, r7, [r3], #8
 800e5da:	f108 0801 	add.w	r8, r8, #1
 800e5de:	930a      	str	r3, [sp, #40]	; 0x28
 800e5e0:	e7df      	b.n	800e5a2 <__kernel_rem_pio2+0x39a>
 800e5e2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e5e6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e5ea:	f7f2 f815 	bl	8000618 <__aeabi_dmul>
 800e5ee:	4602      	mov	r2, r0
 800e5f0:	460b      	mov	r3, r1
 800e5f2:	4630      	mov	r0, r6
 800e5f4:	4639      	mov	r1, r7
 800e5f6:	f7f1 fe59 	bl	80002ac <__adddf3>
 800e5fa:	f109 0901 	add.w	r9, r9, #1
 800e5fe:	4606      	mov	r6, r0
 800e600:	460f      	mov	r7, r1
 800e602:	e7e4      	b.n	800e5ce <__kernel_rem_pio2+0x3c6>
 800e604:	3d01      	subs	r5, #1
 800e606:	e748      	b.n	800e49a <__kernel_rem_pio2+0x292>
 800e608:	ec47 6b10 	vmov	d0, r6, r7
 800e60c:	f1ca 0000 	rsb	r0, sl, #0
 800e610:	f000 fc36 	bl	800ee80 <scalbn>
 800e614:	ec57 6b10 	vmov	r6, r7, d0
 800e618:	4ba0      	ldr	r3, [pc, #640]	; (800e89c <__kernel_rem_pio2+0x694>)
 800e61a:	ee10 0a10 	vmov	r0, s0
 800e61e:	2200      	movs	r2, #0
 800e620:	4639      	mov	r1, r7
 800e622:	f7f2 fa7f 	bl	8000b24 <__aeabi_dcmpge>
 800e626:	b1f8      	cbz	r0, 800e668 <__kernel_rem_pio2+0x460>
 800e628:	4b9d      	ldr	r3, [pc, #628]	; (800e8a0 <__kernel_rem_pio2+0x698>)
 800e62a:	2200      	movs	r2, #0
 800e62c:	4630      	mov	r0, r6
 800e62e:	4639      	mov	r1, r7
 800e630:	f7f1 fff2 	bl	8000618 <__aeabi_dmul>
 800e634:	f7f2 faa0 	bl	8000b78 <__aeabi_d2iz>
 800e638:	4680      	mov	r8, r0
 800e63a:	f7f1 ff83 	bl	8000544 <__aeabi_i2d>
 800e63e:	4b97      	ldr	r3, [pc, #604]	; (800e89c <__kernel_rem_pio2+0x694>)
 800e640:	2200      	movs	r2, #0
 800e642:	f7f1 ffe9 	bl	8000618 <__aeabi_dmul>
 800e646:	460b      	mov	r3, r1
 800e648:	4602      	mov	r2, r0
 800e64a:	4639      	mov	r1, r7
 800e64c:	4630      	mov	r0, r6
 800e64e:	f7f1 fe2b 	bl	80002a8 <__aeabi_dsub>
 800e652:	f7f2 fa91 	bl	8000b78 <__aeabi_d2iz>
 800e656:	1c65      	adds	r5, r4, #1
 800e658:	ab0e      	add	r3, sp, #56	; 0x38
 800e65a:	f10a 0a18 	add.w	sl, sl, #24
 800e65e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e662:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800e666:	e720      	b.n	800e4aa <__kernel_rem_pio2+0x2a2>
 800e668:	4630      	mov	r0, r6
 800e66a:	4639      	mov	r1, r7
 800e66c:	f7f2 fa84 	bl	8000b78 <__aeabi_d2iz>
 800e670:	ab0e      	add	r3, sp, #56	; 0x38
 800e672:	4625      	mov	r5, r4
 800e674:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e678:	e717      	b.n	800e4aa <__kernel_rem_pio2+0x2a2>
 800e67a:	ab0e      	add	r3, sp, #56	; 0x38
 800e67c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800e680:	f7f1 ff60 	bl	8000544 <__aeabi_i2d>
 800e684:	4632      	mov	r2, r6
 800e686:	463b      	mov	r3, r7
 800e688:	f7f1 ffc6 	bl	8000618 <__aeabi_dmul>
 800e68c:	4b84      	ldr	r3, [pc, #528]	; (800e8a0 <__kernel_rem_pio2+0x698>)
 800e68e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800e692:	2200      	movs	r2, #0
 800e694:	4630      	mov	r0, r6
 800e696:	4639      	mov	r1, r7
 800e698:	f7f1 ffbe 	bl	8000618 <__aeabi_dmul>
 800e69c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e6a0:	4606      	mov	r6, r0
 800e6a2:	460f      	mov	r7, r1
 800e6a4:	e70f      	b.n	800e4c6 <__kernel_rem_pio2+0x2be>
 800e6a6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800e6aa:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800e6ae:	f7f1 ffb3 	bl	8000618 <__aeabi_dmul>
 800e6b2:	4602      	mov	r2, r0
 800e6b4:	460b      	mov	r3, r1
 800e6b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e6ba:	f7f1 fdf7 	bl	80002ac <__adddf3>
 800e6be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e6c2:	f108 0801 	add.w	r8, r8, #1
 800e6c6:	9b02      	ldr	r3, [sp, #8]
 800e6c8:	4598      	cmp	r8, r3
 800e6ca:	dc01      	bgt.n	800e6d0 <__kernel_rem_pio2+0x4c8>
 800e6cc:	45b8      	cmp	r8, r7
 800e6ce:	ddea      	ble.n	800e6a6 <__kernel_rem_pio2+0x49e>
 800e6d0:	ed9d 7b06 	vldr	d7, [sp, #24]
 800e6d4:	ab4a      	add	r3, sp, #296	; 0x128
 800e6d6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e6da:	ed87 7b00 	vstr	d7, [r7]
 800e6de:	3e01      	subs	r6, #1
 800e6e0:	e6f8      	b.n	800e4d4 <__kernel_rem_pio2+0x2cc>
 800e6e2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800e6e4:	2b02      	cmp	r3, #2
 800e6e6:	dc0b      	bgt.n	800e700 <__kernel_rem_pio2+0x4f8>
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	dc35      	bgt.n	800e758 <__kernel_rem_pio2+0x550>
 800e6ec:	d059      	beq.n	800e7a2 <__kernel_rem_pio2+0x59a>
 800e6ee:	9b04      	ldr	r3, [sp, #16]
 800e6f0:	f003 0007 	and.w	r0, r3, #7
 800e6f4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800e6f8:	ecbd 8b02 	vpop	{d8}
 800e6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e700:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800e702:	2b03      	cmp	r3, #3
 800e704:	d1f3      	bne.n	800e6ee <__kernel_rem_pio2+0x4e6>
 800e706:	ab4a      	add	r3, sp, #296	; 0x128
 800e708:	4423      	add	r3, r4
 800e70a:	9306      	str	r3, [sp, #24]
 800e70c:	461c      	mov	r4, r3
 800e70e:	469a      	mov	sl, r3
 800e710:	9502      	str	r5, [sp, #8]
 800e712:	9b02      	ldr	r3, [sp, #8]
 800e714:	2b00      	cmp	r3, #0
 800e716:	f1aa 0a08 	sub.w	sl, sl, #8
 800e71a:	dc6b      	bgt.n	800e7f4 <__kernel_rem_pio2+0x5ec>
 800e71c:	46aa      	mov	sl, r5
 800e71e:	f1ba 0f01 	cmp.w	sl, #1
 800e722:	f1a4 0408 	sub.w	r4, r4, #8
 800e726:	f300 8085 	bgt.w	800e834 <__kernel_rem_pio2+0x62c>
 800e72a:	9c06      	ldr	r4, [sp, #24]
 800e72c:	2000      	movs	r0, #0
 800e72e:	3408      	adds	r4, #8
 800e730:	2100      	movs	r1, #0
 800e732:	2d01      	cmp	r5, #1
 800e734:	f300 809d 	bgt.w	800e872 <__kernel_rem_pio2+0x66a>
 800e738:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800e73c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800e740:	f1bb 0f00 	cmp.w	fp, #0
 800e744:	f040 809b 	bne.w	800e87e <__kernel_rem_pio2+0x676>
 800e748:	9b01      	ldr	r3, [sp, #4]
 800e74a:	e9c3 5600 	strd	r5, r6, [r3]
 800e74e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800e752:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e756:	e7ca      	b.n	800e6ee <__kernel_rem_pio2+0x4e6>
 800e758:	3408      	adds	r4, #8
 800e75a:	ab4a      	add	r3, sp, #296	; 0x128
 800e75c:	441c      	add	r4, r3
 800e75e:	462e      	mov	r6, r5
 800e760:	2000      	movs	r0, #0
 800e762:	2100      	movs	r1, #0
 800e764:	2e00      	cmp	r6, #0
 800e766:	da36      	bge.n	800e7d6 <__kernel_rem_pio2+0x5ce>
 800e768:	f1bb 0f00 	cmp.w	fp, #0
 800e76c:	d039      	beq.n	800e7e2 <__kernel_rem_pio2+0x5da>
 800e76e:	4602      	mov	r2, r0
 800e770:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e774:	9c01      	ldr	r4, [sp, #4]
 800e776:	e9c4 2300 	strd	r2, r3, [r4]
 800e77a:	4602      	mov	r2, r0
 800e77c:	460b      	mov	r3, r1
 800e77e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800e782:	f7f1 fd91 	bl	80002a8 <__aeabi_dsub>
 800e786:	ae4c      	add	r6, sp, #304	; 0x130
 800e788:	2401      	movs	r4, #1
 800e78a:	42a5      	cmp	r5, r4
 800e78c:	da2c      	bge.n	800e7e8 <__kernel_rem_pio2+0x5e0>
 800e78e:	f1bb 0f00 	cmp.w	fp, #0
 800e792:	d002      	beq.n	800e79a <__kernel_rem_pio2+0x592>
 800e794:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e798:	4619      	mov	r1, r3
 800e79a:	9b01      	ldr	r3, [sp, #4]
 800e79c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e7a0:	e7a5      	b.n	800e6ee <__kernel_rem_pio2+0x4e6>
 800e7a2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800e7a6:	eb0d 0403 	add.w	r4, sp, r3
 800e7aa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800e7ae:	2000      	movs	r0, #0
 800e7b0:	2100      	movs	r1, #0
 800e7b2:	2d00      	cmp	r5, #0
 800e7b4:	da09      	bge.n	800e7ca <__kernel_rem_pio2+0x5c2>
 800e7b6:	f1bb 0f00 	cmp.w	fp, #0
 800e7ba:	d002      	beq.n	800e7c2 <__kernel_rem_pio2+0x5ba>
 800e7bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e7c0:	4619      	mov	r1, r3
 800e7c2:	9b01      	ldr	r3, [sp, #4]
 800e7c4:	e9c3 0100 	strd	r0, r1, [r3]
 800e7c8:	e791      	b.n	800e6ee <__kernel_rem_pio2+0x4e6>
 800e7ca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e7ce:	f7f1 fd6d 	bl	80002ac <__adddf3>
 800e7d2:	3d01      	subs	r5, #1
 800e7d4:	e7ed      	b.n	800e7b2 <__kernel_rem_pio2+0x5aa>
 800e7d6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e7da:	f7f1 fd67 	bl	80002ac <__adddf3>
 800e7de:	3e01      	subs	r6, #1
 800e7e0:	e7c0      	b.n	800e764 <__kernel_rem_pio2+0x55c>
 800e7e2:	4602      	mov	r2, r0
 800e7e4:	460b      	mov	r3, r1
 800e7e6:	e7c5      	b.n	800e774 <__kernel_rem_pio2+0x56c>
 800e7e8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800e7ec:	f7f1 fd5e 	bl	80002ac <__adddf3>
 800e7f0:	3401      	adds	r4, #1
 800e7f2:	e7ca      	b.n	800e78a <__kernel_rem_pio2+0x582>
 800e7f4:	e9da 8900 	ldrd	r8, r9, [sl]
 800e7f8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800e7fc:	9b02      	ldr	r3, [sp, #8]
 800e7fe:	3b01      	subs	r3, #1
 800e800:	9302      	str	r3, [sp, #8]
 800e802:	4632      	mov	r2, r6
 800e804:	463b      	mov	r3, r7
 800e806:	4640      	mov	r0, r8
 800e808:	4649      	mov	r1, r9
 800e80a:	f7f1 fd4f 	bl	80002ac <__adddf3>
 800e80e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e812:	4602      	mov	r2, r0
 800e814:	460b      	mov	r3, r1
 800e816:	4640      	mov	r0, r8
 800e818:	4649      	mov	r1, r9
 800e81a:	f7f1 fd45 	bl	80002a8 <__aeabi_dsub>
 800e81e:	4632      	mov	r2, r6
 800e820:	463b      	mov	r3, r7
 800e822:	f7f1 fd43 	bl	80002ac <__adddf3>
 800e826:	ed9d 7b08 	vldr	d7, [sp, #32]
 800e82a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e82e:	ed8a 7b00 	vstr	d7, [sl]
 800e832:	e76e      	b.n	800e712 <__kernel_rem_pio2+0x50a>
 800e834:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e838:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800e83c:	4640      	mov	r0, r8
 800e83e:	4632      	mov	r2, r6
 800e840:	463b      	mov	r3, r7
 800e842:	4649      	mov	r1, r9
 800e844:	f7f1 fd32 	bl	80002ac <__adddf3>
 800e848:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e84c:	4602      	mov	r2, r0
 800e84e:	460b      	mov	r3, r1
 800e850:	4640      	mov	r0, r8
 800e852:	4649      	mov	r1, r9
 800e854:	f7f1 fd28 	bl	80002a8 <__aeabi_dsub>
 800e858:	4632      	mov	r2, r6
 800e85a:	463b      	mov	r3, r7
 800e85c:	f7f1 fd26 	bl	80002ac <__adddf3>
 800e860:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e864:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e868:	ed84 7b00 	vstr	d7, [r4]
 800e86c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e870:	e755      	b.n	800e71e <__kernel_rem_pio2+0x516>
 800e872:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e876:	f7f1 fd19 	bl	80002ac <__adddf3>
 800e87a:	3d01      	subs	r5, #1
 800e87c:	e759      	b.n	800e732 <__kernel_rem_pio2+0x52a>
 800e87e:	9b01      	ldr	r3, [sp, #4]
 800e880:	9a01      	ldr	r2, [sp, #4]
 800e882:	601d      	str	r5, [r3, #0]
 800e884:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800e888:	605c      	str	r4, [r3, #4]
 800e88a:	609f      	str	r7, [r3, #8]
 800e88c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800e890:	60d3      	str	r3, [r2, #12]
 800e892:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e896:	6110      	str	r0, [r2, #16]
 800e898:	6153      	str	r3, [r2, #20]
 800e89a:	e728      	b.n	800e6ee <__kernel_rem_pio2+0x4e6>
 800e89c:	41700000 	.word	0x41700000
 800e8a0:	3e700000 	.word	0x3e700000
 800e8a4:	00000000 	.word	0x00000000

0800e8a8 <__kernel_sin>:
 800e8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8ac:	ed2d 8b04 	vpush	{d8-d9}
 800e8b0:	eeb0 8a41 	vmov.f32	s16, s2
 800e8b4:	eef0 8a61 	vmov.f32	s17, s3
 800e8b8:	ec55 4b10 	vmov	r4, r5, d0
 800e8bc:	b083      	sub	sp, #12
 800e8be:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e8c2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e8c6:	9001      	str	r0, [sp, #4]
 800e8c8:	da06      	bge.n	800e8d8 <__kernel_sin+0x30>
 800e8ca:	ee10 0a10 	vmov	r0, s0
 800e8ce:	4629      	mov	r1, r5
 800e8d0:	f7f2 f952 	bl	8000b78 <__aeabi_d2iz>
 800e8d4:	2800      	cmp	r0, #0
 800e8d6:	d051      	beq.n	800e97c <__kernel_sin+0xd4>
 800e8d8:	4622      	mov	r2, r4
 800e8da:	462b      	mov	r3, r5
 800e8dc:	4620      	mov	r0, r4
 800e8de:	4629      	mov	r1, r5
 800e8e0:	f7f1 fe9a 	bl	8000618 <__aeabi_dmul>
 800e8e4:	4682      	mov	sl, r0
 800e8e6:	468b      	mov	fp, r1
 800e8e8:	4602      	mov	r2, r0
 800e8ea:	460b      	mov	r3, r1
 800e8ec:	4620      	mov	r0, r4
 800e8ee:	4629      	mov	r1, r5
 800e8f0:	f7f1 fe92 	bl	8000618 <__aeabi_dmul>
 800e8f4:	a341      	add	r3, pc, #260	; (adr r3, 800e9fc <__kernel_sin+0x154>)
 800e8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8fa:	4680      	mov	r8, r0
 800e8fc:	4689      	mov	r9, r1
 800e8fe:	4650      	mov	r0, sl
 800e900:	4659      	mov	r1, fp
 800e902:	f7f1 fe89 	bl	8000618 <__aeabi_dmul>
 800e906:	a33f      	add	r3, pc, #252	; (adr r3, 800ea04 <__kernel_sin+0x15c>)
 800e908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e90c:	f7f1 fccc 	bl	80002a8 <__aeabi_dsub>
 800e910:	4652      	mov	r2, sl
 800e912:	465b      	mov	r3, fp
 800e914:	f7f1 fe80 	bl	8000618 <__aeabi_dmul>
 800e918:	a33c      	add	r3, pc, #240	; (adr r3, 800ea0c <__kernel_sin+0x164>)
 800e91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e91e:	f7f1 fcc5 	bl	80002ac <__adddf3>
 800e922:	4652      	mov	r2, sl
 800e924:	465b      	mov	r3, fp
 800e926:	f7f1 fe77 	bl	8000618 <__aeabi_dmul>
 800e92a:	a33a      	add	r3, pc, #232	; (adr r3, 800ea14 <__kernel_sin+0x16c>)
 800e92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e930:	f7f1 fcba 	bl	80002a8 <__aeabi_dsub>
 800e934:	4652      	mov	r2, sl
 800e936:	465b      	mov	r3, fp
 800e938:	f7f1 fe6e 	bl	8000618 <__aeabi_dmul>
 800e93c:	a337      	add	r3, pc, #220	; (adr r3, 800ea1c <__kernel_sin+0x174>)
 800e93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e942:	f7f1 fcb3 	bl	80002ac <__adddf3>
 800e946:	9b01      	ldr	r3, [sp, #4]
 800e948:	4606      	mov	r6, r0
 800e94a:	460f      	mov	r7, r1
 800e94c:	b9eb      	cbnz	r3, 800e98a <__kernel_sin+0xe2>
 800e94e:	4602      	mov	r2, r0
 800e950:	460b      	mov	r3, r1
 800e952:	4650      	mov	r0, sl
 800e954:	4659      	mov	r1, fp
 800e956:	f7f1 fe5f 	bl	8000618 <__aeabi_dmul>
 800e95a:	a325      	add	r3, pc, #148	; (adr r3, 800e9f0 <__kernel_sin+0x148>)
 800e95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e960:	f7f1 fca2 	bl	80002a8 <__aeabi_dsub>
 800e964:	4642      	mov	r2, r8
 800e966:	464b      	mov	r3, r9
 800e968:	f7f1 fe56 	bl	8000618 <__aeabi_dmul>
 800e96c:	4602      	mov	r2, r0
 800e96e:	460b      	mov	r3, r1
 800e970:	4620      	mov	r0, r4
 800e972:	4629      	mov	r1, r5
 800e974:	f7f1 fc9a 	bl	80002ac <__adddf3>
 800e978:	4604      	mov	r4, r0
 800e97a:	460d      	mov	r5, r1
 800e97c:	ec45 4b10 	vmov	d0, r4, r5
 800e980:	b003      	add	sp, #12
 800e982:	ecbd 8b04 	vpop	{d8-d9}
 800e986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e98a:	4b1b      	ldr	r3, [pc, #108]	; (800e9f8 <__kernel_sin+0x150>)
 800e98c:	ec51 0b18 	vmov	r0, r1, d8
 800e990:	2200      	movs	r2, #0
 800e992:	f7f1 fe41 	bl	8000618 <__aeabi_dmul>
 800e996:	4632      	mov	r2, r6
 800e998:	ec41 0b19 	vmov	d9, r0, r1
 800e99c:	463b      	mov	r3, r7
 800e99e:	4640      	mov	r0, r8
 800e9a0:	4649      	mov	r1, r9
 800e9a2:	f7f1 fe39 	bl	8000618 <__aeabi_dmul>
 800e9a6:	4602      	mov	r2, r0
 800e9a8:	460b      	mov	r3, r1
 800e9aa:	ec51 0b19 	vmov	r0, r1, d9
 800e9ae:	f7f1 fc7b 	bl	80002a8 <__aeabi_dsub>
 800e9b2:	4652      	mov	r2, sl
 800e9b4:	465b      	mov	r3, fp
 800e9b6:	f7f1 fe2f 	bl	8000618 <__aeabi_dmul>
 800e9ba:	ec53 2b18 	vmov	r2, r3, d8
 800e9be:	f7f1 fc73 	bl	80002a8 <__aeabi_dsub>
 800e9c2:	a30b      	add	r3, pc, #44	; (adr r3, 800e9f0 <__kernel_sin+0x148>)
 800e9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c8:	4606      	mov	r6, r0
 800e9ca:	460f      	mov	r7, r1
 800e9cc:	4640      	mov	r0, r8
 800e9ce:	4649      	mov	r1, r9
 800e9d0:	f7f1 fe22 	bl	8000618 <__aeabi_dmul>
 800e9d4:	4602      	mov	r2, r0
 800e9d6:	460b      	mov	r3, r1
 800e9d8:	4630      	mov	r0, r6
 800e9da:	4639      	mov	r1, r7
 800e9dc:	f7f1 fc66 	bl	80002ac <__adddf3>
 800e9e0:	4602      	mov	r2, r0
 800e9e2:	460b      	mov	r3, r1
 800e9e4:	4620      	mov	r0, r4
 800e9e6:	4629      	mov	r1, r5
 800e9e8:	f7f1 fc5e 	bl	80002a8 <__aeabi_dsub>
 800e9ec:	e7c4      	b.n	800e978 <__kernel_sin+0xd0>
 800e9ee:	bf00      	nop
 800e9f0:	55555549 	.word	0x55555549
 800e9f4:	3fc55555 	.word	0x3fc55555
 800e9f8:	3fe00000 	.word	0x3fe00000
 800e9fc:	5acfd57c 	.word	0x5acfd57c
 800ea00:	3de5d93a 	.word	0x3de5d93a
 800ea04:	8a2b9ceb 	.word	0x8a2b9ceb
 800ea08:	3e5ae5e6 	.word	0x3e5ae5e6
 800ea0c:	57b1fe7d 	.word	0x57b1fe7d
 800ea10:	3ec71de3 	.word	0x3ec71de3
 800ea14:	19c161d5 	.word	0x19c161d5
 800ea18:	3f2a01a0 	.word	0x3f2a01a0
 800ea1c:	1110f8a6 	.word	0x1110f8a6
 800ea20:	3f811111 	.word	0x3f811111
 800ea24:	00000000 	.word	0x00000000

0800ea28 <atan>:
 800ea28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea2c:	ec55 4b10 	vmov	r4, r5, d0
 800ea30:	4bc3      	ldr	r3, [pc, #780]	; (800ed40 <atan+0x318>)
 800ea32:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ea36:	429e      	cmp	r6, r3
 800ea38:	46ab      	mov	fp, r5
 800ea3a:	dd18      	ble.n	800ea6e <atan+0x46>
 800ea3c:	4bc1      	ldr	r3, [pc, #772]	; (800ed44 <atan+0x31c>)
 800ea3e:	429e      	cmp	r6, r3
 800ea40:	dc01      	bgt.n	800ea46 <atan+0x1e>
 800ea42:	d109      	bne.n	800ea58 <atan+0x30>
 800ea44:	b144      	cbz	r4, 800ea58 <atan+0x30>
 800ea46:	4622      	mov	r2, r4
 800ea48:	462b      	mov	r3, r5
 800ea4a:	4620      	mov	r0, r4
 800ea4c:	4629      	mov	r1, r5
 800ea4e:	f7f1 fc2d 	bl	80002ac <__adddf3>
 800ea52:	4604      	mov	r4, r0
 800ea54:	460d      	mov	r5, r1
 800ea56:	e006      	b.n	800ea66 <atan+0x3e>
 800ea58:	f1bb 0f00 	cmp.w	fp, #0
 800ea5c:	f300 8131 	bgt.w	800ecc2 <atan+0x29a>
 800ea60:	a59b      	add	r5, pc, #620	; (adr r5, 800ecd0 <atan+0x2a8>)
 800ea62:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ea66:	ec45 4b10 	vmov	d0, r4, r5
 800ea6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea6e:	4bb6      	ldr	r3, [pc, #728]	; (800ed48 <atan+0x320>)
 800ea70:	429e      	cmp	r6, r3
 800ea72:	dc14      	bgt.n	800ea9e <atan+0x76>
 800ea74:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800ea78:	429e      	cmp	r6, r3
 800ea7a:	dc0d      	bgt.n	800ea98 <atan+0x70>
 800ea7c:	a396      	add	r3, pc, #600	; (adr r3, 800ecd8 <atan+0x2b0>)
 800ea7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea82:	ee10 0a10 	vmov	r0, s0
 800ea86:	4629      	mov	r1, r5
 800ea88:	f7f1 fc10 	bl	80002ac <__adddf3>
 800ea8c:	4baf      	ldr	r3, [pc, #700]	; (800ed4c <atan+0x324>)
 800ea8e:	2200      	movs	r2, #0
 800ea90:	f7f2 f852 	bl	8000b38 <__aeabi_dcmpgt>
 800ea94:	2800      	cmp	r0, #0
 800ea96:	d1e6      	bne.n	800ea66 <atan+0x3e>
 800ea98:	f04f 3aff 	mov.w	sl, #4294967295
 800ea9c:	e02b      	b.n	800eaf6 <atan+0xce>
 800ea9e:	f000 f963 	bl	800ed68 <fabs>
 800eaa2:	4bab      	ldr	r3, [pc, #684]	; (800ed50 <atan+0x328>)
 800eaa4:	429e      	cmp	r6, r3
 800eaa6:	ec55 4b10 	vmov	r4, r5, d0
 800eaaa:	f300 80bf 	bgt.w	800ec2c <atan+0x204>
 800eaae:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800eab2:	429e      	cmp	r6, r3
 800eab4:	f300 80a0 	bgt.w	800ebf8 <atan+0x1d0>
 800eab8:	ee10 2a10 	vmov	r2, s0
 800eabc:	ee10 0a10 	vmov	r0, s0
 800eac0:	462b      	mov	r3, r5
 800eac2:	4629      	mov	r1, r5
 800eac4:	f7f1 fbf2 	bl	80002ac <__adddf3>
 800eac8:	4ba0      	ldr	r3, [pc, #640]	; (800ed4c <atan+0x324>)
 800eaca:	2200      	movs	r2, #0
 800eacc:	f7f1 fbec 	bl	80002a8 <__aeabi_dsub>
 800ead0:	2200      	movs	r2, #0
 800ead2:	4606      	mov	r6, r0
 800ead4:	460f      	mov	r7, r1
 800ead6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800eada:	4620      	mov	r0, r4
 800eadc:	4629      	mov	r1, r5
 800eade:	f7f1 fbe5 	bl	80002ac <__adddf3>
 800eae2:	4602      	mov	r2, r0
 800eae4:	460b      	mov	r3, r1
 800eae6:	4630      	mov	r0, r6
 800eae8:	4639      	mov	r1, r7
 800eaea:	f7f1 febf 	bl	800086c <__aeabi_ddiv>
 800eaee:	f04f 0a00 	mov.w	sl, #0
 800eaf2:	4604      	mov	r4, r0
 800eaf4:	460d      	mov	r5, r1
 800eaf6:	4622      	mov	r2, r4
 800eaf8:	462b      	mov	r3, r5
 800eafa:	4620      	mov	r0, r4
 800eafc:	4629      	mov	r1, r5
 800eafe:	f7f1 fd8b 	bl	8000618 <__aeabi_dmul>
 800eb02:	4602      	mov	r2, r0
 800eb04:	460b      	mov	r3, r1
 800eb06:	4680      	mov	r8, r0
 800eb08:	4689      	mov	r9, r1
 800eb0a:	f7f1 fd85 	bl	8000618 <__aeabi_dmul>
 800eb0e:	a374      	add	r3, pc, #464	; (adr r3, 800ece0 <atan+0x2b8>)
 800eb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb14:	4606      	mov	r6, r0
 800eb16:	460f      	mov	r7, r1
 800eb18:	f7f1 fd7e 	bl	8000618 <__aeabi_dmul>
 800eb1c:	a372      	add	r3, pc, #456	; (adr r3, 800ece8 <atan+0x2c0>)
 800eb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb22:	f7f1 fbc3 	bl	80002ac <__adddf3>
 800eb26:	4632      	mov	r2, r6
 800eb28:	463b      	mov	r3, r7
 800eb2a:	f7f1 fd75 	bl	8000618 <__aeabi_dmul>
 800eb2e:	a370      	add	r3, pc, #448	; (adr r3, 800ecf0 <atan+0x2c8>)
 800eb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb34:	f7f1 fbba 	bl	80002ac <__adddf3>
 800eb38:	4632      	mov	r2, r6
 800eb3a:	463b      	mov	r3, r7
 800eb3c:	f7f1 fd6c 	bl	8000618 <__aeabi_dmul>
 800eb40:	a36d      	add	r3, pc, #436	; (adr r3, 800ecf8 <atan+0x2d0>)
 800eb42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb46:	f7f1 fbb1 	bl	80002ac <__adddf3>
 800eb4a:	4632      	mov	r2, r6
 800eb4c:	463b      	mov	r3, r7
 800eb4e:	f7f1 fd63 	bl	8000618 <__aeabi_dmul>
 800eb52:	a36b      	add	r3, pc, #428	; (adr r3, 800ed00 <atan+0x2d8>)
 800eb54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb58:	f7f1 fba8 	bl	80002ac <__adddf3>
 800eb5c:	4632      	mov	r2, r6
 800eb5e:	463b      	mov	r3, r7
 800eb60:	f7f1 fd5a 	bl	8000618 <__aeabi_dmul>
 800eb64:	a368      	add	r3, pc, #416	; (adr r3, 800ed08 <atan+0x2e0>)
 800eb66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb6a:	f7f1 fb9f 	bl	80002ac <__adddf3>
 800eb6e:	4642      	mov	r2, r8
 800eb70:	464b      	mov	r3, r9
 800eb72:	f7f1 fd51 	bl	8000618 <__aeabi_dmul>
 800eb76:	a366      	add	r3, pc, #408	; (adr r3, 800ed10 <atan+0x2e8>)
 800eb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb7c:	4680      	mov	r8, r0
 800eb7e:	4689      	mov	r9, r1
 800eb80:	4630      	mov	r0, r6
 800eb82:	4639      	mov	r1, r7
 800eb84:	f7f1 fd48 	bl	8000618 <__aeabi_dmul>
 800eb88:	a363      	add	r3, pc, #396	; (adr r3, 800ed18 <atan+0x2f0>)
 800eb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb8e:	f7f1 fb8b 	bl	80002a8 <__aeabi_dsub>
 800eb92:	4632      	mov	r2, r6
 800eb94:	463b      	mov	r3, r7
 800eb96:	f7f1 fd3f 	bl	8000618 <__aeabi_dmul>
 800eb9a:	a361      	add	r3, pc, #388	; (adr r3, 800ed20 <atan+0x2f8>)
 800eb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eba0:	f7f1 fb82 	bl	80002a8 <__aeabi_dsub>
 800eba4:	4632      	mov	r2, r6
 800eba6:	463b      	mov	r3, r7
 800eba8:	f7f1 fd36 	bl	8000618 <__aeabi_dmul>
 800ebac:	a35e      	add	r3, pc, #376	; (adr r3, 800ed28 <atan+0x300>)
 800ebae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebb2:	f7f1 fb79 	bl	80002a8 <__aeabi_dsub>
 800ebb6:	4632      	mov	r2, r6
 800ebb8:	463b      	mov	r3, r7
 800ebba:	f7f1 fd2d 	bl	8000618 <__aeabi_dmul>
 800ebbe:	a35c      	add	r3, pc, #368	; (adr r3, 800ed30 <atan+0x308>)
 800ebc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc4:	f7f1 fb70 	bl	80002a8 <__aeabi_dsub>
 800ebc8:	4632      	mov	r2, r6
 800ebca:	463b      	mov	r3, r7
 800ebcc:	f7f1 fd24 	bl	8000618 <__aeabi_dmul>
 800ebd0:	4602      	mov	r2, r0
 800ebd2:	460b      	mov	r3, r1
 800ebd4:	4640      	mov	r0, r8
 800ebd6:	4649      	mov	r1, r9
 800ebd8:	f7f1 fb68 	bl	80002ac <__adddf3>
 800ebdc:	4622      	mov	r2, r4
 800ebde:	462b      	mov	r3, r5
 800ebe0:	f7f1 fd1a 	bl	8000618 <__aeabi_dmul>
 800ebe4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ebe8:	4602      	mov	r2, r0
 800ebea:	460b      	mov	r3, r1
 800ebec:	d14b      	bne.n	800ec86 <atan+0x25e>
 800ebee:	4620      	mov	r0, r4
 800ebf0:	4629      	mov	r1, r5
 800ebf2:	f7f1 fb59 	bl	80002a8 <__aeabi_dsub>
 800ebf6:	e72c      	b.n	800ea52 <atan+0x2a>
 800ebf8:	ee10 0a10 	vmov	r0, s0
 800ebfc:	4b53      	ldr	r3, [pc, #332]	; (800ed4c <atan+0x324>)
 800ebfe:	2200      	movs	r2, #0
 800ec00:	4629      	mov	r1, r5
 800ec02:	f7f1 fb51 	bl	80002a8 <__aeabi_dsub>
 800ec06:	4b51      	ldr	r3, [pc, #324]	; (800ed4c <atan+0x324>)
 800ec08:	4606      	mov	r6, r0
 800ec0a:	460f      	mov	r7, r1
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	4620      	mov	r0, r4
 800ec10:	4629      	mov	r1, r5
 800ec12:	f7f1 fb4b 	bl	80002ac <__adddf3>
 800ec16:	4602      	mov	r2, r0
 800ec18:	460b      	mov	r3, r1
 800ec1a:	4630      	mov	r0, r6
 800ec1c:	4639      	mov	r1, r7
 800ec1e:	f7f1 fe25 	bl	800086c <__aeabi_ddiv>
 800ec22:	f04f 0a01 	mov.w	sl, #1
 800ec26:	4604      	mov	r4, r0
 800ec28:	460d      	mov	r5, r1
 800ec2a:	e764      	b.n	800eaf6 <atan+0xce>
 800ec2c:	4b49      	ldr	r3, [pc, #292]	; (800ed54 <atan+0x32c>)
 800ec2e:	429e      	cmp	r6, r3
 800ec30:	da1d      	bge.n	800ec6e <atan+0x246>
 800ec32:	ee10 0a10 	vmov	r0, s0
 800ec36:	4b48      	ldr	r3, [pc, #288]	; (800ed58 <atan+0x330>)
 800ec38:	2200      	movs	r2, #0
 800ec3a:	4629      	mov	r1, r5
 800ec3c:	f7f1 fb34 	bl	80002a8 <__aeabi_dsub>
 800ec40:	4b45      	ldr	r3, [pc, #276]	; (800ed58 <atan+0x330>)
 800ec42:	4606      	mov	r6, r0
 800ec44:	460f      	mov	r7, r1
 800ec46:	2200      	movs	r2, #0
 800ec48:	4620      	mov	r0, r4
 800ec4a:	4629      	mov	r1, r5
 800ec4c:	f7f1 fce4 	bl	8000618 <__aeabi_dmul>
 800ec50:	4b3e      	ldr	r3, [pc, #248]	; (800ed4c <atan+0x324>)
 800ec52:	2200      	movs	r2, #0
 800ec54:	f7f1 fb2a 	bl	80002ac <__adddf3>
 800ec58:	4602      	mov	r2, r0
 800ec5a:	460b      	mov	r3, r1
 800ec5c:	4630      	mov	r0, r6
 800ec5e:	4639      	mov	r1, r7
 800ec60:	f7f1 fe04 	bl	800086c <__aeabi_ddiv>
 800ec64:	f04f 0a02 	mov.w	sl, #2
 800ec68:	4604      	mov	r4, r0
 800ec6a:	460d      	mov	r5, r1
 800ec6c:	e743      	b.n	800eaf6 <atan+0xce>
 800ec6e:	462b      	mov	r3, r5
 800ec70:	ee10 2a10 	vmov	r2, s0
 800ec74:	4939      	ldr	r1, [pc, #228]	; (800ed5c <atan+0x334>)
 800ec76:	2000      	movs	r0, #0
 800ec78:	f7f1 fdf8 	bl	800086c <__aeabi_ddiv>
 800ec7c:	f04f 0a03 	mov.w	sl, #3
 800ec80:	4604      	mov	r4, r0
 800ec82:	460d      	mov	r5, r1
 800ec84:	e737      	b.n	800eaf6 <atan+0xce>
 800ec86:	4b36      	ldr	r3, [pc, #216]	; (800ed60 <atan+0x338>)
 800ec88:	4e36      	ldr	r6, [pc, #216]	; (800ed64 <atan+0x33c>)
 800ec8a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ec8e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800ec92:	e9da 2300 	ldrd	r2, r3, [sl]
 800ec96:	f7f1 fb07 	bl	80002a8 <__aeabi_dsub>
 800ec9a:	4622      	mov	r2, r4
 800ec9c:	462b      	mov	r3, r5
 800ec9e:	f7f1 fb03 	bl	80002a8 <__aeabi_dsub>
 800eca2:	4602      	mov	r2, r0
 800eca4:	460b      	mov	r3, r1
 800eca6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ecaa:	f7f1 fafd 	bl	80002a8 <__aeabi_dsub>
 800ecae:	f1bb 0f00 	cmp.w	fp, #0
 800ecb2:	4604      	mov	r4, r0
 800ecb4:	460d      	mov	r5, r1
 800ecb6:	f6bf aed6 	bge.w	800ea66 <atan+0x3e>
 800ecba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ecbe:	461d      	mov	r5, r3
 800ecc0:	e6d1      	b.n	800ea66 <atan+0x3e>
 800ecc2:	a51d      	add	r5, pc, #116	; (adr r5, 800ed38 <atan+0x310>)
 800ecc4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ecc8:	e6cd      	b.n	800ea66 <atan+0x3e>
 800ecca:	bf00      	nop
 800eccc:	f3af 8000 	nop.w
 800ecd0:	54442d18 	.word	0x54442d18
 800ecd4:	bff921fb 	.word	0xbff921fb
 800ecd8:	8800759c 	.word	0x8800759c
 800ecdc:	7e37e43c 	.word	0x7e37e43c
 800ece0:	e322da11 	.word	0xe322da11
 800ece4:	3f90ad3a 	.word	0x3f90ad3a
 800ece8:	24760deb 	.word	0x24760deb
 800ecec:	3fa97b4b 	.word	0x3fa97b4b
 800ecf0:	a0d03d51 	.word	0xa0d03d51
 800ecf4:	3fb10d66 	.word	0x3fb10d66
 800ecf8:	c54c206e 	.word	0xc54c206e
 800ecfc:	3fb745cd 	.word	0x3fb745cd
 800ed00:	920083ff 	.word	0x920083ff
 800ed04:	3fc24924 	.word	0x3fc24924
 800ed08:	5555550d 	.word	0x5555550d
 800ed0c:	3fd55555 	.word	0x3fd55555
 800ed10:	2c6a6c2f 	.word	0x2c6a6c2f
 800ed14:	bfa2b444 	.word	0xbfa2b444
 800ed18:	52defd9a 	.word	0x52defd9a
 800ed1c:	3fadde2d 	.word	0x3fadde2d
 800ed20:	af749a6d 	.word	0xaf749a6d
 800ed24:	3fb3b0f2 	.word	0x3fb3b0f2
 800ed28:	fe231671 	.word	0xfe231671
 800ed2c:	3fbc71c6 	.word	0x3fbc71c6
 800ed30:	9998ebc4 	.word	0x9998ebc4
 800ed34:	3fc99999 	.word	0x3fc99999
 800ed38:	54442d18 	.word	0x54442d18
 800ed3c:	3ff921fb 	.word	0x3ff921fb
 800ed40:	440fffff 	.word	0x440fffff
 800ed44:	7ff00000 	.word	0x7ff00000
 800ed48:	3fdbffff 	.word	0x3fdbffff
 800ed4c:	3ff00000 	.word	0x3ff00000
 800ed50:	3ff2ffff 	.word	0x3ff2ffff
 800ed54:	40038000 	.word	0x40038000
 800ed58:	3ff80000 	.word	0x3ff80000
 800ed5c:	bff00000 	.word	0xbff00000
 800ed60:	0800f718 	.word	0x0800f718
 800ed64:	0800f6f8 	.word	0x0800f6f8

0800ed68 <fabs>:
 800ed68:	ec51 0b10 	vmov	r0, r1, d0
 800ed6c:	ee10 2a10 	vmov	r2, s0
 800ed70:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ed74:	ec43 2b10 	vmov	d0, r2, r3
 800ed78:	4770      	bx	lr
 800ed7a:	0000      	movs	r0, r0
 800ed7c:	0000      	movs	r0, r0
	...

0800ed80 <floor>:
 800ed80:	ec51 0b10 	vmov	r0, r1, d0
 800ed84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed88:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ed8c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ed90:	2e13      	cmp	r6, #19
 800ed92:	ee10 5a10 	vmov	r5, s0
 800ed96:	ee10 8a10 	vmov	r8, s0
 800ed9a:	460c      	mov	r4, r1
 800ed9c:	dc32      	bgt.n	800ee04 <floor+0x84>
 800ed9e:	2e00      	cmp	r6, #0
 800eda0:	da14      	bge.n	800edcc <floor+0x4c>
 800eda2:	a333      	add	r3, pc, #204	; (adr r3, 800ee70 <floor+0xf0>)
 800eda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eda8:	f7f1 fa80 	bl	80002ac <__adddf3>
 800edac:	2200      	movs	r2, #0
 800edae:	2300      	movs	r3, #0
 800edb0:	f7f1 fec2 	bl	8000b38 <__aeabi_dcmpgt>
 800edb4:	b138      	cbz	r0, 800edc6 <floor+0x46>
 800edb6:	2c00      	cmp	r4, #0
 800edb8:	da57      	bge.n	800ee6a <floor+0xea>
 800edba:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800edbe:	431d      	orrs	r5, r3
 800edc0:	d001      	beq.n	800edc6 <floor+0x46>
 800edc2:	4c2d      	ldr	r4, [pc, #180]	; (800ee78 <floor+0xf8>)
 800edc4:	2500      	movs	r5, #0
 800edc6:	4621      	mov	r1, r4
 800edc8:	4628      	mov	r0, r5
 800edca:	e025      	b.n	800ee18 <floor+0x98>
 800edcc:	4f2b      	ldr	r7, [pc, #172]	; (800ee7c <floor+0xfc>)
 800edce:	4137      	asrs	r7, r6
 800edd0:	ea01 0307 	and.w	r3, r1, r7
 800edd4:	4303      	orrs	r3, r0
 800edd6:	d01f      	beq.n	800ee18 <floor+0x98>
 800edd8:	a325      	add	r3, pc, #148	; (adr r3, 800ee70 <floor+0xf0>)
 800edda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edde:	f7f1 fa65 	bl	80002ac <__adddf3>
 800ede2:	2200      	movs	r2, #0
 800ede4:	2300      	movs	r3, #0
 800ede6:	f7f1 fea7 	bl	8000b38 <__aeabi_dcmpgt>
 800edea:	2800      	cmp	r0, #0
 800edec:	d0eb      	beq.n	800edc6 <floor+0x46>
 800edee:	2c00      	cmp	r4, #0
 800edf0:	bfbe      	ittt	lt
 800edf2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800edf6:	fa43 f606 	asrlt.w	r6, r3, r6
 800edfa:	19a4      	addlt	r4, r4, r6
 800edfc:	ea24 0407 	bic.w	r4, r4, r7
 800ee00:	2500      	movs	r5, #0
 800ee02:	e7e0      	b.n	800edc6 <floor+0x46>
 800ee04:	2e33      	cmp	r6, #51	; 0x33
 800ee06:	dd0b      	ble.n	800ee20 <floor+0xa0>
 800ee08:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ee0c:	d104      	bne.n	800ee18 <floor+0x98>
 800ee0e:	ee10 2a10 	vmov	r2, s0
 800ee12:	460b      	mov	r3, r1
 800ee14:	f7f1 fa4a 	bl	80002ac <__adddf3>
 800ee18:	ec41 0b10 	vmov	d0, r0, r1
 800ee1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee20:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ee24:	f04f 33ff 	mov.w	r3, #4294967295
 800ee28:	fa23 f707 	lsr.w	r7, r3, r7
 800ee2c:	4207      	tst	r7, r0
 800ee2e:	d0f3      	beq.n	800ee18 <floor+0x98>
 800ee30:	a30f      	add	r3, pc, #60	; (adr r3, 800ee70 <floor+0xf0>)
 800ee32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee36:	f7f1 fa39 	bl	80002ac <__adddf3>
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	f7f1 fe7b 	bl	8000b38 <__aeabi_dcmpgt>
 800ee42:	2800      	cmp	r0, #0
 800ee44:	d0bf      	beq.n	800edc6 <floor+0x46>
 800ee46:	2c00      	cmp	r4, #0
 800ee48:	da02      	bge.n	800ee50 <floor+0xd0>
 800ee4a:	2e14      	cmp	r6, #20
 800ee4c:	d103      	bne.n	800ee56 <floor+0xd6>
 800ee4e:	3401      	adds	r4, #1
 800ee50:	ea25 0507 	bic.w	r5, r5, r7
 800ee54:	e7b7      	b.n	800edc6 <floor+0x46>
 800ee56:	2301      	movs	r3, #1
 800ee58:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ee5c:	fa03 f606 	lsl.w	r6, r3, r6
 800ee60:	4435      	add	r5, r6
 800ee62:	4545      	cmp	r5, r8
 800ee64:	bf38      	it	cc
 800ee66:	18e4      	addcc	r4, r4, r3
 800ee68:	e7f2      	b.n	800ee50 <floor+0xd0>
 800ee6a:	2500      	movs	r5, #0
 800ee6c:	462c      	mov	r4, r5
 800ee6e:	e7aa      	b.n	800edc6 <floor+0x46>
 800ee70:	8800759c 	.word	0x8800759c
 800ee74:	7e37e43c 	.word	0x7e37e43c
 800ee78:	bff00000 	.word	0xbff00000
 800ee7c:	000fffff 	.word	0x000fffff

0800ee80 <scalbn>:
 800ee80:	b570      	push	{r4, r5, r6, lr}
 800ee82:	ec55 4b10 	vmov	r4, r5, d0
 800ee86:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ee8a:	4606      	mov	r6, r0
 800ee8c:	462b      	mov	r3, r5
 800ee8e:	b99a      	cbnz	r2, 800eeb8 <scalbn+0x38>
 800ee90:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ee94:	4323      	orrs	r3, r4
 800ee96:	d036      	beq.n	800ef06 <scalbn+0x86>
 800ee98:	4b39      	ldr	r3, [pc, #228]	; (800ef80 <scalbn+0x100>)
 800ee9a:	4629      	mov	r1, r5
 800ee9c:	ee10 0a10 	vmov	r0, s0
 800eea0:	2200      	movs	r2, #0
 800eea2:	f7f1 fbb9 	bl	8000618 <__aeabi_dmul>
 800eea6:	4b37      	ldr	r3, [pc, #220]	; (800ef84 <scalbn+0x104>)
 800eea8:	429e      	cmp	r6, r3
 800eeaa:	4604      	mov	r4, r0
 800eeac:	460d      	mov	r5, r1
 800eeae:	da10      	bge.n	800eed2 <scalbn+0x52>
 800eeb0:	a32b      	add	r3, pc, #172	; (adr r3, 800ef60 <scalbn+0xe0>)
 800eeb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeb6:	e03a      	b.n	800ef2e <scalbn+0xae>
 800eeb8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800eebc:	428a      	cmp	r2, r1
 800eebe:	d10c      	bne.n	800eeda <scalbn+0x5a>
 800eec0:	ee10 2a10 	vmov	r2, s0
 800eec4:	4620      	mov	r0, r4
 800eec6:	4629      	mov	r1, r5
 800eec8:	f7f1 f9f0 	bl	80002ac <__adddf3>
 800eecc:	4604      	mov	r4, r0
 800eece:	460d      	mov	r5, r1
 800eed0:	e019      	b.n	800ef06 <scalbn+0x86>
 800eed2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800eed6:	460b      	mov	r3, r1
 800eed8:	3a36      	subs	r2, #54	; 0x36
 800eeda:	4432      	add	r2, r6
 800eedc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800eee0:	428a      	cmp	r2, r1
 800eee2:	dd08      	ble.n	800eef6 <scalbn+0x76>
 800eee4:	2d00      	cmp	r5, #0
 800eee6:	a120      	add	r1, pc, #128	; (adr r1, 800ef68 <scalbn+0xe8>)
 800eee8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eeec:	da1c      	bge.n	800ef28 <scalbn+0xa8>
 800eeee:	a120      	add	r1, pc, #128	; (adr r1, 800ef70 <scalbn+0xf0>)
 800eef0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eef4:	e018      	b.n	800ef28 <scalbn+0xa8>
 800eef6:	2a00      	cmp	r2, #0
 800eef8:	dd08      	ble.n	800ef0c <scalbn+0x8c>
 800eefa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800eefe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ef02:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ef06:	ec45 4b10 	vmov	d0, r4, r5
 800ef0a:	bd70      	pop	{r4, r5, r6, pc}
 800ef0c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ef10:	da19      	bge.n	800ef46 <scalbn+0xc6>
 800ef12:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ef16:	429e      	cmp	r6, r3
 800ef18:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ef1c:	dd0a      	ble.n	800ef34 <scalbn+0xb4>
 800ef1e:	a112      	add	r1, pc, #72	; (adr r1, 800ef68 <scalbn+0xe8>)
 800ef20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d1e2      	bne.n	800eeee <scalbn+0x6e>
 800ef28:	a30f      	add	r3, pc, #60	; (adr r3, 800ef68 <scalbn+0xe8>)
 800ef2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef2e:	f7f1 fb73 	bl	8000618 <__aeabi_dmul>
 800ef32:	e7cb      	b.n	800eecc <scalbn+0x4c>
 800ef34:	a10a      	add	r1, pc, #40	; (adr r1, 800ef60 <scalbn+0xe0>)
 800ef36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d0b8      	beq.n	800eeb0 <scalbn+0x30>
 800ef3e:	a10e      	add	r1, pc, #56	; (adr r1, 800ef78 <scalbn+0xf8>)
 800ef40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef44:	e7b4      	b.n	800eeb0 <scalbn+0x30>
 800ef46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ef4a:	3236      	adds	r2, #54	; 0x36
 800ef4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ef50:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ef54:	4620      	mov	r0, r4
 800ef56:	4b0c      	ldr	r3, [pc, #48]	; (800ef88 <scalbn+0x108>)
 800ef58:	2200      	movs	r2, #0
 800ef5a:	e7e8      	b.n	800ef2e <scalbn+0xae>
 800ef5c:	f3af 8000 	nop.w
 800ef60:	c2f8f359 	.word	0xc2f8f359
 800ef64:	01a56e1f 	.word	0x01a56e1f
 800ef68:	8800759c 	.word	0x8800759c
 800ef6c:	7e37e43c 	.word	0x7e37e43c
 800ef70:	8800759c 	.word	0x8800759c
 800ef74:	fe37e43c 	.word	0xfe37e43c
 800ef78:	c2f8f359 	.word	0xc2f8f359
 800ef7c:	81a56e1f 	.word	0x81a56e1f
 800ef80:	43500000 	.word	0x43500000
 800ef84:	ffff3cb0 	.word	0xffff3cb0
 800ef88:	3c900000 	.word	0x3c900000

0800ef8c <_init>:
 800ef8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef8e:	bf00      	nop
 800ef90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef92:	bc08      	pop	{r3}
 800ef94:	469e      	mov	lr, r3
 800ef96:	4770      	bx	lr

0800ef98 <_fini>:
 800ef98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef9a:	bf00      	nop
 800ef9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef9e:	bc08      	pop	{r3}
 800efa0:	469e      	mov	lr, r3
 800efa2:	4770      	bx	lr
