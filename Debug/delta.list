
delta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec34  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d0  0800ede8  0800ede8  0001ede8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f5b8  0800f5b8  00020228  2**0
                  CONTENTS
  4 .ARM          00000008  0800f5b8  0800f5b8  0001f5b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f5c0  0800f5c0  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f5c0  0800f5c0  0001f5c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f5c4  0800f5c4  0001f5c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0800f5c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020228  2**0
                  CONTENTS
 10 .bss          00004270  20000228  20000228  00020228  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20004498  20004498  00020228  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c6b1  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000459b  00000000  00000000  0003c909  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b8  00000000  00000000  00040ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014d0  00000000  00000000  00042560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000290ba  00000000  00000000  00043a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cc66  00000000  00000000  0006caea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ebdd8  00000000  00000000  00089750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00175528  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007214  00000000  00000000  00175578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000228 	.word	0x20000228
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800edcc 	.word	0x0800edcc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000022c 	.word	0x2000022c
 80001ec:	0800edcc 	.word	0x0800edcc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b974 	b.w	8000f08 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468e      	mov	lr, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d14d      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c46:	428a      	cmp	r2, r1
 8000c48:	4694      	mov	ip, r2
 8000c4a:	d969      	bls.n	8000d20 <__udivmoddi4+0xe8>
 8000c4c:	fab2 f282 	clz	r2, r2
 8000c50:	b152      	cbz	r2, 8000c68 <__udivmoddi4+0x30>
 8000c52:	fa01 f302 	lsl.w	r3, r1, r2
 8000c56:	f1c2 0120 	rsb	r1, r2, #32
 8000c5a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c5e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c62:	ea41 0e03 	orr.w	lr, r1, r3
 8000c66:	4094      	lsls	r4, r2
 8000c68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c6c:	0c21      	lsrs	r1, r4, #16
 8000c6e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c72:	fa1f f78c 	uxth.w	r7, ip
 8000c76:	fb08 e316 	mls	r3, r8, r6, lr
 8000c7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c7e:	fb06 f107 	mul.w	r1, r6, r7
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8e:	f080 811f 	bcs.w	8000ed0 <__udivmoddi4+0x298>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 811c 	bls.w	8000ed0 <__udivmoddi4+0x298>
 8000c98:	3e02      	subs	r6, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a5b      	subs	r3, r3, r1
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cac:	fb00 f707 	mul.w	r7, r0, r7
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	d90a      	bls.n	8000cca <__udivmoddi4+0x92>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cbc:	f080 810a 	bcs.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	f240 8107 	bls.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc6:	4464      	add	r4, ip
 8000cc8:	3802      	subs	r0, #2
 8000cca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cce:	1be4      	subs	r4, r4, r7
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	b11d      	cbz	r5, 8000cdc <__udivmoddi4+0xa4>
 8000cd4:	40d4      	lsrs	r4, r2
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cdc:	4631      	mov	r1, r6
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0xc2>
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	f000 80ef 	beq.w	8000eca <__udivmoddi4+0x292>
 8000cec:	2600      	movs	r6, #0
 8000cee:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf2:	4630      	mov	r0, r6
 8000cf4:	4631      	mov	r1, r6
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	fab3 f683 	clz	r6, r3
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	d14a      	bne.n	8000d98 <__udivmoddi4+0x160>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0xd4>
 8000d06:	4282      	cmp	r2, r0
 8000d08:	f200 80f9 	bhi.w	8000efe <__udivmoddi4+0x2c6>
 8000d0c:	1a84      	subs	r4, r0, r2
 8000d0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	469e      	mov	lr, r3
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	d0e0      	beq.n	8000cdc <__udivmoddi4+0xa4>
 8000d1a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d1e:	e7dd      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000d20:	b902      	cbnz	r2, 8000d24 <__udivmoddi4+0xec>
 8000d22:	deff      	udf	#255	; 0xff
 8000d24:	fab2 f282 	clz	r2, r2
 8000d28:	2a00      	cmp	r2, #0
 8000d2a:	f040 8092 	bne.w	8000e52 <__udivmoddi4+0x21a>
 8000d2e:	eba1 010c 	sub.w	r1, r1, ip
 8000d32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d36:	fa1f fe8c 	uxth.w	lr, ip
 8000d3a:	2601      	movs	r6, #1
 8000d3c:	0c20      	lsrs	r0, r4, #16
 8000d3e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d42:	fb07 1113 	mls	r1, r7, r3, r1
 8000d46:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d4a:	fb0e f003 	mul.w	r0, lr, r3
 8000d4e:	4288      	cmp	r0, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x12c>
 8000d52:	eb1c 0101 	adds.w	r1, ip, r1
 8000d56:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x12a>
 8000d5c:	4288      	cmp	r0, r1
 8000d5e:	f200 80cb 	bhi.w	8000ef8 <__udivmoddi4+0x2c0>
 8000d62:	4643      	mov	r3, r8
 8000d64:	1a09      	subs	r1, r1, r0
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d6c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d70:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d74:	fb0e fe00 	mul.w	lr, lr, r0
 8000d78:	45a6      	cmp	lr, r4
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x156>
 8000d7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d84:	d202      	bcs.n	8000d8c <__udivmoddi4+0x154>
 8000d86:	45a6      	cmp	lr, r4
 8000d88:	f200 80bb 	bhi.w	8000f02 <__udivmoddi4+0x2ca>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	eba4 040e 	sub.w	r4, r4, lr
 8000d92:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d96:	e79c      	b.n	8000cd2 <__udivmoddi4+0x9a>
 8000d98:	f1c6 0720 	rsb	r7, r6, #32
 8000d9c:	40b3      	lsls	r3, r6
 8000d9e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000da2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000da6:	fa20 f407 	lsr.w	r4, r0, r7
 8000daa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dae:	431c      	orrs	r4, r3
 8000db0:	40f9      	lsrs	r1, r7
 8000db2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000db6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dba:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dbe:	0c20      	lsrs	r0, r4, #16
 8000dc0:	fa1f fe8c 	uxth.w	lr, ip
 8000dc4:	fb09 1118 	mls	r1, r9, r8, r1
 8000dc8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dcc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dd0:	4288      	cmp	r0, r1
 8000dd2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd6:	d90b      	bls.n	8000df0 <__udivmoddi4+0x1b8>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de0:	f080 8088 	bcs.w	8000ef4 <__udivmoddi4+0x2bc>
 8000de4:	4288      	cmp	r0, r1
 8000de6:	f240 8085 	bls.w	8000ef4 <__udivmoddi4+0x2bc>
 8000dea:	f1a8 0802 	sub.w	r8, r8, #2
 8000dee:	4461      	add	r1, ip
 8000df0:	1a09      	subs	r1, r1, r0
 8000df2:	b2a4      	uxth	r4, r4
 8000df4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000df8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dfc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e00:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e04:	458e      	cmp	lr, r1
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x1e2>
 8000e08:	eb1c 0101 	adds.w	r1, ip, r1
 8000e0c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e10:	d26c      	bcs.n	8000eec <__udivmoddi4+0x2b4>
 8000e12:	458e      	cmp	lr, r1
 8000e14:	d96a      	bls.n	8000eec <__udivmoddi4+0x2b4>
 8000e16:	3802      	subs	r0, #2
 8000e18:	4461      	add	r1, ip
 8000e1a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e1e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e22:	eba1 010e 	sub.w	r1, r1, lr
 8000e26:	42a1      	cmp	r1, r4
 8000e28:	46c8      	mov	r8, r9
 8000e2a:	46a6      	mov	lr, r4
 8000e2c:	d356      	bcc.n	8000edc <__udivmoddi4+0x2a4>
 8000e2e:	d053      	beq.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e30:	b15d      	cbz	r5, 8000e4a <__udivmoddi4+0x212>
 8000e32:	ebb3 0208 	subs.w	r2, r3, r8
 8000e36:	eb61 010e 	sbc.w	r1, r1, lr
 8000e3a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e3e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e42:	40f1      	lsrs	r1, r6
 8000e44:	431f      	orrs	r7, r3
 8000e46:	e9c5 7100 	strd	r7, r1, [r5]
 8000e4a:	2600      	movs	r6, #0
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	f1c2 0320 	rsb	r3, r2, #32
 8000e56:	40d8      	lsrs	r0, r3
 8000e58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e5c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e60:	4091      	lsls	r1, r2
 8000e62:	4301      	orrs	r1, r0
 8000e64:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e68:	fa1f fe8c 	uxth.w	lr, ip
 8000e6c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e70:	fb07 3610 	mls	r6, r7, r0, r3
 8000e74:	0c0b      	lsrs	r3, r1, #16
 8000e76:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e7a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	fa04 f402 	lsl.w	r4, r4, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x260>
 8000e86:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e8e:	d22f      	bcs.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e90:	429e      	cmp	r6, r3
 8000e92:	d92d      	bls.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e94:	3802      	subs	r0, #2
 8000e96:	4463      	add	r3, ip
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	b289      	uxth	r1, r1
 8000e9c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ea0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ea4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x28a>
 8000eb0:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000eb8:	d216      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d914      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000ebe:	3e02      	subs	r6, #2
 8000ec0:	4461      	add	r1, ip
 8000ec2:	1ac9      	subs	r1, r1, r3
 8000ec4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ec8:	e738      	b.n	8000d3c <__udivmoddi4+0x104>
 8000eca:	462e      	mov	r6, r5
 8000ecc:	4628      	mov	r0, r5
 8000ece:	e705      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000ed0:	4606      	mov	r6, r0
 8000ed2:	e6e3      	b.n	8000c9c <__udivmoddi4+0x64>
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	e6f8      	b.n	8000cca <__udivmoddi4+0x92>
 8000ed8:	454b      	cmp	r3, r9
 8000eda:	d2a9      	bcs.n	8000e30 <__udivmoddi4+0x1f8>
 8000edc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ee4:	3801      	subs	r0, #1
 8000ee6:	e7a3      	b.n	8000e30 <__udivmoddi4+0x1f8>
 8000ee8:	4646      	mov	r6, r8
 8000eea:	e7ea      	b.n	8000ec2 <__udivmoddi4+0x28a>
 8000eec:	4620      	mov	r0, r4
 8000eee:	e794      	b.n	8000e1a <__udivmoddi4+0x1e2>
 8000ef0:	4640      	mov	r0, r8
 8000ef2:	e7d1      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ef4:	46d0      	mov	r8, sl
 8000ef6:	e77b      	b.n	8000df0 <__udivmoddi4+0x1b8>
 8000ef8:	3b02      	subs	r3, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	e732      	b.n	8000d64 <__udivmoddi4+0x12c>
 8000efe:	4630      	mov	r0, r6
 8000f00:	e709      	b.n	8000d16 <__udivmoddi4+0xde>
 8000f02:	4464      	add	r4, ip
 8000f04:	3802      	subs	r0, #2
 8000f06:	e742      	b.n	8000d8e <__udivmoddi4+0x156>

08000f08 <__aeabi_idiv0>:
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	0000      	movs	r0, r0
	...

08000f10 <ServoConversion>:

uint16_t GP[3];

double coord[3];

void ServoConversion() {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
    GP[0] = (uint16_t)(((ThetaA + 147.9) / 0.29)+0.5);
 8000f14:	4b3a      	ldr	r3, [pc, #232]	; (8001000 <ServoConversion+0xf0>)
 8000f16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f1a:	a335      	add	r3, pc, #212	; (adr r3, 8000ff0 <ServoConversion+0xe0>)
 8000f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f20:	f7ff f9c4 	bl	80002ac <__adddf3>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4610      	mov	r0, r2
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	a332      	add	r3, pc, #200	; (adr r3, 8000ff8 <ServoConversion+0xe8>)
 8000f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f32:	f7ff fc9b 	bl	800086c <__aeabi_ddiv>
 8000f36:	4602      	mov	r2, r0
 8000f38:	460b      	mov	r3, r1
 8000f3a:	4610      	mov	r0, r2
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f04f 0200 	mov.w	r2, #0
 8000f42:	4b30      	ldr	r3, [pc, #192]	; (8001004 <ServoConversion+0xf4>)
 8000f44:	f7ff f9b2 	bl	80002ac <__adddf3>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f7ff fe3a 	bl	8000bc8 <__aeabi_d2uiz>
 8000f54:	4603      	mov	r3, r0
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	4b2b      	ldr	r3, [pc, #172]	; (8001008 <ServoConversion+0xf8>)
 8000f5a:	801a      	strh	r2, [r3, #0]
    GP[1] = (uint16_t)(((ThetaB + 147.9) / 0.29)+0.5);
 8000f5c:	4b2b      	ldr	r3, [pc, #172]	; (800100c <ServoConversion+0xfc>)
 8000f5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f62:	a323      	add	r3, pc, #140	; (adr r3, 8000ff0 <ServoConversion+0xe0>)
 8000f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f68:	f7ff f9a0 	bl	80002ac <__adddf3>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	4610      	mov	r0, r2
 8000f72:	4619      	mov	r1, r3
 8000f74:	a320      	add	r3, pc, #128	; (adr r3, 8000ff8 <ServoConversion+0xe8>)
 8000f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7a:	f7ff fc77 	bl	800086c <__aeabi_ddiv>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	4610      	mov	r0, r2
 8000f84:	4619      	mov	r1, r3
 8000f86:	f04f 0200 	mov.w	r2, #0
 8000f8a:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <ServoConversion+0xf4>)
 8000f8c:	f7ff f98e 	bl	80002ac <__adddf3>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	4610      	mov	r0, r2
 8000f96:	4619      	mov	r1, r3
 8000f98:	f7ff fe16 	bl	8000bc8 <__aeabi_d2uiz>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	4b19      	ldr	r3, [pc, #100]	; (8001008 <ServoConversion+0xf8>)
 8000fa2:	805a      	strh	r2, [r3, #2]
    GP[2] = (uint16_t)(((ThetaC + 147.9) / 0.29)+0.5);
 8000fa4:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <ServoConversion+0x100>)
 8000fa6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000faa:	a311      	add	r3, pc, #68	; (adr r3, 8000ff0 <ServoConversion+0xe0>)
 8000fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb0:	f7ff f97c 	bl	80002ac <__adddf3>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	4610      	mov	r0, r2
 8000fba:	4619      	mov	r1, r3
 8000fbc:	a30e      	add	r3, pc, #56	; (adr r3, 8000ff8 <ServoConversion+0xe8>)
 8000fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc2:	f7ff fc53 	bl	800086c <__aeabi_ddiv>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	4610      	mov	r0, r2
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <ServoConversion+0xf4>)
 8000fd4:	f7ff f96a 	bl	80002ac <__adddf3>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	4610      	mov	r0, r2
 8000fde:	4619      	mov	r1, r3
 8000fe0:	f7ff fdf2 	bl	8000bc8 <__aeabi_d2uiz>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	4b07      	ldr	r3, [pc, #28]	; (8001008 <ServoConversion+0xf8>)
 8000fea:	809a      	strh	r2, [r3, #4]
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	cccccccd 	.word	0xcccccccd
 8000ff4:	40627ccc 	.word	0x40627ccc
 8000ff8:	28f5c28f 	.word	0x28f5c28f
 8000ffc:	3fd28f5c 	.word	0x3fd28f5c
 8001000:	20000260 	.word	0x20000260
 8001004:	3fe00000 	.word	0x3fe00000
 8001008:	20000278 	.word	0x20000278
 800100c:	20000268 	.word	0x20000268
 8001010:	20000270 	.word	0x20000270
 8001014:	00000000 	.word	0x00000000

08001018 <ConversionFromServo>:

double* ConversionFromServo(uint16_t PP0, uint16_t PP1, uint16_t PP2) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	80fb      	strh	r3, [r7, #6]
 8001022:	460b      	mov	r3, r1
 8001024:	80bb      	strh	r3, [r7, #4]
 8001026:	4613      	mov	r3, r2
 8001028:	807b      	strh	r3, [r7, #2]
	static double theta[3];

	theta[0]=0.0;
 800102a:	4933      	ldr	r1, [pc, #204]	; (80010f8 <ConversionFromServo+0xe0>)
 800102c:	f04f 0200 	mov.w	r2, #0
 8001030:	f04f 0300 	mov.w	r3, #0
 8001034:	e9c1 2300 	strd	r2, r3, [r1]
	theta[1]=0.0;
 8001038:	492f      	ldr	r1, [pc, #188]	; (80010f8 <ConversionFromServo+0xe0>)
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	f04f 0300 	mov.w	r3, #0
 8001042:	e9c1 2302 	strd	r2, r3, [r1, #8]
	theta[2]=0.0;
 8001046:	492c      	ldr	r1, [pc, #176]	; (80010f8 <ConversionFromServo+0xe0>)
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	e9c1 2304 	strd	r2, r3, [r1, #16]

	theta[0]=(PP0*0.29)-147.9;
 8001054:	88fb      	ldrh	r3, [r7, #6]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fa74 	bl	8000544 <__aeabi_i2d>
 800105c:	a322      	add	r3, pc, #136	; (adr r3, 80010e8 <ConversionFromServo+0xd0>)
 800105e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001062:	f7ff fad9 	bl	8000618 <__aeabi_dmul>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4610      	mov	r0, r2
 800106c:	4619      	mov	r1, r3
 800106e:	a320      	add	r3, pc, #128	; (adr r3, 80010f0 <ConversionFromServo+0xd8>)
 8001070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001074:	f7ff f918 	bl	80002a8 <__aeabi_dsub>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	491e      	ldr	r1, [pc, #120]	; (80010f8 <ConversionFromServo+0xe0>)
 800107e:	e9c1 2300 	strd	r2, r3, [r1]
	theta[1]=(PP1*0.29)-147.9;
 8001082:	88bb      	ldrh	r3, [r7, #4]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fa5d 	bl	8000544 <__aeabi_i2d>
 800108a:	a317      	add	r3, pc, #92	; (adr r3, 80010e8 <ConversionFromServo+0xd0>)
 800108c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001090:	f7ff fac2 	bl	8000618 <__aeabi_dmul>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	4610      	mov	r0, r2
 800109a:	4619      	mov	r1, r3
 800109c:	a314      	add	r3, pc, #80	; (adr r3, 80010f0 <ConversionFromServo+0xd8>)
 800109e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a2:	f7ff f901 	bl	80002a8 <__aeabi_dsub>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	4913      	ldr	r1, [pc, #76]	; (80010f8 <ConversionFromServo+0xe0>)
 80010ac:	e9c1 2302 	strd	r2, r3, [r1, #8]
	theta[2]=(PP2*0.29)-147.9;
 80010b0:	887b      	ldrh	r3, [r7, #2]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fa46 	bl	8000544 <__aeabi_i2d>
 80010b8:	a30b      	add	r3, pc, #44	; (adr r3, 80010e8 <ConversionFromServo+0xd0>)
 80010ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010be:	f7ff faab 	bl	8000618 <__aeabi_dmul>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	4610      	mov	r0, r2
 80010c8:	4619      	mov	r1, r3
 80010ca:	a309      	add	r3, pc, #36	; (adr r3, 80010f0 <ConversionFromServo+0xd8>)
 80010cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d0:	f7ff f8ea 	bl	80002a8 <__aeabi_dsub>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4907      	ldr	r1, [pc, #28]	; (80010f8 <ConversionFromServo+0xe0>)
 80010da:	e9c1 2304 	strd	r2, r3, [r1, #16]

	return theta;
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <ConversionFromServo+0xe0>)

}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	28f5c28f 	.word	0x28f5c28f
 80010ec:	3fd28f5c 	.word	0x3fd28f5c
 80010f0:	cccccccd 	.word	0xcccccccd
 80010f4:	40627ccc 	.word	0x40627ccc
 80010f8:	20000298 	.word	0x20000298

080010fc <setCoordinates>:

void setCoordinates(double x, double y, double z) {
 80010fc:	b480      	push	{r7}
 80010fe:	b087      	sub	sp, #28
 8001100:	af00      	add	r7, sp, #0
 8001102:	ed87 0b04 	vstr	d0, [r7, #16]
 8001106:	ed87 1b02 	vstr	d1, [r7, #8]
 800110a:	ed87 2b00 	vstr	d2, [r7]
    C.x = x;
 800110e:	490a      	ldr	r1, [pc, #40]	; (8001138 <setCoordinates+0x3c>)
 8001110:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001114:	e9c1 2300 	strd	r2, r3, [r1]
    C.y = y;
 8001118:	4907      	ldr	r1, [pc, #28]	; (8001138 <setCoordinates+0x3c>)
 800111a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800111e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    C.z = z;
 8001122:	4905      	ldr	r1, [pc, #20]	; (8001138 <setCoordinates+0x3c>)
 8001124:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001128:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 800112c:	bf00      	nop
 800112e:	371c      	adds	r7, #28
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	20000248 	.word	0x20000248
 800113c:	00000000 	.word	0x00000000

08001140 <delta_calcAngleYZ>:


// inverse kinematics
// helper functions, calculates angle thetaA (for YZ-pane)
int delta_calcAngleYZ(double* Angle, double x0, double y0, double z0)
{
 8001140:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001144:	b096      	sub	sp, #88	; 0x58
 8001146:	af00      	add	r7, sp, #0
 8001148:	6278      	str	r0, [r7, #36]	; 0x24
 800114a:	ed87 0b06 	vstr	d0, [r7, #24]
 800114e:	ed87 1b04 	vstr	d1, [r7, #16]
 8001152:	ed87 2b02 	vstr	d2, [r7, #8]
    double y1 = -0.5 * 0.57735 * BaseRadius;  // f/2 * tan(30 deg)
 8001156:	a1d2      	add	r1, pc, #840	; (adr r1, 80014a0 <delta_calcAngleYZ+0x360>)
 8001158:	e9d1 0100 	ldrd	r0, r1, [r1]
 800115c:	a3d2      	add	r3, pc, #840	; (adr r3, 80014a8 <delta_calcAngleYZ+0x368>)
 800115e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001162:	f7ff fa59 	bl	8000618 <__aeabi_dmul>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    y0 -= 0.5 * 0.57735 * EndEffectorRadius;  // shift center to edge
 800116e:	f04f 0000 	mov.w	r0, #0
 8001172:	49c7      	ldr	r1, [pc, #796]	; (8001490 <delta_calcAngleYZ+0x350>)
 8001174:	a3c2      	add	r3, pc, #776	; (adr r3, 8001480 <delta_calcAngleYZ+0x340>)
 8001176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117a:	f7ff fa4d 	bl	8000618 <__aeabi_dmul>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001186:	f7ff f88f 	bl	80002a8 <__aeabi_dsub>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	e9c7 2304 	strd	r2, r3, [r7, #16]

// z = a + b*y
    double aV = (x0 * x0 + y0 * y0 + z0 * z0 + BicepLength * BicepLength - ForearmLength * ForearmLength - y1 * y1) / (2.0 * z0);
 8001192:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001196:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800119a:	f7ff fa3d 	bl	8000618 <__aeabi_dmul>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4690      	mov	r8, r2
 80011a4:	4699      	mov	r9, r3
 80011a6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011ae:	f7ff fa33 	bl	8000618 <__aeabi_dmul>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	4640      	mov	r0, r8
 80011b8:	4649      	mov	r1, r9
 80011ba:	f7ff f877 	bl	80002ac <__adddf3>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4690      	mov	r8, r2
 80011c4:	4699      	mov	r9, r3
 80011c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011ce:	f7ff fa23 	bl	8000618 <__aeabi_dmul>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4640      	mov	r0, r8
 80011d8:	4649      	mov	r1, r9
 80011da:	f7ff f867 	bl	80002ac <__adddf3>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4690      	mov	r8, r2
 80011e4:	4699      	mov	r9, r3
 80011e6:	f04f 0000 	mov.w	r0, #0
 80011ea:	49aa      	ldr	r1, [pc, #680]	; (8001494 <delta_calcAngleYZ+0x354>)
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	4ba8      	ldr	r3, [pc, #672]	; (8001494 <delta_calcAngleYZ+0x354>)
 80011f2:	f7ff fa11 	bl	8000618 <__aeabi_dmul>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4640      	mov	r0, r8
 80011fc:	4649      	mov	r1, r9
 80011fe:	f7ff f855 	bl	80002ac <__adddf3>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4690      	mov	r8, r2
 8001208:	4699      	mov	r9, r3
 800120a:	f04f 0000 	mov.w	r0, #0
 800120e:	49a2      	ldr	r1, [pc, #648]	; (8001498 <delta_calcAngleYZ+0x358>)
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	4ba0      	ldr	r3, [pc, #640]	; (8001498 <delta_calcAngleYZ+0x358>)
 8001216:	f7ff f9ff 	bl	8000618 <__aeabi_dmul>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4640      	mov	r0, r8
 8001220:	4649      	mov	r1, r9
 8001222:	f7ff f841 	bl	80002a8 <__aeabi_dsub>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4690      	mov	r8, r2
 800122c:	4699      	mov	r9, r3
 800122e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001232:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001236:	f7ff f9ef 	bl	8000618 <__aeabi_dmul>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	4640      	mov	r0, r8
 8001240:	4649      	mov	r1, r9
 8001242:	f7ff f831 	bl	80002a8 <__aeabi_dsub>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4690      	mov	r8, r2
 800124c:	4699      	mov	r9, r3
 800124e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	f7ff f829 	bl	80002ac <__adddf3>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4640      	mov	r0, r8
 8001260:	4649      	mov	r1, r9
 8001262:	f7ff fb03 	bl	800086c <__aeabi_ddiv>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double bV = (y1 - y0) / z0;
 800126e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001272:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001276:	f7ff f817 	bl	80002a8 <__aeabi_dsub>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4610      	mov	r0, r2
 8001280:	4619      	mov	r1, r3
 8001282:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001286:	f7ff faf1 	bl	800086c <__aeabi_ddiv>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

    // discriminant
    double dV = -(aV + bV * y1) * (aV + bV * y1) + BicepLength * (bV * bV * BicepLength + BicepLength);
 8001292:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001296:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800129a:	f7ff f9bd 	bl	8000618 <__aeabi_dmul>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80012aa:	f7fe ffff 	bl	80002ac <__adddf3>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4614      	mov	r4, r2
 80012b4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80012b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80012bc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80012c0:	f7ff f9aa 	bl	8000618 <__aeabi_dmul>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80012d0:	f7fe ffec 	bl	80002ac <__adddf3>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4620      	mov	r0, r4
 80012da:	4629      	mov	r1, r5
 80012dc:	f7ff f99c 	bl	8000618 <__aeabi_dmul>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4614      	mov	r4, r2
 80012e6:	461d      	mov	r5, r3
 80012e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80012ec:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80012f0:	f7ff f992 	bl	8000618 <__aeabi_dmul>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4610      	mov	r0, r2
 80012fa:	4619      	mov	r1, r3
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	4b64      	ldr	r3, [pc, #400]	; (8001494 <delta_calcAngleYZ+0x354>)
 8001302:	f7ff f989 	bl	8000618 <__aeabi_dmul>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4610      	mov	r0, r2
 800130c:	4619      	mov	r1, r3
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	4b60      	ldr	r3, [pc, #384]	; (8001494 <delta_calcAngleYZ+0x354>)
 8001314:	f7fe ffca 	bl	80002ac <__adddf3>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4610      	mov	r0, r2
 800131e:	4619      	mov	r1, r3
 8001320:	f04f 0200 	mov.w	r2, #0
 8001324:	4b5b      	ldr	r3, [pc, #364]	; (8001494 <delta_calcAngleYZ+0x354>)
 8001326:	f7ff f977 	bl	8000618 <__aeabi_dmul>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4620      	mov	r0, r4
 8001330:	4629      	mov	r1, r5
 8001332:	f7fe ffbb 	bl	80002ac <__adddf3>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    if (dV < 0)
 800133e:	f04f 0200 	mov.w	r2, #0
 8001342:	f04f 0300 	mov.w	r3, #0
 8001346:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800134a:	f7ff fbd7 	bl	8000afc <__aeabi_dcmplt>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <delta_calcAngleYZ+0x21a>
    {
        return non_existing_povar_error; // non-existing povar.  return error, theta
 8001354:	f06f 0301 	mvn.w	r3, #1
 8001358:	e08d      	b.n	8001476 <delta_calcAngleYZ+0x336>
    }

    double yj = (y1 - aV * bV - sqrt(dV)) / (bV * bV + 1); // choosing outer povar
 800135a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800135e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001362:	f7ff f959 	bl	8000618 <__aeabi_dmul>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800136e:	f7fe ff9b 	bl	80002a8 <__aeabi_dsub>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4614      	mov	r4, r2
 8001378:	461d      	mov	r5, r3
 800137a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800137e:	f00c f9e1 	bl	800d744 <sqrt>
 8001382:	ec53 2b10 	vmov	r2, r3, d0
 8001386:	4620      	mov	r0, r4
 8001388:	4629      	mov	r1, r5
 800138a:	f7fe ff8d 	bl	80002a8 <__aeabi_dsub>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4614      	mov	r4, r2
 8001394:	461d      	mov	r5, r3
 8001396:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800139a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800139e:	f7ff f93b 	bl	8000618 <__aeabi_dmul>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	4610      	mov	r0, r2
 80013a8:	4619      	mov	r1, r3
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	4b3b      	ldr	r3, [pc, #236]	; (800149c <delta_calcAngleYZ+0x35c>)
 80013b0:	f7fe ff7c 	bl	80002ac <__adddf3>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	4620      	mov	r0, r4
 80013ba:	4629      	mov	r1, r5
 80013bc:	f7ff fa56 	bl	800086c <__aeabi_ddiv>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    double zj = aV + bV * yj;
 80013c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80013cc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80013d0:	f7ff f922 	bl	8000618 <__aeabi_dmul>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80013dc:	f7fe ff66 	bl	80002ac <__adddf3>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    *Angle = atan2(-zj, (y1 - yj)) * 180.0 / pi + ((yj > y1) ? 180.0 : 0.0);
 80013e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ee:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80013f8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80013fc:	f7fe ff54 	bl	80002a8 <__aeabi_dsub>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	ec43 2b17 	vmov	d7, r2, r3
 8001408:	eeb0 1a47 	vmov.f32	s2, s14
 800140c:	eef0 1a67 	vmov.f32	s3, s15
 8001410:	ed97 0b00 	vldr	d0, [r7]
 8001414:	f00c f994 	bl	800d740 <atan2>
 8001418:	ec51 0b10 	vmov	r0, r1, d0
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <delta_calcAngleYZ+0x354>)
 8001422:	f7ff f8f9 	bl	8000618 <__aeabi_dmul>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4610      	mov	r0, r2
 800142c:	4619      	mov	r1, r3
 800142e:	a316      	add	r3, pc, #88	; (adr r3, 8001488 <delta_calcAngleYZ+0x348>)
 8001430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001434:	f7ff fa1a 	bl	800086c <__aeabi_ddiv>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4614      	mov	r4, r2
 800143e:	461d      	mov	r5, r3
 8001440:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001444:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001448:	f7ff fb76 	bl	8000b38 <__aeabi_dcmpgt>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <delta_calcAngleYZ+0x31a>
 8001452:	f04f 0000 	mov.w	r0, #0
 8001456:	490f      	ldr	r1, [pc, #60]	; (8001494 <delta_calcAngleYZ+0x354>)
 8001458:	e003      	b.n	8001462 <delta_calcAngleYZ+0x322>
 800145a:	f04f 0000 	mov.w	r0, #0
 800145e:	f04f 0100 	mov.w	r1, #0
 8001462:	4622      	mov	r2, r4
 8001464:	462b      	mov	r3, r5
 8001466:	f7fe ff21 	bl	80002ac <__adddf3>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001470:	e9c1 2300 	strd	r2, r3, [r1]

    return no_error;  // return error, theta
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3758      	adds	r7, #88	; 0x58
 800147a:	46bd      	mov	sp, r7
 800147c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001480:	b50b0f28 	.word	0xb50b0f28
 8001484:	3fd279a6 	.word	0x3fd279a6
 8001488:	54442d18 	.word	0x54442d18
 800148c:	400921fb 	.word	0x400921fb
 8001490:	403e0000 	.word	0x403e0000
 8001494:	40668000 	.word	0x40668000
 8001498:	40740000 	.word	0x40740000
 800149c:	3ff00000 	.word	0x3ff00000
 80014a0:	00000000 	.word	0x00000000
 80014a4:	4050c000 	.word	0x4050c000
 80014a8:	b50b0f28 	.word	0xb50b0f28
 80014ac:	bfd279a6 	.word	0xbfd279a6

080014b0 <inverse>:


// inverse kinematics: (x0, y0, z0) -> (thetaA, thetaB, thetaC)

int inverse()
{
 80014b0:	b5b0      	push	{r4, r5, r7, lr}
 80014b2:	ed2d 8b02 	vpush	{d8}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
    ThetaA = 0;
 80014ba:	4985      	ldr	r1, [pc, #532]	; (80016d0 <inverse+0x220>)
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	f04f 0300 	mov.w	r3, #0
 80014c4:	e9c1 2300 	strd	r2, r3, [r1]
    ThetaB = 0;
 80014c8:	4982      	ldr	r1, [pc, #520]	; (80016d4 <inverse+0x224>)
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	f04f 0300 	mov.w	r3, #0
 80014d2:	e9c1 2300 	strd	r2, r3, [r1]
    ThetaC = 0;
 80014d6:	4980      	ldr	r1, [pc, #512]	; (80016d8 <inverse+0x228>)
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	f04f 0300 	mov.w	r3, #0
 80014e0:	e9c1 2300 	strd	r2, r3, [r1]

    int error = delta_calcAngleYZ(&ThetaA, C.x, C.y, C.z);
 80014e4:	4b7d      	ldr	r3, [pc, #500]	; (80016dc <inverse+0x22c>)
 80014e6:	ed93 7b00 	vldr	d7, [r3]
 80014ea:	4b7c      	ldr	r3, [pc, #496]	; (80016dc <inverse+0x22c>)
 80014ec:	ed93 6b02 	vldr	d6, [r3, #8]
 80014f0:	4b7a      	ldr	r3, [pc, #488]	; (80016dc <inverse+0x22c>)
 80014f2:	ed93 5b04 	vldr	d5, [r3, #16]
 80014f6:	eeb0 2a45 	vmov.f32	s4, s10
 80014fa:	eef0 2a65 	vmov.f32	s5, s11
 80014fe:	eeb0 1a46 	vmov.f32	s2, s12
 8001502:	eef0 1a66 	vmov.f32	s3, s13
 8001506:	eeb0 0a47 	vmov.f32	s0, s14
 800150a:	eef0 0a67 	vmov.f32	s1, s15
 800150e:	4870      	ldr	r0, [pc, #448]	; (80016d0 <inverse+0x220>)
 8001510:	f7ff fe16 	bl	8001140 <delta_calcAngleYZ>
 8001514:	6078      	str	r0, [r7, #4]
    if (error != no_error)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <inverse+0x70>
        return no_error;
 800151c:	2300      	movs	r3, #0
 800151e:	e0cb      	b.n	80016b8 <inverse+0x208>
    error = delta_calcAngleYZ(&ThetaB, C.x * cos120 + C.y * sin120, C.y * cos120 - C.x * sin120, C.z);
 8001520:	4b6e      	ldr	r3, [pc, #440]	; (80016dc <inverse+0x22c>)
 8001522:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	4b6d      	ldr	r3, [pc, #436]	; (80016e0 <inverse+0x230>)
 800152c:	f7ff f874 	bl	8000618 <__aeabi_dmul>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4614      	mov	r4, r2
 8001536:	461d      	mov	r5, r3
 8001538:	4b68      	ldr	r3, [pc, #416]	; (80016dc <inverse+0x22c>)
 800153a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800153e:	a362      	add	r3, pc, #392	; (adr r3, 80016c8 <inverse+0x218>)
 8001540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001544:	f7ff f868 	bl	8000618 <__aeabi_dmul>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4610      	mov	r0, r2
 800154e:	4619      	mov	r1, r3
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001558:	f7ff f988 	bl	800086c <__aeabi_ddiv>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4620      	mov	r0, r4
 8001562:	4629      	mov	r1, r5
 8001564:	f7fe fea2 	bl	80002ac <__adddf3>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	ec43 2b18 	vmov	d8, r2, r3
 8001570:	4b5a      	ldr	r3, [pc, #360]	; (80016dc <inverse+0x22c>)
 8001572:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	4b59      	ldr	r3, [pc, #356]	; (80016e0 <inverse+0x230>)
 800157c:	f7ff f84c 	bl	8000618 <__aeabi_dmul>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4614      	mov	r4, r2
 8001586:	461d      	mov	r5, r3
 8001588:	4b54      	ldr	r3, [pc, #336]	; (80016dc <inverse+0x22c>)
 800158a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800158e:	a34e      	add	r3, pc, #312	; (adr r3, 80016c8 <inverse+0x218>)
 8001590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001594:	f7ff f840 	bl	8000618 <__aeabi_dmul>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4610      	mov	r0, r2
 800159e:	4619      	mov	r1, r3
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015a8:	f7ff f960 	bl	800086c <__aeabi_ddiv>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4620      	mov	r0, r4
 80015b2:	4629      	mov	r1, r5
 80015b4:	f7fe fe78 	bl	80002a8 <__aeabi_dsub>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	ec43 2b16 	vmov	d6, r2, r3
 80015c0:	4b46      	ldr	r3, [pc, #280]	; (80016dc <inverse+0x22c>)
 80015c2:	ed93 7b04 	vldr	d7, [r3, #16]
 80015c6:	eeb0 2a47 	vmov.f32	s4, s14
 80015ca:	eef0 2a67 	vmov.f32	s5, s15
 80015ce:	eeb0 1a46 	vmov.f32	s2, s12
 80015d2:	eef0 1a66 	vmov.f32	s3, s13
 80015d6:	eeb0 0a48 	vmov.f32	s0, s16
 80015da:	eef0 0a68 	vmov.f32	s1, s17
 80015de:	483d      	ldr	r0, [pc, #244]	; (80016d4 <inverse+0x224>)
 80015e0:	f7ff fdae 	bl	8001140 <delta_calcAngleYZ>
 80015e4:	6078      	str	r0, [r7, #4]
    if (error != no_error)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <inverse+0x140>
        return no_error;
 80015ec:	2300      	movs	r3, #0
 80015ee:	e063      	b.n	80016b8 <inverse+0x208>
    error = delta_calcAngleYZ(&ThetaC, C.x * cos120 - C.y * sin120, C.y * cos120 + C.x * sin120, C.z);
 80015f0:	4b3a      	ldr	r3, [pc, #232]	; (80016dc <inverse+0x22c>)
 80015f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	4b39      	ldr	r3, [pc, #228]	; (80016e0 <inverse+0x230>)
 80015fc:	f7ff f80c 	bl	8000618 <__aeabi_dmul>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4614      	mov	r4, r2
 8001606:	461d      	mov	r5, r3
 8001608:	4b34      	ldr	r3, [pc, #208]	; (80016dc <inverse+0x22c>)
 800160a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800160e:	a32e      	add	r3, pc, #184	; (adr r3, 80016c8 <inverse+0x218>)
 8001610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001614:	f7ff f800 	bl	8000618 <__aeabi_dmul>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4610      	mov	r0, r2
 800161e:	4619      	mov	r1, r3
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001628:	f7ff f920 	bl	800086c <__aeabi_ddiv>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4620      	mov	r0, r4
 8001632:	4629      	mov	r1, r5
 8001634:	f7fe fe38 	bl	80002a8 <__aeabi_dsub>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	ec43 2b18 	vmov	d8, r2, r3
 8001640:	4b26      	ldr	r3, [pc, #152]	; (80016dc <inverse+0x22c>)
 8001642:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	4b25      	ldr	r3, [pc, #148]	; (80016e0 <inverse+0x230>)
 800164c:	f7fe ffe4 	bl	8000618 <__aeabi_dmul>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4614      	mov	r4, r2
 8001656:	461d      	mov	r5, r3
 8001658:	4b20      	ldr	r3, [pc, #128]	; (80016dc <inverse+0x22c>)
 800165a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800165e:	a31a      	add	r3, pc, #104	; (adr r3, 80016c8 <inverse+0x218>)
 8001660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001664:	f7fe ffd8 	bl	8000618 <__aeabi_dmul>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4610      	mov	r0, r2
 800166e:	4619      	mov	r1, r3
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001678:	f7ff f8f8 	bl	800086c <__aeabi_ddiv>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4620      	mov	r0, r4
 8001682:	4629      	mov	r1, r5
 8001684:	f7fe fe12 	bl	80002ac <__adddf3>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	ec43 2b16 	vmov	d6, r2, r3
 8001690:	4b12      	ldr	r3, [pc, #72]	; (80016dc <inverse+0x22c>)
 8001692:	ed93 7b04 	vldr	d7, [r3, #16]
 8001696:	eeb0 2a47 	vmov.f32	s4, s14
 800169a:	eef0 2a67 	vmov.f32	s5, s15
 800169e:	eeb0 1a46 	vmov.f32	s2, s12
 80016a2:	eef0 1a66 	vmov.f32	s3, s13
 80016a6:	eeb0 0a48 	vmov.f32	s0, s16
 80016aa:	eef0 0a68 	vmov.f32	s1, s17
 80016ae:	480a      	ldr	r0, [pc, #40]	; (80016d8 <inverse+0x228>)
 80016b0:	f7ff fd46 	bl	8001140 <delta_calcAngleYZ>
 80016b4:	6078      	str	r0, [r7, #4]

    return no_error;
 80016b6:	2300      	movs	r3, #0


}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	ecbd 8b02 	vpop	{d8}
 80016c2:	bdb0      	pop	{r4, r5, r7, pc}
 80016c4:	f3af 8000 	nop.w
 80016c8:	e8584caa 	.word	0xe8584caa
 80016cc:	3ffbb67a 	.word	0x3ffbb67a
 80016d0:	20000260 	.word	0x20000260
 80016d4:	20000268 	.word	0x20000268
 80016d8:	20000270 	.word	0x20000270
 80016dc:	20000248 	.word	0x20000248
 80016e0:	bfe00000 	.word	0xbfe00000
 80016e4:	00000000 	.word	0x00000000

080016e8 <forward>:

//forward kinematics: (thetaA, thetaB, thetaC) -> (x0, y0, z0)
int forward(double theta1, double theta2, double theta3)
{
 80016e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016ec:	b0b8      	sub	sp, #224	; 0xe0
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 80016f4:	ed87 1b08 	vstr	d1, [r7, #32]
 80016f8:	ed87 2b06 	vstr	d2, [r7, #24]

	  coord[0]=0.0;
 80016fc:	49c4      	ldr	r1, [pc, #784]	; (8001a10 <forward+0x328>)
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	f04f 0300 	mov.w	r3, #0
 8001706:	e9c1 2300 	strd	r2, r3, [r1]
	  coord[1]=0.0;
 800170a:	49c1      	ldr	r1, [pc, #772]	; (8001a10 <forward+0x328>)
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	f04f 0300 	mov.w	r3, #0
 8001714:	e9c1 2302 	strd	r2, r3, [r1, #8]
	  coord[2]=0.0;
 8001718:	49bd      	ldr	r1, [pc, #756]	; (8001a10 <forward+0x328>)
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	f04f 0300 	mov.w	r3, #0
 8001722:	e9c1 2304 	strd	r2, r3, [r1, #16]

	  double t = (BaseRadius-EndEffectorRadius)*tan30/2.0;
 8001726:	a1b4      	add	r1, pc, #720	; (adr r1, 80019f8 <forward+0x310>)
 8001728:	e9d1 0100 	ldrd	r0, r1, [r1]
 800172c:	f04f 0200 	mov.w	r2, #0
 8001730:	4bb8      	ldr	r3, [pc, #736]	; (8001a14 <forward+0x32c>)
 8001732:	f7fe fdb9 	bl	80002a8 <__aeabi_dsub>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4610      	mov	r0, r2
 800173c:	4619      	mov	r1, r3
 800173e:	a3b0      	add	r3, pc, #704	; (adr r3, 8001a00 <forward+0x318>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	f7ff f892 	bl	800086c <__aeabi_ddiv>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4610      	mov	r0, r2
 800174e:	4619      	mov	r1, r3
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001758:	f7ff f888 	bl	800086c <__aeabi_ddiv>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	  double dtr = pi/180.0;
 8001764:	a3a8      	add	r3, pc, #672	; (adr r3, 8001a08 <forward+0x320>)
 8001766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176a:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

	  theta1 *= dtr;
 800176e:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8001772:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001776:	f7fe ff4f 	bl	8000618 <__aeabi_dmul>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	  theta2 *= dtr;
 8001782:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8001786:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800178a:	f7fe ff45 	bl	8000618 <__aeabi_dmul>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	e9c7 2308 	strd	r2, r3, [r7, #32]
	  theta3 *= dtr;
 8001796:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800179a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800179e:	f7fe ff3b 	bl	8000618 <__aeabi_dmul>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	e9c7 2306 	strd	r2, r3, [r7, #24]

	  double y1 = -(t + BicepLength*cos(theta1));
 80017aa:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 80017ae:	f00b ff1b 	bl	800d5e8 <cos>
 80017b2:	ec51 0b10 	vmov	r0, r1, d0
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	4b97      	ldr	r3, [pc, #604]	; (8001a18 <forward+0x330>)
 80017bc:	f7fe ff2c 	bl	8000618 <__aeabi_dmul>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4610      	mov	r0, r2
 80017c6:	4619      	mov	r1, r3
 80017c8:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80017cc:	f7fe fd6e 	bl	80002ac <__adddf3>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4611      	mov	r1, r2
 80017d6:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80017da:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80017de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	  double z1 = -BicepLength*sin(theta1);
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	4b8c      	ldr	r3, [pc, #560]	; (8001a18 <forward+0x330>)
 80017e8:	4690      	mov	r8, r2
 80017ea:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80017ee:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 80017f2:	f00b ff4d 	bl	800d690 <sin>
 80017f6:	ec53 2b10 	vmov	r2, r3, d0
 80017fa:	4640      	mov	r0, r8
 80017fc:	4649      	mov	r1, r9
 80017fe:	f7fe ff0b 	bl	8000618 <__aeabi_dmul>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0

	  double y2 = (t + BicepLength*cos(theta2))*sin30;
 800180a:	ed97 0b08 	vldr	d0, [r7, #32]
 800180e:	f00b feeb 	bl	800d5e8 <cos>
 8001812:	ec51 0b10 	vmov	r0, r1, d0
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	4b7f      	ldr	r3, [pc, #508]	; (8001a18 <forward+0x330>)
 800181c:	f7fe fefc 	bl	8000618 <__aeabi_dmul>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800182c:	f7fe fd3e 	bl	80002ac <__adddf3>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	f04f 0200 	mov.w	r2, #0
 800183c:	4b77      	ldr	r3, [pc, #476]	; (8001a1c <forward+0x334>)
 800183e:	f7fe feeb 	bl	8000618 <__aeabi_dmul>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	  double x2 = y2*tan60;
 800184a:	a36d      	add	r3, pc, #436	; (adr r3, 8001a00 <forward+0x318>)
 800184c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001850:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001854:	f7fe fee0 	bl	8000618 <__aeabi_dmul>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	  double z2 = -BicepLength*sin(theta2);
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	4b6c      	ldr	r3, [pc, #432]	; (8001a18 <forward+0x330>)
 8001866:	4692      	mov	sl, r2
 8001868:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800186c:	ed97 0b08 	vldr	d0, [r7, #32]
 8001870:	f00b ff0e 	bl	800d690 <sin>
 8001874:	ec53 2b10 	vmov	r2, r3, d0
 8001878:	4650      	mov	r0, sl
 800187a:	4659      	mov	r1, fp
 800187c:	f7fe fecc 	bl	8000618 <__aeabi_dmul>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8

	  double y3 = (t + BicepLength*cos(theta3))*sin30;
 8001888:	ed97 0b06 	vldr	d0, [r7, #24]
 800188c:	f00b feac 	bl	800d5e8 <cos>
 8001890:	ec51 0b10 	vmov	r0, r1, d0
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	4b5f      	ldr	r3, [pc, #380]	; (8001a18 <forward+0x330>)
 800189a:	f7fe febd 	bl	8000618 <__aeabi_dmul>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4610      	mov	r0, r2
 80018a4:	4619      	mov	r1, r3
 80018a6:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80018aa:	f7fe fcff 	bl	80002ac <__adddf3>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4610      	mov	r0, r2
 80018b4:	4619      	mov	r1, r3
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	4b58      	ldr	r3, [pc, #352]	; (8001a1c <forward+0x334>)
 80018bc:	f7fe feac 	bl	8000618 <__aeabi_dmul>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	  double x3 = -y3*tan60;
 80018c8:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80018cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80018d0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80018d4:	a34a      	add	r3, pc, #296	; (adr r3, 8001a00 <forward+0x318>)
 80018d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018da:	4620      	mov	r0, r4
 80018dc:	4629      	mov	r1, r5
 80018de:	f7fe fe9b 	bl	8000618 <__aeabi_dmul>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	  double z3 = -BicepLength*sin(theta3);
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	4b4a      	ldr	r3, [pc, #296]	; (8001a18 <forward+0x330>)
 80018f0:	613a      	str	r2, [r7, #16]
 80018f2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	ed97 0b06 	vldr	d0, [r7, #24]
 80018fc:	f00b fec8 	bl	800d690 <sin>
 8001900:	ec53 2b10 	vmov	r2, r3, d0
 8001904:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001908:	f7fe fe86 	bl	8000618 <__aeabi_dmul>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

	  double dnm = (y2-y1)*x3-(y3-y1)*x2;
 8001914:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8001918:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800191c:	f7fe fcc4 	bl	80002a8 <__aeabi_dsub>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4610      	mov	r0, r2
 8001926:	4619      	mov	r1, r3
 8001928:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800192c:	f7fe fe74 	bl	8000618 <__aeabi_dmul>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4614      	mov	r4, r2
 8001936:	461d      	mov	r5, r3
 8001938:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800193c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001940:	f7fe fcb2 	bl	80002a8 <__aeabi_dsub>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8001950:	f7fe fe62 	bl	8000618 <__aeabi_dmul>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4620      	mov	r0, r4
 800195a:	4629      	mov	r1, r5
 800195c:	f7fe fca4 	bl	80002a8 <__aeabi_dsub>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88

	  double w1 = y1*y1 + z1*z1;
 8001968:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800196c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001970:	f7fe fe52 	bl	8000618 <__aeabi_dmul>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4614      	mov	r4, r2
 800197a:	461d      	mov	r5, r3
 800197c:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001980:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8001984:	f7fe fe48 	bl	8000618 <__aeabi_dmul>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4620      	mov	r0, r4
 800198e:	4629      	mov	r1, r5
 8001990:	f7fe fc8c 	bl	80002ac <__adddf3>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	  double w2 = x2*x2 + y2*y2 + z2*z2;
 800199c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80019a0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80019a4:	f7fe fe38 	bl	8000618 <__aeabi_dmul>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4614      	mov	r4, r2
 80019ae:	461d      	mov	r5, r3
 80019b0:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80019b4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80019b8:	f7fe fe2e 	bl	8000618 <__aeabi_dmul>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4620      	mov	r0, r4
 80019c2:	4629      	mov	r1, r5
 80019c4:	f7fe fc72 	bl	80002ac <__adddf3>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4614      	mov	r4, r2
 80019ce:	461d      	mov	r5, r3
 80019d0:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80019d4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80019d8:	f7fe fe1e 	bl	8000618 <__aeabi_dmul>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4620      	mov	r0, r4
 80019e2:	4629      	mov	r1, r5
 80019e4:	f7fe fc62 	bl	80002ac <__adddf3>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	  double w3 = x3*x3 + y3*y3 + z3*z3;
 80019f0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80019f4:	e014      	b.n	8001a20 <forward+0x338>
 80019f6:	bf00      	nop
 80019f8:	00000000 	.word	0x00000000
 80019fc:	4050c000 	.word	0x4050c000
 8001a00:	e8584caa 	.word	0xe8584caa
 8001a04:	3ffbb67a 	.word	0x3ffbb67a
 8001a08:	a2529d39 	.word	0xa2529d39
 8001a0c:	3f91df46 	.word	0x3f91df46
 8001a10:	20000280 	.word	0x20000280
 8001a14:	403e0000 	.word	0x403e0000
 8001a18:	40668000 	.word	0x40668000
 8001a1c:	3fe00000 	.word	0x3fe00000
 8001a20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001a24:	f7fe fdf8 	bl	8000618 <__aeabi_dmul>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4614      	mov	r4, r2
 8001a2e:	461d      	mov	r5, r3
 8001a30:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001a34:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001a38:	f7fe fdee 	bl	8000618 <__aeabi_dmul>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4620      	mov	r0, r4
 8001a42:	4629      	mov	r1, r5
 8001a44:	f7fe fc32 	bl	80002ac <__adddf3>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4614      	mov	r4, r2
 8001a4e:	461d      	mov	r5, r3
 8001a50:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001a54:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001a58:	f7fe fdde 	bl	8000618 <__aeabi_dmul>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4620      	mov	r0, r4
 8001a62:	4629      	mov	r1, r5
 8001a64:	f7fe fc22 	bl	80002ac <__adddf3>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

	  // x = (a1*z + b1)/dnm
	  double a1 = (z2-z1)*(y3-y1)-(z3-z1)*(y2-y1);
 8001a70:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001a74:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001a78:	f7fe fc16 	bl	80002a8 <__aeabi_dsub>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4614      	mov	r4, r2
 8001a82:	461d      	mov	r5, r3
 8001a84:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8001a88:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001a8c:	f7fe fc0c 	bl	80002a8 <__aeabi_dsub>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4620      	mov	r0, r4
 8001a96:	4629      	mov	r1, r5
 8001a98:	f7fe fdbe 	bl	8000618 <__aeabi_dmul>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4614      	mov	r4, r2
 8001aa2:	461d      	mov	r5, r3
 8001aa4:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001aa8:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001aac:	f7fe fbfc 	bl	80002a8 <__aeabi_dsub>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4690      	mov	r8, r2
 8001ab6:	4699      	mov	r9, r3
 8001ab8:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8001abc:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001ac0:	f7fe fbf2 	bl	80002a8 <__aeabi_dsub>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4640      	mov	r0, r8
 8001aca:	4649      	mov	r1, r9
 8001acc:	f7fe fda4 	bl	8000618 <__aeabi_dmul>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	4629      	mov	r1, r5
 8001ad8:	f7fe fbe6 	bl	80002a8 <__aeabi_dsub>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	  double b1 = -((w2-w1)*(y3-y1)-(w3-w1)*(y2-y1))/2.0;
 8001ae4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001ae8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001aec:	f7fe fbdc 	bl	80002a8 <__aeabi_dsub>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4614      	mov	r4, r2
 8001af6:	461d      	mov	r5, r3
 8001af8:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8001afc:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001b00:	f7fe fbd2 	bl	80002a8 <__aeabi_dsub>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4620      	mov	r0, r4
 8001b0a:	4629      	mov	r1, r5
 8001b0c:	f7fe fd84 	bl	8000618 <__aeabi_dmul>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4614      	mov	r4, r2
 8001b16:	461d      	mov	r5, r3
 8001b18:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001b1c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001b20:	f7fe fbc2 	bl	80002a8 <__aeabi_dsub>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4690      	mov	r8, r2
 8001b2a:	4699      	mov	r9, r3
 8001b2c:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8001b30:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001b34:	f7fe fbb8 	bl	80002a8 <__aeabi_dsub>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4640      	mov	r0, r8
 8001b3e:	4649      	mov	r1, r9
 8001b40:	f7fe fd6a 	bl	8000618 <__aeabi_dmul>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4620      	mov	r0, r4
 8001b4a:	4629      	mov	r1, r5
 8001b4c:	f7fe fbac 	bl	80002a8 <__aeabi_dsub>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	60ba      	str	r2, [r7, #8]
 8001b56:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b64:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b68:	f7fe fe80 	bl	800086c <__aeabi_ddiv>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	  // y = (a2*z + b2)/dnm;
	  double a2 = -(z2-z1)*x3+(z3-z1)*x2;
 8001b74:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001b78:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001b7c:	f7fe fb94 	bl	80002a8 <__aeabi_dsub>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	603a      	str	r2, [r7, #0]
 8001b86:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8001b90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b94:	f7fe fd40 	bl	8000618 <__aeabi_dmul>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4614      	mov	r4, r2
 8001b9e:	461d      	mov	r5, r3
 8001ba0:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001ba4:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001ba8:	f7fe fb7e 	bl	80002a8 <__aeabi_dsub>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8001bb8:	f7fe fd2e 	bl	8000618 <__aeabi_dmul>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4620      	mov	r0, r4
 8001bc2:	4629      	mov	r1, r5
 8001bc4:	f7fe fb72 	bl	80002ac <__adddf3>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	  double b2 = ((w2-w1)*x3 - (w3-w1)*x2)/2.0;
 8001bd0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001bd4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001bd8:	f7fe fb66 	bl	80002a8 <__aeabi_dsub>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4610      	mov	r0, r2
 8001be2:	4619      	mov	r1, r3
 8001be4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8001be8:	f7fe fd16 	bl	8000618 <__aeabi_dmul>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4614      	mov	r4, r2
 8001bf2:	461d      	mov	r5, r3
 8001bf4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001bf8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001bfc:	f7fe fb54 	bl	80002a8 <__aeabi_dsub>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4610      	mov	r0, r2
 8001c06:	4619      	mov	r1, r3
 8001c08:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8001c0c:	f7fe fd04 	bl	8000618 <__aeabi_dmul>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4620      	mov	r0, r4
 8001c16:	4629      	mov	r1, r5
 8001c18:	f7fe fb46 	bl	80002a8 <__aeabi_dsub>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4610      	mov	r0, r2
 8001c22:	4619      	mov	r1, r3
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c2c:	f7fe fe1e 	bl	800086c <__aeabi_ddiv>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	  // a*z^2 + b*z + c = 0
	  double a = a1*a1 + a2*a2 + dnm*dnm;
 8001c38:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001c3c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001c40:	f7fe fcea 	bl	8000618 <__aeabi_dmul>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4614      	mov	r4, r2
 8001c4a:	461d      	mov	r5, r3
 8001c4c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c50:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001c54:	f7fe fce0 	bl	8000618 <__aeabi_dmul>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	4629      	mov	r1, r5
 8001c60:	f7fe fb24 	bl	80002ac <__adddf3>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4614      	mov	r4, r2
 8001c6a:	461d      	mov	r5, r3
 8001c6c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001c70:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8001c74:	f7fe fcd0 	bl	8000618 <__aeabi_dmul>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4620      	mov	r0, r4
 8001c7e:	4629      	mov	r1, r5
 8001c80:	f7fe fb14 	bl	80002ac <__adddf3>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	  double b = 2.0*(a1*b1 + a2*(b2-y1*dnm) - z1*dnm*dnm);
 8001c8c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001c90:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001c94:	f7fe fcc0 	bl	8000618 <__aeabi_dmul>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4614      	mov	r4, r2
 8001c9e:	461d      	mov	r5, r3
 8001ca0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001ca4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001ca8:	f7fe fcb6 	bl	8000618 <__aeabi_dmul>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001cb4:	f7fe faf8 	bl	80002a8 <__aeabi_dsub>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001cc4:	f7fe fca8 	bl	8000618 <__aeabi_dmul>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4620      	mov	r0, r4
 8001cce:	4629      	mov	r1, r5
 8001cd0:	f7fe faec 	bl	80002ac <__adddf3>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4614      	mov	r4, r2
 8001cda:	461d      	mov	r5, r3
 8001cdc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001ce0:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8001ce4:	f7fe fc98 	bl	8000618 <__aeabi_dmul>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4610      	mov	r0, r2
 8001cee:	4619      	mov	r1, r3
 8001cf0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001cf4:	f7fe fc90 	bl	8000618 <__aeabi_dmul>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4620      	mov	r0, r4
 8001cfe:	4629      	mov	r1, r5
 8001d00:	f7fe fad2 	bl	80002a8 <__aeabi_dsub>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	4610      	mov	r0, r2
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	f7fe facc 	bl	80002ac <__adddf3>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	  double c = (b2-y1*dnm)*(b2-y1*dnm) + b1*b1 + dnm*dnm*(z1*z1 - ForearmLength*ForearmLength);
 8001d1c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001d20:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001d24:	f7fe fc78 	bl	8000618 <__aeabi_dmul>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001d30:	f7fe faba 	bl	80002a8 <__aeabi_dsub>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4614      	mov	r4, r2
 8001d3a:	461d      	mov	r5, r3
 8001d3c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001d40:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001d44:	f7fe fc68 	bl	8000618 <__aeabi_dmul>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001d50:	f7fe faaa 	bl	80002a8 <__aeabi_dsub>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4620      	mov	r0, r4
 8001d5a:	4629      	mov	r1, r5
 8001d5c:	f7fe fc5c 	bl	8000618 <__aeabi_dmul>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4614      	mov	r4, r2
 8001d66:	461d      	mov	r5, r3
 8001d68:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001d6c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001d70:	f7fe fc52 	bl	8000618 <__aeabi_dmul>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4620      	mov	r0, r4
 8001d7a:	4629      	mov	r1, r5
 8001d7c:	f7fe fa96 	bl	80002ac <__adddf3>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4614      	mov	r4, r2
 8001d86:	461d      	mov	r5, r3
 8001d88:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001d8c:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8001d90:	f7fe fc42 	bl	8000618 <__aeabi_dmul>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4690      	mov	r8, r2
 8001d9a:	4699      	mov	r9, r3
 8001d9c:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001da0:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8001da4:	f7fe fc38 	bl	8000618 <__aeabi_dmul>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4692      	mov	sl, r2
 8001dae:	469b      	mov	fp, r3
 8001db0:	f04f 0000 	mov.w	r0, #0
 8001db4:	4955      	ldr	r1, [pc, #340]	; (8001f0c <forward+0x824>)
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	4b54      	ldr	r3, [pc, #336]	; (8001f0c <forward+0x824>)
 8001dbc:	f7fe fc2c 	bl	8000618 <__aeabi_dmul>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4650      	mov	r0, sl
 8001dc6:	4659      	mov	r1, fp
 8001dc8:	f7fe fa6e 	bl	80002a8 <__aeabi_dsub>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4640      	mov	r0, r8
 8001dd2:	4649      	mov	r1, r9
 8001dd4:	f7fe fc20 	bl	8000618 <__aeabi_dmul>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4620      	mov	r0, r4
 8001dde:	4629      	mov	r1, r5
 8001de0:	f7fe fa64 	bl	80002ac <__adddf3>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	  // discriminant
	  double d = b*b - 4.0*a*c;
 8001dec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001df0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001df4:	f7fe fc10 	bl	8000618 <__aeabi_dmul>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4614      	mov	r4, r2
 8001dfe:	461d      	mov	r5, r3
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	4b42      	ldr	r3, [pc, #264]	; (8001f10 <forward+0x828>)
 8001e06:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001e0a:	f7fe fc05 	bl	8000618 <__aeabi_dmul>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4610      	mov	r0, r2
 8001e14:	4619      	mov	r1, r3
 8001e16:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001e1a:	f7fe fbfd 	bl	8000618 <__aeabi_dmul>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	4620      	mov	r0, r4
 8001e24:	4629      	mov	r1, r5
 8001e26:	f7fe fa3f 	bl	80002a8 <__aeabi_dsub>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	  if (d < 0.0) return non_existing_povar_error; // non-existing povar. return error,x,y,z
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	f04f 0300 	mov.w	r3, #0
 8001e3a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001e3e:	f7fe fe5d 	bl	8000afc <__aeabi_dcmplt>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d002      	beq.n	8001e4e <forward+0x766>
 8001e48:	f06f 0301 	mvn.w	r3, #1
 8001e4c:	e058      	b.n	8001f00 <forward+0x818>



	  coord[2] = -0.5*(b+sqrt(d))/a;
 8001e4e:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8001e52:	f00b fc77 	bl	800d744 <sqrt>
 8001e56:	ec51 0b10 	vmov	r0, r1, d0
 8001e5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001e5e:	f7fe fa25 	bl	80002ac <__adddf3>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4610      	mov	r0, r2
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	4b29      	ldr	r3, [pc, #164]	; (8001f14 <forward+0x82c>)
 8001e70:	f7fe fbd2 	bl	8000618 <__aeabi_dmul>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4610      	mov	r0, r2
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001e80:	f7fe fcf4 	bl	800086c <__aeabi_ddiv>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4923      	ldr	r1, [pc, #140]	; (8001f18 <forward+0x830>)
 8001e8a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	  coord[0] = (a1*coord[2] + b1)/dnm;
 8001e8e:	4b22      	ldr	r3, [pc, #136]	; (8001f18 <forward+0x830>)
 8001e90:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001e94:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001e98:	f7fe fbbe 	bl	8000618 <__aeabi_dmul>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001ea8:	f7fe fa00 	bl	80002ac <__adddf3>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001eb8:	f7fe fcd8 	bl	800086c <__aeabi_ddiv>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	4915      	ldr	r1, [pc, #84]	; (8001f18 <forward+0x830>)
 8001ec2:	e9c1 2300 	strd	r2, r3, [r1]
	  coord[1] = (a2*coord[2] + b2)/dnm;
 8001ec6:	4b14      	ldr	r3, [pc, #80]	; (8001f18 <forward+0x830>)
 8001ec8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001ecc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001ed0:	f7fe fba2 	bl	8000618 <__aeabi_dmul>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001ee0:	f7fe f9e4 	bl	80002ac <__adddf3>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4610      	mov	r0, r2
 8001eea:	4619      	mov	r1, r3
 8001eec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001ef0:	f7fe fcbc 	bl	800086c <__aeabi_ddiv>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4907      	ldr	r1, [pc, #28]	; (8001f18 <forward+0x830>)
 8001efa:	e9c1 2302 	strd	r2, r3, [r1, #8]

	  return no_error;
 8001efe:	2300      	movs	r3, #0
//    C.x = -0.5 * (bV + sqrt(dV)) / aV;
//    C.y = (a1 * C.z + b1) / dnm;
//
//
//    return no_error;
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	37e0      	adds	r7, #224	; 0xe0
 8001f04:	46bd      	mov	sp, r7
 8001f06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40740000 	.word	0x40740000
 8001f10:	40100000 	.word	0x40100000
 8001f14:	bfe00000 	.word	0xbfe00000
 8001f18:	20000280 	.word	0x20000280

08001f1c <_write>:

extern osMessageQId setQueueHandle;

extern uint16_t GP[3];

int _write(int file, char* p, int len){
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)p, len, 10);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	230a      	movs	r3, #10
 8001f2e:	68b9      	ldr	r1, [r7, #8]
 8001f30:	4803      	ldr	r0, [pc, #12]	; (8001f40 <_write+0x24>)
 8001f32:	f004 f9b4 	bl	800629e <HAL_UART_Transmit>
	return len;
 8001f36:	687b      	ldr	r3, [r7, #4]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	2000068c 	.word	0x2000068c

08001f44 <cmd_torque>:
};



int cmd_torque(int len, char* cmd, queueMessage* smsg)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]

	if(len == 1) {
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d10f      	bne.n	8001f76 <cmd_torque+0x32>
		if (*cmd=='1') {
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b31      	cmp	r3, #49	; 0x31
 8001f5c:	d103      	bne.n	8001f66 <cmd_torque+0x22>
			syncWriteTorqueOnOff(ON);
 8001f5e:	2001      	movs	r0, #1
 8001f60:	f000 fd27 	bl	80029b2 <syncWriteTorqueOnOff>
 8001f64:	e00a      	b.n	8001f7c <cmd_torque+0x38>
		}
		else if (*cmd=='0') {
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b30      	cmp	r3, #48	; 0x30
 8001f6c:	d106      	bne.n	8001f7c <cmd_torque+0x38>
			syncWriteTorqueOnOff(OFF);
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f000 fd1f 	bl	80029b2 <syncWriteTorqueOnOff>
 8001f74:	e002      	b.n	8001f7c <cmd_torque+0x38>
		}
	}else {
		printf("wrong command pattern!");
 8001f76:	4804      	ldr	r0, [pc, #16]	; (8001f88 <cmd_torque+0x44>)
 8001f78:	f009 f960 	bl	800b23c <iprintf>
	}

	return 0;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	0800ede8 	.word	0x0800ede8

08001f8c <cmd_pump>:

int cmd_pump(int len, char* cmd, queueMessage* smsg)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
	if(len == 1) {
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d10d      	bne.n	8001fba <cmd_pump+0x2e>
		if (*cmd=='1') {
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b31      	cmp	r3, #49	; 0x31
 8001fa4:	d102      	bne.n	8001fac <cmd_pump+0x20>
			pumpOn();
 8001fa6:	f000 f9c3 	bl	8002330 <pumpOn>
 8001faa:	e009      	b.n	8001fc0 <cmd_pump+0x34>
		}
		else if (*cmd=='0') {
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b30      	cmp	r3, #48	; 0x30
 8001fb2:	d105      	bne.n	8001fc0 <cmd_pump+0x34>
			pumpOff();
 8001fb4:	f000 f9c8 	bl	8002348 <pumpOff>
 8001fb8:	e002      	b.n	8001fc0 <cmd_pump+0x34>
		}
	}else {
		printf("wrong command pattern!");
 8001fba:	4804      	ldr	r0, [pc, #16]	; (8001fcc <cmd_pump+0x40>)
 8001fbc:	f009 f93e 	bl	800b23c <iprintf>
	}

	return 0;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	0800ede8 	.word	0x0800ede8

08001fd0 <cmd_conveyorBelt>:

int cmd_conveyorBelt(int len, char* cmd, queueMessage* smsg)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
	if(len == 2) {
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d113      	bne.n	800200a <cmd_conveyorBelt+0x3a>
		if (*cmd=='1') {
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b31      	cmp	r3, #49	; 0x31
 8001fe8:	d11c      	bne.n	8002024 <cmd_conveyorBelt+0x54>
			if (cmd[1]=='R') {
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	3301      	adds	r3, #1
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b52      	cmp	r3, #82	; 0x52
 8001ff2:	d102      	bne.n	8001ffa <cmd_conveyorBelt+0x2a>
				cvbeltTurnRight();
 8001ff4:	f000 f9b4 	bl	8002360 <cvbeltTurnRight>
 8001ff8:	e014      	b.n	8002024 <cmd_conveyorBelt+0x54>
			} else if (cmd[1]=='L'){
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b4c      	cmp	r3, #76	; 0x4c
 8002002:	d10f      	bne.n	8002024 <cmd_conveyorBelt+0x54>
				cvbeltTurnLeft();
 8002004:	f000 f9ba 	bl	800237c <cvbeltTurnLeft>
 8002008:	e00c      	b.n	8002024 <cmd_conveyorBelt+0x54>
			}
		}
	}else if(len == 1){
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d106      	bne.n	800201e <cmd_conveyorBelt+0x4e>
		if (*cmd=='0') {
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b30      	cmp	r3, #48	; 0x30
 8002016:	d105      	bne.n	8002024 <cmd_conveyorBelt+0x54>
				cvbeltStop();
 8002018:	f000 f9be 	bl	8002398 <cvbeltStop>
 800201c:	e002      	b.n	8002024 <cmd_conveyorBelt+0x54>
		}
	}else {
		printf("wrong command pattern!");
 800201e:	4804      	ldr	r0, [pc, #16]	; (8002030 <cmd_conveyorBelt+0x60>)
 8002020:	f009 f90c 	bl	800b23c <iprintf>
	}

	return 0;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	0800ede8 	.word	0x0800ede8

08002034 <cmd_pick>:

int cmd_pick(int len, char* cmd, queueMessage* smsg)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
	downEndEffector(smsg);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 f951 	bl	80022e8 <downEndEffector>
	pumpOn();
 8002046:	f000 f973 	bl	8002330 <pumpOn>
	servoDelay(1000);
 800204a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800204e:	f000 f9f1 	bl	8002434 <servoDelay>
	upEndEffector(smsg);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f924 	bl	80022a0 <upEndEffector>
	return 0;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <cmd_throw>:

int cmd_throw(int len, char* cmd, queueMessage* smsg)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]

	smsg->mX=0;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
	smsg->mY=-140;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a0c      	ldr	r2, [pc, #48]	; (80020ac <cmd_throw+0x48>)
 800207c:	605a      	str	r2, [r3, #4]
	smsg->mZ=-230;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a0b      	ldr	r2, [pc, #44]	; (80020b0 <cmd_throw+0x4c>)
 8002082:	609a      	str	r2, [r3, #8]
	smsg->maxSpeed=1000;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800208a:	60da      	str	r2, [r3, #12]
	smsg->timing=2;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2202      	movs	r2, #2
 8002090:	741a      	strb	r2, [r3, #16]

	osMessagePut(setQueueHandle, (uint32_t)smsg, 100);
 8002092:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <cmd_throw+0x50>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	2264      	movs	r2, #100	; 0x64
 800209a:	4618      	mov	r0, r3
 800209c:	f005 fcdc 	bl	8007a58 <osMessagePut>

	return 0;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	c30c0000 	.word	0xc30c0000
 80020b0:	c3660000 	.word	0xc3660000
 80020b4:	200002bc 	.word	0x200002bc

080020b8 <cmd_defaultPos>:

int cmd_defaultPos(int len, char* cmd, queueMessage* smsg)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
	upEndEffector(smsg);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f8eb 	bl	80022a0 <upEndEffector>
	return 0;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <cmd_moveTo>:

int cmd_moveTo(int len, char* cmd, queueMessage* smsg)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b088      	sub	sp, #32
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]

	if(len == 12){
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2b0c      	cmp	r3, #12
 80020e4:	f040 808a 	bne.w	80021fc <cmd_moveTo+0x128>

		float tempX = (cmd[1]-'0')*100 + (cmd[2]-'0')*10 + (cmd[3]-'0')*1 ;
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	3301      	adds	r3, #1
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	3b30      	subs	r3, #48	; 0x30
 80020f0:	2264      	movs	r2, #100	; 0x64
 80020f2:	fb02 f103 	mul.w	r1, r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	3302      	adds	r3, #2
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	18ca      	adds	r2, r1, r3
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	3303      	adds	r3, #3
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	3b30      	subs	r3, #48	; 0x30
 8002112:	4413      	add	r3, r2
 8002114:	ee07 3a90 	vmov	s15, r3
 8002118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800211c:	edc7 7a07 	vstr	s15, [r7, #28]
		if(cmd[0]=='-'){
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b2d      	cmp	r3, #45	; 0x2d
 8002126:	d105      	bne.n	8002134 <cmd_moveTo+0x60>
			tempX = -tempX;
 8002128:	edd7 7a07 	vldr	s15, [r7, #28]
 800212c:	eef1 7a67 	vneg.f32	s15, s15
 8002130:	edc7 7a07 	vstr	s15, [r7, #28]
		}
		float tempY = (cmd[5]-'0')*100 + (cmd[6]-'0')*10 + (cmd[7]-'0')*1 ;
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	3305      	adds	r3, #5
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	3b30      	subs	r3, #48	; 0x30
 800213c:	2264      	movs	r2, #100	; 0x64
 800213e:	fb02 f103 	mul.w	r1, r2, r3
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	3306      	adds	r3, #6
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	18ca      	adds	r2, r1, r3
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	3307      	adds	r3, #7
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	3b30      	subs	r3, #48	; 0x30
 800215e:	4413      	add	r3, r2
 8002160:	ee07 3a90 	vmov	s15, r3
 8002164:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002168:	edc7 7a06 	vstr	s15, [r7, #24]
		if(cmd[4]=='-'){
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	3304      	adds	r3, #4
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b2d      	cmp	r3, #45	; 0x2d
 8002174:	d105      	bne.n	8002182 <cmd_moveTo+0xae>
			tempY = -tempY;
 8002176:	edd7 7a06 	vldr	s15, [r7, #24]
 800217a:	eef1 7a67 	vneg.f32	s15, s15
 800217e:	edc7 7a06 	vstr	s15, [r7, #24]
		}
		float tempZ = (cmd[9]-'0')*100 + (cmd[10]-'0')*10 + (cmd[11]-'0')*1 ;
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	3309      	adds	r3, #9
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	3b30      	subs	r3, #48	; 0x30
 800218a:	2264      	movs	r2, #100	; 0x64
 800218c:	fb02 f103 	mul.w	r1, r2, r3
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	330a      	adds	r3, #10
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	18ca      	adds	r2, r1, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	330b      	adds	r3, #11
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	3b30      	subs	r3, #48	; 0x30
 80021ac:	4413      	add	r3, r2
 80021ae:	ee07 3a90 	vmov	s15, r3
 80021b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021b6:	edc7 7a05 	vstr	s15, [r7, #20]
		if(cmd[8]=='-'){
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	3308      	adds	r3, #8
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b2d      	cmp	r3, #45	; 0x2d
 80021c2:	d105      	bne.n	80021d0 <cmd_moveTo+0xfc>
			tempZ = -tempZ;
 80021c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80021c8:	eef1 7a67 	vneg.f32	s15, s15
 80021cc:	edc7 7a05 	vstr	s15, [r7, #20]
		}

		smsg->mX=tempX;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	69fa      	ldr	r2, [r7, #28]
 80021d4:	601a      	str	r2, [r3, #0]
		smsg->mY=tempY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	605a      	str	r2, [r3, #4]
		smsg->mZ=tempZ;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	609a      	str	r2, [r3, #8]

		smsg->maxSpeed=100;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2264      	movs	r2, #100	; 0x64
 80021e6:	60da      	str	r2, [r3, #12]
		smsg->timing=0;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	741a      	strb	r2, [r3, #16]

		osMessagePut(setQueueHandle, (uint32_t)smsg, 100);
 80021ee:	4b06      	ldr	r3, [pc, #24]	; (8002208 <cmd_moveTo+0x134>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	2264      	movs	r2, #100	; 0x64
 80021f6:	4618      	mov	r0, r3
 80021f8:	f005 fc2e 	bl	8007a58 <osMessagePut>
	}

	return 0;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3720      	adds	r7, #32
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	200002bc 	.word	0x200002bc

0800220c <cmd_read>:

int cmd_read(int len, char* cmd, queueMessage* smsg)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
	return 1;
 8002218:	2301      	movs	r3, #1
}
 800221a:	4618      	mov	r0, r3
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
	...

08002228 <cmd_handler>:


int cmd_handler(char* cmd, queueMessage* smsg)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
	struct Command_List* pCmdList = CmdList;
 8002232:	4b19      	ldr	r3, [pc, #100]	; (8002298 <cmd_handler+0x70>)
 8002234:	617b      	str	r3, [r7, #20]

	uint8_t command_found = 0;
 8002236:	2300      	movs	r3, #0
 8002238:	74fb      	strb	r3, [r7, #19]
	int read_command_found = 0;
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]

	int len = strlen(cmd)-1;
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7fd ffd6 	bl	80001f0 <strlen>
 8002244:	4603      	mov	r3, r0
 8002246:	3b01      	subs	r3, #1
 8002248:	60bb      	str	r3, [r7, #8]


	while (pCmdList->cmd)
 800224a:	e015      	b.n	8002278 <cmd_handler+0x50>
	{
		if (pCmdList->cmd==cmd[0])
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	781a      	ldrb	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d10c      	bne.n	8002272 <cmd_handler+0x4a>
		{
			command_found = 1;
 8002258:	2301      	movs	r3, #1
 800225a:	74fb      	strb	r3, [r7, #19]
			read_command_found = pCmdList->func(len, ++cmd, smsg);
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	3201      	adds	r2, #1
 8002264:	607a      	str	r2, [r7, #4]
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	68b8      	ldr	r0, [r7, #8]
 800226c:	4798      	blx	r3
 800226e:	60f8      	str	r0, [r7, #12]
			break;
 8002270:	e006      	b.n	8002280 <cmd_handler+0x58>
		}
		++pCmdList;
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	3308      	adds	r3, #8
 8002276:	617b      	str	r3, [r7, #20]
	while (pCmdList->cmd)
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1e5      	bne.n	800224c <cmd_handler+0x24>
	}

	if (command_found == 0) printf("command not found!\n");
 8002280:	7cfb      	ldrb	r3, [r7, #19]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d102      	bne.n	800228c <cmd_handler+0x64>
 8002286:	4805      	ldr	r0, [pc, #20]	; (800229c <cmd_handler+0x74>)
 8002288:	f009 f85e 	bl	800b348 <puts>

	return read_command_found;
 800228c:	68fb      	ldr	r3, [r7, #12]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000000 	.word	0x20000000
 800229c:	0800ee00 	.word	0x0800ee00

080022a0 <upEndEffector>:



void upEndEffector(queueMessage* smsg){
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]

	smsg->mX=0;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
	smsg->mY=0;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f04f 0200 	mov.w	r2, #0
 80022b6:	605a      	str	r2, [r3, #4]
	smsg->mZ=-256.984;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a09      	ldr	r2, [pc, #36]	; (80022e0 <upEndEffector+0x40>)
 80022bc:	609a      	str	r2, [r3, #8]

	smsg->maxSpeed=100;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2264      	movs	r2, #100	; 0x64
 80022c2:	60da      	str	r2, [r3, #12]
	smsg->timing=0;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	741a      	strb	r2, [r3, #16]

	osMessagePut(setQueueHandle, (uint32_t)smsg, 100);
 80022ca:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <upEndEffector+0x44>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	2264      	movs	r2, #100	; 0x64
 80022d2:	4618      	mov	r0, r3
 80022d4:	f005 fbc0 	bl	8007a58 <osMessagePut>

//	setGoalPosition(AX_BROADCAST_ID, 510);
//	servoDelay(1000);
}
 80022d8:	bf00      	nop
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	c3807df4 	.word	0xc3807df4
 80022e4:	200002bc 	.word	0x200002bc

080022e8 <downEndEffector>:

void downEndEffector(queueMessage* smsg){
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]


	smsg->mX=0;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f04f 0200 	mov.w	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
	smsg->mY=0;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	605a      	str	r2, [r3, #4]
	smsg->mZ=-407.891;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a09      	ldr	r2, [pc, #36]	; (8002328 <downEndEffector+0x40>)
 8002304:	609a      	str	r2, [r3, #8]

	smsg->maxSpeed=100;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2264      	movs	r2, #100	; 0x64
 800230a:	60da      	str	r2, [r3, #12]
	smsg->timing=0;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	741a      	strb	r2, [r3, #16]

	osMessagePut(setQueueHandle, (uint32_t)smsg, 100);
 8002312:	4b06      	ldr	r3, [pc, #24]	; (800232c <downEndEffector+0x44>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	2264      	movs	r2, #100	; 0x64
 800231a:	4618      	mov	r0, r3
 800231c:	f005 fb9c 	bl	8007a58 <osMessagePut>
}
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	c3cbf20c 	.word	0xc3cbf20c
 800232c:	200002bc 	.word	0x200002bc

08002330 <pumpOn>:
}
void torqueOff(){
	syncWriteTorqueOnOff(OFF);
}

void pumpOn(){
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 0);
 8002334:	2200      	movs	r2, #0
 8002336:	2101      	movs	r1, #1
 8002338:	4802      	ldr	r0, [pc, #8]	; (8002344 <pumpOn+0x14>)
 800233a:	f002 fd07 	bl	8004d4c <HAL_GPIO_WritePin>
}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40021800 	.word	0x40021800

08002348 <pumpOff>:

void pumpOff(){
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 1);
 800234c:	2201      	movs	r2, #1
 800234e:	2101      	movs	r1, #1
 8002350:	4802      	ldr	r0, [pc, #8]	; (800235c <pumpOff+0x14>)
 8002352:	f002 fcfb 	bl	8004d4c <HAL_GPIO_WritePin>
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40021800 	.word	0x40021800

08002360 <cvbeltTurnRight>:

void cvbeltTurnRight(){
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
	setEndless(AX_CONVEYOR_ID, ON);
 8002364:	2101      	movs	r1, #1
 8002366:	2003      	movs	r0, #3
 8002368:	f000 fbb7 	bl	8002ada <setEndless>
	turn(AX_CONVEYOR_ID, RIGHT, 600);
 800236c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002370:	2101      	movs	r1, #1
 8002372:	2003      	movs	r0, #3
 8002374:	f000 fca4 	bl	8002cc0 <turn>
}
 8002378:	bf00      	nop
 800237a:	bd80      	pop	{r7, pc}

0800237c <cvbeltTurnLeft>:

void cvbeltTurnLeft(){
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
	setEndless(AX_CONVEYOR_ID, ON);
 8002380:	2101      	movs	r1, #1
 8002382:	2003      	movs	r0, #3
 8002384:	f000 fba9 	bl	8002ada <setEndless>
	turn(AX_CONVEYOR_ID, LEFT, 600);
 8002388:	f44f 7216 	mov.w	r2, #600	; 0x258
 800238c:	2100      	movs	r1, #0
 800238e:	2003      	movs	r0, #3
 8002390:	f000 fc96 	bl	8002cc0 <turn>
}
 8002394:	bf00      	nop
 8002396:	bd80      	pop	{r7, pc}

08002398 <cvbeltStop>:

void cvbeltStop(){
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
	onOffTorque(AX_CONVEYOR_ID, OFF);
 800239c:	2100      	movs	r1, #0
 800239e:	2003      	movs	r0, #3
 80023a0:	f000 fa9a 	bl	80028d8 <onOffTorque>
}
 80023a4:	bf00      	nop
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <deltaInit>:

void deltaInit(){
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
	//setMovingSpeed(AX_BROADCAST_ID, 100);
	//upEndEffector();

	setCoordinates(0,0,-256.984);
 80023ac:	ed9f 2b0c 	vldr	d2, [pc, #48]	; 80023e0 <deltaInit+0x38>
 80023b0:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 80023e8 <deltaInit+0x40>
 80023b4:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 80023e8 <deltaInit+0x40>
 80023b8:	f7fe fea0 	bl	80010fc <setCoordinates>
	inverse();
 80023bc:	f7ff f878 	bl	80014b0 <inverse>
	ServoConversion();
 80023c0:	f7fe fda6 	bl	8000f10 <ServoConversion>

	setGoalPosition(AX_BROADCAST_ID, GP[0]);
 80023c4:	4b0a      	ldr	r3, [pc, #40]	; (80023f0 <deltaInit+0x48>)
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	4619      	mov	r1, r3
 80023ca:	20fe      	movs	r0, #254	; 0xfe
 80023cc:	f000 f85e 	bl	800248c <setGoalPosition>
	servoDelay(1000);
 80023d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023d4:	f000 f82e 	bl	8002434 <servoDelay>

//	uint8_t str[] = "******* CONTROL MENU *******\r\n 1. UP\r\n 2. DOWN\r\n 3. Read Position\r\n 4. Torque Off\r\n 5. Torque On\r\n 6 : Throw(temp)\r\n****************************\r\n";
//	HAL_UART_Transmit(&huart3, str, sizeof(str), 1000);
}
 80023d8:	bf00      	nop
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	f3af 8000 	nop.w
 80023e0:	76c8b439 	.word	0x76c8b439
 80023e4:	c0700fbe 	.word	0xc0700fbe
	...
 80023f0:	20000278 	.word	0x20000278

080023f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	607b      	str	r3, [r7, #4]
 80023fe:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <MX_DMA_Init+0x3c>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	4a0b      	ldr	r2, [pc, #44]	; (8002430 <MX_DMA_Init+0x3c>)
 8002404:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002408:	6313      	str	r3, [r2, #48]	; 0x30
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <MX_DMA_Init+0x3c>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002412:	607b      	str	r3, [r7, #4]
 8002414:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002416:	2200      	movs	r2, #0
 8002418:	2105      	movs	r1, #5
 800241a:	2010      	movs	r0, #16
 800241c:	f001 febe 	bl	800419c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002420:	2010      	movs	r0, #16
 8002422:	f001 fed7 	bl	80041d4 <HAL_NVIC_EnableIRQ>

}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40023800 	.word	0x40023800

08002434 <servoDelay>:
extern uint8_t rx2_Buf[RxBuf_SIZE];

char buffer[10]={0,};


void servoDelay(uint32_t millisec){
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
	osDelay(millisec);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f005 fa0b 	bl	8007858 <osDelay>
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
	...

0800244c <sendInstPacket>:

void sendInstPacket(uint8_t* packet, uint8_t length)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(Direction_GPIO_Port, Direction_Pin, TX_MODE); // Switch to Transmission  Mode
 8002458:	2201      	movs	r2, #1
 800245a:	2180      	movs	r1, #128	; 0x80
 800245c:	4809      	ldr	r0, [pc, #36]	; (8002484 <sendInstPacket+0x38>)
 800245e:	f002 fc75 	bl	8004d4c <HAL_GPIO_WritePin>

	HAL_UART_Transmit(&huart2, packet, length, 1000);
 8002462:	78fb      	ldrb	r3, [r7, #3]
 8002464:	b29a      	uxth	r2, r3
 8002466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	4806      	ldr	r0, [pc, #24]	; (8002488 <sendInstPacket+0x3c>)
 800246e:	f003 ff16 	bl	800629e <HAL_UART_Transmit>
	//servoDelay(25);

	HAL_GPIO_WritePin(Direction_GPIO_Port, Direction_Pin, RX_MODE); 	// Switch back to Reception Mode
 8002472:	2200      	movs	r2, #0
 8002474:	2180      	movs	r1, #128	; 0x80
 8002476:	4803      	ldr	r0, [pc, #12]	; (8002484 <sendInstPacket+0x38>)
 8002478:	f002 fc68 	bl	8004d4c <HAL_GPIO_WritePin>

}
 800247c:	bf00      	nop
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40020c00 	.word	0x40020c00
 8002488:	20000648 	.word	0x20000648

0800248c <setGoalPosition>:
    sendInstPacket(packet, length);

}

void setGoalPosition(uint8_t ID, uint16_t Position)
{
 800248c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002490:	b087      	sub	sp, #28
 8002492:	af00      	add	r7, sp, #0
 8002494:	4603      	mov	r3, r0
 8002496:	460a      	mov	r2, r1
 8002498:	71fb      	strb	r3, [r7, #7]
 800249a:	4613      	mov	r3, r2
 800249c:	80bb      	strh	r3, [r7, #4]
 800249e:	466b      	mov	r3, sp
 80024a0:	461e      	mov	r6, r3
    uint8_t Position_L = Position;
 80024a2:	88bb      	ldrh	r3, [r7, #4]
 80024a4:	75fb      	strb	r3, [r7, #23]
    uint8_t Position_H = Position >> 8;
 80024a6:	88bb      	ldrh	r3, [r7, #4]
 80024a8:	0a1b      	lsrs	r3, r3, #8
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	75bb      	strb	r3, [r7, #22]
    // 16 bits -> 2 x 8 bits

    uint8_t length = 9;
 80024ae:	2309      	movs	r3, #9
 80024b0:	757b      	strb	r3, [r7, #21]
    uint8_t packet[length];
 80024b2:	7d79      	ldrb	r1, [r7, #21]
 80024b4:	460b      	mov	r3, r1
 80024b6:	3b01      	subs	r3, #1
 80024b8:	613b      	str	r3, [r7, #16]
 80024ba:	b2cb      	uxtb	r3, r1
 80024bc:	2200      	movs	r2, #0
 80024be:	4698      	mov	r8, r3
 80024c0:	4691      	mov	r9, r2
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	f04f 0300 	mov.w	r3, #0
 80024ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024d6:	b2cb      	uxtb	r3, r1
 80024d8:	2200      	movs	r2, #0
 80024da:	461c      	mov	r4, r3
 80024dc:	4615      	mov	r5, r2
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	00eb      	lsls	r3, r5, #3
 80024e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024ec:	00e2      	lsls	r2, r4, #3
 80024ee:	460b      	mov	r3, r1
 80024f0:	3307      	adds	r3, #7
 80024f2:	08db      	lsrs	r3, r3, #3
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	ebad 0d03 	sub.w	sp, sp, r3
 80024fa:	466b      	mov	r3, sp
 80024fc:	3300      	adds	r3, #0
 80024fe:	60fb      	str	r3, [r7, #12]

    packet[0] = AX_HEADER;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	22ff      	movs	r2, #255	; 0xff
 8002504:	701a      	strb	r2, [r3, #0]
    packet[1] = AX_HEADER;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	22ff      	movs	r2, #255	; 0xff
 800250a:	705a      	strb	r2, [r3, #1]
    packet[2] = ID;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	79fa      	ldrb	r2, [r7, #7]
 8002510:	709a      	strb	r2, [r3, #2]
    packet[3] = length-4;
 8002512:	7d7b      	ldrb	r3, [r7, #21]
 8002514:	3b04      	subs	r3, #4
 8002516:	b2da      	uxtb	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	70da      	strb	r2, [r3, #3]
    packet[4] = AX_WRITE;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2203      	movs	r2, #3
 8002520:	711a      	strb	r2, [r3, #4]
    packet[5] = ADDR_GOAL_POSITION_L;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	221e      	movs	r2, #30
 8002526:	715a      	strb	r2, [r3, #5]
    packet[6] = Position_L;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	7dfa      	ldrb	r2, [r7, #23]
 800252c:	719a      	strb	r2, [r3, #6]
    packet[7] = Position_H;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	7dba      	ldrb	r2, [r7, #22]
 8002532:	71da      	strb	r2, [r3, #7]
    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6] + packet[7])) & 0xFF;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	789a      	ldrb	r2, [r3, #2]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	78db      	ldrb	r3, [r3, #3]
 800253c:	4413      	add	r3, r2
 800253e:	b2da      	uxtb	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	791b      	ldrb	r3, [r3, #4]
 8002544:	4413      	add	r3, r2
 8002546:	b2da      	uxtb	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	795b      	ldrb	r3, [r3, #5]
 800254c:	4413      	add	r3, r2
 800254e:	b2da      	uxtb	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	799b      	ldrb	r3, [r3, #6]
 8002554:	4413      	add	r3, r2
 8002556:	b2da      	uxtb	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	79db      	ldrb	r3, [r3, #7]
 800255c:	4413      	add	r3, r2
 800255e:	b2db      	uxtb	r3, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	72fb      	strb	r3, [r7, #11]
    packet[8] = Checksum;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	7afa      	ldrb	r2, [r7, #11]
 8002568:	721a      	strb	r2, [r3, #8]

    sendInstPacket(packet, length);
 800256a:	7d7b      	ldrb	r3, [r7, #21]
 800256c:	4619      	mov	r1, r3
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f7ff ff6c 	bl	800244c <sendInstPacket>
 8002574:	46b5      	mov	sp, r6

}
 8002576:	bf00      	nop
 8002578:	371c      	adds	r7, #28
 800257a:	46bd      	mov	sp, r7
 800257c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002580 <syncWriteGoalPosition>:

void syncWriteGoalPosition(uint16_t P0, uint16_t S0, uint16_t P1, uint16_t S1, uint16_t P2, uint16_t S2){
 8002580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002584:	b08b      	sub	sp, #44	; 0x2c
 8002586:	af00      	add	r7, sp, #0
 8002588:	4606      	mov	r6, r0
 800258a:	4608      	mov	r0, r1
 800258c:	4611      	mov	r1, r2
 800258e:	461a      	mov	r2, r3
 8002590:	4633      	mov	r3, r6
 8002592:	80fb      	strh	r3, [r7, #6]
 8002594:	4603      	mov	r3, r0
 8002596:	80bb      	strh	r3, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	807b      	strh	r3, [r7, #2]
 800259c:	4613      	mov	r3, r2
 800259e:	803b      	strh	r3, [r7, #0]
 80025a0:	466b      	mov	r3, sp
 80025a2:	461e      	mov	r6, r3

    uint8_t P0_L = P0;
 80025a4:	88fb      	ldrh	r3, [r7, #6]
 80025a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t P0_H = P0 >> 8;
 80025aa:	88fb      	ldrh	r3, [r7, #6]
 80025ac:	0a1b      	lsrs	r3, r3, #8
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    uint8_t P1_L = P1;
 80025b4:	887b      	ldrh	r3, [r7, #2]
 80025b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    uint8_t P1_H = P1 >> 8;
 80025ba:	887b      	ldrh	r3, [r7, #2]
 80025bc:	0a1b      	lsrs	r3, r3, #8
 80025be:	b29b      	uxth	r3, r3
 80025c0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    uint8_t P2_L = P2;
 80025c4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80025c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint8_t P2_H = P2 >> 8;
 80025cc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80025d0:	0a1b      	lsrs	r3, r3, #8
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

    uint8_t S0_L = S0;
 80025d8:	88bb      	ldrh	r3, [r7, #4]
 80025da:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    uint8_t S0_H = S0 >> 8;
 80025de:	88bb      	ldrh	r3, [r7, #4]
 80025e0:	0a1b      	lsrs	r3, r3, #8
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	f887 3020 	strb.w	r3, [r7, #32]

    uint8_t S1_L = S1;
 80025e8:	883b      	ldrh	r3, [r7, #0]
 80025ea:	77fb      	strb	r3, [r7, #31]
    uint8_t S1_H = S1 >> 8;
 80025ec:	883b      	ldrh	r3, [r7, #0]
 80025ee:	0a1b      	lsrs	r3, r3, #8
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	77bb      	strb	r3, [r7, #30]

    uint8_t S2_L = S2;
 80025f4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80025f8:	777b      	strb	r3, [r7, #29]
    uint8_t S2_H = S2 >> 8;
 80025fa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80025fe:	0a1b      	lsrs	r3, r3, #8
 8002600:	b29b      	uxth	r3, r3
 8002602:	773b      	strb	r3, [r7, #28]

    uint8_t length = 23;
 8002604:	2317      	movs	r3, #23
 8002606:	76fb      	strb	r3, [r7, #27]
    uint8_t packet[length];
 8002608:	7ef9      	ldrb	r1, [r7, #27]
 800260a:	460b      	mov	r3, r1
 800260c:	3b01      	subs	r3, #1
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	b2cb      	uxtb	r3, r1
 8002612:	2200      	movs	r2, #0
 8002614:	4698      	mov	r8, r3
 8002616:	4691      	mov	r9, r2
 8002618:	f04f 0200 	mov.w	r2, #0
 800261c:	f04f 0300 	mov.w	r3, #0
 8002620:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002624:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002628:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800262c:	b2cb      	uxtb	r3, r1
 800262e:	2200      	movs	r2, #0
 8002630:	461c      	mov	r4, r3
 8002632:	4615      	mov	r5, r2
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	f04f 0300 	mov.w	r3, #0
 800263c:	00eb      	lsls	r3, r5, #3
 800263e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002642:	00e2      	lsls	r2, r4, #3
 8002644:	460b      	mov	r3, r1
 8002646:	3307      	adds	r3, #7
 8002648:	08db      	lsrs	r3, r3, #3
 800264a:	00db      	lsls	r3, r3, #3
 800264c:	ebad 0d03 	sub.w	sp, sp, r3
 8002650:	466b      	mov	r3, sp
 8002652:	3300      	adds	r3, #0
 8002654:	613b      	str	r3, [r7, #16]

    packet[0] = AX_HEADER;
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	22ff      	movs	r2, #255	; 0xff
 800265a:	701a      	strb	r2, [r3, #0]
    packet[1] = AX_HEADER;
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	22ff      	movs	r2, #255	; 0xff
 8002660:	705a      	strb	r2, [r3, #1]
    packet[2] = AX_BROADCAST_ID;
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	22fe      	movs	r2, #254	; 0xfe
 8002666:	709a      	strb	r2, [r3, #2]
    packet[3] = length-4;
 8002668:	7efb      	ldrb	r3, [r7, #27]
 800266a:	3b04      	subs	r3, #4
 800266c:	b2da      	uxtb	r2, r3
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	70da      	strb	r2, [r3, #3]
    packet[4] = AX_SYNC_WRITE;
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	2283      	movs	r2, #131	; 0x83
 8002676:	711a      	strb	r2, [r3, #4]
    packet[5] = ADDR_GOAL_POSITION_L;
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	221e      	movs	r2, #30
 800267c:	715a      	strb	r2, [r3, #5]
    packet[6] = 0x04;		// length of data to access
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	2204      	movs	r2, #4
 8002682:	719a      	strb	r2, [r3, #6]

    packet[7] = 0;			// ID 0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	2200      	movs	r2, #0
 8002688:	71da      	strb	r2, [r3, #7]
    packet[8] = P0_L;
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002690:	721a      	strb	r2, [r3, #8]
    packet[9] = P0_H;
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002698:	725a      	strb	r2, [r3, #9]
    packet[10] = S0_L;
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80026a0:	729a      	strb	r2, [r3, #10]
    packet[11] = S0_H;
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80026a8:	72da      	strb	r2, [r3, #11]

    packet[12] = 1;			// ID 1
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	2201      	movs	r2, #1
 80026ae:	731a      	strb	r2, [r3, #12]
    packet[13] = P1_L;
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80026b6:	735a      	strb	r2, [r3, #13]
    packet[14] = P1_H;
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80026be:	739a      	strb	r2, [r3, #14]
    packet[15] = S1_L;
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	7ffa      	ldrb	r2, [r7, #31]
 80026c4:	73da      	strb	r2, [r3, #15]
    packet[16] = S1_H;
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	7fba      	ldrb	r2, [r7, #30]
 80026ca:	741a      	strb	r2, [r3, #16]

    packet[17] = 2;			// ID 2
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	2202      	movs	r2, #2
 80026d0:	745a      	strb	r2, [r3, #17]
    packet[18] = P2_L;
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80026d8:	749a      	strb	r2, [r3, #18]
    packet[19] = P2_H;
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80026e0:	74da      	strb	r2, [r3, #19]
    packet[20] = S2_L;
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	7f7a      	ldrb	r2, [r7, #29]
 80026e6:	751a      	strb	r2, [r3, #20]
    packet[21] = S2_H;
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	7f3a      	ldrb	r2, [r7, #28]
 80026ec:	755a      	strb	r2, [r3, #21]
    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6] + packet[7]
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	789a      	ldrb	r2, [r3, #2]
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	78db      	ldrb	r3, [r3, #3]
 80026f6:	4413      	add	r3, r2
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	791b      	ldrb	r3, [r3, #4]
 80026fe:	4413      	add	r3, r2
 8002700:	b2da      	uxtb	r2, r3
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	795b      	ldrb	r3, [r3, #5]
 8002706:	4413      	add	r3, r2
 8002708:	b2da      	uxtb	r2, r3
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	799b      	ldrb	r3, [r3, #6]
 800270e:	4413      	add	r3, r2
 8002710:	b2da      	uxtb	r2, r3
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	79db      	ldrb	r3, [r3, #7]
 8002716:	4413      	add	r3, r2
 8002718:	b2da      	uxtb	r2, r3
						+ packet[8] + packet[9] + packet[10] + packet[11] + packet[12] + packet[13]
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	7a1b      	ldrb	r3, [r3, #8]
 800271e:	4413      	add	r3, r2
 8002720:	b2da      	uxtb	r2, r3
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	7a5b      	ldrb	r3, [r3, #9]
 8002726:	4413      	add	r3, r2
 8002728:	b2da      	uxtb	r2, r3
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	7a9b      	ldrb	r3, [r3, #10]
 800272e:	4413      	add	r3, r2
 8002730:	b2da      	uxtb	r2, r3
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	7adb      	ldrb	r3, [r3, #11]
 8002736:	4413      	add	r3, r2
 8002738:	b2da      	uxtb	r2, r3
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	7b1b      	ldrb	r3, [r3, #12]
 800273e:	4413      	add	r3, r2
 8002740:	b2da      	uxtb	r2, r3
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	7b5b      	ldrb	r3, [r3, #13]
 8002746:	4413      	add	r3, r2
 8002748:	b2da      	uxtb	r2, r3
						+ packet[14] + packet[15] + packet[16] + packet[17] + packet[18] + packet[19]
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	7b9b      	ldrb	r3, [r3, #14]
 800274e:	4413      	add	r3, r2
 8002750:	b2da      	uxtb	r2, r3
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	7bdb      	ldrb	r3, [r3, #15]
 8002756:	4413      	add	r3, r2
 8002758:	b2da      	uxtb	r2, r3
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	7c1b      	ldrb	r3, [r3, #16]
 800275e:	4413      	add	r3, r2
 8002760:	b2da      	uxtb	r2, r3
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	7c5b      	ldrb	r3, [r3, #17]
 8002766:	4413      	add	r3, r2
 8002768:	b2da      	uxtb	r2, r3
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	7c9b      	ldrb	r3, [r3, #18]
 800276e:	4413      	add	r3, r2
 8002770:	b2da      	uxtb	r2, r3
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	7cdb      	ldrb	r3, [r3, #19]
 8002776:	4413      	add	r3, r2
 8002778:	b2da      	uxtb	r2, r3
						+ packet[20] + packet[21])) & 0xFF;
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	7d1b      	ldrb	r3, [r3, #20]
 800277e:	4413      	add	r3, r2
 8002780:	b2da      	uxtb	r2, r3
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	7d5b      	ldrb	r3, [r3, #21]
 8002786:	4413      	add	r3, r2
 8002788:	b2db      	uxtb	r3, r3
    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6] + packet[7]
 800278a:	43db      	mvns	r3, r3
 800278c:	73fb      	strb	r3, [r7, #15]
    packet[22] = Checksum;
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	7bfa      	ldrb	r2, [r7, #15]
 8002792:	759a      	strb	r2, [r3, #22]

    sendInstPacket(packet, length);
 8002794:	7efb      	ldrb	r3, [r7, #27]
 8002796:	4619      	mov	r1, r3
 8002798:	6938      	ldr	r0, [r7, #16]
 800279a:	f7ff fe57 	bl	800244c <sendInstPacket>
 800279e:	46b5      	mov	sp, r6
}
 80027a0:	bf00      	nop
 80027a2:	372c      	adds	r7, #44	; 0x2c
 80027a4:	46bd      	mov	sp, r7
 80027a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080027ac <getPresentPosition>:

uint16_t getPresentPosition(uint8_t ID)
{
 80027ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80027b0:	b087      	sub	sp, #28
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	4603      	mov	r3, r0
 80027b6:	71fb      	strb	r3, [r7, #7]
 80027b8:	466b      	mov	r3, sp
 80027ba:	461e      	mov	r6, r3

    uint8_t length = 8;
 80027bc:	2308      	movs	r3, #8
 80027be:	75fb      	strb	r3, [r7, #23]
    uint8_t packet[length];
 80027c0:	7df9      	ldrb	r1, [r7, #23]
 80027c2:	460b      	mov	r3, r1
 80027c4:	3b01      	subs	r3, #1
 80027c6:	613b      	str	r3, [r7, #16]
 80027c8:	b2cb      	uxtb	r3, r1
 80027ca:	2200      	movs	r2, #0
 80027cc:	4698      	mov	r8, r3
 80027ce:	4691      	mov	r9, r2
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027e4:	b2cb      	uxtb	r3, r1
 80027e6:	2200      	movs	r2, #0
 80027e8:	461c      	mov	r4, r3
 80027ea:	4615      	mov	r5, r2
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	f04f 0300 	mov.w	r3, #0
 80027f4:	00eb      	lsls	r3, r5, #3
 80027f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027fa:	00e2      	lsls	r2, r4, #3
 80027fc:	460b      	mov	r3, r1
 80027fe:	3307      	adds	r3, #7
 8002800:	08db      	lsrs	r3, r3, #3
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	ebad 0d03 	sub.w	sp, sp, r3
 8002808:	466b      	mov	r3, sp
 800280a:	3300      	adds	r3, #0
 800280c:	60fb      	str	r3, [r7, #12]

    packet[0] = AX_HEADER;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	22ff      	movs	r2, #255	; 0xff
 8002812:	701a      	strb	r2, [r3, #0]
    packet[1] = AX_HEADER;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	22ff      	movs	r2, #255	; 0xff
 8002818:	705a      	strb	r2, [r3, #1]
    packet[2] = ID;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	79fa      	ldrb	r2, [r7, #7]
 800281e:	709a      	strb	r2, [r3, #2]
    packet[3] = length-4;
 8002820:	7dfb      	ldrb	r3, [r7, #23]
 8002822:	3b04      	subs	r3, #4
 8002824:	b2da      	uxtb	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	70da      	strb	r2, [r3, #3]
    packet[4] = AX_READ;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2202      	movs	r2, #2
 800282e:	711a      	strb	r2, [r3, #4]
    packet[5] = ADDR_PRESENT_POSITION_L;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2224      	movs	r2, #36	; 0x24
 8002834:	715a      	strb	r2, [r3, #5]
    packet[6] = AX_READ_TWO_BYTE;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2202      	movs	r2, #2
 800283a:	719a      	strb	r2, [r3, #6]
    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6])) & 0xFF;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	789a      	ldrb	r2, [r3, #2]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	78db      	ldrb	r3, [r3, #3]
 8002844:	4413      	add	r3, r2
 8002846:	b2da      	uxtb	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	791b      	ldrb	r3, [r3, #4]
 800284c:	4413      	add	r3, r2
 800284e:	b2da      	uxtb	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	795b      	ldrb	r3, [r3, #5]
 8002854:	4413      	add	r3, r2
 8002856:	b2da      	uxtb	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	799b      	ldrb	r3, [r3, #6]
 800285c:	4413      	add	r3, r2
 800285e:	b2db      	uxtb	r3, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	72fb      	strb	r3, [r7, #11]
    packet[7] = Checksum;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	7afa      	ldrb	r2, [r7, #11]
 8002868:	71da      	strb	r2, [r3, #7]

    sendInstPacket(packet, length);
 800286a:	7dfb      	ldrb	r3, [r7, #23]
 800286c:	4619      	mov	r1, r3
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f7ff fdec 	bl	800244c <sendInstPacket>

    servoDelay(10);
 8002874:	200a      	movs	r0, #10
 8002876:	f7ff fddd 	bl	8002434 <servoDelay>
    Checksum = (~(rx2_Buf[2] + rx2_Buf[3] + rx2_Buf[4] + rx2_Buf[5] + rx2_Buf[6])) & 0xFF;
 800287a:	4b16      	ldr	r3, [pc, #88]	; (80028d4 <getPresentPosition+0x128>)
 800287c:	789a      	ldrb	r2, [r3, #2]
 800287e:	4b15      	ldr	r3, [pc, #84]	; (80028d4 <getPresentPosition+0x128>)
 8002880:	78db      	ldrb	r3, [r3, #3]
 8002882:	4413      	add	r3, r2
 8002884:	b2da      	uxtb	r2, r3
 8002886:	4b13      	ldr	r3, [pc, #76]	; (80028d4 <getPresentPosition+0x128>)
 8002888:	791b      	ldrb	r3, [r3, #4]
 800288a:	4413      	add	r3, r2
 800288c:	b2da      	uxtb	r2, r3
 800288e:	4b11      	ldr	r3, [pc, #68]	; (80028d4 <getPresentPosition+0x128>)
 8002890:	795b      	ldrb	r3, [r3, #5]
 8002892:	4413      	add	r3, r2
 8002894:	b2da      	uxtb	r2, r3
 8002896:	4b0f      	ldr	r3, [pc, #60]	; (80028d4 <getPresentPosition+0x128>)
 8002898:	799b      	ldrb	r3, [r3, #6]
 800289a:	4413      	add	r3, r2
 800289c:	b2db      	uxtb	r3, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	72fb      	strb	r3, [r7, #11]
    uint16_t presentPosition = rx2_Buf[5] + (rx2_Buf[6]<<8);
 80028a2:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <getPresentPosition+0x128>)
 80028a4:	795b      	ldrb	r3, [r3, #5]
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <getPresentPosition+0x128>)
 80028aa:	799b      	ldrb	r3, [r3, #6]
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	021b      	lsls	r3, r3, #8
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	4413      	add	r3, r2
 80028b4:	813b      	strh	r3, [r7, #8]

    if(Checksum==rx2_Buf[7]){
 80028b6:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <getPresentPosition+0x128>)
 80028b8:	79db      	ldrb	r3, [r3, #7]
 80028ba:	7afa      	ldrb	r2, [r7, #11]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d101      	bne.n	80028c4 <getPresentPosition+0x118>
    	return presentPosition;
 80028c0:	893b      	ldrh	r3, [r7, #8]
 80028c2:	e000      	b.n	80028c6 <getPresentPosition+0x11a>
    }else {
    	return 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	46b5      	mov	sp, r6
    }

}
 80028c8:	4618      	mov	r0, r3
 80028ca:	371c      	adds	r7, #28
 80028cc:	46bd      	mov	sp, r7
 80028ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80028d2:	bf00      	nop
 80028d4:	20000604 	.word	0x20000604

080028d8 <onOffTorque>:


void onOffTorque(uint8_t ID, uint8_t State){
 80028d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80028dc:	b087      	sub	sp, #28
 80028de:	af00      	add	r7, sp, #0
 80028e0:	4603      	mov	r3, r0
 80028e2:	460a      	mov	r2, r1
 80028e4:	71fb      	strb	r3, [r7, #7]
 80028e6:	4613      	mov	r3, r2
 80028e8:	71bb      	strb	r3, [r7, #6]
 80028ea:	466b      	mov	r3, sp
 80028ec:	461e      	mov	r6, r3

    uint8_t length = 8;
 80028ee:	2308      	movs	r3, #8
 80028f0:	75fb      	strb	r3, [r7, #23]
    uint8_t packet[length];
 80028f2:	7df9      	ldrb	r1, [r7, #23]
 80028f4:	460b      	mov	r3, r1
 80028f6:	3b01      	subs	r3, #1
 80028f8:	613b      	str	r3, [r7, #16]
 80028fa:	b2cb      	uxtb	r3, r1
 80028fc:	2200      	movs	r2, #0
 80028fe:	4698      	mov	r8, r3
 8002900:	4691      	mov	r9, r2
 8002902:	f04f 0200 	mov.w	r2, #0
 8002906:	f04f 0300 	mov.w	r3, #0
 800290a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800290e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002912:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002916:	b2cb      	uxtb	r3, r1
 8002918:	2200      	movs	r2, #0
 800291a:	461c      	mov	r4, r3
 800291c:	4615      	mov	r5, r2
 800291e:	f04f 0200 	mov.w	r2, #0
 8002922:	f04f 0300 	mov.w	r3, #0
 8002926:	00eb      	lsls	r3, r5, #3
 8002928:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800292c:	00e2      	lsls	r2, r4, #3
 800292e:	460b      	mov	r3, r1
 8002930:	3307      	adds	r3, #7
 8002932:	08db      	lsrs	r3, r3, #3
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	ebad 0d03 	sub.w	sp, sp, r3
 800293a:	466b      	mov	r3, sp
 800293c:	3300      	adds	r3, #0
 800293e:	60fb      	str	r3, [r7, #12]

    packet[0] = AX_HEADER;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	22ff      	movs	r2, #255	; 0xff
 8002944:	701a      	strb	r2, [r3, #0]
    packet[1] = AX_HEADER;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	22ff      	movs	r2, #255	; 0xff
 800294a:	705a      	strb	r2, [r3, #1]
    packet[2] = ID;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	79fa      	ldrb	r2, [r7, #7]
 8002950:	709a      	strb	r2, [r3, #2]
    packet[3] = length-4;
 8002952:	7dfb      	ldrb	r3, [r7, #23]
 8002954:	3b04      	subs	r3, #4
 8002956:	b2da      	uxtb	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	70da      	strb	r2, [r3, #3]
    packet[4] = AX_WRITE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2203      	movs	r2, #3
 8002960:	711a      	strb	r2, [r3, #4]
    packet[5] = ADDR_TORQUE_ENABLE;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2218      	movs	r2, #24
 8002966:	715a      	strb	r2, [r3, #5]
    packet[6] = State;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	79ba      	ldrb	r2, [r7, #6]
 800296c:	719a      	strb	r2, [r3, #6]
    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6])) & 0xFF;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	789a      	ldrb	r2, [r3, #2]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	78db      	ldrb	r3, [r3, #3]
 8002976:	4413      	add	r3, r2
 8002978:	b2da      	uxtb	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	791b      	ldrb	r3, [r3, #4]
 800297e:	4413      	add	r3, r2
 8002980:	b2da      	uxtb	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	795b      	ldrb	r3, [r3, #5]
 8002986:	4413      	add	r3, r2
 8002988:	b2da      	uxtb	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	799b      	ldrb	r3, [r3, #6]
 800298e:	4413      	add	r3, r2
 8002990:	b2db      	uxtb	r3, r3
 8002992:	43db      	mvns	r3, r3
 8002994:	72fb      	strb	r3, [r7, #11]
    packet[7] = Checksum;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	7afa      	ldrb	r2, [r7, #11]
 800299a:	71da      	strb	r2, [r3, #7]

    sendInstPacket(packet, length);
 800299c:	7dfb      	ldrb	r3, [r7, #23]
 800299e:	4619      	mov	r1, r3
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f7ff fd53 	bl	800244c <sendInstPacket>
 80029a6:	46b5      	mov	sp, r6

}
 80029a8:	bf00      	nop
 80029aa:	371c      	adds	r7, #28
 80029ac:	46bd      	mov	sp, r7
 80029ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080029b2 <syncWriteTorqueOnOff>:

void syncWriteTorqueOnOff(uint8_t State){
 80029b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	71fb      	strb	r3, [r7, #7]
 80029be:	466b      	mov	r3, sp
 80029c0:	461e      	mov	r6, r3

    uint8_t length = 14;
 80029c2:	230e      	movs	r3, #14
 80029c4:	75fb      	strb	r3, [r7, #23]
    uint8_t packet[length];
 80029c6:	7df9      	ldrb	r1, [r7, #23]
 80029c8:	460b      	mov	r3, r1
 80029ca:	3b01      	subs	r3, #1
 80029cc:	613b      	str	r3, [r7, #16]
 80029ce:	b2cb      	uxtb	r3, r1
 80029d0:	2200      	movs	r2, #0
 80029d2:	4698      	mov	r8, r3
 80029d4:	4691      	mov	r9, r2
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029ea:	b2cb      	uxtb	r3, r1
 80029ec:	2200      	movs	r2, #0
 80029ee:	461c      	mov	r4, r3
 80029f0:	4615      	mov	r5, r2
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	00eb      	lsls	r3, r5, #3
 80029fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a00:	00e2      	lsls	r2, r4, #3
 8002a02:	460b      	mov	r3, r1
 8002a04:	3307      	adds	r3, #7
 8002a06:	08db      	lsrs	r3, r3, #3
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	ebad 0d03 	sub.w	sp, sp, r3
 8002a0e:	466b      	mov	r3, sp
 8002a10:	3300      	adds	r3, #0
 8002a12:	60fb      	str	r3, [r7, #12]

    packet[0] = AX_HEADER;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	22ff      	movs	r2, #255	; 0xff
 8002a18:	701a      	strb	r2, [r3, #0]
    packet[1] = AX_HEADER;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	22ff      	movs	r2, #255	; 0xff
 8002a1e:	705a      	strb	r2, [r3, #1]
    packet[2] = AX_BROADCAST_ID;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	22fe      	movs	r2, #254	; 0xfe
 8002a24:	709a      	strb	r2, [r3, #2]
    packet[3] = length-4;
 8002a26:	7dfb      	ldrb	r3, [r7, #23]
 8002a28:	3b04      	subs	r3, #4
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	70da      	strb	r2, [r3, #3]
    packet[4] = AX_SYNC_WRITE;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2283      	movs	r2, #131	; 0x83
 8002a34:	711a      	strb	r2, [r3, #4]
    packet[5] = ADDR_TORQUE_ENABLE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2218      	movs	r2, #24
 8002a3a:	715a      	strb	r2, [r3, #5]
    packet[6] = 0x01;		// length of data to access
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	719a      	strb	r2, [r3, #6]

    packet[7] = 0;			// ID 0
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	71da      	strb	r2, [r3, #7]
    packet[8] = State;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	79fa      	ldrb	r2, [r7, #7]
 8002a4c:	721a      	strb	r2, [r3, #8]

    packet[9] = 1;			// ID 1
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2201      	movs	r2, #1
 8002a52:	725a      	strb	r2, [r3, #9]
    packet[10] = State;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	79fa      	ldrb	r2, [r7, #7]
 8002a58:	729a      	strb	r2, [r3, #10]

    packet[11] = 2;			// ID 2
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	72da      	strb	r2, [r3, #11]
    packet[12] = State;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	79fa      	ldrb	r2, [r7, #7]
 8002a64:	731a      	strb	r2, [r3, #12]
    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6] + packet[7]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	789a      	ldrb	r2, [r3, #2]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	78db      	ldrb	r3, [r3, #3]
 8002a6e:	4413      	add	r3, r2
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	791b      	ldrb	r3, [r3, #4]
 8002a76:	4413      	add	r3, r2
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	795b      	ldrb	r3, [r3, #5]
 8002a7e:	4413      	add	r3, r2
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	799b      	ldrb	r3, [r3, #6]
 8002a86:	4413      	add	r3, r2
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	79db      	ldrb	r3, [r3, #7]
 8002a8e:	4413      	add	r3, r2
 8002a90:	b2da      	uxtb	r2, r3
						+ packet[8] + packet[9] + packet[10] + packet[11] + packet[12])) & 0xFF;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	7a1b      	ldrb	r3, [r3, #8]
 8002a96:	4413      	add	r3, r2
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	7a5b      	ldrb	r3, [r3, #9]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	7a9b      	ldrb	r3, [r3, #10]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	7adb      	ldrb	r3, [r3, #11]
 8002aae:	4413      	add	r3, r2
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	7b1b      	ldrb	r3, [r3, #12]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	b2db      	uxtb	r3, r3
    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6] + packet[7]
 8002aba:	43db      	mvns	r3, r3
 8002abc:	72fb      	strb	r3, [r7, #11]
    packet[13] = Checksum;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	7afa      	ldrb	r2, [r7, #11]
 8002ac2:	735a      	strb	r2, [r3, #13]

    sendInstPacket(packet, length);
 8002ac4:	7dfb      	ldrb	r3, [r7, #23]
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f7ff fcbf 	bl	800244c <sendInstPacket>
 8002ace:	46b5      	mov	sp, r6
}
 8002ad0:	bf00      	nop
 8002ad2:	371c      	adds	r7, #28
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002ada <setEndless>:


void setEndless(uint8_t ID, uint8_t State)
{
 8002ada:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ade:	b08d      	sub	sp, #52	; 0x34
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	460a      	mov	r2, r1
 8002ae6:	73fb      	strb	r3, [r7, #15]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	73bb      	strb	r3, [r7, #14]
	if ( State )
 8002aec:	7bbb      	ldrb	r3, [r7, #14]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d06f      	beq.n	8002bd2 <setEndless+0xf8>
	{
 8002af2:	466b      	mov	r3, sp
 8002af4:	461c      	mov	r4, r3
		uint8_t length = 9;
 8002af6:	2309      	movs	r3, #9
 8002af8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		uint8_t packet[length];
 8002afc:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8002b00:	460b      	mov	r3, r1
 8002b02:	3b01      	subs	r3, #1
 8002b04:	61fb      	str	r3, [r7, #28]
 8002b06:	b2cb      	uxtb	r3, r1
 8002b08:	2200      	movs	r2, #0
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	607a      	str	r2, [r7, #4]
 8002b0e:	f04f 0200 	mov.w	r2, #0
 8002b12:	f04f 0300 	mov.w	r3, #0
 8002b16:	e9d7 5600 	ldrd	r5, r6, [r7]
 8002b1a:	4630      	mov	r0, r6
 8002b1c:	00c3      	lsls	r3, r0, #3
 8002b1e:	4628      	mov	r0, r5
 8002b20:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002b24:	4628      	mov	r0, r5
 8002b26:	00c2      	lsls	r2, r0, #3
 8002b28:	b2cb      	uxtb	r3, r1
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	469a      	mov	sl, r3
 8002b2e:	4693      	mov	fp, r2
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	f04f 0300 	mov.w	r3, #0
 8002b38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b44:	460b      	mov	r3, r1
 8002b46:	3307      	adds	r3, #7
 8002b48:	08db      	lsrs	r3, r3, #3
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	ebad 0d03 	sub.w	sp, sp, r3
 8002b50:	466b      	mov	r3, sp
 8002b52:	3300      	adds	r3, #0
 8002b54:	61bb      	str	r3, [r7, #24]

	    packet[0] = AX_HEADER;
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	22ff      	movs	r2, #255	; 0xff
 8002b5a:	701a      	strb	r2, [r3, #0]
	    packet[1] = AX_HEADER;
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	22ff      	movs	r2, #255	; 0xff
 8002b60:	705a      	strb	r2, [r3, #1]
	    packet[2] = ID;
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	7bfa      	ldrb	r2, [r7, #15]
 8002b66:	709a      	strb	r2, [r3, #2]
	    packet[3] = length-4;
 8002b68:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002b6c:	3b04      	subs	r3, #4
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	70da      	strb	r2, [r3, #3]
	    packet[4] = AX_WRITE;
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	2203      	movs	r2, #3
 8002b78:	711a      	strb	r2, [r3, #4]
	    packet[5] = ADDR_CCW_ANGLE_LIMIT_L;
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	2208      	movs	r2, #8
 8002b7e:	715a      	strb	r2, [r3, #5]
	    packet[6] = 0; 						// full rotation
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	2200      	movs	r2, #0
 8002b84:	719a      	strb	r2, [r3, #6]
	    packet[7] = 0;						// full rotation
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	71da      	strb	r2, [r3, #7]
	    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6] + packet[7])) & 0xFF;
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	789a      	ldrb	r2, [r3, #2]
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	78db      	ldrb	r3, [r3, #3]
 8002b94:	4413      	add	r3, r2
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	791b      	ldrb	r3, [r3, #4]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	795b      	ldrb	r3, [r3, #5]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	799b      	ldrb	r3, [r3, #6]
 8002bac:	4413      	add	r3, r2
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	79db      	ldrb	r3, [r3, #7]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	75fb      	strb	r3, [r7, #23]
	    packet[8] = Checksum;
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	7dfa      	ldrb	r2, [r7, #23]
 8002bc0:	721a      	strb	r2, [r3, #8]

	    sendInstPacket(packet, length);
 8002bc2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	69b8      	ldr	r0, [r7, #24]
 8002bca:	f7ff fc3f 	bl	800244c <sendInstPacket>
 8002bce:	46a5      	mov	sp, r4
	    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6] + packet[7])) & 0xFF;
	    packet[8] = Checksum;

	    sendInstPacket(packet, length);
	}
}
 8002bd0:	e071      	b.n	8002cb6 <setEndless+0x1dc>
	{
 8002bd2:	466b      	mov	r3, sp
 8002bd4:	461e      	mov	r6, r3
		turn(ID,0,0);
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	2100      	movs	r1, #0
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 f86f 	bl	8002cc0 <turn>
		uint8_t length = 9;
 8002be2:	2309      	movs	r3, #9
 8002be4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		uint8_t packet[length];
 8002be8:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8002bec:	460b      	mov	r3, r1
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bf2:	b2cb      	uxtb	r3, r1
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	4698      	mov	r8, r3
 8002bf8:	4691      	mov	r9, r2
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c0e:	b2cb      	uxtb	r3, r1
 8002c10:	2200      	movs	r2, #0
 8002c12:	461c      	mov	r4, r3
 8002c14:	4615      	mov	r5, r2
 8002c16:	f04f 0200 	mov.w	r2, #0
 8002c1a:	f04f 0300 	mov.w	r3, #0
 8002c1e:	00eb      	lsls	r3, r5, #3
 8002c20:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c24:	00e2      	lsls	r2, r4, #3
 8002c26:	460b      	mov	r3, r1
 8002c28:	3307      	adds	r3, #7
 8002c2a:	08db      	lsrs	r3, r3, #3
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	ebad 0d03 	sub.w	sp, sp, r3
 8002c32:	466b      	mov	r3, sp
 8002c34:	3300      	adds	r3, #0
 8002c36:	627b      	str	r3, [r7, #36]	; 0x24
	    packet[0] = AX_HEADER;
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	22ff      	movs	r2, #255	; 0xff
 8002c3c:	701a      	strb	r2, [r3, #0]
	    packet[1] = AX_HEADER;
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	22ff      	movs	r2, #255	; 0xff
 8002c42:	705a      	strb	r2, [r3, #1]
	    packet[2] = ID;
 8002c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c46:	7bfa      	ldrb	r2, [r7, #15]
 8002c48:	709a      	strb	r2, [r3, #2]
	    packet[3] = length-4;
 8002c4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002c4e:	3b04      	subs	r3, #4
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	70da      	strb	r2, [r3, #3]
	    packet[4] = AX_WRITE;
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	2203      	movs	r2, #3
 8002c5a:	711a      	strb	r2, [r3, #4]
	    packet[5] = ADDR_CCW_ANGLE_LIMIT_L;
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	2208      	movs	r2, #8
 8002c60:	715a      	strb	r2, [r3, #5]
	    packet[6] = 255;					// 1023 low
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	22ff      	movs	r2, #255	; 0xff
 8002c66:	719a      	strb	r2, [r3, #6]
	    packet[7] = 3;						// 1023 high
 8002c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6a:	2203      	movs	r2, #3
 8002c6c:	71da      	strb	r2, [r3, #7]
	    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6] + packet[7])) & 0xFF;
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	789a      	ldrb	r2, [r3, #2]
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c74:	78db      	ldrb	r3, [r3, #3]
 8002c76:	4413      	add	r3, r2
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	791b      	ldrb	r3, [r3, #4]
 8002c7e:	4413      	add	r3, r2
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	795b      	ldrb	r3, [r3, #5]
 8002c86:	4413      	add	r3, r2
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	799b      	ldrb	r3, [r3, #6]
 8002c8e:	4413      	add	r3, r2
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	79db      	ldrb	r3, [r3, #7]
 8002c96:	4413      	add	r3, r2
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	    packet[8] = Checksum;
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002ca6:	721a      	strb	r2, [r3, #8]
	    sendInstPacket(packet, length);
 8002ca8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002cac:	4619      	mov	r1, r3
 8002cae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002cb0:	f7ff fbcc 	bl	800244c <sendInstPacket>
 8002cb4:	46b5      	mov	sp, r6
}
 8002cb6:	bf00      	nop
 8002cb8:	3734      	adds	r7, #52	; 0x34
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002cc0 <turn>:

void turn(uint8_t ID, uint8_t SIDE, uint16_t Speed)
{
 8002cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cc4:	b08d      	sub	sp, #52	; 0x34
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	4603      	mov	r3, r0
 8002cca:	73fb      	strb	r3, [r7, #15]
 8002ccc:	460b      	mov	r3, r1
 8002cce:	73bb      	strb	r3, [r7, #14]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	81bb      	strh	r3, [r7, #12]
		if (SIDE == LEFT)
 8002cd4:	7bbb      	ldrb	r3, [r7, #14]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d179      	bne.n	8002dce <turn+0x10e>
		{
 8002cda:	466b      	mov	r3, sp
 8002cdc:	461c      	mov	r4, r3

		    uint8_t Speed_L = Speed;
 8002cde:	89bb      	ldrh	r3, [r7, #12]
 8002ce0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		    uint8_t Speed_H = Speed >> 8;		// 16 bits - 2 x 8 bits variables
 8002ce4:	89bb      	ldrh	r3, [r7, #12]
 8002ce6:	0a1b      	lsrs	r3, r3, #8
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

			uint8_t length = 9;
 8002cee:	2309      	movs	r3, #9
 8002cf0:	f887 3020 	strb.w	r3, [r7, #32]
			uint8_t packet[length];
 8002cf4:	f897 1020 	ldrb.w	r1, [r7, #32]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	61fb      	str	r3, [r7, #28]
 8002cfe:	b2cb      	uxtb	r3, r1
 8002d00:	2200      	movs	r2, #0
 8002d02:	603b      	str	r3, [r7, #0]
 8002d04:	607a      	str	r2, [r7, #4]
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	f04f 0300 	mov.w	r3, #0
 8002d0e:	e9d7 5600 	ldrd	r5, r6, [r7]
 8002d12:	4630      	mov	r0, r6
 8002d14:	00c3      	lsls	r3, r0, #3
 8002d16:	4628      	mov	r0, r5
 8002d18:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002d1c:	4628      	mov	r0, r5
 8002d1e:	00c2      	lsls	r2, r0, #3
 8002d20:	b2cb      	uxtb	r3, r1
 8002d22:	2200      	movs	r2, #0
 8002d24:	469a      	mov	sl, r3
 8002d26:	4693      	mov	fp, r2
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	f04f 0300 	mov.w	r3, #0
 8002d30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	3307      	adds	r3, #7
 8002d40:	08db      	lsrs	r3, r3, #3
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	ebad 0d03 	sub.w	sp, sp, r3
 8002d48:	466b      	mov	r3, sp
 8002d4a:	3300      	adds	r3, #0
 8002d4c:	61bb      	str	r3, [r7, #24]

		    packet[0] = AX_HEADER;
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	22ff      	movs	r2, #255	; 0xff
 8002d52:	701a      	strb	r2, [r3, #0]
		    packet[1] = AX_HEADER;
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	22ff      	movs	r2, #255	; 0xff
 8002d58:	705a      	strb	r2, [r3, #1]
		    packet[2] = ID;
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	7bfa      	ldrb	r2, [r7, #15]
 8002d5e:	709a      	strb	r2, [r3, #2]
		    packet[3] = length-4;
 8002d60:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d64:	3b04      	subs	r3, #4
 8002d66:	b2da      	uxtb	r2, r3
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	70da      	strb	r2, [r3, #3]
		    packet[4] = AX_WRITE;
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	2203      	movs	r2, #3
 8002d70:	711a      	strb	r2, [r3, #4]
		    packet[5] = ADDR_GOAL_SPEED_L;
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	2220      	movs	r2, #32
 8002d76:	715a      	strb	r2, [r3, #5]
		    packet[6] = Speed_L;
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8002d7e:	719a      	strb	r2, [r3, #6]
		    packet[7] = Speed_H;
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8002d86:	71da      	strb	r2, [r3, #7]
		    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6] + packet[7])) & 0xFF;
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	789a      	ldrb	r2, [r3, #2]
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	78db      	ldrb	r3, [r3, #3]
 8002d90:	4413      	add	r3, r2
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	791b      	ldrb	r3, [r3, #4]
 8002d98:	4413      	add	r3, r2
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	795b      	ldrb	r3, [r3, #5]
 8002da0:	4413      	add	r3, r2
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	799b      	ldrb	r3, [r3, #6]
 8002da8:	4413      	add	r3, r2
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	79db      	ldrb	r3, [r3, #7]
 8002db0:	4413      	add	r3, r2
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	75fb      	strb	r3, [r7, #23]
		    packet[8] = Checksum;
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	7dfa      	ldrb	r2, [r7, #23]
 8002dbc:	721a      	strb	r2, [r3, #8]

		    sendInstPacket(packet, length);
 8002dbe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	69b8      	ldr	r0, [r7, #24]
 8002dc6:	f7ff fb41 	bl	800244c <sendInstPacket>
 8002dca:	46a5      	mov	sp, r4
		    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6] + packet[7])) & 0xFF;
		    packet[8] = Checksum;

		    sendInstPacket(packet, length);
		}
}
 8002dcc:	e077      	b.n	8002ebe <turn+0x1fe>
		{
 8002dce:	466b      	mov	r3, sp
 8002dd0:	461e      	mov	r6, r3
		    uint8_t Speed_L = Speed;
 8002dd2:	89bb      	ldrh	r3, [r7, #12]
 8002dd4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		    uint8_t Speed_H = (Speed >> 8) + 4;		// 16 bits - 2 x 8 bits variables
 8002dd8:	89bb      	ldrh	r3, [r7, #12]
 8002dda:	0a1b      	lsrs	r3, r3, #8
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	3304      	adds	r3, #4
 8002de2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			uint8_t length = 9;
 8002de6:	2309      	movs	r3, #9
 8002de8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint8_t packet[length];
 8002dec:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002df0:	460b      	mov	r3, r1
 8002df2:	3b01      	subs	r3, #1
 8002df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002df6:	b2cb      	uxtb	r3, r1
 8002df8:	2200      	movs	r2, #0
 8002dfa:	4698      	mov	r8, r3
 8002dfc:	4691      	mov	r9, r2
 8002dfe:	f04f 0200 	mov.w	r2, #0
 8002e02:	f04f 0300 	mov.w	r3, #0
 8002e06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e12:	b2cb      	uxtb	r3, r1
 8002e14:	2200      	movs	r2, #0
 8002e16:	461c      	mov	r4, r3
 8002e18:	4615      	mov	r5, r2
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	00eb      	lsls	r3, r5, #3
 8002e24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e28:	00e2      	lsls	r2, r4, #3
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	3307      	adds	r3, #7
 8002e2e:	08db      	lsrs	r3, r3, #3
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	ebad 0d03 	sub.w	sp, sp, r3
 8002e36:	466b      	mov	r3, sp
 8002e38:	3300      	adds	r3, #0
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24
		    packet[0] = AX_HEADER;
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	22ff      	movs	r2, #255	; 0xff
 8002e40:	701a      	strb	r2, [r3, #0]
		    packet[1] = AX_HEADER;
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	22ff      	movs	r2, #255	; 0xff
 8002e46:	705a      	strb	r2, [r3, #1]
		    packet[2] = ID;
 8002e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4a:	7bfa      	ldrb	r2, [r7, #15]
 8002e4c:	709a      	strb	r2, [r3, #2]
		    packet[3] = length-4;
 8002e4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002e52:	3b04      	subs	r3, #4
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	70da      	strb	r2, [r3, #3]
		    packet[4] = AX_WRITE;
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	2203      	movs	r2, #3
 8002e5e:	711a      	strb	r2, [r3, #4]
		    packet[5] = ADDR_GOAL_SPEED_L;
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	2220      	movs	r2, #32
 8002e64:	715a      	strb	r2, [r3, #5]
		    packet[6] = Speed_L;
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002e6c:	719a      	strb	r2, [r3, #6]
		    packet[7] = Speed_H;
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8002e74:	71da      	strb	r2, [r3, #7]
		    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6] + packet[7])) & 0xFF;
 8002e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e78:	789a      	ldrb	r2, [r3, #2]
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	78db      	ldrb	r3, [r3, #3]
 8002e7e:	4413      	add	r3, r2
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e84:	791b      	ldrb	r3, [r3, #4]
 8002e86:	4413      	add	r3, r2
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	795b      	ldrb	r3, [r3, #5]
 8002e8e:	4413      	add	r3, r2
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	799b      	ldrb	r3, [r3, #6]
 8002e96:	4413      	add	r3, r2
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	79db      	ldrb	r3, [r3, #7]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		    packet[8] = Checksum;
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002eae:	721a      	strb	r2, [r3, #8]
		    sendInstPacket(packet, length);
 8002eb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002eb8:	f7ff fac8 	bl	800244c <sendInstPacket>
 8002ebc:	46b5      	mov	sp, r6
}
 8002ebe:	bf00      	nop
 8002ec0:	3734      	adds	r7, #52	; 0x34
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002ec8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4a07      	ldr	r2, [pc, #28]	; (8002ef4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002ed8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	4a06      	ldr	r2, [pc, #24]	; (8002ef8 <vApplicationGetIdleTaskMemory+0x30>)
 8002ede:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2280      	movs	r2, #128	; 0x80
 8002ee4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002ee6:	bf00      	nop
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	200002c8 	.word	0x200002c8
 8002ef8:	2000037c 	.word	0x2000037c

08002efc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002efc:	b5b0      	push	{r4, r5, r7, lr}
 8002efe:	b0a0      	sub	sp, #128	; 0x80
 8002f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	deltaInit();
 8002f02:	f7ff fa51 	bl	80023a8 <deltaInit>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of ReadPosSem */
  osSemaphoreDef(ReadPosSem);
 8002f06:	2300      	movs	r3, #0
 8002f08:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	67fb      	str	r3, [r7, #124]	; 0x7c
  ReadPosSemHandle = osSemaphoreCreate(osSemaphore(ReadPosSem), 1);
 8002f0e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002f12:	2101      	movs	r1, #1
 8002f14:	4618      	mov	r0, r3
 8002f16:	f004 fcb3 	bl	8007880 <osSemaphoreCreate>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	4a30      	ldr	r2, [pc, #192]	; (8002fe0 <MX_FREERTOS_Init+0xe4>)
 8002f1e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */


	osSemaphoreWait(ReadPosSemHandle, 0);
 8002f20:	4b2f      	ldr	r3, [pc, #188]	; (8002fe0 <MX_FREERTOS_Init+0xe4>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2100      	movs	r1, #0
 8002f26:	4618      	mov	r0, r3
 8002f28:	f004 fcea 	bl	8007900 <osSemaphoreWait>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of setQueue */
  osMessageQDef(setQueue, 10, queueMessage);
 8002f2c:	4b2d      	ldr	r3, [pc, #180]	; (8002fe4 <MX_FREERTOS_Init+0xe8>)
 8002f2e:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8002f32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  setQueueHandle = osMessageCreate(osMessageQ(setQueue), NULL);
 8002f38:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f004 fd62 	bl	8007a08 <osMessageCreate>
 8002f44:	4603      	mov	r3, r0
 8002f46:	4a28      	ldr	r2, [pc, #160]	; (8002fe8 <MX_FREERTOS_Init+0xec>)
 8002f48:	6013      	str	r3, [r2, #0]

  /* definition and creation of cmdQueue */
  osMessageQDef(cmdQueue, 10, 20);
 8002f4a:	4b28      	ldr	r3, [pc, #160]	; (8002fec <MX_FREERTOS_Init+0xf0>)
 8002f4c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8002f50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  cmdQueueHandle = osMessageCreate(osMessageQ(cmdQueue), NULL);
 8002f56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f004 fd53 	bl	8007a08 <osMessageCreate>
 8002f62:	4603      	mov	r3, r0
 8002f64:	4a22      	ldr	r2, [pc, #136]	; (8002ff0 <MX_FREERTOS_Init+0xf4>)
 8002f66:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 8002f68:	4b22      	ldr	r3, [pc, #136]	; (8002ff4 <MX_FREERTOS_Init+0xf8>)
 8002f6a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002f6e:	461d      	mov	r5, r3
 8002f70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002f78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002f7c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f80:	2100      	movs	r1, #0
 8002f82:	4618      	mov	r0, r3
 8002f84:	f004 fc07 	bl	8007796 <osThreadCreate>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	4a1b      	ldr	r2, [pc, #108]	; (8002ff8 <MX_FREERTOS_Init+0xfc>)
 8002f8c:	6013      	str	r3, [r2, #0]

  /* definition and creation of calWritePosTask */
  osThreadDef(calWritePosTask, cal_Write_Pos_Task, osPriorityNormal, 0, 512);
 8002f8e:	4b1b      	ldr	r3, [pc, #108]	; (8002ffc <MX_FREERTOS_Init+0x100>)
 8002f90:	f107 0420 	add.w	r4, r7, #32
 8002f94:	461d      	mov	r5, r3
 8002f96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002f9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  calWritePosTaskHandle = osThreadCreate(osThread(calWritePosTask), NULL);
 8002fa2:	f107 0320 	add.w	r3, r7, #32
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f004 fbf4 	bl	8007796 <osThreadCreate>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	4a13      	ldr	r2, [pc, #76]	; (8003000 <MX_FREERTOS_Init+0x104>)
 8002fb2:	6013      	str	r3, [r2, #0]

  /* definition and creation of cmdHandleTask */
  osThreadDef(cmdHandleTask, cmd_Handle_Task, osPriorityNormal, 0, 512);
 8002fb4:	4b13      	ldr	r3, [pc, #76]	; (8003004 <MX_FREERTOS_Init+0x108>)
 8002fb6:	1d3c      	adds	r4, r7, #4
 8002fb8:	461d      	mov	r5, r3
 8002fba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fbe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002fc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  cmdHandleTaskHandle = osThreadCreate(osThread(cmdHandleTask), NULL);
 8002fc6:	1d3b      	adds	r3, r7, #4
 8002fc8:	2100      	movs	r1, #0
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f004 fbe3 	bl	8007796 <osThreadCreate>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	4a0d      	ldr	r2, [pc, #52]	; (8003008 <MX_FREERTOS_Init+0x10c>)
 8002fd4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002fd6:	bf00      	nop
 8002fd8:	3780      	adds	r7, #128	; 0x80
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bdb0      	pop	{r4, r5, r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	200002c4 	.word	0x200002c4
 8002fe4:	0800ee44 	.word	0x0800ee44
 8002fe8:	200002bc 	.word	0x200002bc
 8002fec:	0800ee54 	.word	0x0800ee54
 8002ff0:	200002c0 	.word	0x200002c0
 8002ff4:	0800ee64 	.word	0x0800ee64
 8002ff8:	200002b0 	.word	0x200002b0
 8002ffc:	0800ee80 	.word	0x0800ee80
 8003000:	200002b4 	.word	0x200002b4
 8003004:	0800ee9c 	.word	0x0800ee9c
 8003008:	200002b8 	.word	0x200002b8

0800300c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b08e      	sub	sp, #56	; 0x38
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	  if(osSemaphoreWait(ReadPosSemHandle, osWaitForever) == osOK)
 8003014:	4b53      	ldr	r3, [pc, #332]	; (8003164 <StartDefaultTask+0x158>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f04f 31ff 	mov.w	r1, #4294967295
 800301c:	4618      	mov	r0, r3
 800301e:	f004 fc6f 	bl	8007900 <osSemaphoreWait>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1f5      	bne.n	8003014 <StartDefaultTask+0x8>
	  {

		  uint8_t buf[30];
		  uint16_t presentPos[3];
		  for(int i = 0; i < 3; i++){
 8003028:	2300      	movs	r3, #0
 800302a:	637b      	str	r3, [r7, #52]	; 0x34
 800302c:	e02a      	b.n	8003084 <StartDefaultTask+0x78>
			  memset(buf,0,sizeof(buf));
 800302e:	f107 0310 	add.w	r3, r7, #16
 8003032:	221e      	movs	r2, #30
 8003034:	2100      	movs	r1, #0
 8003036:	4618      	mov	r0, r3
 8003038:	f007 fbf9 	bl	800a82e <memset>
			  presentPos[i]=getPresentPosition(i);
 800303c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800303e:	b2db      	uxtb	r3, r3
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff fbb3 	bl	80027ac <getPresentPosition>
 8003046:	4603      	mov	r3, r0
 8003048:	461a      	mov	r2, r3
 800304a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	3338      	adds	r3, #56	; 0x38
 8003050:	443b      	add	r3, r7
 8003052:	f823 2c30 	strh.w	r2, [r3, #-48]
			  sprintf((char*)buf, "ID %d's Position : %d\r\n", i, presentPos[i]);
 8003056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	3338      	adds	r3, #56	; 0x38
 800305c:	443b      	add	r3, r7
 800305e:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8003062:	f107 0010 	add.w	r0, r7, #16
 8003066:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003068:	493f      	ldr	r1, [pc, #252]	; (8003168 <StartDefaultTask+0x15c>)
 800306a:	f008 f9ef 	bl	800b44c <siprintf>
			  HAL_UART_Transmit(&huart3, buf, sizeof(buf), 1000);
 800306e:	f107 0110 	add.w	r1, r7, #16
 8003072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003076:	221e      	movs	r2, #30
 8003078:	483c      	ldr	r0, [pc, #240]	; (800316c <StartDefaultTask+0x160>)
 800307a:	f003 f910 	bl	800629e <HAL_UART_Transmit>
		  for(int i = 0; i < 3; i++){
 800307e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003080:	3301      	adds	r3, #1
 8003082:	637b      	str	r3, [r7, #52]	; 0x34
 8003084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003086:	2b02      	cmp	r3, #2
 8003088:	ddd1      	ble.n	800302e <StartDefaultTask+0x22>
		  }
		  double* tempTheta = ConversionFromServo(presentPos[0], presentPos[1], presentPos[2]);
 800308a:	893b      	ldrh	r3, [r7, #8]
 800308c:	8979      	ldrh	r1, [r7, #10]
 800308e:	89ba      	ldrh	r2, [r7, #12]
 8003090:	4618      	mov	r0, r3
 8003092:	f7fd ffc1 	bl	8001018 <ConversionFromServo>
 8003096:	6338      	str	r0, [r7, #48]	; 0x30
		  forward(tempTheta[0],tempTheta[1],tempTheta[2]);
 8003098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309a:	ed93 7b00 	vldr	d7, [r3]
 800309e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a0:	3308      	adds	r3, #8
 80030a2:	ed93 6b00 	vldr	d6, [r3]
 80030a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a8:	3310      	adds	r3, #16
 80030aa:	ed93 5b00 	vldr	d5, [r3]
 80030ae:	eeb0 2a45 	vmov.f32	s4, s10
 80030b2:	eef0 2a65 	vmov.f32	s5, s11
 80030b6:	eeb0 1a46 	vmov.f32	s2, s12
 80030ba:	eef0 1a66 	vmov.f32	s3, s13
 80030be:	eeb0 0a47 	vmov.f32	s0, s14
 80030c2:	eef0 0a67 	vmov.f32	s1, s15
 80030c6:	f7fe fb0f 	bl	80016e8 <forward>
		  memset(buf,0,sizeof(buf));
 80030ca:	f107 0310 	add.w	r3, r7, #16
 80030ce:	221e      	movs	r2, #30
 80030d0:	2100      	movs	r1, #0
 80030d2:	4618      	mov	r0, r3
 80030d4:	f007 fbab 	bl	800a82e <memset>
		  sprintf((char*)buf, "Coordinate X : %lf\r\n", coord[0]);
 80030d8:	4b25      	ldr	r3, [pc, #148]	; (8003170 <StartDefaultTask+0x164>)
 80030da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030de:	f107 0010 	add.w	r0, r7, #16
 80030e2:	4924      	ldr	r1, [pc, #144]	; (8003174 <StartDefaultTask+0x168>)
 80030e4:	f008 f9b2 	bl	800b44c <siprintf>
		  HAL_UART_Transmit(&huart3, buf, sizeof(buf), 1000);
 80030e8:	f107 0110 	add.w	r1, r7, #16
 80030ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030f0:	221e      	movs	r2, #30
 80030f2:	481e      	ldr	r0, [pc, #120]	; (800316c <StartDefaultTask+0x160>)
 80030f4:	f003 f8d3 	bl	800629e <HAL_UART_Transmit>
		  memset(buf,0,sizeof(buf));
 80030f8:	f107 0310 	add.w	r3, r7, #16
 80030fc:	221e      	movs	r2, #30
 80030fe:	2100      	movs	r1, #0
 8003100:	4618      	mov	r0, r3
 8003102:	f007 fb94 	bl	800a82e <memset>
		  sprintf((char*)buf, "Coordinate Y : %lf\r\n", coord[1]);
 8003106:	4b1a      	ldr	r3, [pc, #104]	; (8003170 <StartDefaultTask+0x164>)
 8003108:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800310c:	f107 0010 	add.w	r0, r7, #16
 8003110:	4919      	ldr	r1, [pc, #100]	; (8003178 <StartDefaultTask+0x16c>)
 8003112:	f008 f99b 	bl	800b44c <siprintf>
		  HAL_UART_Transmit(&huart3, buf, sizeof(buf), 1000);
 8003116:	f107 0110 	add.w	r1, r7, #16
 800311a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800311e:	221e      	movs	r2, #30
 8003120:	4812      	ldr	r0, [pc, #72]	; (800316c <StartDefaultTask+0x160>)
 8003122:	f003 f8bc 	bl	800629e <HAL_UART_Transmit>
		  memset(buf,0,sizeof(buf));
 8003126:	f107 0310 	add.w	r3, r7, #16
 800312a:	221e      	movs	r2, #30
 800312c:	2100      	movs	r1, #0
 800312e:	4618      	mov	r0, r3
 8003130:	f007 fb7d 	bl	800a82e <memset>
		  sprintf((char*)buf, "Coordinate Z : %lf\r\n", coord[2]);
 8003134:	4b0e      	ldr	r3, [pc, #56]	; (8003170 <StartDefaultTask+0x164>)
 8003136:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800313a:	f107 0010 	add.w	r0, r7, #16
 800313e:	490f      	ldr	r1, [pc, #60]	; (800317c <StartDefaultTask+0x170>)
 8003140:	f008 f984 	bl	800b44c <siprintf>
		  HAL_UART_Transmit(&huart3, buf, sizeof(buf), 1000);
 8003144:	f107 0110 	add.w	r1, r7, #16
 8003148:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800314c:	221e      	movs	r2, #30
 800314e:	4807      	ldr	r0, [pc, #28]	; (800316c <StartDefaultTask+0x160>)
 8003150:	f003 f8a5 	bl	800629e <HAL_UART_Transmit>


		  osThreadSetPriority(defaultTaskHandle, osPriorityNormal);
 8003154:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <StartDefaultTask+0x174>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2100      	movs	r1, #0
 800315a:	4618      	mov	r0, r3
 800315c:	f004 fb67 	bl	800782e <osThreadSetPriority>
	  if(osSemaphoreWait(ReadPosSemHandle, osWaitForever) == osOK)
 8003160:	e758      	b.n	8003014 <StartDefaultTask+0x8>
 8003162:	bf00      	nop
 8003164:	200002c4 	.word	0x200002c4
 8003168:	0800eeb8 	.word	0x0800eeb8
 800316c:	2000068c 	.word	0x2000068c
 8003170:	20000280 	.word	0x20000280
 8003174:	0800eed0 	.word	0x0800eed0
 8003178:	0800eee8 	.word	0x0800eee8
 800317c:	0800ef00 	.word	0x0800ef00
 8003180:	200002b0 	.word	0x200002b0

08003184 <cal_Write_Pos_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_cal_Write_Pos_Task */
void cal_Write_Pos_Task(void const * argument)
{
 8003184:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003188:	b09b      	sub	sp, #108	; 0x6c
 800318a:	af02      	add	r7, sp, #8
 800318c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN cal_Write_Pos_Task */
  /* Infinite loop */
  for(;;)
  {
	  osEvent setEvent;
	  setEvent = osMessageGet(setQueueHandle, osWaitForever);
 800318e:	4ba7      	ldr	r3, [pc, #668]	; (800342c <cal_Write_Pos_Task+0x2a8>)
 8003190:	6819      	ldr	r1, [r3, #0]
 8003192:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003196:	f04f 32ff 	mov.w	r2, #4294967295
 800319a:	4618      	mov	r0, r3
 800319c:	f004 fc9c 	bl	8007ad8 <osMessageGet>
		if(setEvent.status == osEventMessage)
 80031a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031a2:	2b10      	cmp	r3, #16
 80031a4:	d1f3      	bne.n	800318e <cal_Write_Pos_Task+0xa>
		{
			queueMessage *msgp;
			msgp = setEvent.value.p;
 80031a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031a8:	65bb      	str	r3, [r7, #88]	; 0x58
			queueMessage msg = *(msgp);
 80031aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031ac:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80031b0:	461d      	mov	r5, r3
 80031b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031b6:	682b      	ldr	r3, [r5, #0]
 80031b8:	6023      	str	r3, [r4, #0]

			printf("X : %lf \r\n",msg.mX);
 80031ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fd f9d3 	bl	8000568 <__aeabi_f2d>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	489a      	ldr	r0, [pc, #616]	; (8003430 <cal_Write_Pos_Task+0x2ac>)
 80031c8:	f008 f838 	bl	800b23c <iprintf>
			printf("Y : %lf \r\n",msg.mY);
 80031cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fd f9ca 	bl	8000568 <__aeabi_f2d>
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	4896      	ldr	r0, [pc, #600]	; (8003434 <cal_Write_Pos_Task+0x2b0>)
 80031da:	f008 f82f 	bl	800b23c <iprintf>
			printf("Z : %lf \r\n",msg.mZ);
 80031de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fd f9c1 	bl	8000568 <__aeabi_f2d>
 80031e6:	4602      	mov	r2, r0
 80031e8:	460b      	mov	r3, r1
 80031ea:	4893      	ldr	r0, [pc, #588]	; (8003438 <cal_Write_Pos_Task+0x2b4>)
 80031ec:	f008 f826 	bl	800b23c <iprintf>
			printf("Speed : %d \r\n",msg.maxSpeed);
 80031f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031f2:	4619      	mov	r1, r3
 80031f4:	4891      	ldr	r0, [pc, #580]	; (800343c <cal_Write_Pos_Task+0x2b8>)
 80031f6:	f008 f821 	bl	800b23c <iprintf>

			setCoordinates((double)msg.mX,(double)msg.mY,(double)msg.mZ);
 80031fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7fd f9b3 	bl	8000568 <__aeabi_f2d>
 8003202:	4604      	mov	r4, r0
 8003204:	460d      	mov	r5, r1
 8003206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003208:	4618      	mov	r0, r3
 800320a:	f7fd f9ad 	bl	8000568 <__aeabi_f2d>
 800320e:	4680      	mov	r8, r0
 8003210:	4689      	mov	r9, r1
 8003212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003214:	4618      	mov	r0, r3
 8003216:	f7fd f9a7 	bl	8000568 <__aeabi_f2d>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	ec43 2b12 	vmov	d2, r2, r3
 8003222:	ec49 8b11 	vmov	d1, r8, r9
 8003226:	ec45 4b10 	vmov	d0, r4, r5
 800322a:	f7fd ff67 	bl	80010fc <setCoordinates>

			uint16_t GPBefore[3];
			memcpy(GPBefore, GP, sizeof(uint16_t)*3);
 800322e:	4a84      	ldr	r2, [pc, #528]	; (8003440 <cal_Write_Pos_Task+0x2bc>)
 8003230:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003234:	6810      	ldr	r0, [r2, #0]
 8003236:	6018      	str	r0, [r3, #0]
 8003238:	8892      	ldrh	r2, [r2, #4]
 800323a:	809a      	strh	r2, [r3, #4]

			inverse();
 800323c:	f7fe f938 	bl	80014b0 <inverse>
			ServoConversion();
 8003240:	f7fd fe66 	bl	8000f10 <ServoConversion>
			uint16_t diff[3];

			diff[0]=abs(GP[0]-GPBefore[0]);
 8003244:	4b7e      	ldr	r3, [pc, #504]	; (8003440 <cal_Write_Pos_Task+0x2bc>)
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	461a      	mov	r2, r3
 800324a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	bfb8      	it	lt
 8003252:	425b      	neglt	r3, r3
 8003254:	b29b      	uxth	r3, r3
 8003256:	84bb      	strh	r3, [r7, #36]	; 0x24
			diff[1]=abs(GP[1]-GPBefore[1]);
 8003258:	4b79      	ldr	r3, [pc, #484]	; (8003440 <cal_Write_Pos_Task+0x2bc>)
 800325a:	885b      	ldrh	r3, [r3, #2]
 800325c:	461a      	mov	r2, r3
 800325e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	bfb8      	it	lt
 8003266:	425b      	neglt	r3, r3
 8003268:	b29b      	uxth	r3, r3
 800326a:	84fb      	strh	r3, [r7, #38]	; 0x26
			diff[2]=abs(GP[2]-GPBefore[2]);
 800326c:	4b74      	ldr	r3, [pc, #464]	; (8003440 <cal_Write_Pos_Task+0x2bc>)
 800326e:	889b      	ldrh	r3, [r3, #4]
 8003270:	461a      	mov	r2, r3
 8003272:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	bfb8      	it	lt
 800327a:	425b      	neglt	r3, r3
 800327c:	b29b      	uxth	r3, r3
 800327e:	853b      	strh	r3, [r7, #40]	; 0x28

			uint16_t max = (diff[0] > diff[1] && diff[0] > diff[2]) ? diff[0] : (diff[1] > diff[2]) ? diff[1] : diff[2];
 8003280:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003282:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003284:	429a      	cmp	r2, r3
 8003286:	d905      	bls.n	8003294 <cal_Write_Pos_Task+0x110>
 8003288:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800328a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800328c:	429a      	cmp	r2, r3
 800328e:	d901      	bls.n	8003294 <cal_Write_Pos_Task+0x110>
 8003290:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003292:	e005      	b.n	80032a0 <cal_Write_Pos_Task+0x11c>
 8003294:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003296:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003298:	4293      	cmp	r3, r2
 800329a:	bf38      	it	cc
 800329c:	4613      	movcc	r3, r2
 800329e:	b29b      	uxth	r3, r3
 80032a0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

			double speed[3]={100,100,100};
 80032a4:	4b67      	ldr	r3, [pc, #412]	; (8003444 <cal_Write_Pos_Task+0x2c0>)
 80032a6:	f107 0408 	add.w	r4, r7, #8
 80032aa:	461d      	mov	r5, r3
 80032ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80032b4:	e884 0003 	stmia.w	r4, {r0, r1}

			if(max!=0){
 80032b8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 808c 	beq.w	80033da <cal_Write_Pos_Task+0x256>
				speed[0]=((double)diff[0]/max)*msg.maxSpeed;
 80032c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7fd f92d 	bl	8000524 <__aeabi_ui2d>
 80032ca:	4604      	mov	r4, r0
 80032cc:	460d      	mov	r5, r1
 80032ce:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fd f936 	bl	8000544 <__aeabi_i2d>
 80032d8:	4602      	mov	r2, r0
 80032da:	460b      	mov	r3, r1
 80032dc:	4620      	mov	r0, r4
 80032de:	4629      	mov	r1, r5
 80032e0:	f7fd fac4 	bl	800086c <__aeabi_ddiv>
 80032e4:	4602      	mov	r2, r0
 80032e6:	460b      	mov	r3, r1
 80032e8:	4614      	mov	r4, r2
 80032ea:	461d      	mov	r5, r3
 80032ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fd f928 	bl	8000544 <__aeabi_i2d>
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	4620      	mov	r0, r4
 80032fa:	4629      	mov	r1, r5
 80032fc:	f7fd f98c 	bl	8000618 <__aeabi_dmul>
 8003300:	4602      	mov	r2, r0
 8003302:	460b      	mov	r3, r1
 8003304:	e9c7 2302 	strd	r2, r3, [r7, #8]
				speed[1]=((double)diff[1]/max)*msg.maxSpeed;
 8003308:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800330a:	4618      	mov	r0, r3
 800330c:	f7fd f90a 	bl	8000524 <__aeabi_ui2d>
 8003310:	4604      	mov	r4, r0
 8003312:	460d      	mov	r5, r1
 8003314:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003318:	4618      	mov	r0, r3
 800331a:	f7fd f913 	bl	8000544 <__aeabi_i2d>
 800331e:	4602      	mov	r2, r0
 8003320:	460b      	mov	r3, r1
 8003322:	4620      	mov	r0, r4
 8003324:	4629      	mov	r1, r5
 8003326:	f7fd faa1 	bl	800086c <__aeabi_ddiv>
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
 800332e:	4614      	mov	r4, r2
 8003330:	461d      	mov	r5, r3
 8003332:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003334:	4618      	mov	r0, r3
 8003336:	f7fd f905 	bl	8000544 <__aeabi_i2d>
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	4620      	mov	r0, r4
 8003340:	4629      	mov	r1, r5
 8003342:	f7fd f969 	bl	8000618 <__aeabi_dmul>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	e9c7 2304 	strd	r2, r3, [r7, #16]
				speed[2]=((double)diff[2]/max)*msg.maxSpeed;
 800334e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003350:	4618      	mov	r0, r3
 8003352:	f7fd f8e7 	bl	8000524 <__aeabi_ui2d>
 8003356:	4604      	mov	r4, r0
 8003358:	460d      	mov	r5, r1
 800335a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800335e:	4618      	mov	r0, r3
 8003360:	f7fd f8f0 	bl	8000544 <__aeabi_i2d>
 8003364:	4602      	mov	r2, r0
 8003366:	460b      	mov	r3, r1
 8003368:	4620      	mov	r0, r4
 800336a:	4629      	mov	r1, r5
 800336c:	f7fd fa7e 	bl	800086c <__aeabi_ddiv>
 8003370:	4602      	mov	r2, r0
 8003372:	460b      	mov	r3, r1
 8003374:	4614      	mov	r4, r2
 8003376:	461d      	mov	r5, r3
 8003378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800337a:	4618      	mov	r0, r3
 800337c:	f7fd f8e2 	bl	8000544 <__aeabi_i2d>
 8003380:	4602      	mov	r2, r0
 8003382:	460b      	mov	r3, r1
 8003384:	4620      	mov	r0, r4
 8003386:	4629      	mov	r1, r5
 8003388:	f7fd f946 	bl	8000618 <__aeabi_dmul>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	e9c7 2306 	strd	r2, r3, [r7, #24]
				for(int i=0; i<3; i++){
 8003394:	2300      	movs	r3, #0
 8003396:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003398:	e01c      	b.n	80033d4 <cal_Write_Pos_Task+0x250>
					if(speed[i]<1) speed[i]=10;
 800339a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	3360      	adds	r3, #96	; 0x60
 80033a0:	443b      	add	r3, r7
 80033a2:	3b58      	subs	r3, #88	; 0x58
 80033a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033a8:	f04f 0200 	mov.w	r2, #0
 80033ac:	4b26      	ldr	r3, [pc, #152]	; (8003448 <cal_Write_Pos_Task+0x2c4>)
 80033ae:	f7fd fba5 	bl	8000afc <__aeabi_dcmplt>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00a      	beq.n	80033ce <cal_Write_Pos_Task+0x24a>
 80033b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	3360      	adds	r3, #96	; 0x60
 80033be:	443b      	add	r3, r7
 80033c0:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	4b20      	ldr	r3, [pc, #128]	; (800344c <cal_Write_Pos_Task+0x2c8>)
 80033ca:	e9c1 2300 	strd	r2, r3, [r1]
				for(int i=0; i<3; i++){
 80033ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033d0:	3301      	adds	r3, #1
 80033d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	dddf      	ble.n	800339a <cal_Write_Pos_Task+0x216>
				}
			}

			syncWriteGoalPosition(GP[0],(uint16_t)speed[0],GP[1],(uint16_t)speed[1],GP[2],(uint16_t)speed[2]);
 80033da:	4b19      	ldr	r3, [pc, #100]	; (8003440 <cal_Write_Pos_Task+0x2bc>)
 80033dc:	881d      	ldrh	r5, [r3, #0]
 80033de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033e2:	4610      	mov	r0, r2
 80033e4:	4619      	mov	r1, r3
 80033e6:	f7fd fbef 	bl	8000bc8 <__aeabi_d2uiz>
 80033ea:	4603      	mov	r3, r0
 80033ec:	b29e      	uxth	r6, r3
 80033ee:	4b14      	ldr	r3, [pc, #80]	; (8003440 <cal_Write_Pos_Task+0x2bc>)
 80033f0:	f8b3 8002 	ldrh.w	r8, [r3, #2]
 80033f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80033f8:	4610      	mov	r0, r2
 80033fa:	4619      	mov	r1, r3
 80033fc:	f7fd fbe4 	bl	8000bc8 <__aeabi_d2uiz>
 8003400:	4603      	mov	r3, r0
 8003402:	fa1f f983 	uxth.w	r9, r3
 8003406:	4b0e      	ldr	r3, [pc, #56]	; (8003440 <cal_Write_Pos_Task+0x2bc>)
 8003408:	889c      	ldrh	r4, [r3, #4]
 800340a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800340e:	4610      	mov	r0, r2
 8003410:	4619      	mov	r1, r3
 8003412:	f7fd fbd9 	bl	8000bc8 <__aeabi_d2uiz>
 8003416:	4603      	mov	r3, r0
 8003418:	b29b      	uxth	r3, r3
 800341a:	9301      	str	r3, [sp, #4]
 800341c:	9400      	str	r4, [sp, #0]
 800341e:	464b      	mov	r3, r9
 8003420:	4642      	mov	r2, r8
 8003422:	4631      	mov	r1, r6
 8003424:	4628      	mov	r0, r5
 8003426:	f7ff f8ab 	bl	8002580 <syncWriteGoalPosition>
  {
 800342a:	e6b0      	b.n	800318e <cal_Write_Pos_Task+0xa>
 800342c:	200002bc 	.word	0x200002bc
 8003430:	0800ef18 	.word	0x0800ef18
 8003434:	0800ef24 	.word	0x0800ef24
 8003438:	0800ef30 	.word	0x0800ef30
 800343c:	0800ef3c 	.word	0x0800ef3c
 8003440:	20000278 	.word	0x20000278
 8003444:	0800ef50 	.word	0x0800ef50
 8003448:	3ff00000 	.word	0x3ff00000
 800344c:	40240000 	.word	0x40240000

08003450 <cmd_Handle_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_cmd_Handle_Task */
void cmd_Handle_Task(void const * argument)
{
 8003450:	b5b0      	push	{r4, r5, r7, lr}
 8003452:	b090      	sub	sp, #64	; 0x40
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN cmd_Handle_Task */
  /* Infinite loop */
  for(;;)
  {
	  osEvent setEvent;
	  setEvent = osMessageGet(cmdQueueHandle, osWaitForever);
 8003458:	4b1b      	ldr	r3, [pc, #108]	; (80034c8 <cmd_Handle_Task+0x78>)
 800345a:	6819      	ldr	r1, [r3, #0]
 800345c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003460:	f04f 32ff 	mov.w	r2, #4294967295
 8003464:	4618      	mov	r0, r3
 8003466:	f004 fb37 	bl	8007ad8 <osMessageGet>
		if(setEvent.status == osEventMessage)
 800346a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800346c:	2b10      	cmp	r3, #16
 800346e:	d1f3      	bne.n	8003458 <cmd_Handle_Task+0x8>
		{


			queueMessage msg;
			char cmd[20]={0,};
 8003470:	2300      	movs	r3, #0
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	f107 0310 	add.w	r3, r7, #16
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	60da      	str	r2, [r3, #12]
			memcpy(cmd, setEvent.value.p, 20);
 8003482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003484:	f107 040c 	add.w	r4, r7, #12
 8003488:	461d      	mov	r5, r3
 800348a:	6828      	ldr	r0, [r5, #0]
 800348c:	6869      	ldr	r1, [r5, #4]
 800348e:	68aa      	ldr	r2, [r5, #8]
 8003490:	68eb      	ldr	r3, [r5, #12]
 8003492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003494:	6928      	ldr	r0, [r5, #16]
 8003496:	6020      	str	r0, [r4, #0]
			if(cmd_handler(cmd, &msg)){
 8003498:	f107 0220 	add.w	r2, r7, #32
 800349c:	f107 030c 	add.w	r3, r7, #12
 80034a0:	4611      	mov	r1, r2
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fe fec0 	bl	8002228 <cmd_handler>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0d4      	beq.n	8003458 <cmd_Handle_Task+0x8>
				osSemaphoreRelease(ReadPosSemHandle);
 80034ae:	4b07      	ldr	r3, [pc, #28]	; (80034cc <cmd_Handle_Task+0x7c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f004 fa72 	bl	800799c <osSemaphoreRelease>
				osThreadSetPriority(defaultTaskHandle, osPriorityAboveNormal);
 80034b8:	4b05      	ldr	r3, [pc, #20]	; (80034d0 <cmd_Handle_Task+0x80>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2101      	movs	r1, #1
 80034be:	4618      	mov	r0, r3
 80034c0:	f004 f9b5 	bl	800782e <osThreadSetPriority>
  {
 80034c4:	e7c8      	b.n	8003458 <cmd_Handle_Task+0x8>
 80034c6:	bf00      	nop
 80034c8:	200002c0 	.word	0x200002c0
 80034cc:	200002c4 	.word	0x200002c4
 80034d0:	200002b0 	.word	0x200002b0

080034d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08a      	sub	sp, #40	; 0x28
 80034d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034da:	f107 0314 	add.w	r3, r7, #20
 80034de:	2200      	movs	r2, #0
 80034e0:	601a      	str	r2, [r3, #0]
 80034e2:	605a      	str	r2, [r3, #4]
 80034e4:	609a      	str	r2, [r3, #8]
 80034e6:	60da      	str	r2, [r3, #12]
 80034e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ea:	2300      	movs	r3, #0
 80034ec:	613b      	str	r3, [r7, #16]
 80034ee:	4b40      	ldr	r3, [pc, #256]	; (80035f0 <MX_GPIO_Init+0x11c>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	4a3f      	ldr	r2, [pc, #252]	; (80035f0 <MX_GPIO_Init+0x11c>)
 80034f4:	f043 0304 	orr.w	r3, r3, #4
 80034f8:	6313      	str	r3, [r2, #48]	; 0x30
 80034fa:	4b3d      	ldr	r3, [pc, #244]	; (80035f0 <MX_GPIO_Init+0x11c>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	613b      	str	r3, [r7, #16]
 8003504:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	4b39      	ldr	r3, [pc, #228]	; (80035f0 <MX_GPIO_Init+0x11c>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	4a38      	ldr	r2, [pc, #224]	; (80035f0 <MX_GPIO_Init+0x11c>)
 8003510:	f043 0301 	orr.w	r3, r3, #1
 8003514:	6313      	str	r3, [r2, #48]	; 0x30
 8003516:	4b36      	ldr	r3, [pc, #216]	; (80035f0 <MX_GPIO_Init+0x11c>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	60fb      	str	r3, [r7, #12]
 8003520:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	60bb      	str	r3, [r7, #8]
 8003526:	4b32      	ldr	r3, [pc, #200]	; (80035f0 <MX_GPIO_Init+0x11c>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	4a31      	ldr	r2, [pc, #196]	; (80035f0 <MX_GPIO_Init+0x11c>)
 800352c:	f043 0302 	orr.w	r3, r3, #2
 8003530:	6313      	str	r3, [r2, #48]	; 0x30
 8003532:	4b2f      	ldr	r3, [pc, #188]	; (80035f0 <MX_GPIO_Init+0x11c>)
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	60bb      	str	r3, [r7, #8]
 800353c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800353e:	2300      	movs	r3, #0
 8003540:	607b      	str	r3, [r7, #4]
 8003542:	4b2b      	ldr	r3, [pc, #172]	; (80035f0 <MX_GPIO_Init+0x11c>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003546:	4a2a      	ldr	r2, [pc, #168]	; (80035f0 <MX_GPIO_Init+0x11c>)
 8003548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800354c:	6313      	str	r3, [r2, #48]	; 0x30
 800354e:	4b28      	ldr	r3, [pc, #160]	; (80035f0 <MX_GPIO_Init+0x11c>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003556:	607b      	str	r3, [r7, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	603b      	str	r3, [r7, #0]
 800355e:	4b24      	ldr	r3, [pc, #144]	; (80035f0 <MX_GPIO_Init+0x11c>)
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	4a23      	ldr	r2, [pc, #140]	; (80035f0 <MX_GPIO_Init+0x11c>)
 8003564:	f043 0308 	orr.w	r3, r3, #8
 8003568:	6313      	str	r3, [r2, #48]	; 0x30
 800356a:	4b21      	ldr	r3, [pc, #132]	; (80035f0 <MX_GPIO_Init+0x11c>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	603b      	str	r3, [r7, #0]
 8003574:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8003576:	2200      	movs	r2, #0
 8003578:	2101      	movs	r1, #1
 800357a:	481e      	ldr	r0, [pc, #120]	; (80035f4 <MX_GPIO_Init+0x120>)
 800357c:	f001 fbe6 	bl	8004d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_SET);
 8003580:	2201      	movs	r2, #1
 8003582:	2101      	movs	r1, #1
 8003584:	481c      	ldr	r0, [pc, #112]	; (80035f8 <MX_GPIO_Init+0x124>)
 8003586:	f001 fbe1 	bl	8004d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Direction_GPIO_Port, Direction_Pin, GPIO_PIN_RESET);
 800358a:	2200      	movs	r2, #0
 800358c:	2180      	movs	r1, #128	; 0x80
 800358e:	481b      	ldr	r0, [pc, #108]	; (80035fc <MX_GPIO_Init+0x128>)
 8003590:	f001 fbdc 	bl	8004d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003594:	2301      	movs	r3, #1
 8003596:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003598:	2301      	movs	r3, #1
 800359a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359c:	2300      	movs	r3, #0
 800359e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a0:	2300      	movs	r3, #0
 80035a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035a4:	f107 0314 	add.w	r3, r7, #20
 80035a8:	4619      	mov	r1, r3
 80035aa:	4812      	ldr	r0, [pc, #72]	; (80035f4 <MX_GPIO_Init+0x120>)
 80035ac:	f001 fa22 	bl	80049f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80035b0:	2301      	movs	r3, #1
 80035b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035b4:	2301      	movs	r3, #1
 80035b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b8:	2300      	movs	r3, #0
 80035ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035bc:	2300      	movs	r3, #0
 80035be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80035c0:	f107 0314 	add.w	r3, r7, #20
 80035c4:	4619      	mov	r1, r3
 80035c6:	480c      	ldr	r0, [pc, #48]	; (80035f8 <MX_GPIO_Init+0x124>)
 80035c8:	f001 fa14 	bl	80049f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Direction_Pin;
 80035cc:	2380      	movs	r3, #128	; 0x80
 80035ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80035d0:	2311      	movs	r3, #17
 80035d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d4:	2300      	movs	r3, #0
 80035d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d8:	2300      	movs	r3, #0
 80035da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Direction_GPIO_Port, &GPIO_InitStruct);
 80035dc:	f107 0314 	add.w	r3, r7, #20
 80035e0:	4619      	mov	r1, r3
 80035e2:	4806      	ldr	r0, [pc, #24]	; (80035fc <MX_GPIO_Init+0x128>)
 80035e4:	f001 fa06 	bl	80049f4 <HAL_GPIO_Init>

}
 80035e8:	bf00      	nop
 80035ea:	3728      	adds	r7, #40	; 0x28
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40023800 	.word	0x40023800
 80035f4:	40020400 	.word	0x40020400
 80035f8:	40021800 	.word	0x40021800
 80035fc:	40020c00 	.word	0x40020c00

08003600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003604:	f000 fcd0 	bl	8003fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003608:	f000 f812 	bl	8003630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800360c:	f7ff ff62 	bl	80034d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8003610:	f7fe fef0 	bl	80023f4 <MX_DMA_Init>
  MX_RTC_Init();
 8003614:	f000 f896 	bl	8003744 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8003618:	f000 fb68 	bl	8003cec <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800361c:	f000 fb90 	bl	8003d40 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  Ringbuf_Init();
 8003620:	f000 fa66 	bl	8003af0 <Ringbuf_Init>
  //HAL_UART_Receive_IT(&huart3, &rx3_data, 1);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8003624:	f7ff fc6a 	bl	8002efc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003628:	f004 f8ae 	bl	8007788 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800362c:	e7fe      	b.n	800362c <main+0x2c>
	...

08003630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b094      	sub	sp, #80	; 0x50
 8003634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003636:	f107 0320 	add.w	r3, r7, #32
 800363a:	2230      	movs	r2, #48	; 0x30
 800363c:	2100      	movs	r1, #0
 800363e:	4618      	mov	r0, r3
 8003640:	f007 f8f5 	bl	800a82e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003644:	f107 030c 	add.w	r3, r7, #12
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	605a      	str	r2, [r3, #4]
 800364e:	609a      	str	r2, [r3, #8]
 8003650:	60da      	str	r2, [r3, #12]
 8003652:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003654:	2300      	movs	r3, #0
 8003656:	60bb      	str	r3, [r7, #8]
 8003658:	4b2c      	ldr	r3, [pc, #176]	; (800370c <SystemClock_Config+0xdc>)
 800365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365c:	4a2b      	ldr	r2, [pc, #172]	; (800370c <SystemClock_Config+0xdc>)
 800365e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003662:	6413      	str	r3, [r2, #64]	; 0x40
 8003664:	4b29      	ldr	r3, [pc, #164]	; (800370c <SystemClock_Config+0xdc>)
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800366c:	60bb      	str	r3, [r7, #8]
 800366e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003670:	2300      	movs	r3, #0
 8003672:	607b      	str	r3, [r7, #4]
 8003674:	4b26      	ldr	r3, [pc, #152]	; (8003710 <SystemClock_Config+0xe0>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a25      	ldr	r2, [pc, #148]	; (8003710 <SystemClock_Config+0xe0>)
 800367a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800367e:	6013      	str	r3, [r2, #0]
 8003680:	4b23      	ldr	r3, [pc, #140]	; (8003710 <SystemClock_Config+0xe0>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003688:	607b      	str	r3, [r7, #4]
 800368a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800368c:	2306      	movs	r3, #6
 800368e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003690:	2301      	movs	r3, #1
 8003692:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003694:	2301      	movs	r3, #1
 8003696:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003698:	2310      	movs	r3, #16
 800369a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800369c:	2302      	movs	r3, #2
 800369e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80036a0:	2300      	movs	r3, #0
 80036a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80036a4:	2308      	movs	r3, #8
 80036a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80036a8:	23b4      	movs	r3, #180	; 0xb4
 80036aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80036ac:	2302      	movs	r3, #2
 80036ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80036b0:	2304      	movs	r3, #4
 80036b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036b4:	f107 0320 	add.w	r3, r7, #32
 80036b8:	4618      	mov	r0, r3
 80036ba:	f001 fbb1 	bl	8004e20 <HAL_RCC_OscConfig>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80036c4:	f000 f838 	bl	8003738 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80036c8:	f001 fb5a 	bl	8004d80 <HAL_PWREx_EnableOverDrive>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80036d2:	f000 f831 	bl	8003738 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036d6:	230f      	movs	r3, #15
 80036d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036da:	2302      	movs	r3, #2
 80036dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036de:	2300      	movs	r3, #0
 80036e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80036e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80036e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80036e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80036ee:	f107 030c 	add.w	r3, r7, #12
 80036f2:	2105      	movs	r1, #5
 80036f4:	4618      	mov	r0, r3
 80036f6:	f001 fe0b 	bl	8005310 <HAL_RCC_ClockConfig>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003700:	f000 f81a 	bl	8003738 <Error_Handler>
  }
}
 8003704:	bf00      	nop
 8003706:	3750      	adds	r7, #80	; 0x50
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40023800 	.word	0x40023800
 8003710:	40007000 	.word	0x40007000

08003714 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a04      	ldr	r2, [pc, #16]	; (8003734 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d101      	bne.n	800372a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003726:	f000 fc61 	bl	8003fec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800372a:	bf00      	nop
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40000800 	.word	0x40000800

08003738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800373c:	b672      	cpsid	i
}
 800373e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003740:	e7fe      	b.n	8003740 <Error_Handler+0x8>
	...

08003744 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003748:	4b0f      	ldr	r3, [pc, #60]	; (8003788 <MX_RTC_Init+0x44>)
 800374a:	4a10      	ldr	r2, [pc, #64]	; (800378c <MX_RTC_Init+0x48>)
 800374c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800374e:	4b0e      	ldr	r3, [pc, #56]	; (8003788 <MX_RTC_Init+0x44>)
 8003750:	2200      	movs	r2, #0
 8003752:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003754:	4b0c      	ldr	r3, [pc, #48]	; (8003788 <MX_RTC_Init+0x44>)
 8003756:	227f      	movs	r2, #127	; 0x7f
 8003758:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800375a:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <MX_RTC_Init+0x44>)
 800375c:	22ff      	movs	r2, #255	; 0xff
 800375e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003760:	4b09      	ldr	r3, [pc, #36]	; (8003788 <MX_RTC_Init+0x44>)
 8003762:	2200      	movs	r2, #0
 8003764:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003766:	4b08      	ldr	r3, [pc, #32]	; (8003788 <MX_RTC_Init+0x44>)
 8003768:	2200      	movs	r2, #0
 800376a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800376c:	4b06      	ldr	r3, [pc, #24]	; (8003788 <MX_RTC_Init+0x44>)
 800376e:	2200      	movs	r2, #0
 8003770:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003772:	4805      	ldr	r0, [pc, #20]	; (8003788 <MX_RTC_Init+0x44>)
 8003774:	f002 f99e 	bl	8005ab4 <HAL_RTC_Init>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800377e:	f7ff ffdb 	bl	8003738 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003782:	bf00      	nop
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	2000057c 	.word	0x2000057c
 800378c:	40002800 	.word	0x40002800

08003790 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08e      	sub	sp, #56	; 0x38
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003798:	f107 0308 	add.w	r3, r7, #8
 800379c:	2230      	movs	r2, #48	; 0x30
 800379e:	2100      	movs	r1, #0
 80037a0:	4618      	mov	r0, r3
 80037a2:	f007 f844 	bl	800a82e <memset>
  if(rtcHandle->Instance==RTC)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a0c      	ldr	r2, [pc, #48]	; (80037dc <HAL_RTC_MspInit+0x4c>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d111      	bne.n	80037d4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80037b0:	2320      	movs	r3, #32
 80037b2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80037b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037b8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037ba:	f107 0308 	add.w	r3, r7, #8
 80037be:	4618      	mov	r0, r3
 80037c0:	f001 ffb8 	bl	8005734 <HAL_RCCEx_PeriphCLKConfig>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80037ca:	f7ff ffb5 	bl	8003738 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80037ce:	4b04      	ldr	r3, [pc, #16]	; (80037e0 <HAL_RTC_MspInit+0x50>)
 80037d0:	2201      	movs	r2, #1
 80037d2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80037d4:	bf00      	nop
 80037d6:	3738      	adds	r7, #56	; 0x38
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	40002800 	.word	0x40002800
 80037e0:	42470e3c 	.word	0x42470e3c

080037e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ea:	2300      	movs	r3, #0
 80037ec:	607b      	str	r3, [r7, #4]
 80037ee:	4b12      	ldr	r3, [pc, #72]	; (8003838 <HAL_MspInit+0x54>)
 80037f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f2:	4a11      	ldr	r2, [pc, #68]	; (8003838 <HAL_MspInit+0x54>)
 80037f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037f8:	6453      	str	r3, [r2, #68]	; 0x44
 80037fa:	4b0f      	ldr	r3, [pc, #60]	; (8003838 <HAL_MspInit+0x54>)
 80037fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003802:	607b      	str	r3, [r7, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003806:	2300      	movs	r3, #0
 8003808:	603b      	str	r3, [r7, #0]
 800380a:	4b0b      	ldr	r3, [pc, #44]	; (8003838 <HAL_MspInit+0x54>)
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	4a0a      	ldr	r2, [pc, #40]	; (8003838 <HAL_MspInit+0x54>)
 8003810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003814:	6413      	str	r3, [r2, #64]	; 0x40
 8003816:	4b08      	ldr	r3, [pc, #32]	; (8003838 <HAL_MspInit+0x54>)
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800381e:	603b      	str	r3, [r7, #0]
 8003820:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003822:	2200      	movs	r2, #0
 8003824:	210f      	movs	r1, #15
 8003826:	f06f 0001 	mvn.w	r0, #1
 800382a:	f000 fcb7 	bl	800419c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800382e:	bf00      	nop
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	40023800 	.word	0x40023800

0800383c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b08c      	sub	sp, #48	; 0x30
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003844:	2300      	movs	r3, #0
 8003846:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003848:	2300      	movs	r3, #0
 800384a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 800384c:	2200      	movs	r2, #0
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	201e      	movs	r0, #30
 8003852:	f000 fca3 	bl	800419c <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003856:	201e      	movs	r0, #30
 8003858:	f000 fcbc 	bl	80041d4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800385c:	2300      	movs	r3, #0
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	4b1f      	ldr	r3, [pc, #124]	; (80038e0 <HAL_InitTick+0xa4>)
 8003862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003864:	4a1e      	ldr	r2, [pc, #120]	; (80038e0 <HAL_InitTick+0xa4>)
 8003866:	f043 0304 	orr.w	r3, r3, #4
 800386a:	6413      	str	r3, [r2, #64]	; 0x40
 800386c:	4b1c      	ldr	r3, [pc, #112]	; (80038e0 <HAL_InitTick+0xa4>)
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	60fb      	str	r3, [r7, #12]
 8003876:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003878:	f107 0210 	add.w	r2, r7, #16
 800387c:	f107 0314 	add.w	r3, r7, #20
 8003880:	4611      	mov	r1, r2
 8003882:	4618      	mov	r0, r3
 8003884:	f001 ff24 	bl	80056d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003888:	f001 fefa 	bl	8005680 <HAL_RCC_GetPCLK1Freq>
 800388c:	4603      	mov	r3, r0
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003894:	4a13      	ldr	r2, [pc, #76]	; (80038e4 <HAL_InitTick+0xa8>)
 8003896:	fba2 2303 	umull	r2, r3, r2, r3
 800389a:	0c9b      	lsrs	r3, r3, #18
 800389c:	3b01      	subs	r3, #1
 800389e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80038a0:	4b11      	ldr	r3, [pc, #68]	; (80038e8 <HAL_InitTick+0xac>)
 80038a2:	4a12      	ldr	r2, [pc, #72]	; (80038ec <HAL_InitTick+0xb0>)
 80038a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80038a6:	4b10      	ldr	r3, [pc, #64]	; (80038e8 <HAL_InitTick+0xac>)
 80038a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80038ac:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80038ae:	4a0e      	ldr	r2, [pc, #56]	; (80038e8 <HAL_InitTick+0xac>)
 80038b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80038b4:	4b0c      	ldr	r3, [pc, #48]	; (80038e8 <HAL_InitTick+0xac>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038ba:	4b0b      	ldr	r3, [pc, #44]	; (80038e8 <HAL_InitTick+0xac>)
 80038bc:	2200      	movs	r2, #0
 80038be:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80038c0:	4809      	ldr	r0, [pc, #36]	; (80038e8 <HAL_InitTick+0xac>)
 80038c2:	f002 f9f1 	bl	8005ca8 <HAL_TIM_Base_Init>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d104      	bne.n	80038d6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80038cc:	4806      	ldr	r0, [pc, #24]	; (80038e8 <HAL_InitTick+0xac>)
 80038ce:	f002 fa45 	bl	8005d5c <HAL_TIM_Base_Start_IT>
 80038d2:	4603      	mov	r3, r0
 80038d4:	e000      	b.n	80038d8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3730      	adds	r7, #48	; 0x30
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40023800 	.word	0x40023800
 80038e4:	431bde83 	.word	0x431bde83
 80038e8:	2000059c 	.word	0x2000059c
 80038ec:	40000800 	.word	0x40000800

080038f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80038f4:	e7fe      	b.n	80038f4 <NMI_Handler+0x4>

080038f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038f6:	b480      	push	{r7}
 80038f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038fa:	e7fe      	b.n	80038fa <HardFault_Handler+0x4>

080038fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003900:	e7fe      	b.n	8003900 <MemManage_Handler+0x4>

08003902 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003902:	b480      	push	{r7}
 8003904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003906:	e7fe      	b.n	8003906 <BusFault_Handler+0x4>

08003908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800390c:	e7fe      	b.n	800390c <UsageFault_Handler+0x4>

0800390e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800390e:	b480      	push	{r7}
 8003910:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003912:	bf00      	nop
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003920:	4802      	ldr	r0, [pc, #8]	; (800392c <DMA1_Stream5_IRQHandler+0x10>)
 8003922:	f000 fdfd 	bl	8004520 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003926:	bf00      	nop
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	200006d0 	.word	0x200006d0

08003930 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003934:	4804      	ldr	r0, [pc, #16]	; (8003948 <TIM4_IRQHandler+0x18>)
 8003936:	f002 fa81 	bl	8005e3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  TIMEOUT--;
 800393a:	4b04      	ldr	r3, [pc, #16]	; (800394c <TIM4_IRQHandler+0x1c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	3b01      	subs	r3, #1
 8003940:	4a02      	ldr	r2, [pc, #8]	; (800394c <TIM4_IRQHandler+0x1c>)
 8003942:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM4_IRQn 1 */
}
 8003944:	bf00      	nop
 8003946:	bd80      	pop	{r7, pc}
 8003948:	2000059c 	.word	0x2000059c
 800394c:	20000644 	.word	0x20000644

08003950 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003954:	4802      	ldr	r0, [pc, #8]	; (8003960 <USART2_IRQHandler+0x10>)
 8003956:	f002 fdc9 	bl	80064ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800395a:	bf00      	nop
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	20000648 	.word	0x20000648

08003964 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003968:	4802      	ldr	r0, [pc, #8]	; (8003974 <USART3_IRQHandler+0x10>)
 800396a:	f002 fdbf 	bl	80064ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800396e:	bf00      	nop
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	2000068c 	.word	0x2000068c

08003978 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
	return 1;
 800397c:	2301      	movs	r3, #1
}
 800397e:	4618      	mov	r0, r3
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <_kill>:

int _kill(int pid, int sig)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003992:	f006 fe1b 	bl	800a5cc <__errno>
 8003996:	4603      	mov	r3, r0
 8003998:	2216      	movs	r2, #22
 800399a:	601a      	str	r2, [r3, #0]
	return -1;
 800399c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <_exit>:

void _exit (int status)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80039b0:	f04f 31ff 	mov.w	r1, #4294967295
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7ff ffe7 	bl	8003988 <_kill>
	while (1) {}		/* Make sure we hang here */
 80039ba:	e7fe      	b.n	80039ba <_exit+0x12>

080039bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039c8:	2300      	movs	r3, #0
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	e00a      	b.n	80039e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80039ce:	f3af 8000 	nop.w
 80039d2:	4601      	mov	r1, r0
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	1c5a      	adds	r2, r3, #1
 80039d8:	60ba      	str	r2, [r7, #8]
 80039da:	b2ca      	uxtb	r2, r1
 80039dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	3301      	adds	r3, #1
 80039e2:	617b      	str	r3, [r7, #20]
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	dbf0      	blt.n	80039ce <_read+0x12>
	}

return len;
 80039ec:	687b      	ldr	r3, [r7, #4]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
	return -1;
 80039fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b083      	sub	sp, #12
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
 8003a16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a1e:	605a      	str	r2, [r3, #4]
	return 0;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <_isatty>:

int _isatty(int file)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
	return 1;
 8003a36:	2301      	movs	r3, #1
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
	return 0;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
	...

08003a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a68:	4a14      	ldr	r2, [pc, #80]	; (8003abc <_sbrk+0x5c>)
 8003a6a:	4b15      	ldr	r3, [pc, #84]	; (8003ac0 <_sbrk+0x60>)
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a74:	4b13      	ldr	r3, [pc, #76]	; (8003ac4 <_sbrk+0x64>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d102      	bne.n	8003a82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a7c:	4b11      	ldr	r3, [pc, #68]	; (8003ac4 <_sbrk+0x64>)
 8003a7e:	4a12      	ldr	r2, [pc, #72]	; (8003ac8 <_sbrk+0x68>)
 8003a80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a82:	4b10      	ldr	r3, [pc, #64]	; (8003ac4 <_sbrk+0x64>)
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4413      	add	r3, r2
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d207      	bcs.n	8003aa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a90:	f006 fd9c 	bl	800a5cc <__errno>
 8003a94:	4603      	mov	r3, r0
 8003a96:	220c      	movs	r2, #12
 8003a98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9e:	e009      	b.n	8003ab4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003aa0:	4b08      	ldr	r3, [pc, #32]	; (8003ac4 <_sbrk+0x64>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003aa6:	4b07      	ldr	r3, [pc, #28]	; (8003ac4 <_sbrk+0x64>)
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4413      	add	r3, r2
 8003aae:	4a05      	ldr	r2, [pc, #20]	; (8003ac4 <_sbrk+0x64>)
 8003ab0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3718      	adds	r7, #24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	20030000 	.word	0x20030000
 8003ac0:	00000400 	.word	0x00000400
 8003ac4:	200005e4 	.word	0x200005e4
 8003ac8:	20004498 	.word	0x20004498

08003acc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ad0:	4b06      	ldr	r3, [pc, #24]	; (8003aec <SystemInit+0x20>)
 8003ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad6:	4a05      	ldr	r2, [pc, #20]	; (8003aec <SystemInit+0x20>)
 8003ad8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003adc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ae0:	bf00      	nop
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	e000ed00 	.word	0xe000ed00

08003af0 <Ringbuf_Init>:



/* Initialize the Ring Buffer */
void Ringbuf_Init (void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
	memset(rx2_Buf, '\0', RxBuf_SIZE);
 8003af4:	2214      	movs	r2, #20
 8003af6:	2100      	movs	r1, #0
 8003af8:	4810      	ldr	r0, [pc, #64]	; (8003b3c <Ringbuf_Init+0x4c>)
 8003afa:	f006 fe98 	bl	800a82e <memset>
	memset(MainBuf, '\0', MainBuf_SIZE);
 8003afe:	2228      	movs	r2, #40	; 0x28
 8003b00:	2100      	movs	r1, #0
 8003b02:	480f      	ldr	r0, [pc, #60]	; (8003b40 <Ringbuf_Init+0x50>)
 8003b04:	f006 fe93 	bl	800a82e <memset>


	//Head = Tail = 0;
	oldPos = 0;
 8003b08:	4b0e      	ldr	r3, [pc, #56]	; (8003b44 <Ringbuf_Init+0x54>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	801a      	strh	r2, [r3, #0]
	newPos = 0;
 8003b0e:	4b0e      	ldr	r3, [pc, #56]	; (8003b48 <Ringbuf_Init+0x58>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	801a      	strh	r2, [r3, #0]


  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rx2_Buf, RxBuf_SIZE);
 8003b14:	2214      	movs	r2, #20
 8003b16:	4909      	ldr	r1, [pc, #36]	; (8003b3c <Ringbuf_Init+0x4c>)
 8003b18:	480c      	ldr	r0, [pc, #48]	; (8003b4c <Ringbuf_Init+0x5c>)
 8003b1a:	f002 fc82 	bl	8006422 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8003b1e:	4b0c      	ldr	r3, [pc, #48]	; (8003b50 <Ringbuf_Init+0x60>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	4b0a      	ldr	r3, [pc, #40]	; (8003b50 <Ringbuf_Init+0x60>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 0208 	bic.w	r2, r2, #8
 8003b2c:	601a      	str	r2, [r3, #0]


  HAL_UART_Receive_IT(&huart3, &rx3_data, 1);
 8003b2e:	2201      	movs	r2, #1
 8003b30:	4908      	ldr	r1, [pc, #32]	; (8003b54 <Ringbuf_Init+0x64>)
 8003b32:	4809      	ldr	r0, [pc, #36]	; (8003b58 <Ringbuf_Init+0x68>)
 8003b34:	f002 fc45 	bl	80063c2 <HAL_UART_Receive_IT>


}
 8003b38:	bf00      	nop
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	20000604 	.word	0x20000604
 8003b40:	20000618 	.word	0x20000618
 8003b44:	20000640 	.word	0x20000640
 8003b48:	20000642 	.word	0x20000642
 8003b4c:	20000648 	.word	0x20000648
 8003b50:	200006d0 	.word	0x200006d0
 8003b54:	200005e8 	.word	0x200005e8
 8003b58:	2000068c 	.word	0x2000068c

08003b5c <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	460b      	mov	r3, r1
 8003b66:	807b      	strh	r3, [r7, #2]
		//isDataAvailable = 1;

	if(huart->Instance==USART2){
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a29      	ldr	r2, [pc, #164]	; (8003c14 <HAL_UARTEx_RxEventCallback+0xb8>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d14b      	bne.n	8003c0a <HAL_UARTEx_RxEventCallback+0xae>
		oldPos = newPos;  // Update the last position before copying new data
 8003b72:	4b29      	ldr	r3, [pc, #164]	; (8003c18 <HAL_UARTEx_RxEventCallback+0xbc>)
 8003b74:	881a      	ldrh	r2, [r3, #0]
 8003b76:	4b29      	ldr	r3, [pc, #164]	; (8003c1c <HAL_UARTEx_RxEventCallback+0xc0>)
 8003b78:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (oldPos+Size > MainBuf_SIZE)  // If the current position + new data size is greater than the main buffer
 8003b7a:	4b28      	ldr	r3, [pc, #160]	; (8003c1c <HAL_UARTEx_RxEventCallback+0xc0>)
 8003b7c:	881b      	ldrh	r3, [r3, #0]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	887b      	ldrh	r3, [r7, #2]
 8003b82:	4413      	add	r3, r2
 8003b84:	2b28      	cmp	r3, #40	; 0x28
 8003b86:	dd22      	ble.n	8003bce <HAL_UARTEx_RxEventCallback+0x72>
		{
			uint16_t datatocopy = MainBuf_SIZE-oldPos;  // find out how much space is left in the main buffer
 8003b88:	4b24      	ldr	r3, [pc, #144]	; (8003c1c <HAL_UARTEx_RxEventCallback+0xc0>)
 8003b8a:	881b      	ldrh	r3, [r3, #0]
 8003b8c:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8003b90:	81fb      	strh	r3, [r7, #14]
			memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)rx2_Buf, datatocopy);  // copy data in that remaining space
 8003b92:	4b22      	ldr	r3, [pc, #136]	; (8003c1c <HAL_UARTEx_RxEventCallback+0xc0>)
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	461a      	mov	r2, r3
 8003b98:	4b21      	ldr	r3, [pc, #132]	; (8003c20 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003b9a:	4413      	add	r3, r2
 8003b9c:	89fa      	ldrh	r2, [r7, #14]
 8003b9e:	4921      	ldr	r1, [pc, #132]	; (8003c24 <HAL_UARTEx_RxEventCallback+0xc8>)
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f006 fe36 	bl	800a812 <memcpy>

			oldPos = 0;  // point to the start of the buffer
 8003ba6:	4b1d      	ldr	r3, [pc, #116]	; (8003c1c <HAL_UARTEx_RxEventCallback+0xc0>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainBuf, (uint8_t *)rx2_Buf+datatocopy, (Size-datatocopy));  // copy the remaining data
 8003bac:	89fb      	ldrh	r3, [r7, #14]
 8003bae:	4a1d      	ldr	r2, [pc, #116]	; (8003c24 <HAL_UARTEx_RxEventCallback+0xc8>)
 8003bb0:	1899      	adds	r1, r3, r2
 8003bb2:	887a      	ldrh	r2, [r7, #2]
 8003bb4:	89fb      	ldrh	r3, [r7, #14]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	461a      	mov	r2, r3
 8003bba:	4819      	ldr	r0, [pc, #100]	; (8003c20 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003bbc:	f006 fe29 	bl	800a812 <memcpy>
			newPos = (Size-datatocopy);  // update the position
 8003bc0:	887a      	ldrh	r2, [r7, #2]
 8003bc2:	89fb      	ldrh	r3, [r7, #14]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	4b13      	ldr	r3, [pc, #76]	; (8003c18 <HAL_UARTEx_RxEventCallback+0xbc>)
 8003bca:	801a      	strh	r2, [r3, #0]
 8003bcc:	e010      	b.n	8003bf0 <HAL_UARTEx_RxEventCallback+0x94>
		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)rx2_Buf, Size);
 8003bce:	4b13      	ldr	r3, [pc, #76]	; (8003c1c <HAL_UARTEx_RxEventCallback+0xc0>)
 8003bd0:	881b      	ldrh	r3, [r3, #0]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	4b12      	ldr	r3, [pc, #72]	; (8003c20 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003bd6:	4413      	add	r3, r2
 8003bd8:	887a      	ldrh	r2, [r7, #2]
 8003bda:	4912      	ldr	r1, [pc, #72]	; (8003c24 <HAL_UARTEx_RxEventCallback+0xc8>)
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f006 fe18 	bl	800a812 <memcpy>
			newPos = Size+oldPos;
 8003be2:	4b0e      	ldr	r3, [pc, #56]	; (8003c1c <HAL_UARTEx_RxEventCallback+0xc0>)
 8003be4:	881a      	ldrh	r2, [r3, #0]
 8003be6:	887b      	ldrh	r3, [r7, #2]
 8003be8:	4413      	add	r3, r2
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <HAL_UARTEx_RxEventCallback+0xbc>)
 8003bee:	801a      	strh	r2, [r3, #0]
		 */
//		if (Head+Size < MainBuf_SIZE) Head = Head+Size;
//		else Head = Head+Size - MainBuf_SIZE;

		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) rx2_Buf, RxBuf_SIZE);
 8003bf0:	2214      	movs	r2, #20
 8003bf2:	490c      	ldr	r1, [pc, #48]	; (8003c24 <HAL_UARTEx_RxEventCallback+0xc8>)
 8003bf4:	480c      	ldr	r0, [pc, #48]	; (8003c28 <HAL_UARTEx_RxEventCallback+0xcc>)
 8003bf6:	f002 fc14 	bl	8006422 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8003bfa:	4b0c      	ldr	r3, [pc, #48]	; (8003c2c <HAL_UARTEx_RxEventCallback+0xd0>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	4b0a      	ldr	r3, [pc, #40]	; (8003c2c <HAL_UARTEx_RxEventCallback+0xd0>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 0208 	bic.w	r2, r2, #8
 8003c08:	601a      	str	r2, [r3, #0]
	}


}
 8003c0a:	bf00      	nop
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	40004400 	.word	0x40004400
 8003c18:	20000642 	.word	0x20000642
 8003c1c:	20000640 	.word	0x20000640
 8003c20:	20000618 	.word	0x20000618
 8003c24:	20000604 	.word	0x20000604
 8003c28:	20000648 	.word	0x20000648
 8003c2c:	200006d0 	.word	0x200006d0

08003c30 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c30:	b5b0      	push	{r4, r5, r7, lr}
 8003c32:	b088      	sub	sp, #32
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART3){
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a24      	ldr	r2, [pc, #144]	; (8003cd0 <HAL_UART_RxCpltCallback+0xa0>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d142      	bne.n	8003cc8 <HAL_UART_RxCpltCallback+0x98>

		if(rx_start == 0){
 8003c42:	4b24      	ldr	r3, [pc, #144]	; (8003cd4 <HAL_UART_RxCpltCallback+0xa4>)
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10a      	bne.n	8003c60 <HAL_UART_RxCpltCallback+0x30>
			if(rx3_data == 'D'){
 8003c4a:	4b23      	ldr	r3, [pc, #140]	; (8003cd8 <HAL_UART_RxCpltCallback+0xa8>)
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	2b44      	cmp	r3, #68	; 0x44
 8003c50:	d135      	bne.n	8003cbe <HAL_UART_RxCpltCallback+0x8e>
				bufindex = 0;
 8003c52:	4b22      	ldr	r3, [pc, #136]	; (8003cdc <HAL_UART_RxCpltCallback+0xac>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	701a      	strb	r2, [r3, #0]
				rx_start = 1;
 8003c58:	4b1e      	ldr	r3, [pc, #120]	; (8003cd4 <HAL_UART_RxCpltCallback+0xa4>)
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	701a      	strb	r2, [r3, #0]
 8003c5e:	e02e      	b.n	8003cbe <HAL_UART_RxCpltCallback+0x8e>
			}
		}
		else {
			if(rx3_data != '\n' && bufindex < RxBuf_SIZE)
 8003c60:	4b1d      	ldr	r3, [pc, #116]	; (8003cd8 <HAL_UART_RxCpltCallback+0xa8>)
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	2b0a      	cmp	r3, #10
 8003c66:	d00f      	beq.n	8003c88 <HAL_UART_RxCpltCallback+0x58>
 8003c68:	4b1c      	ldr	r3, [pc, #112]	; (8003cdc <HAL_UART_RxCpltCallback+0xac>)
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	2b13      	cmp	r3, #19
 8003c6e:	d80b      	bhi.n	8003c88 <HAL_UART_RxCpltCallback+0x58>
				rx3_buf[bufindex++] = rx3_data;
 8003c70:	4b1a      	ldr	r3, [pc, #104]	; (8003cdc <HAL_UART_RxCpltCallback+0xac>)
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	1c5a      	adds	r2, r3, #1
 8003c76:	b2d1      	uxtb	r1, r2
 8003c78:	4a18      	ldr	r2, [pc, #96]	; (8003cdc <HAL_UART_RxCpltCallback+0xac>)
 8003c7a:	7011      	strb	r1, [r2, #0]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	4b16      	ldr	r3, [pc, #88]	; (8003cd8 <HAL_UART_RxCpltCallback+0xa8>)
 8003c80:	7819      	ldrb	r1, [r3, #0]
 8003c82:	4b17      	ldr	r3, [pc, #92]	; (8003ce0 <HAL_UART_RxCpltCallback+0xb0>)
 8003c84:	5499      	strb	r1, [r3, r2]
 8003c86:	e01a      	b.n	8003cbe <HAL_UART_RxCpltCallback+0x8e>
			else {
				char temp_buf[20];
				memcpy(temp_buf, (char*)rx3_buf, 20);
 8003c88:	4b15      	ldr	r3, [pc, #84]	; (8003ce0 <HAL_UART_RxCpltCallback+0xb0>)
 8003c8a:	f107 040c 	add.w	r4, r7, #12
 8003c8e:	461d      	mov	r5, r3
 8003c90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c94:	682b      	ldr	r3, [r5, #0]
 8003c96:	6023      	str	r3, [r4, #0]
				osMessagePut(cmdQueueHandle, (uint32_t)temp_buf, 100);
 8003c98:	4b12      	ldr	r3, [pc, #72]	; (8003ce4 <HAL_UART_RxCpltCallback+0xb4>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f107 010c 	add.w	r1, r7, #12
 8003ca0:	2264      	movs	r2, #100	; 0x64
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f003 fed8 	bl	8007a58 <osMessagePut>
				memset(rx3_buf,0,sizeof(rx3_buf));
 8003ca8:	2214      	movs	r2, #20
 8003caa:	2100      	movs	r1, #0
 8003cac:	480c      	ldr	r0, [pc, #48]	; (8003ce0 <HAL_UART_RxCpltCallback+0xb0>)
 8003cae:	f006 fdbe 	bl	800a82e <memset>
				bufindex=0;
 8003cb2:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <HAL_UART_RxCpltCallback+0xac>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	701a      	strb	r2, [r3, #0]
				rx_start = 0;
 8003cb8:	4b06      	ldr	r3, [pc, #24]	; (8003cd4 <HAL_UART_RxCpltCallback+0xa4>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	701a      	strb	r2, [r3, #0]
			}
		}
		HAL_UART_Receive_IT(&huart3, &rx3_data, 1);
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	4905      	ldr	r1, [pc, #20]	; (8003cd8 <HAL_UART_RxCpltCallback+0xa8>)
 8003cc2:	4809      	ldr	r0, [pc, #36]	; (8003ce8 <HAL_UART_RxCpltCallback+0xb8>)
 8003cc4:	f002 fb7d 	bl	80063c2 <HAL_UART_Receive_IT>

	}

}
 8003cc8:	bf00      	nop
 8003cca:	3720      	adds	r7, #32
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bdb0      	pop	{r4, r5, r7, pc}
 8003cd0:	40004800 	.word	0x40004800
 8003cd4:	20000600 	.word	0x20000600
 8003cd8:	200005e8 	.word	0x200005e8
 8003cdc:	20000601 	.word	0x20000601
 8003ce0:	200005ec 	.word	0x200005ec
 8003ce4:	200002c0 	.word	0x200002c0
 8003ce8:	2000068c 	.word	0x2000068c

08003cec <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003cf0:	4b11      	ldr	r3, [pc, #68]	; (8003d38 <MX_USART2_UART_Init+0x4c>)
 8003cf2:	4a12      	ldr	r2, [pc, #72]	; (8003d3c <MX_USART2_UART_Init+0x50>)
 8003cf4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003cf6:	4b10      	ldr	r3, [pc, #64]	; (8003d38 <MX_USART2_UART_Init+0x4c>)
 8003cf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003cfc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003cfe:	4b0e      	ldr	r3, [pc, #56]	; (8003d38 <MX_USART2_UART_Init+0x4c>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003d04:	4b0c      	ldr	r3, [pc, #48]	; (8003d38 <MX_USART2_UART_Init+0x4c>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003d0a:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <MX_USART2_UART_Init+0x4c>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003d10:	4b09      	ldr	r3, [pc, #36]	; (8003d38 <MX_USART2_UART_Init+0x4c>)
 8003d12:	220c      	movs	r2, #12
 8003d14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d16:	4b08      	ldr	r3, [pc, #32]	; (8003d38 <MX_USART2_UART_Init+0x4c>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d1c:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <MX_USART2_UART_Init+0x4c>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003d22:	4805      	ldr	r0, [pc, #20]	; (8003d38 <MX_USART2_UART_Init+0x4c>)
 8003d24:	f002 fa6e 	bl	8006204 <HAL_UART_Init>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003d2e:	f7ff fd03 	bl	8003738 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003d32:	bf00      	nop
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	20000648 	.word	0x20000648
 8003d3c:	40004400 	.word	0x40004400

08003d40 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003d44:	4b11      	ldr	r3, [pc, #68]	; (8003d8c <MX_USART3_UART_Init+0x4c>)
 8003d46:	4a12      	ldr	r2, [pc, #72]	; (8003d90 <MX_USART3_UART_Init+0x50>)
 8003d48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003d4a:	4b10      	ldr	r3, [pc, #64]	; (8003d8c <MX_USART3_UART_Init+0x4c>)
 8003d4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003d52:	4b0e      	ldr	r3, [pc, #56]	; (8003d8c <MX_USART3_UART_Init+0x4c>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003d58:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <MX_USART3_UART_Init+0x4c>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003d5e:	4b0b      	ldr	r3, [pc, #44]	; (8003d8c <MX_USART3_UART_Init+0x4c>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003d64:	4b09      	ldr	r3, [pc, #36]	; (8003d8c <MX_USART3_UART_Init+0x4c>)
 8003d66:	220c      	movs	r2, #12
 8003d68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d6a:	4b08      	ldr	r3, [pc, #32]	; (8003d8c <MX_USART3_UART_Init+0x4c>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d70:	4b06      	ldr	r3, [pc, #24]	; (8003d8c <MX_USART3_UART_Init+0x4c>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003d76:	4805      	ldr	r0, [pc, #20]	; (8003d8c <MX_USART3_UART_Init+0x4c>)
 8003d78:	f002 fa44 	bl	8006204 <HAL_UART_Init>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003d82:	f7ff fcd9 	bl	8003738 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003d86:	bf00      	nop
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	2000068c 	.word	0x2000068c
 8003d90:	40004800 	.word	0x40004800

08003d94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b08c      	sub	sp, #48	; 0x30
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d9c:	f107 031c 	add.w	r3, r7, #28
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	605a      	str	r2, [r3, #4]
 8003da6:	609a      	str	r2, [r3, #8]
 8003da8:	60da      	str	r2, [r3, #12]
 8003daa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a61      	ldr	r2, [pc, #388]	; (8003f38 <HAL_UART_MspInit+0x1a4>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	f040 8081 	bne.w	8003eba <HAL_UART_MspInit+0x126>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003db8:	2300      	movs	r3, #0
 8003dba:	61bb      	str	r3, [r7, #24]
 8003dbc:	4b5f      	ldr	r3, [pc, #380]	; (8003f3c <HAL_UART_MspInit+0x1a8>)
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc0:	4a5e      	ldr	r2, [pc, #376]	; (8003f3c <HAL_UART_MspInit+0x1a8>)
 8003dc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dc6:	6413      	str	r3, [r2, #64]	; 0x40
 8003dc8:	4b5c      	ldr	r3, [pc, #368]	; (8003f3c <HAL_UART_MspInit+0x1a8>)
 8003dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd0:	61bb      	str	r3, [r7, #24]
 8003dd2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	617b      	str	r3, [r7, #20]
 8003dd8:	4b58      	ldr	r3, [pc, #352]	; (8003f3c <HAL_UART_MspInit+0x1a8>)
 8003dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ddc:	4a57      	ldr	r2, [pc, #348]	; (8003f3c <HAL_UART_MspInit+0x1a8>)
 8003dde:	f043 0301 	orr.w	r3, r3, #1
 8003de2:	6313      	str	r3, [r2, #48]	; 0x30
 8003de4:	4b55      	ldr	r3, [pc, #340]	; (8003f3c <HAL_UART_MspInit+0x1a8>)
 8003de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	617b      	str	r3, [r7, #20]
 8003dee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003df0:	2300      	movs	r3, #0
 8003df2:	613b      	str	r3, [r7, #16]
 8003df4:	4b51      	ldr	r3, [pc, #324]	; (8003f3c <HAL_UART_MspInit+0x1a8>)
 8003df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df8:	4a50      	ldr	r2, [pc, #320]	; (8003f3c <HAL_UART_MspInit+0x1a8>)
 8003dfa:	f043 0308 	orr.w	r3, r3, #8
 8003dfe:	6313      	str	r3, [r2, #48]	; 0x30
 8003e00:	4b4e      	ldr	r3, [pc, #312]	; (8003f3c <HAL_UART_MspInit+0x1a8>)
 8003e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e04:	f003 0308 	and.w	r3, r3, #8
 8003e08:	613b      	str	r3, [r7, #16]
 8003e0a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003e0c:	2308      	movs	r3, #8
 8003e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e10:	2302      	movs	r3, #2
 8003e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e14:	2300      	movs	r3, #0
 8003e16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003e1c:	2307      	movs	r3, #7
 8003e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e20:	f107 031c 	add.w	r3, r7, #28
 8003e24:	4619      	mov	r1, r3
 8003e26:	4846      	ldr	r0, [pc, #280]	; (8003f40 <HAL_UART_MspInit+0x1ac>)
 8003e28:	f000 fde4 	bl	80049f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003e2c:	2320      	movs	r3, #32
 8003e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e30:	2302      	movs	r3, #2
 8003e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e34:	2300      	movs	r3, #0
 8003e36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003e3c:	2307      	movs	r3, #7
 8003e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e40:	f107 031c 	add.w	r3, r7, #28
 8003e44:	4619      	mov	r1, r3
 8003e46:	483f      	ldr	r0, [pc, #252]	; (8003f44 <HAL_UART_MspInit+0x1b0>)
 8003e48:	f000 fdd4 	bl	80049f4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003e4c:	4b3e      	ldr	r3, [pc, #248]	; (8003f48 <HAL_UART_MspInit+0x1b4>)
 8003e4e:	4a3f      	ldr	r2, [pc, #252]	; (8003f4c <HAL_UART_MspInit+0x1b8>)
 8003e50:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003e52:	4b3d      	ldr	r3, [pc, #244]	; (8003f48 <HAL_UART_MspInit+0x1b4>)
 8003e54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e58:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e5a:	4b3b      	ldr	r3, [pc, #236]	; (8003f48 <HAL_UART_MspInit+0x1b4>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e60:	4b39      	ldr	r3, [pc, #228]	; (8003f48 <HAL_UART_MspInit+0x1b4>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e66:	4b38      	ldr	r3, [pc, #224]	; (8003f48 <HAL_UART_MspInit+0x1b4>)
 8003e68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e6c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e6e:	4b36      	ldr	r3, [pc, #216]	; (8003f48 <HAL_UART_MspInit+0x1b4>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e74:	4b34      	ldr	r3, [pc, #208]	; (8003f48 <HAL_UART_MspInit+0x1b4>)
 8003e76:	2200      	movs	r2, #0
 8003e78:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003e7a:	4b33      	ldr	r3, [pc, #204]	; (8003f48 <HAL_UART_MspInit+0x1b4>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003e80:	4b31      	ldr	r3, [pc, #196]	; (8003f48 <HAL_UART_MspInit+0x1b4>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e86:	4b30      	ldr	r3, [pc, #192]	; (8003f48 <HAL_UART_MspInit+0x1b4>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003e8c:	482e      	ldr	r0, [pc, #184]	; (8003f48 <HAL_UART_MspInit+0x1b4>)
 8003e8e:	f000 f9af 	bl	80041f0 <HAL_DMA_Init>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8003e98:	f7ff fc4e 	bl	8003738 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a2a      	ldr	r2, [pc, #168]	; (8003f48 <HAL_UART_MspInit+0x1b4>)
 8003ea0:	639a      	str	r2, [r3, #56]	; 0x38
 8003ea2:	4a29      	ldr	r2, [pc, #164]	; (8003f48 <HAL_UART_MspInit+0x1b4>)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	2105      	movs	r1, #5
 8003eac:	2026      	movs	r0, #38	; 0x26
 8003eae:	f000 f975 	bl	800419c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003eb2:	2026      	movs	r0, #38	; 0x26
 8003eb4:	f000 f98e 	bl	80041d4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003eb8:	e039      	b.n	8003f2e <HAL_UART_MspInit+0x19a>
  else if(uartHandle->Instance==USART3)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a24      	ldr	r2, [pc, #144]	; (8003f50 <HAL_UART_MspInit+0x1bc>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d134      	bne.n	8003f2e <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	4b1c      	ldr	r3, [pc, #112]	; (8003f3c <HAL_UART_MspInit+0x1a8>)
 8003eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ecc:	4a1b      	ldr	r2, [pc, #108]	; (8003f3c <HAL_UART_MspInit+0x1a8>)
 8003ece:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ed2:	6413      	str	r3, [r2, #64]	; 0x40
 8003ed4:	4b19      	ldr	r3, [pc, #100]	; (8003f3c <HAL_UART_MspInit+0x1a8>)
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	60bb      	str	r3, [r7, #8]
 8003ee4:	4b15      	ldr	r3, [pc, #84]	; (8003f3c <HAL_UART_MspInit+0x1a8>)
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee8:	4a14      	ldr	r2, [pc, #80]	; (8003f3c <HAL_UART_MspInit+0x1a8>)
 8003eea:	f043 0308 	orr.w	r3, r3, #8
 8003eee:	6313      	str	r3, [r2, #48]	; 0x30
 8003ef0:	4b12      	ldr	r3, [pc, #72]	; (8003f3c <HAL_UART_MspInit+0x1a8>)
 8003ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef4:	f003 0308 	and.w	r3, r3, #8
 8003ef8:	60bb      	str	r3, [r7, #8]
 8003efa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003efc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f02:	2302      	movs	r3, #2
 8003f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f06:	2300      	movs	r3, #0
 8003f08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003f0e:	2307      	movs	r3, #7
 8003f10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f12:	f107 031c 	add.w	r3, r7, #28
 8003f16:	4619      	mov	r1, r3
 8003f18:	480a      	ldr	r0, [pc, #40]	; (8003f44 <HAL_UART_MspInit+0x1b0>)
 8003f1a:	f000 fd6b 	bl	80049f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003f1e:	2200      	movs	r2, #0
 8003f20:	2105      	movs	r1, #5
 8003f22:	2027      	movs	r0, #39	; 0x27
 8003f24:	f000 f93a 	bl	800419c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003f28:	2027      	movs	r0, #39	; 0x27
 8003f2a:	f000 f953 	bl	80041d4 <HAL_NVIC_EnableIRQ>
}
 8003f2e:	bf00      	nop
 8003f30:	3730      	adds	r7, #48	; 0x30
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	40004400 	.word	0x40004400
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	40020000 	.word	0x40020000
 8003f44:	40020c00 	.word	0x40020c00
 8003f48:	200006d0 	.word	0x200006d0
 8003f4c:	40026088 	.word	0x40026088
 8003f50:	40004800 	.word	0x40004800

08003f54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003f54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f8c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f58:	480d      	ldr	r0, [pc, #52]	; (8003f90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003f5a:	490e      	ldr	r1, [pc, #56]	; (8003f94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003f5c:	4a0e      	ldr	r2, [pc, #56]	; (8003f98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f60:	e002      	b.n	8003f68 <LoopCopyDataInit>

08003f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f66:	3304      	adds	r3, #4

08003f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f6c:	d3f9      	bcc.n	8003f62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f6e:	4a0b      	ldr	r2, [pc, #44]	; (8003f9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003f70:	4c0b      	ldr	r4, [pc, #44]	; (8003fa0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f74:	e001      	b.n	8003f7a <LoopFillZerobss>

08003f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f78:	3204      	adds	r2, #4

08003f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f7c:	d3fb      	bcc.n	8003f76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003f7e:	f7ff fda5 	bl	8003acc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f82:	f006 fc1f 	bl	800a7c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f86:	f7ff fb3b 	bl	8003600 <main>
  bx  lr    
 8003f8a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003f8c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f94:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8003f98:	0800f5c8 	.word	0x0800f5c8
  ldr r2, =_sbss
 8003f9c:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8003fa0:	20004498 	.word	0x20004498

08003fa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003fa4:	e7fe      	b.n	8003fa4 <ADC_IRQHandler>
	...

08003fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003fac:	4b0e      	ldr	r3, [pc, #56]	; (8003fe8 <HAL_Init+0x40>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a0d      	ldr	r2, [pc, #52]	; (8003fe8 <HAL_Init+0x40>)
 8003fb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003fb8:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <HAL_Init+0x40>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a0a      	ldr	r2, [pc, #40]	; (8003fe8 <HAL_Init+0x40>)
 8003fbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003fc4:	4b08      	ldr	r3, [pc, #32]	; (8003fe8 <HAL_Init+0x40>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a07      	ldr	r2, [pc, #28]	; (8003fe8 <HAL_Init+0x40>)
 8003fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fd0:	2003      	movs	r0, #3
 8003fd2:	f000 f8d8 	bl	8004186 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003fd6:	200f      	movs	r0, #15
 8003fd8:	f7ff fc30 	bl	800383c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003fdc:	f7ff fc02 	bl	80037e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	40023c00 	.word	0x40023c00

08003fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ff0:	4b06      	ldr	r3, [pc, #24]	; (800400c <HAL_IncTick+0x20>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	4b06      	ldr	r3, [pc, #24]	; (8004010 <HAL_IncTick+0x24>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	4a04      	ldr	r2, [pc, #16]	; (8004010 <HAL_IncTick+0x24>)
 8003ffe:	6013      	str	r3, [r2, #0]
}
 8004000:	bf00      	nop
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	20000050 	.word	0x20000050
 8004010:	20000730 	.word	0x20000730

08004014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  return uwTick;
 8004018:	4b03      	ldr	r3, [pc, #12]	; (8004028 <HAL_GetTick+0x14>)
 800401a:	681b      	ldr	r3, [r3, #0]
}
 800401c:	4618      	mov	r0, r3
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	20000730 	.word	0x20000730

0800402c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800403c:	4b0c      	ldr	r3, [pc, #48]	; (8004070 <__NVIC_SetPriorityGrouping+0x44>)
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004048:	4013      	ands	r3, r2
 800404a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800405c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800405e:	4a04      	ldr	r2, [pc, #16]	; (8004070 <__NVIC_SetPriorityGrouping+0x44>)
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	60d3      	str	r3, [r2, #12]
}
 8004064:	bf00      	nop
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	e000ed00 	.word	0xe000ed00

08004074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004078:	4b04      	ldr	r3, [pc, #16]	; (800408c <__NVIC_GetPriorityGrouping+0x18>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	0a1b      	lsrs	r3, r3, #8
 800407e:	f003 0307 	and.w	r3, r3, #7
}
 8004082:	4618      	mov	r0, r3
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	e000ed00 	.word	0xe000ed00

08004090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	4603      	mov	r3, r0
 8004098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800409a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	db0b      	blt.n	80040ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040a2:	79fb      	ldrb	r3, [r7, #7]
 80040a4:	f003 021f 	and.w	r2, r3, #31
 80040a8:	4907      	ldr	r1, [pc, #28]	; (80040c8 <__NVIC_EnableIRQ+0x38>)
 80040aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ae:	095b      	lsrs	r3, r3, #5
 80040b0:	2001      	movs	r0, #1
 80040b2:	fa00 f202 	lsl.w	r2, r0, r2
 80040b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	e000e100 	.word	0xe000e100

080040cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	4603      	mov	r3, r0
 80040d4:	6039      	str	r1, [r7, #0]
 80040d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	db0a      	blt.n	80040f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	b2da      	uxtb	r2, r3
 80040e4:	490c      	ldr	r1, [pc, #48]	; (8004118 <__NVIC_SetPriority+0x4c>)
 80040e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ea:	0112      	lsls	r2, r2, #4
 80040ec:	b2d2      	uxtb	r2, r2
 80040ee:	440b      	add	r3, r1
 80040f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040f4:	e00a      	b.n	800410c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	4908      	ldr	r1, [pc, #32]	; (800411c <__NVIC_SetPriority+0x50>)
 80040fc:	79fb      	ldrb	r3, [r7, #7]
 80040fe:	f003 030f 	and.w	r3, r3, #15
 8004102:	3b04      	subs	r3, #4
 8004104:	0112      	lsls	r2, r2, #4
 8004106:	b2d2      	uxtb	r2, r2
 8004108:	440b      	add	r3, r1
 800410a:	761a      	strb	r2, [r3, #24]
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	e000e100 	.word	0xe000e100
 800411c:	e000ed00 	.word	0xe000ed00

08004120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004120:	b480      	push	{r7}
 8004122:	b089      	sub	sp, #36	; 0x24
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	f1c3 0307 	rsb	r3, r3, #7
 800413a:	2b04      	cmp	r3, #4
 800413c:	bf28      	it	cs
 800413e:	2304      	movcs	r3, #4
 8004140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	3304      	adds	r3, #4
 8004146:	2b06      	cmp	r3, #6
 8004148:	d902      	bls.n	8004150 <NVIC_EncodePriority+0x30>
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	3b03      	subs	r3, #3
 800414e:	e000      	b.n	8004152 <NVIC_EncodePriority+0x32>
 8004150:	2300      	movs	r3, #0
 8004152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004154:	f04f 32ff 	mov.w	r2, #4294967295
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	fa02 f303 	lsl.w	r3, r2, r3
 800415e:	43da      	mvns	r2, r3
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	401a      	ands	r2, r3
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004168:	f04f 31ff 	mov.w	r1, #4294967295
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	fa01 f303 	lsl.w	r3, r1, r3
 8004172:	43d9      	mvns	r1, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004178:	4313      	orrs	r3, r2
         );
}
 800417a:	4618      	mov	r0, r3
 800417c:	3724      	adds	r7, #36	; 0x24
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b082      	sub	sp, #8
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7ff ff4c 	bl	800402c <__NVIC_SetPriorityGrouping>
}
 8004194:	bf00      	nop
 8004196:	3708      	adds	r7, #8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	4603      	mov	r3, r0
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
 80041a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041ae:	f7ff ff61 	bl	8004074 <__NVIC_GetPriorityGrouping>
 80041b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	68b9      	ldr	r1, [r7, #8]
 80041b8:	6978      	ldr	r0, [r7, #20]
 80041ba:	f7ff ffb1 	bl	8004120 <NVIC_EncodePriority>
 80041be:	4602      	mov	r2, r0
 80041c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041c4:	4611      	mov	r1, r2
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7ff ff80 	bl	80040cc <__NVIC_SetPriority>
}
 80041cc:	bf00      	nop
 80041ce:	3718      	adds	r7, #24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	4603      	mov	r3, r0
 80041dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7ff ff54 	bl	8004090 <__NVIC_EnableIRQ>
}
 80041e8:	bf00      	nop
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80041f8:	2300      	movs	r3, #0
 80041fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80041fc:	f7ff ff0a 	bl	8004014 <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e099      	b.n	8004340 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 0201 	bic.w	r2, r2, #1
 800422a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800422c:	e00f      	b.n	800424e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800422e:	f7ff fef1 	bl	8004014 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b05      	cmp	r3, #5
 800423a:	d908      	bls.n	800424e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2220      	movs	r2, #32
 8004240:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2203      	movs	r2, #3
 8004246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e078      	b.n	8004340 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1e8      	bne.n	800422e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	4b38      	ldr	r3, [pc, #224]	; (8004348 <HAL_DMA_Init+0x158>)
 8004268:	4013      	ands	r3, r2
 800426a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800427a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004286:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004292:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	4313      	orrs	r3, r2
 800429e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a4:	2b04      	cmp	r3, #4
 80042a6:	d107      	bne.n	80042b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b0:	4313      	orrs	r3, r2
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f023 0307 	bic.w	r3, r3, #7
 80042ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	2b04      	cmp	r3, #4
 80042e0:	d117      	bne.n	8004312 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00e      	beq.n	8004312 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 fb01 	bl	80048fc <DMA_CheckFifoParam>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d008      	beq.n	8004312 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2240      	movs	r2, #64	; 0x40
 8004304:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800430e:	2301      	movs	r3, #1
 8004310:	e016      	b.n	8004340 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 fab8 	bl	8004890 <DMA_CalcBaseAndBitshift>
 8004320:	4603      	mov	r3, r0
 8004322:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004328:	223f      	movs	r2, #63	; 0x3f
 800432a:	409a      	lsls	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3718      	adds	r7, #24
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	f010803f 	.word	0xf010803f

0800434c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
 8004358:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800435a:	2300      	movs	r3, #0
 800435c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004362:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800436a:	2b01      	cmp	r3, #1
 800436c:	d101      	bne.n	8004372 <HAL_DMA_Start_IT+0x26>
 800436e:	2302      	movs	r3, #2
 8004370:	e040      	b.n	80043f4 <HAL_DMA_Start_IT+0xa8>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b01      	cmp	r3, #1
 8004384:	d12f      	bne.n	80043e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2202      	movs	r2, #2
 800438a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	68b9      	ldr	r1, [r7, #8]
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 fa4a 	bl	8004834 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a4:	223f      	movs	r2, #63	; 0x3f
 80043a6:	409a      	lsls	r2, r3
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0216 	orr.w	r2, r2, #22
 80043ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d007      	beq.n	80043d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0208 	orr.w	r2, r2, #8
 80043d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0201 	orr.w	r2, r2, #1
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	e005      	b.n	80043f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80043ee:	2302      	movs	r3, #2
 80043f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80043f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3718      	adds	r7, #24
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004408:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800440a:	f7ff fe03 	bl	8004014 <HAL_GetTick>
 800440e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d008      	beq.n	800442e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2280      	movs	r2, #128	; 0x80
 8004420:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e052      	b.n	80044d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0216 	bic.w	r2, r2, #22
 800443c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	695a      	ldr	r2, [r3, #20]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800444c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	2b00      	cmp	r3, #0
 8004454:	d103      	bne.n	800445e <HAL_DMA_Abort+0x62>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800445a:	2b00      	cmp	r3, #0
 800445c:	d007      	beq.n	800446e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0208 	bic.w	r2, r2, #8
 800446c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0201 	bic.w	r2, r2, #1
 800447c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800447e:	e013      	b.n	80044a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004480:	f7ff fdc8 	bl	8004014 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b05      	cmp	r3, #5
 800448c:	d90c      	bls.n	80044a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2220      	movs	r2, #32
 8004492:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2203      	movs	r2, #3
 8004498:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e015      	b.n	80044d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1e4      	bne.n	8004480 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ba:	223f      	movs	r2, #63	; 0x3f
 80044bc:	409a      	lsls	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d004      	beq.n	80044fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2280      	movs	r2, #128	; 0x80
 80044f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e00c      	b.n	8004514 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2205      	movs	r2, #5
 80044fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0201 	bic.w	r2, r2, #1
 8004510:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004528:	2300      	movs	r3, #0
 800452a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800452c:	4b8e      	ldr	r3, [pc, #568]	; (8004768 <HAL_DMA_IRQHandler+0x248>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a8e      	ldr	r2, [pc, #568]	; (800476c <HAL_DMA_IRQHandler+0x24c>)
 8004532:	fba2 2303 	umull	r2, r3, r2, r3
 8004536:	0a9b      	lsrs	r3, r3, #10
 8004538:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800454a:	2208      	movs	r2, #8
 800454c:	409a      	lsls	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	4013      	ands	r3, r2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d01a      	beq.n	800458c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b00      	cmp	r3, #0
 8004562:	d013      	beq.n	800458c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 0204 	bic.w	r2, r2, #4
 8004572:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004578:	2208      	movs	r2, #8
 800457a:	409a      	lsls	r2, r3
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004584:	f043 0201 	orr.w	r2, r3, #1
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004590:	2201      	movs	r2, #1
 8004592:	409a      	lsls	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4013      	ands	r3, r2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d012      	beq.n	80045c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00b      	beq.n	80045c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ae:	2201      	movs	r2, #1
 80045b0:	409a      	lsls	r2, r3
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ba:	f043 0202 	orr.w	r2, r3, #2
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c6:	2204      	movs	r2, #4
 80045c8:	409a      	lsls	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4013      	ands	r3, r2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d012      	beq.n	80045f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00b      	beq.n	80045f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045e4:	2204      	movs	r2, #4
 80045e6:	409a      	lsls	r2, r3
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f0:	f043 0204 	orr.w	r2, r3, #4
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045fc:	2210      	movs	r2, #16
 80045fe:	409a      	lsls	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4013      	ands	r3, r2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d043      	beq.n	8004690 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b00      	cmp	r3, #0
 8004614:	d03c      	beq.n	8004690 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800461a:	2210      	movs	r2, #16
 800461c:	409a      	lsls	r2, r3
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d018      	beq.n	8004662 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d108      	bne.n	8004650 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	2b00      	cmp	r3, #0
 8004644:	d024      	beq.n	8004690 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	4798      	blx	r3
 800464e:	e01f      	b.n	8004690 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004654:	2b00      	cmp	r3, #0
 8004656:	d01b      	beq.n	8004690 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	4798      	blx	r3
 8004660:	e016      	b.n	8004690 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466c:	2b00      	cmp	r3, #0
 800466e:	d107      	bne.n	8004680 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0208 	bic.w	r2, r2, #8
 800467e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	2b00      	cmp	r3, #0
 8004686:	d003      	beq.n	8004690 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004694:	2220      	movs	r2, #32
 8004696:	409a      	lsls	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4013      	ands	r3, r2
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 808f 	beq.w	80047c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0310 	and.w	r3, r3, #16
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 8087 	beq.w	80047c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b6:	2220      	movs	r2, #32
 80046b8:	409a      	lsls	r2, r3
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b05      	cmp	r3, #5
 80046c8:	d136      	bne.n	8004738 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f022 0216 	bic.w	r2, r2, #22
 80046d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	695a      	ldr	r2, [r3, #20]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d103      	bne.n	80046fa <HAL_DMA_IRQHandler+0x1da>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d007      	beq.n	800470a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 0208 	bic.w	r2, r2, #8
 8004708:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800470e:	223f      	movs	r2, #63	; 0x3f
 8004710:	409a      	lsls	r2, r3
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800472a:	2b00      	cmp	r3, #0
 800472c:	d07e      	beq.n	800482c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	4798      	blx	r3
        }
        return;
 8004736:	e079      	b.n	800482c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d01d      	beq.n	8004782 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10d      	bne.n	8004770 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004758:	2b00      	cmp	r3, #0
 800475a:	d031      	beq.n	80047c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	4798      	blx	r3
 8004764:	e02c      	b.n	80047c0 <HAL_DMA_IRQHandler+0x2a0>
 8004766:	bf00      	nop
 8004768:	20000048 	.word	0x20000048
 800476c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004774:	2b00      	cmp	r3, #0
 8004776:	d023      	beq.n	80047c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	4798      	blx	r3
 8004780:	e01e      	b.n	80047c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800478c:	2b00      	cmp	r3, #0
 800478e:	d10f      	bne.n	80047b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0210 	bic.w	r2, r2, #16
 800479e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d003      	beq.n	80047c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d032      	beq.n	800482e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d022      	beq.n	800481a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2205      	movs	r2, #5
 80047d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0201 	bic.w	r2, r2, #1
 80047ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	3301      	adds	r3, #1
 80047f0:	60bb      	str	r3, [r7, #8]
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d307      	bcc.n	8004808 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1f2      	bne.n	80047ec <HAL_DMA_IRQHandler+0x2cc>
 8004806:	e000      	b.n	800480a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004808:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481e:	2b00      	cmp	r3, #0
 8004820:	d005      	beq.n	800482e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	4798      	blx	r3
 800482a:	e000      	b.n	800482e <HAL_DMA_IRQHandler+0x30e>
        return;
 800482c:	bf00      	nop
    }
  }
}
 800482e:	3718      	adds	r7, #24
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
 8004840:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004850:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	2b40      	cmp	r3, #64	; 0x40
 8004860:	d108      	bne.n	8004874 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004872:	e007      	b.n	8004884 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	60da      	str	r2, [r3, #12]
}
 8004884:	bf00      	nop
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	b2db      	uxtb	r3, r3
 800489e:	3b10      	subs	r3, #16
 80048a0:	4a14      	ldr	r2, [pc, #80]	; (80048f4 <DMA_CalcBaseAndBitshift+0x64>)
 80048a2:	fba2 2303 	umull	r2, r3, r2, r3
 80048a6:	091b      	lsrs	r3, r3, #4
 80048a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80048aa:	4a13      	ldr	r2, [pc, #76]	; (80048f8 <DMA_CalcBaseAndBitshift+0x68>)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4413      	add	r3, r2
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	461a      	mov	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2b03      	cmp	r3, #3
 80048bc:	d909      	bls.n	80048d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80048c6:	f023 0303 	bic.w	r3, r3, #3
 80048ca:	1d1a      	adds	r2, r3, #4
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	659a      	str	r2, [r3, #88]	; 0x58
 80048d0:	e007      	b.n	80048e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80048da:	f023 0303 	bic.w	r3, r3, #3
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	aaaaaaab 	.word	0xaaaaaaab
 80048f8:	0800ef88 	.word	0x0800ef88

080048fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004904:	2300      	movs	r3, #0
 8004906:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d11f      	bne.n	8004956 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	2b03      	cmp	r3, #3
 800491a:	d856      	bhi.n	80049ca <DMA_CheckFifoParam+0xce>
 800491c:	a201      	add	r2, pc, #4	; (adr r2, 8004924 <DMA_CheckFifoParam+0x28>)
 800491e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004922:	bf00      	nop
 8004924:	08004935 	.word	0x08004935
 8004928:	08004947 	.word	0x08004947
 800492c:	08004935 	.word	0x08004935
 8004930:	080049cb 	.word	0x080049cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004938:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d046      	beq.n	80049ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004944:	e043      	b.n	80049ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800494e:	d140      	bne.n	80049d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004954:	e03d      	b.n	80049d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800495e:	d121      	bne.n	80049a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	2b03      	cmp	r3, #3
 8004964:	d837      	bhi.n	80049d6 <DMA_CheckFifoParam+0xda>
 8004966:	a201      	add	r2, pc, #4	; (adr r2, 800496c <DMA_CheckFifoParam+0x70>)
 8004968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496c:	0800497d 	.word	0x0800497d
 8004970:	08004983 	.word	0x08004983
 8004974:	0800497d 	.word	0x0800497d
 8004978:	08004995 	.word	0x08004995
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	73fb      	strb	r3, [r7, #15]
      break;
 8004980:	e030      	b.n	80049e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004986:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d025      	beq.n	80049da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004992:	e022      	b.n	80049da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004998:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800499c:	d11f      	bne.n	80049de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80049a2:	e01c      	b.n	80049de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d903      	bls.n	80049b2 <DMA_CheckFifoParam+0xb6>
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	2b03      	cmp	r3, #3
 80049ae:	d003      	beq.n	80049b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80049b0:	e018      	b.n	80049e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	73fb      	strb	r3, [r7, #15]
      break;
 80049b6:	e015      	b.n	80049e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00e      	beq.n	80049e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	73fb      	strb	r3, [r7, #15]
      break;
 80049c8:	e00b      	b.n	80049e2 <DMA_CheckFifoParam+0xe6>
      break;
 80049ca:	bf00      	nop
 80049cc:	e00a      	b.n	80049e4 <DMA_CheckFifoParam+0xe8>
      break;
 80049ce:	bf00      	nop
 80049d0:	e008      	b.n	80049e4 <DMA_CheckFifoParam+0xe8>
      break;
 80049d2:	bf00      	nop
 80049d4:	e006      	b.n	80049e4 <DMA_CheckFifoParam+0xe8>
      break;
 80049d6:	bf00      	nop
 80049d8:	e004      	b.n	80049e4 <DMA_CheckFifoParam+0xe8>
      break;
 80049da:	bf00      	nop
 80049dc:	e002      	b.n	80049e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80049de:	bf00      	nop
 80049e0:	e000      	b.n	80049e4 <DMA_CheckFifoParam+0xe8>
      break;
 80049e2:	bf00      	nop
    }
  } 
  
  return status; 
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop

080049f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b089      	sub	sp, #36	; 0x24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80049fe:	2300      	movs	r3, #0
 8004a00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a02:	2300      	movs	r3, #0
 8004a04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a06:	2300      	movs	r3, #0
 8004a08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	61fb      	str	r3, [r7, #28]
 8004a0e:	e177      	b.n	8004d00 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a10:	2201      	movs	r2, #1
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	fa02 f303 	lsl.w	r3, r2, r3
 8004a18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	4013      	ands	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	f040 8166 	bne.w	8004cfa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f003 0303 	and.w	r3, r3, #3
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d005      	beq.n	8004a46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d130      	bne.n	8004aa8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	2203      	movs	r2, #3
 8004a52:	fa02 f303 	lsl.w	r3, r2, r3
 8004a56:	43db      	mvns	r3, r3
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	fa02 f303 	lsl.w	r3, r2, r3
 8004a84:	43db      	mvns	r3, r3
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	4013      	ands	r3, r2
 8004a8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	091b      	lsrs	r3, r3, #4
 8004a92:	f003 0201 	and.w	r2, r3, #1
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f003 0303 	and.w	r3, r3, #3
 8004ab0:	2b03      	cmp	r3, #3
 8004ab2:	d017      	beq.n	8004ae4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	2203      	movs	r2, #3
 8004ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac4:	43db      	mvns	r3, r3
 8004ac6:	69ba      	ldr	r2, [r7, #24]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f003 0303 	and.w	r3, r3, #3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d123      	bne.n	8004b38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	08da      	lsrs	r2, r3, #3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3208      	adds	r2, #8
 8004af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	220f      	movs	r2, #15
 8004b08:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0c:	43db      	mvns	r3, r3
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	4013      	ands	r3, r2
 8004b12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	691a      	ldr	r2, [r3, #16]
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	fa02 f303 	lsl.w	r3, r2, r3
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	08da      	lsrs	r2, r3, #3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	3208      	adds	r2, #8
 8004b32:	69b9      	ldr	r1, [r7, #24]
 8004b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	2203      	movs	r2, #3
 8004b44:	fa02 f303 	lsl.w	r3, r2, r3
 8004b48:	43db      	mvns	r3, r3
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f003 0203 	and.w	r2, r3, #3
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f000 80c0 	beq.w	8004cfa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	4b66      	ldr	r3, [pc, #408]	; (8004d18 <HAL_GPIO_Init+0x324>)
 8004b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b82:	4a65      	ldr	r2, [pc, #404]	; (8004d18 <HAL_GPIO_Init+0x324>)
 8004b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b88:	6453      	str	r3, [r2, #68]	; 0x44
 8004b8a:	4b63      	ldr	r3, [pc, #396]	; (8004d18 <HAL_GPIO_Init+0x324>)
 8004b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b92:	60fb      	str	r3, [r7, #12]
 8004b94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b96:	4a61      	ldr	r2, [pc, #388]	; (8004d1c <HAL_GPIO_Init+0x328>)
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	089b      	lsrs	r3, r3, #2
 8004b9c:	3302      	adds	r3, #2
 8004b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	220f      	movs	r2, #15
 8004bae:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb2:	43db      	mvns	r3, r3
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a58      	ldr	r2, [pc, #352]	; (8004d20 <HAL_GPIO_Init+0x32c>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d037      	beq.n	8004c32 <HAL_GPIO_Init+0x23e>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a57      	ldr	r2, [pc, #348]	; (8004d24 <HAL_GPIO_Init+0x330>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d031      	beq.n	8004c2e <HAL_GPIO_Init+0x23a>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a56      	ldr	r2, [pc, #344]	; (8004d28 <HAL_GPIO_Init+0x334>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d02b      	beq.n	8004c2a <HAL_GPIO_Init+0x236>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a55      	ldr	r2, [pc, #340]	; (8004d2c <HAL_GPIO_Init+0x338>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d025      	beq.n	8004c26 <HAL_GPIO_Init+0x232>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a54      	ldr	r2, [pc, #336]	; (8004d30 <HAL_GPIO_Init+0x33c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d01f      	beq.n	8004c22 <HAL_GPIO_Init+0x22e>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a53      	ldr	r2, [pc, #332]	; (8004d34 <HAL_GPIO_Init+0x340>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d019      	beq.n	8004c1e <HAL_GPIO_Init+0x22a>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a52      	ldr	r2, [pc, #328]	; (8004d38 <HAL_GPIO_Init+0x344>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d013      	beq.n	8004c1a <HAL_GPIO_Init+0x226>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a51      	ldr	r2, [pc, #324]	; (8004d3c <HAL_GPIO_Init+0x348>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d00d      	beq.n	8004c16 <HAL_GPIO_Init+0x222>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a50      	ldr	r2, [pc, #320]	; (8004d40 <HAL_GPIO_Init+0x34c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d007      	beq.n	8004c12 <HAL_GPIO_Init+0x21e>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a4f      	ldr	r2, [pc, #316]	; (8004d44 <HAL_GPIO_Init+0x350>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d101      	bne.n	8004c0e <HAL_GPIO_Init+0x21a>
 8004c0a:	2309      	movs	r3, #9
 8004c0c:	e012      	b.n	8004c34 <HAL_GPIO_Init+0x240>
 8004c0e:	230a      	movs	r3, #10
 8004c10:	e010      	b.n	8004c34 <HAL_GPIO_Init+0x240>
 8004c12:	2308      	movs	r3, #8
 8004c14:	e00e      	b.n	8004c34 <HAL_GPIO_Init+0x240>
 8004c16:	2307      	movs	r3, #7
 8004c18:	e00c      	b.n	8004c34 <HAL_GPIO_Init+0x240>
 8004c1a:	2306      	movs	r3, #6
 8004c1c:	e00a      	b.n	8004c34 <HAL_GPIO_Init+0x240>
 8004c1e:	2305      	movs	r3, #5
 8004c20:	e008      	b.n	8004c34 <HAL_GPIO_Init+0x240>
 8004c22:	2304      	movs	r3, #4
 8004c24:	e006      	b.n	8004c34 <HAL_GPIO_Init+0x240>
 8004c26:	2303      	movs	r3, #3
 8004c28:	e004      	b.n	8004c34 <HAL_GPIO_Init+0x240>
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	e002      	b.n	8004c34 <HAL_GPIO_Init+0x240>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e000      	b.n	8004c34 <HAL_GPIO_Init+0x240>
 8004c32:	2300      	movs	r3, #0
 8004c34:	69fa      	ldr	r2, [r7, #28]
 8004c36:	f002 0203 	and.w	r2, r2, #3
 8004c3a:	0092      	lsls	r2, r2, #2
 8004c3c:	4093      	lsls	r3, r2
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c44:	4935      	ldr	r1, [pc, #212]	; (8004d1c <HAL_GPIO_Init+0x328>)
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	089b      	lsrs	r3, r3, #2
 8004c4a:	3302      	adds	r3, #2
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c52:	4b3d      	ldr	r3, [pc, #244]	; (8004d48 <HAL_GPIO_Init+0x354>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	43db      	mvns	r3, r3
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	4013      	ands	r3, r2
 8004c60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c76:	4a34      	ldr	r2, [pc, #208]	; (8004d48 <HAL_GPIO_Init+0x354>)
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c7c:	4b32      	ldr	r3, [pc, #200]	; (8004d48 <HAL_GPIO_Init+0x354>)
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	43db      	mvns	r3, r3
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d003      	beq.n	8004ca0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ca0:	4a29      	ldr	r2, [pc, #164]	; (8004d48 <HAL_GPIO_Init+0x354>)
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ca6:	4b28      	ldr	r3, [pc, #160]	; (8004d48 <HAL_GPIO_Init+0x354>)
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	43db      	mvns	r3, r3
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004cc2:	69ba      	ldr	r2, [r7, #24]
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004cca:	4a1f      	ldr	r2, [pc, #124]	; (8004d48 <HAL_GPIO_Init+0x354>)
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004cd0:	4b1d      	ldr	r3, [pc, #116]	; (8004d48 <HAL_GPIO_Init+0x354>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	43db      	mvns	r3, r3
 8004cda:	69ba      	ldr	r2, [r7, #24]
 8004cdc:	4013      	ands	r3, r2
 8004cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004cf4:	4a14      	ldr	r2, [pc, #80]	; (8004d48 <HAL_GPIO_Init+0x354>)
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	61fb      	str	r3, [r7, #28]
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	2b0f      	cmp	r3, #15
 8004d04:	f67f ae84 	bls.w	8004a10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d08:	bf00      	nop
 8004d0a:	bf00      	nop
 8004d0c:	3724      	adds	r7, #36	; 0x24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	40023800 	.word	0x40023800
 8004d1c:	40013800 	.word	0x40013800
 8004d20:	40020000 	.word	0x40020000
 8004d24:	40020400 	.word	0x40020400
 8004d28:	40020800 	.word	0x40020800
 8004d2c:	40020c00 	.word	0x40020c00
 8004d30:	40021000 	.word	0x40021000
 8004d34:	40021400 	.word	0x40021400
 8004d38:	40021800 	.word	0x40021800
 8004d3c:	40021c00 	.word	0x40021c00
 8004d40:	40022000 	.word	0x40022000
 8004d44:	40022400 	.word	0x40022400
 8004d48:	40013c00 	.word	0x40013c00

08004d4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	460b      	mov	r3, r1
 8004d56:	807b      	strh	r3, [r7, #2]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d5c:	787b      	ldrb	r3, [r7, #1]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d62:	887a      	ldrh	r2, [r7, #2]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d68:	e003      	b.n	8004d72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d6a:	887b      	ldrh	r3, [r7, #2]
 8004d6c:	041a      	lsls	r2, r3, #16
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	619a      	str	r2, [r3, #24]
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
	...

08004d80 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004d86:	2300      	movs	r3, #0
 8004d88:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	603b      	str	r3, [r7, #0]
 8004d8e:	4b20      	ldr	r3, [pc, #128]	; (8004e10 <HAL_PWREx_EnableOverDrive+0x90>)
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	4a1f      	ldr	r2, [pc, #124]	; (8004e10 <HAL_PWREx_EnableOverDrive+0x90>)
 8004d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d98:	6413      	str	r3, [r2, #64]	; 0x40
 8004d9a:	4b1d      	ldr	r3, [pc, #116]	; (8004e10 <HAL_PWREx_EnableOverDrive+0x90>)
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004da2:	603b      	str	r3, [r7, #0]
 8004da4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004da6:	4b1b      	ldr	r3, [pc, #108]	; (8004e14 <HAL_PWREx_EnableOverDrive+0x94>)
 8004da8:	2201      	movs	r2, #1
 8004daa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004dac:	f7ff f932 	bl	8004014 <HAL_GetTick>
 8004db0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004db2:	e009      	b.n	8004dc8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004db4:	f7ff f92e 	bl	8004014 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dc2:	d901      	bls.n	8004dc8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e01f      	b.n	8004e08 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004dc8:	4b13      	ldr	r3, [pc, #76]	; (8004e18 <HAL_PWREx_EnableOverDrive+0x98>)
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd4:	d1ee      	bne.n	8004db4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004dd6:	4b11      	ldr	r3, [pc, #68]	; (8004e1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004dd8:	2201      	movs	r2, #1
 8004dda:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ddc:	f7ff f91a 	bl	8004014 <HAL_GetTick>
 8004de0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004de2:	e009      	b.n	8004df8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004de4:	f7ff f916 	bl	8004014 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004df2:	d901      	bls.n	8004df8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e007      	b.n	8004e08 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004df8:	4b07      	ldr	r3, [pc, #28]	; (8004e18 <HAL_PWREx_EnableOverDrive+0x98>)
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e04:	d1ee      	bne.n	8004de4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3708      	adds	r7, #8
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	40023800 	.word	0x40023800
 8004e14:	420e0040 	.word	0x420e0040
 8004e18:	40007000 	.word	0x40007000
 8004e1c:	420e0044 	.word	0x420e0044

08004e20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e267      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d075      	beq.n	8004f2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e3e:	4b88      	ldr	r3, [pc, #544]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f003 030c 	and.w	r3, r3, #12
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	d00c      	beq.n	8004e64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e4a:	4b85      	ldr	r3, [pc, #532]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e52:	2b08      	cmp	r3, #8
 8004e54:	d112      	bne.n	8004e7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e56:	4b82      	ldr	r3, [pc, #520]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e62:	d10b      	bne.n	8004e7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e64:	4b7e      	ldr	r3, [pc, #504]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d05b      	beq.n	8004f28 <HAL_RCC_OscConfig+0x108>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d157      	bne.n	8004f28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e242      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e84:	d106      	bne.n	8004e94 <HAL_RCC_OscConfig+0x74>
 8004e86:	4b76      	ldr	r3, [pc, #472]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a75      	ldr	r2, [pc, #468]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	e01d      	b.n	8004ed0 <HAL_RCC_OscConfig+0xb0>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e9c:	d10c      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x98>
 8004e9e:	4b70      	ldr	r3, [pc, #448]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a6f      	ldr	r2, [pc, #444]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ea8:	6013      	str	r3, [r2, #0]
 8004eaa:	4b6d      	ldr	r3, [pc, #436]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a6c      	ldr	r2, [pc, #432]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eb4:	6013      	str	r3, [r2, #0]
 8004eb6:	e00b      	b.n	8004ed0 <HAL_RCC_OscConfig+0xb0>
 8004eb8:	4b69      	ldr	r3, [pc, #420]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a68      	ldr	r2, [pc, #416]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ec2:	6013      	str	r3, [r2, #0]
 8004ec4:	4b66      	ldr	r3, [pc, #408]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a65      	ldr	r2, [pc, #404]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ece:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d013      	beq.n	8004f00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed8:	f7ff f89c 	bl	8004014 <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ee0:	f7ff f898 	bl	8004014 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b64      	cmp	r3, #100	; 0x64
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e207      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ef2:	4b5b      	ldr	r3, [pc, #364]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d0f0      	beq.n	8004ee0 <HAL_RCC_OscConfig+0xc0>
 8004efe:	e014      	b.n	8004f2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f00:	f7ff f888 	bl	8004014 <HAL_GetTick>
 8004f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f08:	f7ff f884 	bl	8004014 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b64      	cmp	r3, #100	; 0x64
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e1f3      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f1a:	4b51      	ldr	r3, [pc, #324]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1f0      	bne.n	8004f08 <HAL_RCC_OscConfig+0xe8>
 8004f26:	e000      	b.n	8004f2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0302 	and.w	r3, r3, #2
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d063      	beq.n	8004ffe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f36:	4b4a      	ldr	r3, [pc, #296]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f003 030c 	and.w	r3, r3, #12
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00b      	beq.n	8004f5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f42:	4b47      	ldr	r3, [pc, #284]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f4a:	2b08      	cmp	r3, #8
 8004f4c:	d11c      	bne.n	8004f88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f4e:	4b44      	ldr	r3, [pc, #272]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d116      	bne.n	8004f88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f5a:	4b41      	ldr	r3, [pc, #260]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d005      	beq.n	8004f72 <HAL_RCC_OscConfig+0x152>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d001      	beq.n	8004f72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e1c7      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f72:	4b3b      	ldr	r3, [pc, #236]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	00db      	lsls	r3, r3, #3
 8004f80:	4937      	ldr	r1, [pc, #220]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f86:	e03a      	b.n	8004ffe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d020      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f90:	4b34      	ldr	r3, [pc, #208]	; (8005064 <HAL_RCC_OscConfig+0x244>)
 8004f92:	2201      	movs	r2, #1
 8004f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f96:	f7ff f83d 	bl	8004014 <HAL_GetTick>
 8004f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f9c:	e008      	b.n	8004fb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f9e:	f7ff f839 	bl	8004014 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d901      	bls.n	8004fb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e1a8      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fb0:	4b2b      	ldr	r3, [pc, #172]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d0f0      	beq.n	8004f9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fbc:	4b28      	ldr	r3, [pc, #160]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	00db      	lsls	r3, r3, #3
 8004fca:	4925      	ldr	r1, [pc, #148]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	600b      	str	r3, [r1, #0]
 8004fd0:	e015      	b.n	8004ffe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fd2:	4b24      	ldr	r3, [pc, #144]	; (8005064 <HAL_RCC_OscConfig+0x244>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd8:	f7ff f81c 	bl	8004014 <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fde:	e008      	b.n	8004ff2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fe0:	f7ff f818 	bl	8004014 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e187      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ff2:	4b1b      	ldr	r3, [pc, #108]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1f0      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0308 	and.w	r3, r3, #8
 8005006:	2b00      	cmp	r3, #0
 8005008:	d036      	beq.n	8005078 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d016      	beq.n	8005040 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005012:	4b15      	ldr	r3, [pc, #84]	; (8005068 <HAL_RCC_OscConfig+0x248>)
 8005014:	2201      	movs	r2, #1
 8005016:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005018:	f7fe fffc 	bl	8004014 <HAL_GetTick>
 800501c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005020:	f7fe fff8 	bl	8004014 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e167      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005032:	4b0b      	ldr	r3, [pc, #44]	; (8005060 <HAL_RCC_OscConfig+0x240>)
 8005034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d0f0      	beq.n	8005020 <HAL_RCC_OscConfig+0x200>
 800503e:	e01b      	b.n	8005078 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005040:	4b09      	ldr	r3, [pc, #36]	; (8005068 <HAL_RCC_OscConfig+0x248>)
 8005042:	2200      	movs	r2, #0
 8005044:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005046:	f7fe ffe5 	bl	8004014 <HAL_GetTick>
 800504a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800504c:	e00e      	b.n	800506c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800504e:	f7fe ffe1 	bl	8004014 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d907      	bls.n	800506c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e150      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
 8005060:	40023800 	.word	0x40023800
 8005064:	42470000 	.word	0x42470000
 8005068:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800506c:	4b88      	ldr	r3, [pc, #544]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 800506e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1ea      	bne.n	800504e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 8097 	beq.w	80051b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005086:	2300      	movs	r3, #0
 8005088:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800508a:	4b81      	ldr	r3, [pc, #516]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10f      	bne.n	80050b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005096:	2300      	movs	r3, #0
 8005098:	60bb      	str	r3, [r7, #8]
 800509a:	4b7d      	ldr	r3, [pc, #500]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	4a7c      	ldr	r2, [pc, #496]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 80050a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050a4:	6413      	str	r3, [r2, #64]	; 0x40
 80050a6:	4b7a      	ldr	r3, [pc, #488]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ae:	60bb      	str	r3, [r7, #8]
 80050b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050b2:	2301      	movs	r3, #1
 80050b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050b6:	4b77      	ldr	r3, [pc, #476]	; (8005294 <HAL_RCC_OscConfig+0x474>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d118      	bne.n	80050f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050c2:	4b74      	ldr	r3, [pc, #464]	; (8005294 <HAL_RCC_OscConfig+0x474>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a73      	ldr	r2, [pc, #460]	; (8005294 <HAL_RCC_OscConfig+0x474>)
 80050c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050ce:	f7fe ffa1 	bl	8004014 <HAL_GetTick>
 80050d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050d4:	e008      	b.n	80050e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050d6:	f7fe ff9d 	bl	8004014 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d901      	bls.n	80050e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e10c      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050e8:	4b6a      	ldr	r3, [pc, #424]	; (8005294 <HAL_RCC_OscConfig+0x474>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d0f0      	beq.n	80050d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d106      	bne.n	800510a <HAL_RCC_OscConfig+0x2ea>
 80050fc:	4b64      	ldr	r3, [pc, #400]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 80050fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005100:	4a63      	ldr	r2, [pc, #396]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 8005102:	f043 0301 	orr.w	r3, r3, #1
 8005106:	6713      	str	r3, [r2, #112]	; 0x70
 8005108:	e01c      	b.n	8005144 <HAL_RCC_OscConfig+0x324>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	2b05      	cmp	r3, #5
 8005110:	d10c      	bne.n	800512c <HAL_RCC_OscConfig+0x30c>
 8005112:	4b5f      	ldr	r3, [pc, #380]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 8005114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005116:	4a5e      	ldr	r2, [pc, #376]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 8005118:	f043 0304 	orr.w	r3, r3, #4
 800511c:	6713      	str	r3, [r2, #112]	; 0x70
 800511e:	4b5c      	ldr	r3, [pc, #368]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 8005120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005122:	4a5b      	ldr	r2, [pc, #364]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 8005124:	f043 0301 	orr.w	r3, r3, #1
 8005128:	6713      	str	r3, [r2, #112]	; 0x70
 800512a:	e00b      	b.n	8005144 <HAL_RCC_OscConfig+0x324>
 800512c:	4b58      	ldr	r3, [pc, #352]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 800512e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005130:	4a57      	ldr	r2, [pc, #348]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 8005132:	f023 0301 	bic.w	r3, r3, #1
 8005136:	6713      	str	r3, [r2, #112]	; 0x70
 8005138:	4b55      	ldr	r3, [pc, #340]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 800513a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513c:	4a54      	ldr	r2, [pc, #336]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 800513e:	f023 0304 	bic.w	r3, r3, #4
 8005142:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d015      	beq.n	8005178 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800514c:	f7fe ff62 	bl	8004014 <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005152:	e00a      	b.n	800516a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005154:	f7fe ff5e 	bl	8004014 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005162:	4293      	cmp	r3, r2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e0cb      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800516a:	4b49      	ldr	r3, [pc, #292]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 800516c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d0ee      	beq.n	8005154 <HAL_RCC_OscConfig+0x334>
 8005176:	e014      	b.n	80051a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005178:	f7fe ff4c 	bl	8004014 <HAL_GetTick>
 800517c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800517e:	e00a      	b.n	8005196 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005180:	f7fe ff48 	bl	8004014 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	f241 3288 	movw	r2, #5000	; 0x1388
 800518e:	4293      	cmp	r3, r2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e0b5      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005196:	4b3e      	ldr	r3, [pc, #248]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 8005198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1ee      	bne.n	8005180 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051a2:	7dfb      	ldrb	r3, [r7, #23]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d105      	bne.n	80051b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051a8:	4b39      	ldr	r3, [pc, #228]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 80051aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ac:	4a38      	ldr	r2, [pc, #224]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 80051ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f000 80a1 	beq.w	8005300 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051be:	4b34      	ldr	r3, [pc, #208]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f003 030c 	and.w	r3, r3, #12
 80051c6:	2b08      	cmp	r3, #8
 80051c8:	d05c      	beq.n	8005284 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d141      	bne.n	8005256 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051d2:	4b31      	ldr	r3, [pc, #196]	; (8005298 <HAL_RCC_OscConfig+0x478>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d8:	f7fe ff1c 	bl	8004014 <HAL_GetTick>
 80051dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051de:	e008      	b.n	80051f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051e0:	f7fe ff18 	bl	8004014 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e087      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051f2:	4b27      	ldr	r3, [pc, #156]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1f0      	bne.n	80051e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	69da      	ldr	r2, [r3, #28]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	431a      	orrs	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	019b      	lsls	r3, r3, #6
 800520e:	431a      	orrs	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005214:	085b      	lsrs	r3, r3, #1
 8005216:	3b01      	subs	r3, #1
 8005218:	041b      	lsls	r3, r3, #16
 800521a:	431a      	orrs	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005220:	061b      	lsls	r3, r3, #24
 8005222:	491b      	ldr	r1, [pc, #108]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 8005224:	4313      	orrs	r3, r2
 8005226:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005228:	4b1b      	ldr	r3, [pc, #108]	; (8005298 <HAL_RCC_OscConfig+0x478>)
 800522a:	2201      	movs	r2, #1
 800522c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800522e:	f7fe fef1 	bl	8004014 <HAL_GetTick>
 8005232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005234:	e008      	b.n	8005248 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005236:	f7fe feed 	bl	8004014 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2b02      	cmp	r3, #2
 8005242:	d901      	bls.n	8005248 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e05c      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005248:	4b11      	ldr	r3, [pc, #68]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d0f0      	beq.n	8005236 <HAL_RCC_OscConfig+0x416>
 8005254:	e054      	b.n	8005300 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005256:	4b10      	ldr	r3, [pc, #64]	; (8005298 <HAL_RCC_OscConfig+0x478>)
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800525c:	f7fe feda 	bl	8004014 <HAL_GetTick>
 8005260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005262:	e008      	b.n	8005276 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005264:	f7fe fed6 	bl	8004014 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	2b02      	cmp	r3, #2
 8005270:	d901      	bls.n	8005276 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e045      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005276:	4b06      	ldr	r3, [pc, #24]	; (8005290 <HAL_RCC_OscConfig+0x470>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1f0      	bne.n	8005264 <HAL_RCC_OscConfig+0x444>
 8005282:	e03d      	b.n	8005300 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d107      	bne.n	800529c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e038      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
 8005290:	40023800 	.word	0x40023800
 8005294:	40007000 	.word	0x40007000
 8005298:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800529c:	4b1b      	ldr	r3, [pc, #108]	; (800530c <HAL_RCC_OscConfig+0x4ec>)
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d028      	beq.n	80052fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d121      	bne.n	80052fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d11a      	bne.n	80052fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052cc:	4013      	ands	r3, r2
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d111      	bne.n	80052fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e2:	085b      	lsrs	r3, r3, #1
 80052e4:	3b01      	subs	r3, #1
 80052e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d107      	bne.n	80052fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d001      	beq.n	8005300 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e000      	b.n	8005302 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3718      	adds	r7, #24
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	40023800 	.word	0x40023800

08005310 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e0cc      	b.n	80054be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005324:	4b68      	ldr	r3, [pc, #416]	; (80054c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 030f 	and.w	r3, r3, #15
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	429a      	cmp	r2, r3
 8005330:	d90c      	bls.n	800534c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005332:	4b65      	ldr	r3, [pc, #404]	; (80054c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	b2d2      	uxtb	r2, r2
 8005338:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800533a:	4b63      	ldr	r3, [pc, #396]	; (80054c8 <HAL_RCC_ClockConfig+0x1b8>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 030f 	and.w	r3, r3, #15
 8005342:	683a      	ldr	r2, [r7, #0]
 8005344:	429a      	cmp	r2, r3
 8005346:	d001      	beq.n	800534c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e0b8      	b.n	80054be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b00      	cmp	r3, #0
 8005356:	d020      	beq.n	800539a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0304 	and.w	r3, r3, #4
 8005360:	2b00      	cmp	r3, #0
 8005362:	d005      	beq.n	8005370 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005364:	4b59      	ldr	r3, [pc, #356]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	4a58      	ldr	r2, [pc, #352]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 800536a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800536e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0308 	and.w	r3, r3, #8
 8005378:	2b00      	cmp	r3, #0
 800537a:	d005      	beq.n	8005388 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800537c:	4b53      	ldr	r3, [pc, #332]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	4a52      	ldr	r2, [pc, #328]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 8005382:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005386:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005388:	4b50      	ldr	r3, [pc, #320]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	494d      	ldr	r1, [pc, #308]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 8005396:	4313      	orrs	r3, r2
 8005398:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d044      	beq.n	8005430 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d107      	bne.n	80053be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ae:	4b47      	ldr	r3, [pc, #284]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d119      	bne.n	80053ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e07f      	b.n	80054be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d003      	beq.n	80053ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053ca:	2b03      	cmp	r3, #3
 80053cc:	d107      	bne.n	80053de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053ce:	4b3f      	ldr	r3, [pc, #252]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d109      	bne.n	80053ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e06f      	b.n	80054be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053de:	4b3b      	ldr	r3, [pc, #236]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0302 	and.w	r3, r3, #2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d101      	bne.n	80053ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e067      	b.n	80054be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053ee:	4b37      	ldr	r3, [pc, #220]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f023 0203 	bic.w	r2, r3, #3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	4934      	ldr	r1, [pc, #208]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005400:	f7fe fe08 	bl	8004014 <HAL_GetTick>
 8005404:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005406:	e00a      	b.n	800541e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005408:	f7fe fe04 	bl	8004014 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	f241 3288 	movw	r2, #5000	; 0x1388
 8005416:	4293      	cmp	r3, r2
 8005418:	d901      	bls.n	800541e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e04f      	b.n	80054be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800541e:	4b2b      	ldr	r3, [pc, #172]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f003 020c 	and.w	r2, r3, #12
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	429a      	cmp	r2, r3
 800542e:	d1eb      	bne.n	8005408 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005430:	4b25      	ldr	r3, [pc, #148]	; (80054c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 030f 	and.w	r3, r3, #15
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	429a      	cmp	r2, r3
 800543c:	d20c      	bcs.n	8005458 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800543e:	4b22      	ldr	r3, [pc, #136]	; (80054c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005440:	683a      	ldr	r2, [r7, #0]
 8005442:	b2d2      	uxtb	r2, r2
 8005444:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005446:	4b20      	ldr	r3, [pc, #128]	; (80054c8 <HAL_RCC_ClockConfig+0x1b8>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 030f 	and.w	r3, r3, #15
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	429a      	cmp	r2, r3
 8005452:	d001      	beq.n	8005458 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e032      	b.n	80054be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0304 	and.w	r3, r3, #4
 8005460:	2b00      	cmp	r3, #0
 8005462:	d008      	beq.n	8005476 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005464:	4b19      	ldr	r3, [pc, #100]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	4916      	ldr	r1, [pc, #88]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 8005472:	4313      	orrs	r3, r2
 8005474:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0308 	and.w	r3, r3, #8
 800547e:	2b00      	cmp	r3, #0
 8005480:	d009      	beq.n	8005496 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005482:	4b12      	ldr	r3, [pc, #72]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	00db      	lsls	r3, r3, #3
 8005490:	490e      	ldr	r1, [pc, #56]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 8005492:	4313      	orrs	r3, r2
 8005494:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005496:	f000 f821 	bl	80054dc <HAL_RCC_GetSysClockFreq>
 800549a:	4602      	mov	r2, r0
 800549c:	4b0b      	ldr	r3, [pc, #44]	; (80054cc <HAL_RCC_ClockConfig+0x1bc>)
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	091b      	lsrs	r3, r3, #4
 80054a2:	f003 030f 	and.w	r3, r3, #15
 80054a6:	490a      	ldr	r1, [pc, #40]	; (80054d0 <HAL_RCC_ClockConfig+0x1c0>)
 80054a8:	5ccb      	ldrb	r3, [r1, r3]
 80054aa:	fa22 f303 	lsr.w	r3, r2, r3
 80054ae:	4a09      	ldr	r2, [pc, #36]	; (80054d4 <HAL_RCC_ClockConfig+0x1c4>)
 80054b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054b2:	4b09      	ldr	r3, [pc, #36]	; (80054d8 <HAL_RCC_ClockConfig+0x1c8>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7fe f9c0 	bl	800383c <HAL_InitTick>

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	40023c00 	.word	0x40023c00
 80054cc:	40023800 	.word	0x40023800
 80054d0:	0800ef70 	.word	0x0800ef70
 80054d4:	20000048 	.word	0x20000048
 80054d8:	2000004c 	.word	0x2000004c

080054dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054e0:	b090      	sub	sp, #64	; 0x40
 80054e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054e4:	2300      	movs	r3, #0
 80054e6:	637b      	str	r3, [r7, #52]	; 0x34
 80054e8:	2300      	movs	r3, #0
 80054ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054ec:	2300      	movs	r3, #0
 80054ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80054f0:	2300      	movs	r3, #0
 80054f2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054f4:	4b59      	ldr	r3, [pc, #356]	; (800565c <HAL_RCC_GetSysClockFreq+0x180>)
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f003 030c 	and.w	r3, r3, #12
 80054fc:	2b08      	cmp	r3, #8
 80054fe:	d00d      	beq.n	800551c <HAL_RCC_GetSysClockFreq+0x40>
 8005500:	2b08      	cmp	r3, #8
 8005502:	f200 80a1 	bhi.w	8005648 <HAL_RCC_GetSysClockFreq+0x16c>
 8005506:	2b00      	cmp	r3, #0
 8005508:	d002      	beq.n	8005510 <HAL_RCC_GetSysClockFreq+0x34>
 800550a:	2b04      	cmp	r3, #4
 800550c:	d003      	beq.n	8005516 <HAL_RCC_GetSysClockFreq+0x3a>
 800550e:	e09b      	b.n	8005648 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005510:	4b53      	ldr	r3, [pc, #332]	; (8005660 <HAL_RCC_GetSysClockFreq+0x184>)
 8005512:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005514:	e09b      	b.n	800564e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005516:	4b53      	ldr	r3, [pc, #332]	; (8005664 <HAL_RCC_GetSysClockFreq+0x188>)
 8005518:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800551a:	e098      	b.n	800564e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800551c:	4b4f      	ldr	r3, [pc, #316]	; (800565c <HAL_RCC_GetSysClockFreq+0x180>)
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005524:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005526:	4b4d      	ldr	r3, [pc, #308]	; (800565c <HAL_RCC_GetSysClockFreq+0x180>)
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d028      	beq.n	8005584 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005532:	4b4a      	ldr	r3, [pc, #296]	; (800565c <HAL_RCC_GetSysClockFreq+0x180>)
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	099b      	lsrs	r3, r3, #6
 8005538:	2200      	movs	r2, #0
 800553a:	623b      	str	r3, [r7, #32]
 800553c:	627a      	str	r2, [r7, #36]	; 0x24
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005544:	2100      	movs	r1, #0
 8005546:	4b47      	ldr	r3, [pc, #284]	; (8005664 <HAL_RCC_GetSysClockFreq+0x188>)
 8005548:	fb03 f201 	mul.w	r2, r3, r1
 800554c:	2300      	movs	r3, #0
 800554e:	fb00 f303 	mul.w	r3, r0, r3
 8005552:	4413      	add	r3, r2
 8005554:	4a43      	ldr	r2, [pc, #268]	; (8005664 <HAL_RCC_GetSysClockFreq+0x188>)
 8005556:	fba0 1202 	umull	r1, r2, r0, r2
 800555a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800555c:	460a      	mov	r2, r1
 800555e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005562:	4413      	add	r3, r2
 8005564:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005568:	2200      	movs	r2, #0
 800556a:	61bb      	str	r3, [r7, #24]
 800556c:	61fa      	str	r2, [r7, #28]
 800556e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005572:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005576:	f7fb fb47 	bl	8000c08 <__aeabi_uldivmod>
 800557a:	4602      	mov	r2, r0
 800557c:	460b      	mov	r3, r1
 800557e:	4613      	mov	r3, r2
 8005580:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005582:	e053      	b.n	800562c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005584:	4b35      	ldr	r3, [pc, #212]	; (800565c <HAL_RCC_GetSysClockFreq+0x180>)
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	099b      	lsrs	r3, r3, #6
 800558a:	2200      	movs	r2, #0
 800558c:	613b      	str	r3, [r7, #16]
 800558e:	617a      	str	r2, [r7, #20]
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005596:	f04f 0b00 	mov.w	fp, #0
 800559a:	4652      	mov	r2, sl
 800559c:	465b      	mov	r3, fp
 800559e:	f04f 0000 	mov.w	r0, #0
 80055a2:	f04f 0100 	mov.w	r1, #0
 80055a6:	0159      	lsls	r1, r3, #5
 80055a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055ac:	0150      	lsls	r0, r2, #5
 80055ae:	4602      	mov	r2, r0
 80055b0:	460b      	mov	r3, r1
 80055b2:	ebb2 080a 	subs.w	r8, r2, sl
 80055b6:	eb63 090b 	sbc.w	r9, r3, fp
 80055ba:	f04f 0200 	mov.w	r2, #0
 80055be:	f04f 0300 	mov.w	r3, #0
 80055c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80055c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80055ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80055ce:	ebb2 0408 	subs.w	r4, r2, r8
 80055d2:	eb63 0509 	sbc.w	r5, r3, r9
 80055d6:	f04f 0200 	mov.w	r2, #0
 80055da:	f04f 0300 	mov.w	r3, #0
 80055de:	00eb      	lsls	r3, r5, #3
 80055e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055e4:	00e2      	lsls	r2, r4, #3
 80055e6:	4614      	mov	r4, r2
 80055e8:	461d      	mov	r5, r3
 80055ea:	eb14 030a 	adds.w	r3, r4, sl
 80055ee:	603b      	str	r3, [r7, #0]
 80055f0:	eb45 030b 	adc.w	r3, r5, fp
 80055f4:	607b      	str	r3, [r7, #4]
 80055f6:	f04f 0200 	mov.w	r2, #0
 80055fa:	f04f 0300 	mov.w	r3, #0
 80055fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005602:	4629      	mov	r1, r5
 8005604:	028b      	lsls	r3, r1, #10
 8005606:	4621      	mov	r1, r4
 8005608:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800560c:	4621      	mov	r1, r4
 800560e:	028a      	lsls	r2, r1, #10
 8005610:	4610      	mov	r0, r2
 8005612:	4619      	mov	r1, r3
 8005614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005616:	2200      	movs	r2, #0
 8005618:	60bb      	str	r3, [r7, #8]
 800561a:	60fa      	str	r2, [r7, #12]
 800561c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005620:	f7fb faf2 	bl	8000c08 <__aeabi_uldivmod>
 8005624:	4602      	mov	r2, r0
 8005626:	460b      	mov	r3, r1
 8005628:	4613      	mov	r3, r2
 800562a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800562c:	4b0b      	ldr	r3, [pc, #44]	; (800565c <HAL_RCC_GetSysClockFreq+0x180>)
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	0c1b      	lsrs	r3, r3, #16
 8005632:	f003 0303 	and.w	r3, r3, #3
 8005636:	3301      	adds	r3, #1
 8005638:	005b      	lsls	r3, r3, #1
 800563a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800563c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800563e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005640:	fbb2 f3f3 	udiv	r3, r2, r3
 8005644:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005646:	e002      	b.n	800564e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005648:	4b05      	ldr	r3, [pc, #20]	; (8005660 <HAL_RCC_GetSysClockFreq+0x184>)
 800564a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800564c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800564e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005650:	4618      	mov	r0, r3
 8005652:	3740      	adds	r7, #64	; 0x40
 8005654:	46bd      	mov	sp, r7
 8005656:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800565a:	bf00      	nop
 800565c:	40023800 	.word	0x40023800
 8005660:	00f42400 	.word	0x00f42400
 8005664:	017d7840 	.word	0x017d7840

08005668 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005668:	b480      	push	{r7}
 800566a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800566c:	4b03      	ldr	r3, [pc, #12]	; (800567c <HAL_RCC_GetHCLKFreq+0x14>)
 800566e:	681b      	ldr	r3, [r3, #0]
}
 8005670:	4618      	mov	r0, r3
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	20000048 	.word	0x20000048

08005680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005684:	f7ff fff0 	bl	8005668 <HAL_RCC_GetHCLKFreq>
 8005688:	4602      	mov	r2, r0
 800568a:	4b05      	ldr	r3, [pc, #20]	; (80056a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	0a9b      	lsrs	r3, r3, #10
 8005690:	f003 0307 	and.w	r3, r3, #7
 8005694:	4903      	ldr	r1, [pc, #12]	; (80056a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005696:	5ccb      	ldrb	r3, [r1, r3]
 8005698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800569c:	4618      	mov	r0, r3
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	40023800 	.word	0x40023800
 80056a4:	0800ef80 	.word	0x0800ef80

080056a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80056ac:	f7ff ffdc 	bl	8005668 <HAL_RCC_GetHCLKFreq>
 80056b0:	4602      	mov	r2, r0
 80056b2:	4b05      	ldr	r3, [pc, #20]	; (80056c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	0b5b      	lsrs	r3, r3, #13
 80056b8:	f003 0307 	and.w	r3, r3, #7
 80056bc:	4903      	ldr	r1, [pc, #12]	; (80056cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80056be:	5ccb      	ldrb	r3, [r1, r3]
 80056c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	40023800 	.word	0x40023800
 80056cc:	0800ef80 	.word	0x0800ef80

080056d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	220f      	movs	r2, #15
 80056de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80056e0:	4b12      	ldr	r3, [pc, #72]	; (800572c <HAL_RCC_GetClockConfig+0x5c>)
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f003 0203 	and.w	r2, r3, #3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80056ec:	4b0f      	ldr	r3, [pc, #60]	; (800572c <HAL_RCC_GetClockConfig+0x5c>)
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80056f8:	4b0c      	ldr	r3, [pc, #48]	; (800572c <HAL_RCC_GetClockConfig+0x5c>)
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005704:	4b09      	ldr	r3, [pc, #36]	; (800572c <HAL_RCC_GetClockConfig+0x5c>)
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	08db      	lsrs	r3, r3, #3
 800570a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005712:	4b07      	ldr	r3, [pc, #28]	; (8005730 <HAL_RCC_GetClockConfig+0x60>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 020f 	and.w	r2, r3, #15
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	601a      	str	r2, [r3, #0]
}
 800571e:	bf00      	nop
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	40023800 	.word	0x40023800
 8005730:	40023c00 	.word	0x40023c00

08005734 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800573c:	2300      	movs	r3, #0
 800573e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005740:	2300      	movs	r3, #0
 8005742:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b00      	cmp	r3, #0
 800574e:	d10b      	bne.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005758:	2b00      	cmp	r3, #0
 800575a:	d105      	bne.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005764:	2b00      	cmp	r3, #0
 8005766:	d075      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005768:	4b91      	ldr	r3, [pc, #580]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800576a:	2200      	movs	r2, #0
 800576c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800576e:	f7fe fc51 	bl	8004014 <HAL_GetTick>
 8005772:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005774:	e008      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005776:	f7fe fc4d 	bl	8004014 <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	2b02      	cmp	r3, #2
 8005782:	d901      	bls.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e189      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005788:	4b8a      	ldr	r3, [pc, #552]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1f0      	bne.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	2b00      	cmp	r3, #0
 800579e:	d009      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	019a      	lsls	r2, r3, #6
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	071b      	lsls	r3, r3, #28
 80057ac:	4981      	ldr	r1, [pc, #516]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0302 	and.w	r3, r3, #2
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d01f      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80057c0:	4b7c      	ldr	r3, [pc, #496]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057c6:	0f1b      	lsrs	r3, r3, #28
 80057c8:	f003 0307 	and.w	r3, r3, #7
 80057cc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	019a      	lsls	r2, r3, #6
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	061b      	lsls	r3, r3, #24
 80057da:	431a      	orrs	r2, r3
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	071b      	lsls	r3, r3, #28
 80057e0:	4974      	ldr	r1, [pc, #464]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80057e8:	4b72      	ldr	r3, [pc, #456]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057ee:	f023 021f 	bic.w	r2, r3, #31
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	3b01      	subs	r3, #1
 80057f8:	496e      	ldr	r1, [pc, #440]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00d      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	019a      	lsls	r2, r3, #6
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	061b      	lsls	r3, r3, #24
 8005818:	431a      	orrs	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	071b      	lsls	r3, r3, #28
 8005820:	4964      	ldr	r1, [pc, #400]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005822:	4313      	orrs	r3, r2
 8005824:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005828:	4b61      	ldr	r3, [pc, #388]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800582a:	2201      	movs	r2, #1
 800582c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800582e:	f7fe fbf1 	bl	8004014 <HAL_GetTick>
 8005832:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005834:	e008      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005836:	f7fe fbed 	bl	8004014 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	2b02      	cmp	r3, #2
 8005842:	d901      	bls.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e129      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005848:	4b5a      	ldr	r3, [pc, #360]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d0f0      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0304 	and.w	r3, r3, #4
 800585c:	2b00      	cmp	r3, #0
 800585e:	d105      	bne.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005868:	2b00      	cmp	r3, #0
 800586a:	d079      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800586c:	4b52      	ldr	r3, [pc, #328]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800586e:	2200      	movs	r2, #0
 8005870:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005872:	f7fe fbcf 	bl	8004014 <HAL_GetTick>
 8005876:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005878:	e008      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800587a:	f7fe fbcb 	bl	8004014 <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	2b02      	cmp	r3, #2
 8005886:	d901      	bls.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e107      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800588c:	4b49      	ldr	r3, [pc, #292]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005894:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005898:	d0ef      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0304 	and.w	r3, r3, #4
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d020      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80058a6:	4b43      	ldr	r3, [pc, #268]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ac:	0f1b      	lsrs	r3, r3, #28
 80058ae:	f003 0307 	and.w	r3, r3, #7
 80058b2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	019a      	lsls	r2, r3, #6
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	061b      	lsls	r3, r3, #24
 80058c0:	431a      	orrs	r2, r3
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	071b      	lsls	r3, r3, #28
 80058c6:	493b      	ldr	r1, [pc, #236]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80058ce:	4b39      	ldr	r3, [pc, #228]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a1b      	ldr	r3, [r3, #32]
 80058dc:	3b01      	subs	r3, #1
 80058de:	021b      	lsls	r3, r3, #8
 80058e0:	4934      	ldr	r1, [pc, #208]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0308 	and.w	r3, r3, #8
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d01e      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80058f4:	4b2f      	ldr	r3, [pc, #188]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058fa:	0e1b      	lsrs	r3, r3, #24
 80058fc:	f003 030f 	and.w	r3, r3, #15
 8005900:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	019a      	lsls	r2, r3, #6
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	061b      	lsls	r3, r3, #24
 800590c:	431a      	orrs	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	071b      	lsls	r3, r3, #28
 8005914:	4927      	ldr	r1, [pc, #156]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005916:	4313      	orrs	r3, r2
 8005918:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800591c:	4b25      	ldr	r3, [pc, #148]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800591e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005922:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592a:	4922      	ldr	r1, [pc, #136]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800592c:	4313      	orrs	r3, r2
 800592e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005932:	4b21      	ldr	r3, [pc, #132]	; (80059b8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005934:	2201      	movs	r2, #1
 8005936:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005938:	f7fe fb6c 	bl	8004014 <HAL_GetTick>
 800593c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800593e:	e008      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005940:	f7fe fb68 	bl	8004014 <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	2b02      	cmp	r3, #2
 800594c:	d901      	bls.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e0a4      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005952:	4b18      	ldr	r3, [pc, #96]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800595a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800595e:	d1ef      	bne.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0320 	and.w	r3, r3, #32
 8005968:	2b00      	cmp	r3, #0
 800596a:	f000 808b 	beq.w	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800596e:	2300      	movs	r3, #0
 8005970:	60fb      	str	r3, [r7, #12]
 8005972:	4b10      	ldr	r3, [pc, #64]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005976:	4a0f      	ldr	r2, [pc, #60]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800597c:	6413      	str	r3, [r2, #64]	; 0x40
 800597e:	4b0d      	ldr	r3, [pc, #52]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005986:	60fb      	str	r3, [r7, #12]
 8005988:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800598a:	4b0c      	ldr	r3, [pc, #48]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a0b      	ldr	r2, [pc, #44]	; (80059bc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005994:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005996:	f7fe fb3d 	bl	8004014 <HAL_GetTick>
 800599a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800599c:	e010      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800599e:	f7fe fb39 	bl	8004014 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d909      	bls.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e075      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x368>
 80059b0:	42470068 	.word	0x42470068
 80059b4:	40023800 	.word	0x40023800
 80059b8:	42470070 	.word	0x42470070
 80059bc:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80059c0:	4b38      	ldr	r3, [pc, #224]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d0e8      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80059cc:	4b36      	ldr	r3, [pc, #216]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059d4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d02f      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d028      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059ea:	4b2f      	ldr	r3, [pc, #188]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059f2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80059f4:	4b2d      	ldr	r3, [pc, #180]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80059f6:	2201      	movs	r2, #1
 80059f8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80059fa:	4b2c      	ldr	r3, [pc, #176]	; (8005aac <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80059fc:	2200      	movs	r2, #0
 80059fe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005a00:	4a29      	ldr	r2, [pc, #164]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005a06:	4b28      	ldr	r3, [pc, #160]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d114      	bne.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005a12:	f7fe faff 	bl	8004014 <HAL_GetTick>
 8005a16:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a18:	e00a      	b.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a1a:	f7fe fafb 	bl	8004014 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d901      	bls.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e035      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a30:	4b1d      	ldr	r3, [pc, #116]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a34:	f003 0302 	and.w	r3, r3, #2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d0ee      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a48:	d10d      	bne.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005a4a:	4b17      	ldr	r3, [pc, #92]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a56:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a5e:	4912      	ldr	r1, [pc, #72]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	608b      	str	r3, [r1, #8]
 8005a64:	e005      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005a66:	4b10      	ldr	r3, [pc, #64]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	4a0f      	ldr	r2, [pc, #60]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a6c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005a70:	6093      	str	r3, [r2, #8]
 8005a72:	4b0d      	ldr	r3, [pc, #52]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a7e:	490a      	ldr	r1, [pc, #40]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 0310 	and.w	r3, r3, #16
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d004      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005a96:	4b06      	ldr	r3, [pc, #24]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005a98:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3718      	adds	r7, #24
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	40007000 	.word	0x40007000
 8005aa8:	40023800 	.word	0x40023800
 8005aac:	42470e40 	.word	0x42470e40
 8005ab0:	424711e0 	.word	0x424711e0

08005ab4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e066      	b.n	8005b98 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	7f5b      	ldrb	r3, [r3, #29]
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d105      	bne.n	8005ae0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f7fd fe58 	bl	8003790 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	22ca      	movs	r2, #202	; 0xca
 8005aec:	625a      	str	r2, [r3, #36]	; 0x24
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2253      	movs	r2, #83	; 0x53
 8005af4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f87a 	bl	8005bf0 <RTC_EnterInitMode>
 8005afc:	4603      	mov	r3, r0
 8005afe:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005b00:	7bfb      	ldrb	r3, [r7, #15]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d12c      	bne.n	8005b60 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	6812      	ldr	r2, [r2, #0]
 8005b10:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005b14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b18:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	6899      	ldr	r1, [r3, #8]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	431a      	orrs	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	430a      	orrs	r2, r1
 8005b36:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	68d2      	ldr	r2, [r2, #12]
 8005b40:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	6919      	ldr	r1, [r3, #16]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	041a      	lsls	r2, r3, #16
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f881 	bl	8005c5e <RTC_ExitInitMode>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005b60:	7bfb      	ldrb	r3, [r7, #15]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d113      	bne.n	8005b8e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b74:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	699a      	ldr	r2, [r3, #24]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	430a      	orrs	r2, r1
 8005b86:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	22ff      	movs	r2, #255	; 0xff
 8005b94:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3710      	adds	r7, #16
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68da      	ldr	r2, [r3, #12]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005bba:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005bbc:	f7fe fa2a 	bl	8004014 <HAL_GetTick>
 8005bc0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005bc2:	e009      	b.n	8005bd8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005bc4:	f7fe fa26 	bl	8004014 <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bd2:	d901      	bls.n	8005bd8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e007      	b.n	8005be8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	f003 0320 	and.w	r3, r3, #32
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d0ee      	beq.n	8005bc4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d122      	bne.n	8005c54 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68da      	ldr	r2, [r3, #12]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c1c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c1e:	f7fe f9f9 	bl	8004014 <HAL_GetTick>
 8005c22:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005c24:	e00c      	b.n	8005c40 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c26:	f7fe f9f5 	bl	8004014 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c34:	d904      	bls.n	8005c40 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2204      	movs	r2, #4
 8005c3a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d102      	bne.n	8005c54 <RTC_EnterInitMode+0x64>
 8005c4e:	7bfb      	ldrb	r3, [r7, #15]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d1e8      	bne.n	8005c26 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b084      	sub	sp, #16
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c66:	2300      	movs	r3, #0
 8005c68:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68da      	ldr	r2, [r3, #12]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c78:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f003 0320 	and.w	r3, r3, #32
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10a      	bne.n	8005c9e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f7ff ff89 	bl	8005ba0 <HAL_RTC_WaitForSynchro>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d004      	beq.n	8005c9e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2204      	movs	r2, #4
 8005c98:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b082      	sub	sp, #8
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e041      	b.n	8005d3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d106      	bne.n	8005cd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 f839 	bl	8005d46 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	3304      	adds	r3, #4
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	4610      	mov	r0, r2
 8005ce8:	f000 f9d8 	bl	800609c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b083      	sub	sp, #12
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005d4e:	bf00      	nop
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
	...

08005d5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d001      	beq.n	8005d74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e04e      	b.n	8005e12 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2202      	movs	r2, #2
 8005d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68da      	ldr	r2, [r3, #12]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f042 0201 	orr.w	r2, r2, #1
 8005d8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a23      	ldr	r2, [pc, #140]	; (8005e20 <HAL_TIM_Base_Start_IT+0xc4>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d022      	beq.n	8005ddc <HAL_TIM_Base_Start_IT+0x80>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d9e:	d01d      	beq.n	8005ddc <HAL_TIM_Base_Start_IT+0x80>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a1f      	ldr	r2, [pc, #124]	; (8005e24 <HAL_TIM_Base_Start_IT+0xc8>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d018      	beq.n	8005ddc <HAL_TIM_Base_Start_IT+0x80>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a1e      	ldr	r2, [pc, #120]	; (8005e28 <HAL_TIM_Base_Start_IT+0xcc>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d013      	beq.n	8005ddc <HAL_TIM_Base_Start_IT+0x80>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a1c      	ldr	r2, [pc, #112]	; (8005e2c <HAL_TIM_Base_Start_IT+0xd0>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d00e      	beq.n	8005ddc <HAL_TIM_Base_Start_IT+0x80>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a1b      	ldr	r2, [pc, #108]	; (8005e30 <HAL_TIM_Base_Start_IT+0xd4>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d009      	beq.n	8005ddc <HAL_TIM_Base_Start_IT+0x80>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a19      	ldr	r2, [pc, #100]	; (8005e34 <HAL_TIM_Base_Start_IT+0xd8>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d004      	beq.n	8005ddc <HAL_TIM_Base_Start_IT+0x80>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a18      	ldr	r2, [pc, #96]	; (8005e38 <HAL_TIM_Base_Start_IT+0xdc>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d111      	bne.n	8005e00 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f003 0307 	and.w	r3, r3, #7
 8005de6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2b06      	cmp	r3, #6
 8005dec:	d010      	beq.n	8005e10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f042 0201 	orr.w	r2, r2, #1
 8005dfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dfe:	e007      	b.n	8005e10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f042 0201 	orr.w	r2, r2, #1
 8005e0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	40010000 	.word	0x40010000
 8005e24:	40000400 	.word	0x40000400
 8005e28:	40000800 	.word	0x40000800
 8005e2c:	40000c00 	.word	0x40000c00
 8005e30:	40010400 	.word	0x40010400
 8005e34:	40014000 	.word	0x40014000
 8005e38:	40001800 	.word	0x40001800

08005e3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	f003 0302 	and.w	r3, r3, #2
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d122      	bne.n	8005e98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d11b      	bne.n	8005e98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f06f 0202 	mvn.w	r2, #2
 8005e68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	f003 0303 	and.w	r3, r3, #3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 f8ee 	bl	8006060 <HAL_TIM_IC_CaptureCallback>
 8005e84:	e005      	b.n	8005e92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f8e0 	bl	800604c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 f8f1 	bl	8006074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	f003 0304 	and.w	r3, r3, #4
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	d122      	bne.n	8005eec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	f003 0304 	and.w	r3, r3, #4
 8005eb0:	2b04      	cmp	r3, #4
 8005eb2:	d11b      	bne.n	8005eec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f06f 0204 	mvn.w	r2, #4
 8005ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2202      	movs	r2, #2
 8005ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d003      	beq.n	8005eda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f8c4 	bl	8006060 <HAL_TIM_IC_CaptureCallback>
 8005ed8:	e005      	b.n	8005ee6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f8b6 	bl	800604c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 f8c7 	bl	8006074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	f003 0308 	and.w	r3, r3, #8
 8005ef6:	2b08      	cmp	r3, #8
 8005ef8:	d122      	bne.n	8005f40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	f003 0308 	and.w	r3, r3, #8
 8005f04:	2b08      	cmp	r3, #8
 8005f06:	d11b      	bne.n	8005f40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f06f 0208 	mvn.w	r2, #8
 8005f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2204      	movs	r2, #4
 8005f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	69db      	ldr	r3, [r3, #28]
 8005f1e:	f003 0303 	and.w	r3, r3, #3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f89a 	bl	8006060 <HAL_TIM_IC_CaptureCallback>
 8005f2c:	e005      	b.n	8005f3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f88c 	bl	800604c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 f89d 	bl	8006074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	f003 0310 	and.w	r3, r3, #16
 8005f4a:	2b10      	cmp	r3, #16
 8005f4c:	d122      	bne.n	8005f94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	f003 0310 	and.w	r3, r3, #16
 8005f58:	2b10      	cmp	r3, #16
 8005f5a:	d11b      	bne.n	8005f94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f06f 0210 	mvn.w	r2, #16
 8005f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2208      	movs	r2, #8
 8005f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d003      	beq.n	8005f82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f870 	bl	8006060 <HAL_TIM_IC_CaptureCallback>
 8005f80:	e005      	b.n	8005f8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f862 	bl	800604c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 f873 	bl	8006074 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d10e      	bne.n	8005fc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	f003 0301 	and.w	r3, r3, #1
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d107      	bne.n	8005fc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f06f 0201 	mvn.w	r2, #1
 8005fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f7fd fbaa 	bl	8003714 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fca:	2b80      	cmp	r3, #128	; 0x80
 8005fcc:	d10e      	bne.n	8005fec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd8:	2b80      	cmp	r3, #128	; 0x80
 8005fda:	d107      	bne.n	8005fec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f902 	bl	80061f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff6:	2b40      	cmp	r3, #64	; 0x40
 8005ff8:	d10e      	bne.n	8006018 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006004:	2b40      	cmp	r3, #64	; 0x40
 8006006:	d107      	bne.n	8006018 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f838 	bl	8006088 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	f003 0320 	and.w	r3, r3, #32
 8006022:	2b20      	cmp	r3, #32
 8006024:	d10e      	bne.n	8006044 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	f003 0320 	and.w	r3, r3, #32
 8006030:	2b20      	cmp	r3, #32
 8006032:	d107      	bne.n	8006044 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f06f 0220 	mvn.w	r2, #32
 800603c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f8cc 	bl	80061dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006044:	bf00      	nop
 8006046:	3708      	adds	r7, #8
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006068:	bf00      	nop
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006074:	b480      	push	{r7}
 8006076:	b083      	sub	sp, #12
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800607c:	bf00      	nop
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a40      	ldr	r2, [pc, #256]	; (80061b0 <TIM_Base_SetConfig+0x114>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d013      	beq.n	80060dc <TIM_Base_SetConfig+0x40>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ba:	d00f      	beq.n	80060dc <TIM_Base_SetConfig+0x40>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a3d      	ldr	r2, [pc, #244]	; (80061b4 <TIM_Base_SetConfig+0x118>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d00b      	beq.n	80060dc <TIM_Base_SetConfig+0x40>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a3c      	ldr	r2, [pc, #240]	; (80061b8 <TIM_Base_SetConfig+0x11c>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d007      	beq.n	80060dc <TIM_Base_SetConfig+0x40>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a3b      	ldr	r2, [pc, #236]	; (80061bc <TIM_Base_SetConfig+0x120>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d003      	beq.n	80060dc <TIM_Base_SetConfig+0x40>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a3a      	ldr	r2, [pc, #232]	; (80061c0 <TIM_Base_SetConfig+0x124>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d108      	bne.n	80060ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a2f      	ldr	r2, [pc, #188]	; (80061b0 <TIM_Base_SetConfig+0x114>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d02b      	beq.n	800614e <TIM_Base_SetConfig+0xb2>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060fc:	d027      	beq.n	800614e <TIM_Base_SetConfig+0xb2>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a2c      	ldr	r2, [pc, #176]	; (80061b4 <TIM_Base_SetConfig+0x118>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d023      	beq.n	800614e <TIM_Base_SetConfig+0xb2>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a2b      	ldr	r2, [pc, #172]	; (80061b8 <TIM_Base_SetConfig+0x11c>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d01f      	beq.n	800614e <TIM_Base_SetConfig+0xb2>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a2a      	ldr	r2, [pc, #168]	; (80061bc <TIM_Base_SetConfig+0x120>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d01b      	beq.n	800614e <TIM_Base_SetConfig+0xb2>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a29      	ldr	r2, [pc, #164]	; (80061c0 <TIM_Base_SetConfig+0x124>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d017      	beq.n	800614e <TIM_Base_SetConfig+0xb2>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a28      	ldr	r2, [pc, #160]	; (80061c4 <TIM_Base_SetConfig+0x128>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d013      	beq.n	800614e <TIM_Base_SetConfig+0xb2>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a27      	ldr	r2, [pc, #156]	; (80061c8 <TIM_Base_SetConfig+0x12c>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d00f      	beq.n	800614e <TIM_Base_SetConfig+0xb2>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a26      	ldr	r2, [pc, #152]	; (80061cc <TIM_Base_SetConfig+0x130>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d00b      	beq.n	800614e <TIM_Base_SetConfig+0xb2>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a25      	ldr	r2, [pc, #148]	; (80061d0 <TIM_Base_SetConfig+0x134>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d007      	beq.n	800614e <TIM_Base_SetConfig+0xb2>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a24      	ldr	r2, [pc, #144]	; (80061d4 <TIM_Base_SetConfig+0x138>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d003      	beq.n	800614e <TIM_Base_SetConfig+0xb2>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a23      	ldr	r2, [pc, #140]	; (80061d8 <TIM_Base_SetConfig+0x13c>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d108      	bne.n	8006160 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006154:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	4313      	orrs	r3, r2
 800615e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	4313      	orrs	r3, r2
 800616c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	689a      	ldr	r2, [r3, #8]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a0a      	ldr	r2, [pc, #40]	; (80061b0 <TIM_Base_SetConfig+0x114>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d003      	beq.n	8006194 <TIM_Base_SetConfig+0xf8>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a0c      	ldr	r2, [pc, #48]	; (80061c0 <TIM_Base_SetConfig+0x124>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d103      	bne.n	800619c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	691a      	ldr	r2, [r3, #16]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	615a      	str	r2, [r3, #20]
}
 80061a2:	bf00      	nop
 80061a4:	3714      	adds	r7, #20
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	40010000 	.word	0x40010000
 80061b4:	40000400 	.word	0x40000400
 80061b8:	40000800 	.word	0x40000800
 80061bc:	40000c00 	.word	0x40000c00
 80061c0:	40010400 	.word	0x40010400
 80061c4:	40014000 	.word	0x40014000
 80061c8:	40014400 	.word	0x40014400
 80061cc:	40014800 	.word	0x40014800
 80061d0:	40001800 	.word	0x40001800
 80061d4:	40001c00 	.word	0x40001c00
 80061d8:	40002000 	.word	0x40002000

080061dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061f8:	bf00      	nop
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e03f      	b.n	8006296 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b00      	cmp	r3, #0
 8006220:	d106      	bne.n	8006230 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7fd fdb2 	bl	8003d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2224      	movs	r2, #36	; 0x24
 8006234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68da      	ldr	r2, [r3, #12]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006246:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 ffff 	bl	800724c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	691a      	ldr	r2, [r3, #16]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800625c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	695a      	ldr	r2, [r3, #20]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800626c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68da      	ldr	r2, [r3, #12]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800627c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2220      	movs	r2, #32
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2220      	movs	r2, #32
 8006290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3708      	adds	r7, #8
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b08a      	sub	sp, #40	; 0x28
 80062a2:	af02      	add	r7, sp, #8
 80062a4:	60f8      	str	r0, [r7, #12]
 80062a6:	60b9      	str	r1, [r7, #8]
 80062a8:	603b      	str	r3, [r7, #0]
 80062aa:	4613      	mov	r3, r2
 80062ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80062ae:	2300      	movs	r3, #0
 80062b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b20      	cmp	r3, #32
 80062bc:	d17c      	bne.n	80063b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d002      	beq.n	80062ca <HAL_UART_Transmit+0x2c>
 80062c4:	88fb      	ldrh	r3, [r7, #6]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d101      	bne.n	80062ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e075      	b.n	80063ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d101      	bne.n	80062dc <HAL_UART_Transmit+0x3e>
 80062d8:	2302      	movs	r3, #2
 80062da:	e06e      	b.n	80063ba <HAL_UART_Transmit+0x11c>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2221      	movs	r2, #33	; 0x21
 80062ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062f2:	f7fd fe8f 	bl	8004014 <HAL_GetTick>
 80062f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	88fa      	ldrh	r2, [r7, #6]
 80062fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	88fa      	ldrh	r2, [r7, #6]
 8006302:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800630c:	d108      	bne.n	8006320 <HAL_UART_Transmit+0x82>
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d104      	bne.n	8006320 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006316:	2300      	movs	r3, #0
 8006318:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	61bb      	str	r3, [r7, #24]
 800631e:	e003      	b.n	8006328 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006324:	2300      	movs	r3, #0
 8006326:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006330:	e02a      	b.n	8006388 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	2200      	movs	r2, #0
 800633a:	2180      	movs	r1, #128	; 0x80
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f000 fc79 	bl	8006c34 <UART_WaitOnFlagUntilTimeout>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	e036      	b.n	80063ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10b      	bne.n	800636a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	461a      	mov	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006360:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	3302      	adds	r3, #2
 8006366:	61bb      	str	r3, [r7, #24]
 8006368:	e007      	b.n	800637a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	781a      	ldrb	r2, [r3, #0]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	3301      	adds	r3, #1
 8006378:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800637e:	b29b      	uxth	r3, r3
 8006380:	3b01      	subs	r3, #1
 8006382:	b29a      	uxth	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800638c:	b29b      	uxth	r3, r3
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1cf      	bne.n	8006332 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	2200      	movs	r2, #0
 800639a:	2140      	movs	r1, #64	; 0x40
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f000 fc49 	bl	8006c34 <UART_WaitOnFlagUntilTimeout>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d001      	beq.n	80063ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80063a8:	2303      	movs	r3, #3
 80063aa:	e006      	b.n	80063ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2220      	movs	r2, #32
 80063b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80063b4:	2300      	movs	r3, #0
 80063b6:	e000      	b.n	80063ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80063b8:	2302      	movs	r3, #2
  }
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3720      	adds	r7, #32
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b084      	sub	sp, #16
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	60f8      	str	r0, [r7, #12]
 80063ca:	60b9      	str	r1, [r7, #8]
 80063cc:	4613      	mov	r3, r2
 80063ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	2b20      	cmp	r3, #32
 80063da:	d11d      	bne.n	8006418 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d002      	beq.n	80063e8 <HAL_UART_Receive_IT+0x26>
 80063e2:	88fb      	ldrh	r3, [r7, #6]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d101      	bne.n	80063ec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e016      	b.n	800641a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d101      	bne.n	80063fa <HAL_UART_Receive_IT+0x38>
 80063f6:	2302      	movs	r3, #2
 80063f8:	e00f      	b.n	800641a <HAL_UART_Receive_IT+0x58>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006408:	88fb      	ldrh	r3, [r7, #6]
 800640a:	461a      	mov	r2, r3
 800640c:	68b9      	ldr	r1, [r7, #8]
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f000 fc7e 	bl	8006d10 <UART_Start_Receive_IT>
 8006414:	4603      	mov	r3, r0
 8006416:	e000      	b.n	800641a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006418:	2302      	movs	r3, #2
  }
}
 800641a:	4618      	mov	r0, r3
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006422:	b580      	push	{r7, lr}
 8006424:	b08c      	sub	sp, #48	; 0x30
 8006426:	af00      	add	r7, sp, #0
 8006428:	60f8      	str	r0, [r7, #12]
 800642a:	60b9      	str	r1, [r7, #8]
 800642c:	4613      	mov	r3, r2
 800642e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006436:	b2db      	uxtb	r3, r3
 8006438:	2b20      	cmp	r3, #32
 800643a:	d152      	bne.n	80064e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d002      	beq.n	8006448 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006442:	88fb      	ldrh	r3, [r7, #6]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d101      	bne.n	800644c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e04b      	b.n	80064e4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006452:	2b01      	cmp	r3, #1
 8006454:	d101      	bne.n	800645a <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8006456:	2302      	movs	r3, #2
 8006458:	e044      	b.n	80064e4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2201      	movs	r2, #1
 8006466:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006468:	88fb      	ldrh	r3, [r7, #6]
 800646a:	461a      	mov	r2, r3
 800646c:	68b9      	ldr	r1, [r7, #8]
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f000 fc8c 	bl	8006d8c <UART_Start_Receive_DMA>
 8006474:	4603      	mov	r3, r0
 8006476:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800647a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800647e:	2b00      	cmp	r3, #0
 8006480:	d12c      	bne.n	80064dc <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006486:	2b01      	cmp	r3, #1
 8006488:	d125      	bne.n	80064d6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800648a:	2300      	movs	r3, #0
 800648c:	613b      	str	r3, [r7, #16]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	613b      	str	r3, [r7, #16]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	613b      	str	r3, [r7, #16]
 800649e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	330c      	adds	r3, #12
 80064a6:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	e853 3f00 	ldrex	r3, [r3]
 80064ae:	617b      	str	r3, [r7, #20]
   return(result);
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	f043 0310 	orr.w	r3, r3, #16
 80064b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	330c      	adds	r3, #12
 80064be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064c0:	627a      	str	r2, [r7, #36]	; 0x24
 80064c2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c4:	6a39      	ldr	r1, [r7, #32]
 80064c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064c8:	e841 2300 	strex	r3, r2, [r1]
 80064cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1e5      	bne.n	80064a0 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80064d4:	e002      	b.n	80064dc <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80064dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80064e0:	e000      	b.n	80064e4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80064e2:	2302      	movs	r3, #2
  }
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3730      	adds	r7, #48	; 0x30
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b0ba      	sub	sp, #232	; 0xe8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006512:	2300      	movs	r3, #0
 8006514:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006518:	2300      	movs	r3, #0
 800651a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800651e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006522:	f003 030f 	and.w	r3, r3, #15
 8006526:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800652a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10f      	bne.n	8006552 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006536:	f003 0320 	and.w	r3, r3, #32
 800653a:	2b00      	cmp	r3, #0
 800653c:	d009      	beq.n	8006552 <HAL_UART_IRQHandler+0x66>
 800653e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006542:	f003 0320 	and.w	r3, r3, #32
 8006546:	2b00      	cmp	r3, #0
 8006548:	d003      	beq.n	8006552 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 fdc3 	bl	80070d6 <UART_Receive_IT>
      return;
 8006550:	e256      	b.n	8006a00 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006552:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006556:	2b00      	cmp	r3, #0
 8006558:	f000 80de 	beq.w	8006718 <HAL_UART_IRQHandler+0x22c>
 800655c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006560:	f003 0301 	and.w	r3, r3, #1
 8006564:	2b00      	cmp	r3, #0
 8006566:	d106      	bne.n	8006576 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800656c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006570:	2b00      	cmp	r3, #0
 8006572:	f000 80d1 	beq.w	8006718 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800657a:	f003 0301 	and.w	r3, r3, #1
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00b      	beq.n	800659a <HAL_UART_IRQHandler+0xae>
 8006582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800658a:	2b00      	cmp	r3, #0
 800658c:	d005      	beq.n	800659a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006592:	f043 0201 	orr.w	r2, r3, #1
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800659a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800659e:	f003 0304 	and.w	r3, r3, #4
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00b      	beq.n	80065be <HAL_UART_IRQHandler+0xd2>
 80065a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d005      	beq.n	80065be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b6:	f043 0202 	orr.w	r2, r3, #2
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065c2:	f003 0302 	and.w	r3, r3, #2
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00b      	beq.n	80065e2 <HAL_UART_IRQHandler+0xf6>
 80065ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d005      	beq.n	80065e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065da:	f043 0204 	orr.w	r2, r3, #4
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80065e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065e6:	f003 0308 	and.w	r3, r3, #8
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d011      	beq.n	8006612 <HAL_UART_IRQHandler+0x126>
 80065ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065f2:	f003 0320 	and.w	r3, r3, #32
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d105      	bne.n	8006606 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80065fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065fe:	f003 0301 	and.w	r3, r3, #1
 8006602:	2b00      	cmp	r3, #0
 8006604:	d005      	beq.n	8006612 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660a:	f043 0208 	orr.w	r2, r3, #8
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006616:	2b00      	cmp	r3, #0
 8006618:	f000 81ed 	beq.w	80069f6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800661c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006620:	f003 0320 	and.w	r3, r3, #32
 8006624:	2b00      	cmp	r3, #0
 8006626:	d008      	beq.n	800663a <HAL_UART_IRQHandler+0x14e>
 8006628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800662c:	f003 0320 	and.w	r3, r3, #32
 8006630:	2b00      	cmp	r3, #0
 8006632:	d002      	beq.n	800663a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 fd4e 	bl	80070d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	695b      	ldr	r3, [r3, #20]
 8006640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006644:	2b40      	cmp	r3, #64	; 0x40
 8006646:	bf0c      	ite	eq
 8006648:	2301      	moveq	r3, #1
 800664a:	2300      	movne	r3, #0
 800664c:	b2db      	uxtb	r3, r3
 800664e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006656:	f003 0308 	and.w	r3, r3, #8
 800665a:	2b00      	cmp	r3, #0
 800665c:	d103      	bne.n	8006666 <HAL_UART_IRQHandler+0x17a>
 800665e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006662:	2b00      	cmp	r3, #0
 8006664:	d04f      	beq.n	8006706 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 fc56 	bl	8006f18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006676:	2b40      	cmp	r3, #64	; 0x40
 8006678:	d141      	bne.n	80066fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	3314      	adds	r3, #20
 8006680:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006684:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006688:	e853 3f00 	ldrex	r3, [r3]
 800668c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006690:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006694:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006698:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	3314      	adds	r3, #20
 80066a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80066a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80066aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80066b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80066b6:	e841 2300 	strex	r3, r2, [r1]
 80066ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80066be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1d9      	bne.n	800667a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d013      	beq.n	80066f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d2:	4a7d      	ldr	r2, [pc, #500]	; (80068c8 <HAL_UART_IRQHandler+0x3dc>)
 80066d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066da:	4618      	mov	r0, r3
 80066dc:	f7fd fefe 	bl	80044dc <HAL_DMA_Abort_IT>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d016      	beq.n	8006714 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80066f0:	4610      	mov	r0, r2
 80066f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066f4:	e00e      	b.n	8006714 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f99a 	bl	8006a30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066fc:	e00a      	b.n	8006714 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f996 	bl	8006a30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006704:	e006      	b.n	8006714 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f992 	bl	8006a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006712:	e170      	b.n	80069f6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006714:	bf00      	nop
    return;
 8006716:	e16e      	b.n	80069f6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671c:	2b01      	cmp	r3, #1
 800671e:	f040 814a 	bne.w	80069b6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006726:	f003 0310 	and.w	r3, r3, #16
 800672a:	2b00      	cmp	r3, #0
 800672c:	f000 8143 	beq.w	80069b6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006734:	f003 0310 	and.w	r3, r3, #16
 8006738:	2b00      	cmp	r3, #0
 800673a:	f000 813c 	beq.w	80069b6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800673e:	2300      	movs	r3, #0
 8006740:	60bb      	str	r3, [r7, #8]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	60bb      	str	r3, [r7, #8]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	60bb      	str	r3, [r7, #8]
 8006752:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800675e:	2b40      	cmp	r3, #64	; 0x40
 8006760:	f040 80b4 	bne.w	80068cc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006770:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 8140 	beq.w	80069fa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800677e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006782:	429a      	cmp	r2, r3
 8006784:	f080 8139 	bcs.w	80069fa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800678e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800679a:	f000 8088 	beq.w	80068ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	330c      	adds	r3, #12
 80067a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067ac:	e853 3f00 	ldrex	r3, [r3]
 80067b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80067b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	330c      	adds	r3, #12
 80067c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80067ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80067ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80067d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80067da:	e841 2300 	strex	r3, r2, [r1]
 80067de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80067e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1d9      	bne.n	800679e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	3314      	adds	r3, #20
 80067f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067f4:	e853 3f00 	ldrex	r3, [r3]
 80067f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80067fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067fc:	f023 0301 	bic.w	r3, r3, #1
 8006800:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	3314      	adds	r3, #20
 800680a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800680e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006812:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006814:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006816:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800681a:	e841 2300 	strex	r3, r2, [r1]
 800681e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006820:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1e1      	bne.n	80067ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	3314      	adds	r3, #20
 800682c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006830:	e853 3f00 	ldrex	r3, [r3]
 8006834:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006836:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800683c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	3314      	adds	r3, #20
 8006846:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800684a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800684c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006850:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006852:	e841 2300 	strex	r3, r2, [r1]
 8006856:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006858:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1e3      	bne.n	8006826 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2220      	movs	r2, #32
 8006862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	330c      	adds	r3, #12
 8006872:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006876:	e853 3f00 	ldrex	r3, [r3]
 800687a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800687c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800687e:	f023 0310 	bic.w	r3, r3, #16
 8006882:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	330c      	adds	r3, #12
 800688c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006890:	65ba      	str	r2, [r7, #88]	; 0x58
 8006892:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006894:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006896:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006898:	e841 2300 	strex	r3, r2, [r1]
 800689c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800689e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1e3      	bne.n	800686c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7fd fda7 	bl	80043fc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	4619      	mov	r1, r3
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f7fd f94c 	bl	8003b5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068c4:	e099      	b.n	80069fa <HAL_UART_IRQHandler+0x50e>
 80068c6:	bf00      	nop
 80068c8:	08006fdf 	.word	0x08006fdf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	f000 808b 	beq.w	80069fe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80068e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f000 8086 	beq.w	80069fe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	330c      	adds	r3, #12
 80068f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fc:	e853 3f00 	ldrex	r3, [r3]
 8006900:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006904:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006908:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	330c      	adds	r3, #12
 8006912:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006916:	647a      	str	r2, [r7, #68]	; 0x44
 8006918:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800691c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800691e:	e841 2300 	strex	r3, r2, [r1]
 8006922:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1e3      	bne.n	80068f2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	3314      	adds	r3, #20
 8006930:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006934:	e853 3f00 	ldrex	r3, [r3]
 8006938:	623b      	str	r3, [r7, #32]
   return(result);
 800693a:	6a3b      	ldr	r3, [r7, #32]
 800693c:	f023 0301 	bic.w	r3, r3, #1
 8006940:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	3314      	adds	r3, #20
 800694a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800694e:	633a      	str	r2, [r7, #48]	; 0x30
 8006950:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006952:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006956:	e841 2300 	strex	r3, r2, [r1]
 800695a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800695c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1e3      	bne.n	800692a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2220      	movs	r2, #32
 8006966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	330c      	adds	r3, #12
 8006976:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	e853 3f00 	ldrex	r3, [r3]
 800697e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f023 0310 	bic.w	r3, r3, #16
 8006986:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	330c      	adds	r3, #12
 8006990:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006994:	61fa      	str	r2, [r7, #28]
 8006996:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006998:	69b9      	ldr	r1, [r7, #24]
 800699a:	69fa      	ldr	r2, [r7, #28]
 800699c:	e841 2300 	strex	r3, r2, [r1]
 80069a0:	617b      	str	r3, [r7, #20]
   return(result);
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1e3      	bne.n	8006970 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069ac:	4619      	mov	r1, r3
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7fd f8d4 	bl	8003b5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80069b4:	e023      	b.n	80069fe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80069b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d009      	beq.n	80069d6 <HAL_UART_IRQHandler+0x4ea>
 80069c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d003      	beq.n	80069d6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 fb19 	bl	8007006 <UART_Transmit_IT>
    return;
 80069d4:	e014      	b.n	8006a00 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80069d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00e      	beq.n	8006a00 <HAL_UART_IRQHandler+0x514>
 80069e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d008      	beq.n	8006a00 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fb59 	bl	80070a6 <UART_EndTransmit_IT>
    return;
 80069f4:	e004      	b.n	8006a00 <HAL_UART_IRQHandler+0x514>
    return;
 80069f6:	bf00      	nop
 80069f8:	e002      	b.n	8006a00 <HAL_UART_IRQHandler+0x514>
      return;
 80069fa:	bf00      	nop
 80069fc:	e000      	b.n	8006a00 <HAL_UART_IRQHandler+0x514>
      return;
 80069fe:	bf00      	nop
  }
}
 8006a00:	37e8      	adds	r7, #232	; 0xe8
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop

08006a08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b09c      	sub	sp, #112	; 0x70
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a50:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d172      	bne.n	8006b46 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a62:	2200      	movs	r2, #0
 8006a64:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	330c      	adds	r3, #12
 8006a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a70:	e853 3f00 	ldrex	r3, [r3]
 8006a74:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	330c      	adds	r3, #12
 8006a84:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a86:	65ba      	str	r2, [r7, #88]	; 0x58
 8006a88:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a8e:	e841 2300 	strex	r3, r2, [r1]
 8006a92:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1e5      	bne.n	8006a66 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	3314      	adds	r3, #20
 8006aa0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa4:	e853 3f00 	ldrex	r3, [r3]
 8006aa8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aac:	f023 0301 	bic.w	r3, r3, #1
 8006ab0:	667b      	str	r3, [r7, #100]	; 0x64
 8006ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	3314      	adds	r3, #20
 8006ab8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006aba:	647a      	str	r2, [r7, #68]	; 0x44
 8006abc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006abe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ac0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ac2:	e841 2300 	strex	r3, r2, [r1]
 8006ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1e5      	bne.n	8006a9a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	3314      	adds	r3, #20
 8006ad4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad8:	e853 3f00 	ldrex	r3, [r3]
 8006adc:	623b      	str	r3, [r7, #32]
   return(result);
 8006ade:	6a3b      	ldr	r3, [r7, #32]
 8006ae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ae4:	663b      	str	r3, [r7, #96]	; 0x60
 8006ae6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	3314      	adds	r3, #20
 8006aec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006aee:	633a      	str	r2, [r7, #48]	; 0x30
 8006af0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006af4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006af6:	e841 2300 	strex	r3, r2, [r1]
 8006afa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1e5      	bne.n	8006ace <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b04:	2220      	movs	r2, #32
 8006b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d119      	bne.n	8006b46 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	330c      	adds	r3, #12
 8006b18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	e853 3f00 	ldrex	r3, [r3]
 8006b20:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f023 0310 	bic.w	r3, r3, #16
 8006b28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	330c      	adds	r3, #12
 8006b30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b32:	61fa      	str	r2, [r7, #28]
 8006b34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b36:	69b9      	ldr	r1, [r7, #24]
 8006b38:	69fa      	ldr	r2, [r7, #28]
 8006b3a:	e841 2300 	strex	r3, r2, [r1]
 8006b3e:	617b      	str	r3, [r7, #20]
   return(result);
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1e5      	bne.n	8006b12 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d106      	bne.n	8006b5c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b52:	4619      	mov	r1, r3
 8006b54:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006b56:	f7fd f801 	bl	8003b5c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b5a:	e002      	b.n	8006b62 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006b5c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006b5e:	f7fd f867 	bl	8003c30 <HAL_UART_RxCpltCallback>
}
 8006b62:	bf00      	nop
 8006b64:	3770      	adds	r7, #112	; 0x70
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b084      	sub	sp, #16
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b76:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d108      	bne.n	8006b92 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b84:	085b      	lsrs	r3, r3, #1
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	4619      	mov	r1, r3
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f7fc ffe6 	bl	8003b5c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b90:	e002      	b.n	8006b98 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f7ff ff42 	bl	8006a1c <HAL_UART_RxHalfCpltCallback>
}
 8006b98:	bf00      	nop
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	695b      	ldr	r3, [r3, #20]
 8006bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bbc:	2b80      	cmp	r3, #128	; 0x80
 8006bbe:	bf0c      	ite	eq
 8006bc0:	2301      	moveq	r3, #1
 8006bc2:	2300      	movne	r3, #0
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	2b21      	cmp	r3, #33	; 0x21
 8006bd2:	d108      	bne.n	8006be6 <UART_DMAError+0x46>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d005      	beq.n	8006be6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006be0:	68b8      	ldr	r0, [r7, #8]
 8006be2:	f000 f971 	bl	8006ec8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	695b      	ldr	r3, [r3, #20]
 8006bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf0:	2b40      	cmp	r3, #64	; 0x40
 8006bf2:	bf0c      	ite	eq
 8006bf4:	2301      	moveq	r3, #1
 8006bf6:	2300      	movne	r3, #0
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	2b22      	cmp	r3, #34	; 0x22
 8006c06:	d108      	bne.n	8006c1a <UART_DMAError+0x7a>
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d005      	beq.n	8006c1a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	2200      	movs	r2, #0
 8006c12:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006c14:	68b8      	ldr	r0, [r7, #8]
 8006c16:	f000 f97f 	bl	8006f18 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1e:	f043 0210 	orr.w	r2, r3, #16
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c26:	68b8      	ldr	r0, [r7, #8]
 8006c28:	f7ff ff02 	bl	8006a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c2c:	bf00      	nop
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b090      	sub	sp, #64	; 0x40
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	603b      	str	r3, [r7, #0]
 8006c40:	4613      	mov	r3, r2
 8006c42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c44:	e050      	b.n	8006ce8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c4c:	d04c      	beq.n	8006ce8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d007      	beq.n	8006c64 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c54:	f7fd f9de 	bl	8004014 <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d241      	bcs.n	8006ce8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	330c      	adds	r3, #12
 8006c6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6e:	e853 3f00 	ldrex	r3, [r3]
 8006c72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	330c      	adds	r3, #12
 8006c82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006c84:	637a      	str	r2, [r7, #52]	; 0x34
 8006c86:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c8c:	e841 2300 	strex	r3, r2, [r1]
 8006c90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1e5      	bne.n	8006c64 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	3314      	adds	r3, #20
 8006c9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	e853 3f00 	ldrex	r3, [r3]
 8006ca6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	f023 0301 	bic.w	r3, r3, #1
 8006cae:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	3314      	adds	r3, #20
 8006cb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cb8:	623a      	str	r2, [r7, #32]
 8006cba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cbc:	69f9      	ldr	r1, [r7, #28]
 8006cbe:	6a3a      	ldr	r2, [r7, #32]
 8006cc0:	e841 2300 	strex	r3, r2, [r1]
 8006cc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1e5      	bne.n	8006c98 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2220      	movs	r2, #32
 8006cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2220      	movs	r2, #32
 8006cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e00f      	b.n	8006d08 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	68ba      	ldr	r2, [r7, #8]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	bf0c      	ite	eq
 8006cf8:	2301      	moveq	r3, #1
 8006cfa:	2300      	movne	r3, #0
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	461a      	mov	r2, r3
 8006d00:	79fb      	ldrb	r3, [r7, #7]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d09f      	beq.n	8006c46 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3740      	adds	r7, #64	; 0x40
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	88fa      	ldrh	r2, [r7, #6]
 8006d28:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	88fa      	ldrh	r2, [r7, #6]
 8006d2e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2222      	movs	r2, #34	; 0x22
 8006d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d007      	beq.n	8006d5e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68da      	ldr	r2, [r3, #12]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d5c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	695a      	ldr	r2, [r3, #20]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f042 0201 	orr.w	r2, r2, #1
 8006d6c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68da      	ldr	r2, [r3, #12]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f042 0220 	orr.w	r2, r2, #32
 8006d7c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3714      	adds	r7, #20
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b098      	sub	sp, #96	; 0x60
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	4613      	mov	r3, r2
 8006d98:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	88fa      	ldrh	r2, [r7, #6]
 8006da4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2222      	movs	r2, #34	; 0x22
 8006db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db8:	4a40      	ldr	r2, [pc, #256]	; (8006ebc <UART_Start_Receive_DMA+0x130>)
 8006dba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc0:	4a3f      	ldr	r2, [pc, #252]	; (8006ec0 <UART_Start_Receive_DMA+0x134>)
 8006dc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc8:	4a3e      	ldr	r2, [pc, #248]	; (8006ec4 <UART_Start_Receive_DMA+0x138>)
 8006dca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006dd4:	f107 0308 	add.w	r3, r7, #8
 8006dd8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	3304      	adds	r3, #4
 8006de4:	4619      	mov	r1, r3
 8006de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	88fb      	ldrh	r3, [r7, #6]
 8006dec:	f7fd faae 	bl	800434c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006df0:	2300      	movs	r3, #0
 8006df2:	613b      	str	r3, [r7, #16]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	613b      	str	r3, [r7, #16]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	613b      	str	r3, [r7, #16]
 8006e04:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d019      	beq.n	8006e4a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	330c      	adds	r3, #12
 8006e1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e20:	e853 3f00 	ldrex	r3, [r3]
 8006e24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	330c      	adds	r3, #12
 8006e34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e36:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006e38:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006e3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e3e:	e841 2300 	strex	r3, r2, [r1]
 8006e42:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006e44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1e5      	bne.n	8006e16 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	3314      	adds	r3, #20
 8006e50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e54:	e853 3f00 	ldrex	r3, [r3]
 8006e58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5c:	f043 0301 	orr.w	r3, r3, #1
 8006e60:	657b      	str	r3, [r7, #84]	; 0x54
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	3314      	adds	r3, #20
 8006e68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006e6a:	63ba      	str	r2, [r7, #56]	; 0x38
 8006e6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006e70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e72:	e841 2300 	strex	r3, r2, [r1]
 8006e76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1e5      	bne.n	8006e4a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	3314      	adds	r3, #20
 8006e84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	e853 3f00 	ldrex	r3, [r3]
 8006e8c:	617b      	str	r3, [r7, #20]
   return(result);
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e94:	653b      	str	r3, [r7, #80]	; 0x50
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	3314      	adds	r3, #20
 8006e9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006e9e:	627a      	str	r2, [r7, #36]	; 0x24
 8006ea0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea2:	6a39      	ldr	r1, [r7, #32]
 8006ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ea6:	e841 2300 	strex	r3, r2, [r1]
 8006eaa:	61fb      	str	r3, [r7, #28]
   return(result);
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d1e5      	bne.n	8006e7e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3760      	adds	r7, #96	; 0x60
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	08006a45 	.word	0x08006a45
 8006ec0:	08006b6b 	.word	0x08006b6b
 8006ec4:	08006ba1 	.word	0x08006ba1

08006ec8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b089      	sub	sp, #36	; 0x24
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	330c      	adds	r3, #12
 8006ed6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	e853 3f00 	ldrex	r3, [r3]
 8006ede:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006ee6:	61fb      	str	r3, [r7, #28]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	330c      	adds	r3, #12
 8006eee:	69fa      	ldr	r2, [r7, #28]
 8006ef0:	61ba      	str	r2, [r7, #24]
 8006ef2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef4:	6979      	ldr	r1, [r7, #20]
 8006ef6:	69ba      	ldr	r2, [r7, #24]
 8006ef8:	e841 2300 	strex	r3, r2, [r1]
 8006efc:	613b      	str	r3, [r7, #16]
   return(result);
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1e5      	bne.n	8006ed0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2220      	movs	r2, #32
 8006f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006f0c:	bf00      	nop
 8006f0e:	3724      	adds	r7, #36	; 0x24
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b095      	sub	sp, #84	; 0x54
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	330c      	adds	r3, #12
 8006f26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f2a:	e853 3f00 	ldrex	r3, [r3]
 8006f2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	330c      	adds	r3, #12
 8006f3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f40:	643a      	str	r2, [r7, #64]	; 0x40
 8006f42:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f48:	e841 2300 	strex	r3, r2, [r1]
 8006f4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1e5      	bne.n	8006f20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	3314      	adds	r3, #20
 8006f5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5c:	6a3b      	ldr	r3, [r7, #32]
 8006f5e:	e853 3f00 	ldrex	r3, [r3]
 8006f62:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	f023 0301 	bic.w	r3, r3, #1
 8006f6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	3314      	adds	r3, #20
 8006f72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f7c:	e841 2300 	strex	r3, r2, [r1]
 8006f80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1e5      	bne.n	8006f54 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d119      	bne.n	8006fc4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	330c      	adds	r3, #12
 8006f96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	e853 3f00 	ldrex	r3, [r3]
 8006f9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	f023 0310 	bic.w	r3, r3, #16
 8006fa6:	647b      	str	r3, [r7, #68]	; 0x44
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	330c      	adds	r3, #12
 8006fae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fb0:	61ba      	str	r2, [r7, #24]
 8006fb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb4:	6979      	ldr	r1, [r7, #20]
 8006fb6:	69ba      	ldr	r2, [r7, #24]
 8006fb8:	e841 2300 	strex	r3, r2, [r1]
 8006fbc:	613b      	str	r3, [r7, #16]
   return(result);
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1e5      	bne.n	8006f90 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2220      	movs	r2, #32
 8006fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006fd2:	bf00      	nop
 8006fd4:	3754      	adds	r7, #84	; 0x54
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr

08006fde <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b084      	sub	sp, #16
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f7ff fd19 	bl	8006a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ffe:	bf00      	nop
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007006:	b480      	push	{r7}
 8007008:	b085      	sub	sp, #20
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007014:	b2db      	uxtb	r3, r3
 8007016:	2b21      	cmp	r3, #33	; 0x21
 8007018:	d13e      	bne.n	8007098 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007022:	d114      	bne.n	800704e <UART_Transmit_IT+0x48>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d110      	bne.n	800704e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a1b      	ldr	r3, [r3, #32]
 8007030:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	881b      	ldrh	r3, [r3, #0]
 8007036:	461a      	mov	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007040:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a1b      	ldr	r3, [r3, #32]
 8007046:	1c9a      	adds	r2, r3, #2
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	621a      	str	r2, [r3, #32]
 800704c:	e008      	b.n	8007060 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	1c59      	adds	r1, r3, #1
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	6211      	str	r1, [r2, #32]
 8007058:	781a      	ldrb	r2, [r3, #0]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007064:	b29b      	uxth	r3, r3
 8007066:	3b01      	subs	r3, #1
 8007068:	b29b      	uxth	r3, r3
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	4619      	mov	r1, r3
 800706e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007070:	2b00      	cmp	r3, #0
 8007072:	d10f      	bne.n	8007094 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68da      	ldr	r2, [r3, #12]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007082:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68da      	ldr	r2, [r3, #12]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007092:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007094:	2300      	movs	r3, #0
 8007096:	e000      	b.n	800709a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007098:	2302      	movs	r3, #2
  }
}
 800709a:	4618      	mov	r0, r3
 800709c:	3714      	adds	r7, #20
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr

080070a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b082      	sub	sp, #8
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68da      	ldr	r2, [r3, #12]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2220      	movs	r2, #32
 80070c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7ff fc9e 	bl	8006a08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3708      	adds	r7, #8
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b08c      	sub	sp, #48	; 0x30
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2b22      	cmp	r3, #34	; 0x22
 80070e8:	f040 80ab 	bne.w	8007242 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070f4:	d117      	bne.n	8007126 <UART_Receive_IT+0x50>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d113      	bne.n	8007126 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80070fe:	2300      	movs	r3, #0
 8007100:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007106:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	b29b      	uxth	r3, r3
 8007110:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007114:	b29a      	uxth	r2, r3
 8007116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007118:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800711e:	1c9a      	adds	r2, r3, #2
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	629a      	str	r2, [r3, #40]	; 0x28
 8007124:	e026      	b.n	8007174 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800712a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800712c:	2300      	movs	r3, #0
 800712e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007138:	d007      	beq.n	800714a <UART_Receive_IT+0x74>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d10a      	bne.n	8007158 <UART_Receive_IT+0x82>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d106      	bne.n	8007158 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	b2da      	uxtb	r2, r3
 8007152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007154:	701a      	strb	r2, [r3, #0]
 8007156:	e008      	b.n	800716a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	b2db      	uxtb	r3, r3
 8007160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007164:	b2da      	uxtb	r2, r3
 8007166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007168:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800716e:	1c5a      	adds	r2, r3, #1
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007178:	b29b      	uxth	r3, r3
 800717a:	3b01      	subs	r3, #1
 800717c:	b29b      	uxth	r3, r3
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	4619      	mov	r1, r3
 8007182:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007184:	2b00      	cmp	r3, #0
 8007186:	d15a      	bne.n	800723e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68da      	ldr	r2, [r3, #12]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f022 0220 	bic.w	r2, r2, #32
 8007196:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68da      	ldr	r2, [r3, #12]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	695a      	ldr	r2, [r3, #20]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f022 0201 	bic.w	r2, r2, #1
 80071b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2220      	movs	r2, #32
 80071bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d135      	bne.n	8007234 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	330c      	adds	r3, #12
 80071d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	e853 3f00 	ldrex	r3, [r3]
 80071dc:	613b      	str	r3, [r7, #16]
   return(result);
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	f023 0310 	bic.w	r3, r3, #16
 80071e4:	627b      	str	r3, [r7, #36]	; 0x24
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	330c      	adds	r3, #12
 80071ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071ee:	623a      	str	r2, [r7, #32]
 80071f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f2:	69f9      	ldr	r1, [r7, #28]
 80071f4:	6a3a      	ldr	r2, [r7, #32]
 80071f6:	e841 2300 	strex	r3, r2, [r1]
 80071fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1e5      	bne.n	80071ce <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 0310 	and.w	r3, r3, #16
 800720c:	2b10      	cmp	r3, #16
 800720e:	d10a      	bne.n	8007226 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007210:	2300      	movs	r3, #0
 8007212:	60fb      	str	r3, [r7, #12]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	60fb      	str	r3, [r7, #12]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	60fb      	str	r3, [r7, #12]
 8007224:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800722a:	4619      	mov	r1, r3
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f7fc fc95 	bl	8003b5c <HAL_UARTEx_RxEventCallback>
 8007232:	e002      	b.n	800723a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f7fc fcfb 	bl	8003c30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800723a:	2300      	movs	r3, #0
 800723c:	e002      	b.n	8007244 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800723e:	2300      	movs	r3, #0
 8007240:	e000      	b.n	8007244 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007242:	2302      	movs	r3, #2
  }
}
 8007244:	4618      	mov	r0, r3
 8007246:	3730      	adds	r7, #48	; 0x30
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800724c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007250:	b0c0      	sub	sp, #256	; 0x100
 8007252:	af00      	add	r7, sp, #0
 8007254:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007268:	68d9      	ldr	r1, [r3, #12]
 800726a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	ea40 0301 	orr.w	r3, r0, r1
 8007274:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800727a:	689a      	ldr	r2, [r3, #8]
 800727c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	431a      	orrs	r2, r3
 8007284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	431a      	orrs	r2, r3
 800728c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007290:	69db      	ldr	r3, [r3, #28]
 8007292:	4313      	orrs	r3, r2
 8007294:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80072a4:	f021 010c 	bic.w	r1, r1, #12
 80072a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80072b2:	430b      	orrs	r3, r1
 80072b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80072b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	695b      	ldr	r3, [r3, #20]
 80072be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80072c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072c6:	6999      	ldr	r1, [r3, #24]
 80072c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	ea40 0301 	orr.w	r3, r0, r1
 80072d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80072d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	4b8f      	ldr	r3, [pc, #572]	; (8007518 <UART_SetConfig+0x2cc>)
 80072dc:	429a      	cmp	r2, r3
 80072de:	d005      	beq.n	80072ec <UART_SetConfig+0xa0>
 80072e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	4b8d      	ldr	r3, [pc, #564]	; (800751c <UART_SetConfig+0x2d0>)
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d104      	bne.n	80072f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80072ec:	f7fe f9dc 	bl	80056a8 <HAL_RCC_GetPCLK2Freq>
 80072f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80072f4:	e003      	b.n	80072fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80072f6:	f7fe f9c3 	bl	8005680 <HAL_RCC_GetPCLK1Freq>
 80072fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007302:	69db      	ldr	r3, [r3, #28]
 8007304:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007308:	f040 810c 	bne.w	8007524 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800730c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007310:	2200      	movs	r2, #0
 8007312:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007316:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800731a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800731e:	4622      	mov	r2, r4
 8007320:	462b      	mov	r3, r5
 8007322:	1891      	adds	r1, r2, r2
 8007324:	65b9      	str	r1, [r7, #88]	; 0x58
 8007326:	415b      	adcs	r3, r3
 8007328:	65fb      	str	r3, [r7, #92]	; 0x5c
 800732a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800732e:	4621      	mov	r1, r4
 8007330:	eb12 0801 	adds.w	r8, r2, r1
 8007334:	4629      	mov	r1, r5
 8007336:	eb43 0901 	adc.w	r9, r3, r1
 800733a:	f04f 0200 	mov.w	r2, #0
 800733e:	f04f 0300 	mov.w	r3, #0
 8007342:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007346:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800734a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800734e:	4690      	mov	r8, r2
 8007350:	4699      	mov	r9, r3
 8007352:	4623      	mov	r3, r4
 8007354:	eb18 0303 	adds.w	r3, r8, r3
 8007358:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800735c:	462b      	mov	r3, r5
 800735e:	eb49 0303 	adc.w	r3, r9, r3
 8007362:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007372:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007376:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800737a:	460b      	mov	r3, r1
 800737c:	18db      	adds	r3, r3, r3
 800737e:	653b      	str	r3, [r7, #80]	; 0x50
 8007380:	4613      	mov	r3, r2
 8007382:	eb42 0303 	adc.w	r3, r2, r3
 8007386:	657b      	str	r3, [r7, #84]	; 0x54
 8007388:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800738c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007390:	f7f9 fc3a 	bl	8000c08 <__aeabi_uldivmod>
 8007394:	4602      	mov	r2, r0
 8007396:	460b      	mov	r3, r1
 8007398:	4b61      	ldr	r3, [pc, #388]	; (8007520 <UART_SetConfig+0x2d4>)
 800739a:	fba3 2302 	umull	r2, r3, r3, r2
 800739e:	095b      	lsrs	r3, r3, #5
 80073a0:	011c      	lsls	r4, r3, #4
 80073a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073a6:	2200      	movs	r2, #0
 80073a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80073ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80073b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80073b4:	4642      	mov	r2, r8
 80073b6:	464b      	mov	r3, r9
 80073b8:	1891      	adds	r1, r2, r2
 80073ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80073bc:	415b      	adcs	r3, r3
 80073be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80073c4:	4641      	mov	r1, r8
 80073c6:	eb12 0a01 	adds.w	sl, r2, r1
 80073ca:	4649      	mov	r1, r9
 80073cc:	eb43 0b01 	adc.w	fp, r3, r1
 80073d0:	f04f 0200 	mov.w	r2, #0
 80073d4:	f04f 0300 	mov.w	r3, #0
 80073d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80073dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80073e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073e4:	4692      	mov	sl, r2
 80073e6:	469b      	mov	fp, r3
 80073e8:	4643      	mov	r3, r8
 80073ea:	eb1a 0303 	adds.w	r3, sl, r3
 80073ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073f2:	464b      	mov	r3, r9
 80073f4:	eb4b 0303 	adc.w	r3, fp, r3
 80073f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80073fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007408:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800740c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007410:	460b      	mov	r3, r1
 8007412:	18db      	adds	r3, r3, r3
 8007414:	643b      	str	r3, [r7, #64]	; 0x40
 8007416:	4613      	mov	r3, r2
 8007418:	eb42 0303 	adc.w	r3, r2, r3
 800741c:	647b      	str	r3, [r7, #68]	; 0x44
 800741e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007422:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007426:	f7f9 fbef 	bl	8000c08 <__aeabi_uldivmod>
 800742a:	4602      	mov	r2, r0
 800742c:	460b      	mov	r3, r1
 800742e:	4611      	mov	r1, r2
 8007430:	4b3b      	ldr	r3, [pc, #236]	; (8007520 <UART_SetConfig+0x2d4>)
 8007432:	fba3 2301 	umull	r2, r3, r3, r1
 8007436:	095b      	lsrs	r3, r3, #5
 8007438:	2264      	movs	r2, #100	; 0x64
 800743a:	fb02 f303 	mul.w	r3, r2, r3
 800743e:	1acb      	subs	r3, r1, r3
 8007440:	00db      	lsls	r3, r3, #3
 8007442:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007446:	4b36      	ldr	r3, [pc, #216]	; (8007520 <UART_SetConfig+0x2d4>)
 8007448:	fba3 2302 	umull	r2, r3, r3, r2
 800744c:	095b      	lsrs	r3, r3, #5
 800744e:	005b      	lsls	r3, r3, #1
 8007450:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007454:	441c      	add	r4, r3
 8007456:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800745a:	2200      	movs	r2, #0
 800745c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007460:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007464:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007468:	4642      	mov	r2, r8
 800746a:	464b      	mov	r3, r9
 800746c:	1891      	adds	r1, r2, r2
 800746e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007470:	415b      	adcs	r3, r3
 8007472:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007474:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007478:	4641      	mov	r1, r8
 800747a:	1851      	adds	r1, r2, r1
 800747c:	6339      	str	r1, [r7, #48]	; 0x30
 800747e:	4649      	mov	r1, r9
 8007480:	414b      	adcs	r3, r1
 8007482:	637b      	str	r3, [r7, #52]	; 0x34
 8007484:	f04f 0200 	mov.w	r2, #0
 8007488:	f04f 0300 	mov.w	r3, #0
 800748c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007490:	4659      	mov	r1, fp
 8007492:	00cb      	lsls	r3, r1, #3
 8007494:	4651      	mov	r1, sl
 8007496:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800749a:	4651      	mov	r1, sl
 800749c:	00ca      	lsls	r2, r1, #3
 800749e:	4610      	mov	r0, r2
 80074a0:	4619      	mov	r1, r3
 80074a2:	4603      	mov	r3, r0
 80074a4:	4642      	mov	r2, r8
 80074a6:	189b      	adds	r3, r3, r2
 80074a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80074ac:	464b      	mov	r3, r9
 80074ae:	460a      	mov	r2, r1
 80074b0:	eb42 0303 	adc.w	r3, r2, r3
 80074b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80074b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80074c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80074c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80074cc:	460b      	mov	r3, r1
 80074ce:	18db      	adds	r3, r3, r3
 80074d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80074d2:	4613      	mov	r3, r2
 80074d4:	eb42 0303 	adc.w	r3, r2, r3
 80074d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80074de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80074e2:	f7f9 fb91 	bl	8000c08 <__aeabi_uldivmod>
 80074e6:	4602      	mov	r2, r0
 80074e8:	460b      	mov	r3, r1
 80074ea:	4b0d      	ldr	r3, [pc, #52]	; (8007520 <UART_SetConfig+0x2d4>)
 80074ec:	fba3 1302 	umull	r1, r3, r3, r2
 80074f0:	095b      	lsrs	r3, r3, #5
 80074f2:	2164      	movs	r1, #100	; 0x64
 80074f4:	fb01 f303 	mul.w	r3, r1, r3
 80074f8:	1ad3      	subs	r3, r2, r3
 80074fa:	00db      	lsls	r3, r3, #3
 80074fc:	3332      	adds	r3, #50	; 0x32
 80074fe:	4a08      	ldr	r2, [pc, #32]	; (8007520 <UART_SetConfig+0x2d4>)
 8007500:	fba2 2303 	umull	r2, r3, r2, r3
 8007504:	095b      	lsrs	r3, r3, #5
 8007506:	f003 0207 	and.w	r2, r3, #7
 800750a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4422      	add	r2, r4
 8007512:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007514:	e105      	b.n	8007722 <UART_SetConfig+0x4d6>
 8007516:	bf00      	nop
 8007518:	40011000 	.word	0x40011000
 800751c:	40011400 	.word	0x40011400
 8007520:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007524:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007528:	2200      	movs	r2, #0
 800752a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800752e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007532:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007536:	4642      	mov	r2, r8
 8007538:	464b      	mov	r3, r9
 800753a:	1891      	adds	r1, r2, r2
 800753c:	6239      	str	r1, [r7, #32]
 800753e:	415b      	adcs	r3, r3
 8007540:	627b      	str	r3, [r7, #36]	; 0x24
 8007542:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007546:	4641      	mov	r1, r8
 8007548:	1854      	adds	r4, r2, r1
 800754a:	4649      	mov	r1, r9
 800754c:	eb43 0501 	adc.w	r5, r3, r1
 8007550:	f04f 0200 	mov.w	r2, #0
 8007554:	f04f 0300 	mov.w	r3, #0
 8007558:	00eb      	lsls	r3, r5, #3
 800755a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800755e:	00e2      	lsls	r2, r4, #3
 8007560:	4614      	mov	r4, r2
 8007562:	461d      	mov	r5, r3
 8007564:	4643      	mov	r3, r8
 8007566:	18e3      	adds	r3, r4, r3
 8007568:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800756c:	464b      	mov	r3, r9
 800756e:	eb45 0303 	adc.w	r3, r5, r3
 8007572:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007582:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007586:	f04f 0200 	mov.w	r2, #0
 800758a:	f04f 0300 	mov.w	r3, #0
 800758e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007592:	4629      	mov	r1, r5
 8007594:	008b      	lsls	r3, r1, #2
 8007596:	4621      	mov	r1, r4
 8007598:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800759c:	4621      	mov	r1, r4
 800759e:	008a      	lsls	r2, r1, #2
 80075a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80075a4:	f7f9 fb30 	bl	8000c08 <__aeabi_uldivmod>
 80075a8:	4602      	mov	r2, r0
 80075aa:	460b      	mov	r3, r1
 80075ac:	4b60      	ldr	r3, [pc, #384]	; (8007730 <UART_SetConfig+0x4e4>)
 80075ae:	fba3 2302 	umull	r2, r3, r3, r2
 80075b2:	095b      	lsrs	r3, r3, #5
 80075b4:	011c      	lsls	r4, r3, #4
 80075b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075ba:	2200      	movs	r2, #0
 80075bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80075c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80075c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80075c8:	4642      	mov	r2, r8
 80075ca:	464b      	mov	r3, r9
 80075cc:	1891      	adds	r1, r2, r2
 80075ce:	61b9      	str	r1, [r7, #24]
 80075d0:	415b      	adcs	r3, r3
 80075d2:	61fb      	str	r3, [r7, #28]
 80075d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075d8:	4641      	mov	r1, r8
 80075da:	1851      	adds	r1, r2, r1
 80075dc:	6139      	str	r1, [r7, #16]
 80075de:	4649      	mov	r1, r9
 80075e0:	414b      	adcs	r3, r1
 80075e2:	617b      	str	r3, [r7, #20]
 80075e4:	f04f 0200 	mov.w	r2, #0
 80075e8:	f04f 0300 	mov.w	r3, #0
 80075ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80075f0:	4659      	mov	r1, fp
 80075f2:	00cb      	lsls	r3, r1, #3
 80075f4:	4651      	mov	r1, sl
 80075f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075fa:	4651      	mov	r1, sl
 80075fc:	00ca      	lsls	r2, r1, #3
 80075fe:	4610      	mov	r0, r2
 8007600:	4619      	mov	r1, r3
 8007602:	4603      	mov	r3, r0
 8007604:	4642      	mov	r2, r8
 8007606:	189b      	adds	r3, r3, r2
 8007608:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800760c:	464b      	mov	r3, r9
 800760e:	460a      	mov	r2, r1
 8007610:	eb42 0303 	adc.w	r3, r2, r3
 8007614:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	67bb      	str	r3, [r7, #120]	; 0x78
 8007622:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007624:	f04f 0200 	mov.w	r2, #0
 8007628:	f04f 0300 	mov.w	r3, #0
 800762c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007630:	4649      	mov	r1, r9
 8007632:	008b      	lsls	r3, r1, #2
 8007634:	4641      	mov	r1, r8
 8007636:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800763a:	4641      	mov	r1, r8
 800763c:	008a      	lsls	r2, r1, #2
 800763e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007642:	f7f9 fae1 	bl	8000c08 <__aeabi_uldivmod>
 8007646:	4602      	mov	r2, r0
 8007648:	460b      	mov	r3, r1
 800764a:	4b39      	ldr	r3, [pc, #228]	; (8007730 <UART_SetConfig+0x4e4>)
 800764c:	fba3 1302 	umull	r1, r3, r3, r2
 8007650:	095b      	lsrs	r3, r3, #5
 8007652:	2164      	movs	r1, #100	; 0x64
 8007654:	fb01 f303 	mul.w	r3, r1, r3
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	011b      	lsls	r3, r3, #4
 800765c:	3332      	adds	r3, #50	; 0x32
 800765e:	4a34      	ldr	r2, [pc, #208]	; (8007730 <UART_SetConfig+0x4e4>)
 8007660:	fba2 2303 	umull	r2, r3, r2, r3
 8007664:	095b      	lsrs	r3, r3, #5
 8007666:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800766a:	441c      	add	r4, r3
 800766c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007670:	2200      	movs	r2, #0
 8007672:	673b      	str	r3, [r7, #112]	; 0x70
 8007674:	677a      	str	r2, [r7, #116]	; 0x74
 8007676:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800767a:	4642      	mov	r2, r8
 800767c:	464b      	mov	r3, r9
 800767e:	1891      	adds	r1, r2, r2
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	415b      	adcs	r3, r3
 8007684:	60fb      	str	r3, [r7, #12]
 8007686:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800768a:	4641      	mov	r1, r8
 800768c:	1851      	adds	r1, r2, r1
 800768e:	6039      	str	r1, [r7, #0]
 8007690:	4649      	mov	r1, r9
 8007692:	414b      	adcs	r3, r1
 8007694:	607b      	str	r3, [r7, #4]
 8007696:	f04f 0200 	mov.w	r2, #0
 800769a:	f04f 0300 	mov.w	r3, #0
 800769e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80076a2:	4659      	mov	r1, fp
 80076a4:	00cb      	lsls	r3, r1, #3
 80076a6:	4651      	mov	r1, sl
 80076a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076ac:	4651      	mov	r1, sl
 80076ae:	00ca      	lsls	r2, r1, #3
 80076b0:	4610      	mov	r0, r2
 80076b2:	4619      	mov	r1, r3
 80076b4:	4603      	mov	r3, r0
 80076b6:	4642      	mov	r2, r8
 80076b8:	189b      	adds	r3, r3, r2
 80076ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80076bc:	464b      	mov	r3, r9
 80076be:	460a      	mov	r2, r1
 80076c0:	eb42 0303 	adc.w	r3, r2, r3
 80076c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80076c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	663b      	str	r3, [r7, #96]	; 0x60
 80076d0:	667a      	str	r2, [r7, #100]	; 0x64
 80076d2:	f04f 0200 	mov.w	r2, #0
 80076d6:	f04f 0300 	mov.w	r3, #0
 80076da:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80076de:	4649      	mov	r1, r9
 80076e0:	008b      	lsls	r3, r1, #2
 80076e2:	4641      	mov	r1, r8
 80076e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076e8:	4641      	mov	r1, r8
 80076ea:	008a      	lsls	r2, r1, #2
 80076ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80076f0:	f7f9 fa8a 	bl	8000c08 <__aeabi_uldivmod>
 80076f4:	4602      	mov	r2, r0
 80076f6:	460b      	mov	r3, r1
 80076f8:	4b0d      	ldr	r3, [pc, #52]	; (8007730 <UART_SetConfig+0x4e4>)
 80076fa:	fba3 1302 	umull	r1, r3, r3, r2
 80076fe:	095b      	lsrs	r3, r3, #5
 8007700:	2164      	movs	r1, #100	; 0x64
 8007702:	fb01 f303 	mul.w	r3, r1, r3
 8007706:	1ad3      	subs	r3, r2, r3
 8007708:	011b      	lsls	r3, r3, #4
 800770a:	3332      	adds	r3, #50	; 0x32
 800770c:	4a08      	ldr	r2, [pc, #32]	; (8007730 <UART_SetConfig+0x4e4>)
 800770e:	fba2 2303 	umull	r2, r3, r2, r3
 8007712:	095b      	lsrs	r3, r3, #5
 8007714:	f003 020f 	and.w	r2, r3, #15
 8007718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4422      	add	r2, r4
 8007720:	609a      	str	r2, [r3, #8]
}
 8007722:	bf00      	nop
 8007724:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007728:	46bd      	mov	sp, r7
 800772a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800772e:	bf00      	nop
 8007730:	51eb851f 	.word	0x51eb851f

08007734 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	4603      	mov	r3, r0
 800773c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800773e:	2300      	movs	r3, #0
 8007740:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007742:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007746:	2b84      	cmp	r3, #132	; 0x84
 8007748:	d005      	beq.n	8007756 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800774a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	4413      	add	r3, r2
 8007752:	3303      	adds	r3, #3
 8007754:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007756:	68fb      	ldr	r3, [r7, #12]
}
 8007758:	4618      	mov	r0, r3
 800775a:	3714      	adds	r7, #20
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800776a:	f3ef 8305 	mrs	r3, IPSR
 800776e:	607b      	str	r3, [r7, #4]
  return(result);
 8007770:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007772:	2b00      	cmp	r3, #0
 8007774:	bf14      	ite	ne
 8007776:	2301      	movne	r3, #1
 8007778:	2300      	moveq	r3, #0
 800777a:	b2db      	uxtb	r3, r3
}
 800777c:	4618      	mov	r0, r3
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800778c:	f001 fcb2 	bl	80090f4 <vTaskStartScheduler>
  
  return osOK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	bd80      	pop	{r7, pc}

08007796 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007796:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007798:	b089      	sub	sp, #36	; 0x24
 800779a:	af04      	add	r7, sp, #16
 800779c:	6078      	str	r0, [r7, #4]
 800779e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	695b      	ldr	r3, [r3, #20]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d020      	beq.n	80077ea <osThreadCreate+0x54>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	699b      	ldr	r3, [r3, #24]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d01c      	beq.n	80077ea <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	685c      	ldr	r4, [r3, #4]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681d      	ldr	r5, [r3, #0]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	691e      	ldr	r6, [r3, #16]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7ff ffb6 	bl	8007734 <makeFreeRtosPriority>
 80077c8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80077d2:	9202      	str	r2, [sp, #8]
 80077d4:	9301      	str	r3, [sp, #4]
 80077d6:	9100      	str	r1, [sp, #0]
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	4632      	mov	r2, r6
 80077dc:	4629      	mov	r1, r5
 80077de:	4620      	mov	r0, r4
 80077e0:	f001 fa00 	bl	8008be4 <xTaskCreateStatic>
 80077e4:	4603      	mov	r3, r0
 80077e6:	60fb      	str	r3, [r7, #12]
 80077e8:	e01c      	b.n	8007824 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	685c      	ldr	r4, [r3, #4]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80077f6:	b29e      	uxth	r6, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80077fe:	4618      	mov	r0, r3
 8007800:	f7ff ff98 	bl	8007734 <makeFreeRtosPriority>
 8007804:	4602      	mov	r2, r0
 8007806:	f107 030c 	add.w	r3, r7, #12
 800780a:	9301      	str	r3, [sp, #4]
 800780c:	9200      	str	r2, [sp, #0]
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	4632      	mov	r2, r6
 8007812:	4629      	mov	r1, r5
 8007814:	4620      	mov	r0, r4
 8007816:	f001 fa42 	bl	8008c9e <xTaskCreate>
 800781a:	4603      	mov	r3, r0
 800781c:	2b01      	cmp	r3, #1
 800781e:	d001      	beq.n	8007824 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007820:	2300      	movs	r3, #0
 8007822:	e000      	b.n	8007826 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007824:	68fb      	ldr	r3, [r7, #12]
}
 8007826:	4618      	mov	r0, r3
 8007828:	3714      	adds	r7, #20
 800782a:	46bd      	mov	sp, r7
 800782c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800782e <osThreadSetPriority>:
* @param   priority      new priority value for the thread function.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadSetPriority shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadSetPriority (osThreadId thread_id, osPriority priority)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b082      	sub	sp, #8
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
 8007836:	460b      	mov	r3, r1
 8007838:	807b      	strh	r3, [r7, #2]
#if (INCLUDE_vTaskPrioritySet == 1)
  vTaskPrioritySet(thread_id, makeFreeRtosPriority(priority));
 800783a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800783e:	4618      	mov	r0, r3
 8007840:	f7ff ff78 	bl	8007734 <makeFreeRtosPriority>
 8007844:	4603      	mov	r3, r0
 8007846:	4619      	mov	r1, r3
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f001 fba9 	bl	8008fa0 <vTaskPrioritySet>
  return osOK;
 800784e:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8007850:	4618      	mov	r0, r3
 8007852:	3708      	adds	r7, #8
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d001      	beq.n	800786e <osDelay+0x16>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	e000      	b.n	8007870 <osDelay+0x18>
 800786e:	2301      	movs	r3, #1
 8007870:	4618      	mov	r0, r3
 8007872:	f001 fb61 	bl	8008f38 <vTaskDelay>
  
  return osOK;
 8007876:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007878:	4618      	mov	r0, r3
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af02      	add	r7, sp, #8
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d016      	beq.n	80078c0 <osSemaphoreCreate+0x40>
    if (count == 1) {
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	2b01      	cmp	r3, #1
 8007896:	d10a      	bne.n	80078ae <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	2203      	movs	r2, #3
 800789e:	9200      	str	r2, [sp, #0]
 80078a0:	2200      	movs	r2, #0
 80078a2:	2100      	movs	r1, #0
 80078a4:	2001      	movs	r0, #1
 80078a6:	f000 faa7 	bl	8007df8 <xQueueGenericCreateStatic>
 80078aa:	4603      	mov	r3, r0
 80078ac:	e023      	b.n	80078f6 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 80078ae:	6838      	ldr	r0, [r7, #0]
 80078b0:	6839      	ldr	r1, [r7, #0]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	461a      	mov	r2, r3
 80078b8:	f000 fb6f 	bl	8007f9a <xQueueCreateCountingSemaphoreStatic>
 80078bc:	4603      	mov	r3, r0
 80078be:	e01a      	b.n	80078f6 <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d110      	bne.n	80078e8 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 80078c6:	2203      	movs	r2, #3
 80078c8:	2100      	movs	r1, #0
 80078ca:	2001      	movs	r0, #1
 80078cc:	f000 fb0c 	bl	8007ee8 <xQueueGenericCreate>
 80078d0:	60f8      	str	r0, [r7, #12]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d005      	beq.n	80078e4 <osSemaphoreCreate+0x64>
 80078d8:	2300      	movs	r3, #0
 80078da:	2200      	movs	r2, #0
 80078dc:	2100      	movs	r1, #0
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	f000 fbc6 	bl	8008070 <xQueueGenericSend>
      return sema;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	e006      	b.n	80078f6 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	683a      	ldr	r2, [r7, #0]
 80078ec:	4611      	mov	r1, r2
 80078ee:	4618      	mov	r0, r3
 80078f0:	f000 fb8a 	bl	8008008 <xQueueCreateCountingSemaphore>
 80078f4:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
	...

08007900 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800790a:	2300      	movs	r3, #0
 800790c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d101      	bne.n	8007918 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8007914:	2380      	movs	r3, #128	; 0x80
 8007916:	e03a      	b.n	800798e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8007918:	2300      	movs	r3, #0
 800791a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007922:	d103      	bne.n	800792c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8007924:	f04f 33ff 	mov.w	r3, #4294967295
 8007928:	60fb      	str	r3, [r7, #12]
 800792a:	e009      	b.n	8007940 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d006      	beq.n	8007940 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d101      	bne.n	8007940 <osSemaphoreWait+0x40>
      ticks = 1;
 800793c:	2301      	movs	r3, #1
 800793e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007940:	f7ff ff10 	bl	8007764 <inHandlerMode>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d017      	beq.n	800797a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800794a:	f107 0308 	add.w	r3, r7, #8
 800794e:	461a      	mov	r2, r3
 8007950:	2100      	movs	r1, #0
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 ff9e 	bl	8008894 <xQueueReceiveFromISR>
 8007958:	4603      	mov	r3, r0
 800795a:	2b01      	cmp	r3, #1
 800795c:	d001      	beq.n	8007962 <osSemaphoreWait+0x62>
      return osErrorOS;
 800795e:	23ff      	movs	r3, #255	; 0xff
 8007960:	e015      	b.n	800798e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d011      	beq.n	800798c <osSemaphoreWait+0x8c>
 8007968:	4b0b      	ldr	r3, [pc, #44]	; (8007998 <osSemaphoreWait+0x98>)
 800796a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800796e:	601a      	str	r2, [r3, #0]
 8007970:	f3bf 8f4f 	dsb	sy
 8007974:	f3bf 8f6f 	isb	sy
 8007978:	e008      	b.n	800798c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800797a:	68f9      	ldr	r1, [r7, #12]
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 fe7d 	bl	800867c <xQueueSemaphoreTake>
 8007982:	4603      	mov	r3, r0
 8007984:	2b01      	cmp	r3, #1
 8007986:	d001      	beq.n	800798c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007988:	23ff      	movs	r3, #255	; 0xff
 800798a:	e000      	b.n	800798e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800798c:	2300      	movs	r3, #0
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	e000ed04 	.word	0xe000ed04

0800799c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80079a4:	2300      	movs	r3, #0
 80079a6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80079a8:	2300      	movs	r3, #0
 80079aa:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80079ac:	f7ff feda 	bl	8007764 <inHandlerMode>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d016      	beq.n	80079e4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80079b6:	f107 0308 	add.w	r3, r7, #8
 80079ba:	4619      	mov	r1, r3
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 fcf0 	bl	80083a2 <xQueueGiveFromISR>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d001      	beq.n	80079cc <osSemaphoreRelease+0x30>
      return osErrorOS;
 80079c8:	23ff      	movs	r3, #255	; 0xff
 80079ca:	e017      	b.n	80079fc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d013      	beq.n	80079fa <osSemaphoreRelease+0x5e>
 80079d2:	4b0c      	ldr	r3, [pc, #48]	; (8007a04 <osSemaphoreRelease+0x68>)
 80079d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079d8:	601a      	str	r2, [r3, #0]
 80079da:	f3bf 8f4f 	dsb	sy
 80079de:	f3bf 8f6f 	isb	sy
 80079e2:	e00a      	b.n	80079fa <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80079e4:	2300      	movs	r3, #0
 80079e6:	2200      	movs	r2, #0
 80079e8:	2100      	movs	r1, #0
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 fb40 	bl	8008070 <xQueueGenericSend>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d001      	beq.n	80079fa <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80079f6:	23ff      	movs	r3, #255	; 0xff
 80079f8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80079fa:	68fb      	ldr	r3, [r7, #12]
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	e000ed04 	.word	0xe000ed04

08007a08 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007a08:	b590      	push	{r4, r7, lr}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af02      	add	r7, sp, #8
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d011      	beq.n	8007a3e <osMessageCreate+0x36>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00d      	beq.n	8007a3e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6818      	ldr	r0, [r3, #0]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6859      	ldr	r1, [r3, #4]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	689a      	ldr	r2, [r3, #8]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	2400      	movs	r4, #0
 8007a34:	9400      	str	r4, [sp, #0]
 8007a36:	f000 f9df 	bl	8007df8 <xQueueGenericCreateStatic>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	e008      	b.n	8007a50 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6818      	ldr	r0, [r3, #0]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	4619      	mov	r1, r3
 8007a4a:	f000 fa4d 	bl	8007ee8 <xQueueGenericCreate>
 8007a4e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd90      	pop	{r4, r7, pc}

08007a58 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b086      	sub	sp, #24
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007a64:	2300      	movs	r3, #0
 8007a66:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d101      	bne.n	8007a76 <osMessagePut+0x1e>
    ticks = 1;
 8007a72:	2301      	movs	r3, #1
 8007a74:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007a76:	f7ff fe75 	bl	8007764 <inHandlerMode>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d018      	beq.n	8007ab2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007a80:	f107 0210 	add.w	r2, r7, #16
 8007a84:	f107 0108 	add.w	r1, r7, #8
 8007a88:	2300      	movs	r3, #0
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f000 fbee 	bl	800826c <xQueueGenericSendFromISR>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d001      	beq.n	8007a9a <osMessagePut+0x42>
      return osErrorOS;
 8007a96:	23ff      	movs	r3, #255	; 0xff
 8007a98:	e018      	b.n	8007acc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d014      	beq.n	8007aca <osMessagePut+0x72>
 8007aa0:	4b0c      	ldr	r3, [pc, #48]	; (8007ad4 <osMessagePut+0x7c>)
 8007aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aa6:	601a      	str	r2, [r3, #0]
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	f3bf 8f6f 	isb	sy
 8007ab0:	e00b      	b.n	8007aca <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8007ab2:	f107 0108 	add.w	r1, r7, #8
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	697a      	ldr	r2, [r7, #20]
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f000 fad8 	bl	8008070 <xQueueGenericSend>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d001      	beq.n	8007aca <osMessagePut+0x72>
      return osErrorOS;
 8007ac6:	23ff      	movs	r3, #255	; 0xff
 8007ac8:	e000      	b.n	8007acc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3718      	adds	r7, #24
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	e000ed04 	.word	0xe000ed04

08007ad8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007ad8:	b590      	push	{r4, r7, lr}
 8007ada:	b08b      	sub	sp, #44	; 0x2c
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d10a      	bne.n	8007b08 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8007af2:	2380      	movs	r3, #128	; 0x80
 8007af4:	617b      	str	r3, [r7, #20]
    return event;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	461c      	mov	r4, r3
 8007afa:	f107 0314 	add.w	r3, r7, #20
 8007afe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007b02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007b06:	e054      	b.n	8007bb2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b16:	d103      	bne.n	8007b20 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007b18:	f04f 33ff 	mov.w	r3, #4294967295
 8007b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8007b1e:	e009      	b.n	8007b34 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d006      	beq.n	8007b34 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8007b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d101      	bne.n	8007b34 <osMessageGet+0x5c>
      ticks = 1;
 8007b30:	2301      	movs	r3, #1
 8007b32:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007b34:	f7ff fe16 	bl	8007764 <inHandlerMode>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d01c      	beq.n	8007b78 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007b3e:	f107 0220 	add.w	r2, r7, #32
 8007b42:	f107 0314 	add.w	r3, r7, #20
 8007b46:	3304      	adds	r3, #4
 8007b48:	4619      	mov	r1, r3
 8007b4a:	68b8      	ldr	r0, [r7, #8]
 8007b4c:	f000 fea2 	bl	8008894 <xQueueReceiveFromISR>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d102      	bne.n	8007b5c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8007b56:	2310      	movs	r3, #16
 8007b58:	617b      	str	r3, [r7, #20]
 8007b5a:	e001      	b.n	8007b60 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007b60:	6a3b      	ldr	r3, [r7, #32]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d01d      	beq.n	8007ba2 <osMessageGet+0xca>
 8007b66:	4b15      	ldr	r3, [pc, #84]	; (8007bbc <osMessageGet+0xe4>)
 8007b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b6c:	601a      	str	r2, [r3, #0]
 8007b6e:	f3bf 8f4f 	dsb	sy
 8007b72:	f3bf 8f6f 	isb	sy
 8007b76:	e014      	b.n	8007ba2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007b78:	f107 0314 	add.w	r3, r7, #20
 8007b7c:	3304      	adds	r3, #4
 8007b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b80:	4619      	mov	r1, r3
 8007b82:	68b8      	ldr	r0, [r7, #8]
 8007b84:	f000 fc9a 	bl	80084bc <xQueueReceive>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d102      	bne.n	8007b94 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8007b8e:	2310      	movs	r3, #16
 8007b90:	617b      	str	r3, [r7, #20]
 8007b92:	e006      	b.n	8007ba2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d101      	bne.n	8007b9e <osMessageGet+0xc6>
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	e000      	b.n	8007ba0 <osMessageGet+0xc8>
 8007b9e:	2340      	movs	r3, #64	; 0x40
 8007ba0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	461c      	mov	r4, r3
 8007ba6:	f107 0314 	add.w	r3, r7, #20
 8007baa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007bae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	372c      	adds	r7, #44	; 0x2c
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd90      	pop	{r4, r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	e000ed04 	.word	0xe000ed04

08007bc0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f103 0208 	add.w	r2, r3, #8
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8007bd8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f103 0208 	add.w	r2, r3, #8
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f103 0208 	add.w	r2, r3, #8
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007c0e:	bf00      	nop
 8007c10:	370c      	adds	r7, #12
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c1a:	b480      	push	{r7}
 8007c1c:	b085      	sub	sp, #20
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
 8007c22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	689a      	ldr	r2, [r3, #8]
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	683a      	ldr	r2, [r7, #0]
 8007c3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	683a      	ldr	r2, [r7, #0]
 8007c44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	1c5a      	adds	r2, r3, #1
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	601a      	str	r2, [r3, #0]
}
 8007c56:	bf00      	nop
 8007c58:	3714      	adds	r7, #20
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr

08007c62 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c62:	b480      	push	{r7}
 8007c64:	b085      	sub	sp, #20
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
 8007c6a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c78:	d103      	bne.n	8007c82 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	60fb      	str	r3, [r7, #12]
 8007c80:	e00c      	b.n	8007c9c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	3308      	adds	r3, #8
 8007c86:	60fb      	str	r3, [r7, #12]
 8007c88:	e002      	b.n	8007c90 <vListInsert+0x2e>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	60fb      	str	r3, [r7, #12]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	68ba      	ldr	r2, [r7, #8]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d2f6      	bcs.n	8007c8a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	685a      	ldr	r2, [r3, #4]
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	683a      	ldr	r2, [r7, #0]
 8007caa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	683a      	ldr	r2, [r7, #0]
 8007cb6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	1c5a      	adds	r2, r3, #1
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	601a      	str	r2, [r3, #0]
}
 8007cc8:	bf00      	nop
 8007cca:	3714      	adds	r7, #20
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	6892      	ldr	r2, [r2, #8]
 8007cea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	6852      	ldr	r2, [r2, #4]
 8007cf4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d103      	bne.n	8007d08 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	689a      	ldr	r2, [r3, #8]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	1e5a      	subs	r2, r3, #1
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3714      	adds	r7, #20
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d10a      	bne.n	8007d52 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d40:	f383 8811 	msr	BASEPRI, r3
 8007d44:	f3bf 8f6f 	isb	sy
 8007d48:	f3bf 8f4f 	dsb	sy
 8007d4c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007d4e:	bf00      	nop
 8007d50:	e7fe      	b.n	8007d50 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007d52:	f002 f92f 	bl	8009fb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d5e:	68f9      	ldr	r1, [r7, #12]
 8007d60:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d62:	fb01 f303 	mul.w	r3, r1, r3
 8007d66:	441a      	add	r2, r3
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d82:	3b01      	subs	r3, #1
 8007d84:	68f9      	ldr	r1, [r7, #12]
 8007d86:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d88:	fb01 f303 	mul.w	r3, r1, r3
 8007d8c:	441a      	add	r2, r3
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	22ff      	movs	r2, #255	; 0xff
 8007d96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	22ff      	movs	r2, #255	; 0xff
 8007d9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d114      	bne.n	8007dd2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d01a      	beq.n	8007de6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	3310      	adds	r3, #16
 8007db4:	4618      	mov	r0, r3
 8007db6:	f001 fbef 	bl	8009598 <xTaskRemoveFromEventList>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d012      	beq.n	8007de6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007dc0:	4b0c      	ldr	r3, [pc, #48]	; (8007df4 <xQueueGenericReset+0xcc>)
 8007dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dc6:	601a      	str	r2, [r3, #0]
 8007dc8:	f3bf 8f4f 	dsb	sy
 8007dcc:	f3bf 8f6f 	isb	sy
 8007dd0:	e009      	b.n	8007de6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	3310      	adds	r3, #16
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7ff fef2 	bl	8007bc0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	3324      	adds	r3, #36	; 0x24
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7ff feed 	bl	8007bc0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007de6:	f002 f915 	bl	800a014 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007dea:	2301      	movs	r3, #1
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	e000ed04 	.word	0xe000ed04

08007df8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b08e      	sub	sp, #56	; 0x38
 8007dfc:	af02      	add	r7, sp, #8
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	607a      	str	r2, [r7, #4]
 8007e04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10a      	bne.n	8007e22 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e10:	f383 8811 	msr	BASEPRI, r3
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007e1e:	bf00      	nop
 8007e20:	e7fe      	b.n	8007e20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d10a      	bne.n	8007e3e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2c:	f383 8811 	msr	BASEPRI, r3
 8007e30:	f3bf 8f6f 	isb	sy
 8007e34:	f3bf 8f4f 	dsb	sy
 8007e38:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007e3a:	bf00      	nop
 8007e3c:	e7fe      	b.n	8007e3c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d002      	beq.n	8007e4a <xQueueGenericCreateStatic+0x52>
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d001      	beq.n	8007e4e <xQueueGenericCreateStatic+0x56>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e000      	b.n	8007e50 <xQueueGenericCreateStatic+0x58>
 8007e4e:	2300      	movs	r3, #0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d10a      	bne.n	8007e6a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e58:	f383 8811 	msr	BASEPRI, r3
 8007e5c:	f3bf 8f6f 	isb	sy
 8007e60:	f3bf 8f4f 	dsb	sy
 8007e64:	623b      	str	r3, [r7, #32]
}
 8007e66:	bf00      	nop
 8007e68:	e7fe      	b.n	8007e68 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d102      	bne.n	8007e76 <xQueueGenericCreateStatic+0x7e>
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d101      	bne.n	8007e7a <xQueueGenericCreateStatic+0x82>
 8007e76:	2301      	movs	r3, #1
 8007e78:	e000      	b.n	8007e7c <xQueueGenericCreateStatic+0x84>
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d10a      	bne.n	8007e96 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e84:	f383 8811 	msr	BASEPRI, r3
 8007e88:	f3bf 8f6f 	isb	sy
 8007e8c:	f3bf 8f4f 	dsb	sy
 8007e90:	61fb      	str	r3, [r7, #28]
}
 8007e92:	bf00      	nop
 8007e94:	e7fe      	b.n	8007e94 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007e96:	2348      	movs	r3, #72	; 0x48
 8007e98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	2b48      	cmp	r3, #72	; 0x48
 8007e9e:	d00a      	beq.n	8007eb6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea4:	f383 8811 	msr	BASEPRI, r3
 8007ea8:	f3bf 8f6f 	isb	sy
 8007eac:	f3bf 8f4f 	dsb	sy
 8007eb0:	61bb      	str	r3, [r7, #24]
}
 8007eb2:	bf00      	nop
 8007eb4:	e7fe      	b.n	8007eb4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007eb6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00d      	beq.n	8007ede <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007eca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed0:	9300      	str	r3, [sp, #0]
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	68b9      	ldr	r1, [r7, #8]
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f000 f83f 	bl	8007f5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3730      	adds	r7, #48	; 0x30
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b08a      	sub	sp, #40	; 0x28
 8007eec:	af02      	add	r7, sp, #8
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d10a      	bne.n	8007f12 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f00:	f383 8811 	msr	BASEPRI, r3
 8007f04:	f3bf 8f6f 	isb	sy
 8007f08:	f3bf 8f4f 	dsb	sy
 8007f0c:	613b      	str	r3, [r7, #16]
}
 8007f0e:	bf00      	nop
 8007f10:	e7fe      	b.n	8007f10 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	68ba      	ldr	r2, [r7, #8]
 8007f16:	fb02 f303 	mul.w	r3, r2, r3
 8007f1a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	3348      	adds	r3, #72	; 0x48
 8007f20:	4618      	mov	r0, r3
 8007f22:	f002 f969 	bl	800a1f8 <pvPortMalloc>
 8007f26:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007f28:	69bb      	ldr	r3, [r7, #24]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d011      	beq.n	8007f52 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	3348      	adds	r3, #72	; 0x48
 8007f36:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f40:	79fa      	ldrb	r2, [r7, #7]
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	9300      	str	r3, [sp, #0]
 8007f46:	4613      	mov	r3, r2
 8007f48:	697a      	ldr	r2, [r7, #20]
 8007f4a:	68b9      	ldr	r1, [r7, #8]
 8007f4c:	68f8      	ldr	r0, [r7, #12]
 8007f4e:	f000 f805 	bl	8007f5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007f52:	69bb      	ldr	r3, [r7, #24]
	}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3720      	adds	r7, #32
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	607a      	str	r2, [r7, #4]
 8007f68:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d103      	bne.n	8007f78 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	69ba      	ldr	r2, [r7, #24]
 8007f74:	601a      	str	r2, [r3, #0]
 8007f76:	e002      	b.n	8007f7e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	68ba      	ldr	r2, [r7, #8]
 8007f88:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007f8a:	2101      	movs	r1, #1
 8007f8c:	69b8      	ldr	r0, [r7, #24]
 8007f8e:	f7ff fecb 	bl	8007d28 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007f92:	bf00      	nop
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b08a      	sub	sp, #40	; 0x28
 8007f9e:	af02      	add	r7, sp, #8
 8007fa0:	60f8      	str	r0, [r7, #12]
 8007fa2:	60b9      	str	r1, [r7, #8]
 8007fa4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d10a      	bne.n	8007fc2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb0:	f383 8811 	msr	BASEPRI, r3
 8007fb4:	f3bf 8f6f 	isb	sy
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	61bb      	str	r3, [r7, #24]
}
 8007fbe:	bf00      	nop
 8007fc0:	e7fe      	b.n	8007fc0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007fc2:	68ba      	ldr	r2, [r7, #8]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d90a      	bls.n	8007fe0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8007fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	617b      	str	r3, [r7, #20]
}
 8007fdc:	bf00      	nop
 8007fde:	e7fe      	b.n	8007fde <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007fe0:	2302      	movs	r3, #2
 8007fe2:	9300      	str	r3, [sp, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	2100      	movs	r1, #0
 8007fea:	68f8      	ldr	r0, [r7, #12]
 8007fec:	f7ff ff04 	bl	8007df8 <xQueueGenericCreateStatic>
 8007ff0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007ff2:	69fb      	ldr	r3, [r7, #28]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d002      	beq.n	8007ffe <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	68ba      	ldr	r2, [r7, #8]
 8007ffc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007ffe:	69fb      	ldr	r3, [r7, #28]
	}
 8008000:	4618      	mov	r0, r3
 8008002:	3720      	adds	r7, #32
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008008:	b580      	push	{r7, lr}
 800800a:	b086      	sub	sp, #24
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d10a      	bne.n	800802e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801c:	f383 8811 	msr	BASEPRI, r3
 8008020:	f3bf 8f6f 	isb	sy
 8008024:	f3bf 8f4f 	dsb	sy
 8008028:	613b      	str	r3, [r7, #16]
}
 800802a:	bf00      	nop
 800802c:	e7fe      	b.n	800802c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800802e:	683a      	ldr	r2, [r7, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	429a      	cmp	r2, r3
 8008034:	d90a      	bls.n	800804c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8008036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803a:	f383 8811 	msr	BASEPRI, r3
 800803e:	f3bf 8f6f 	isb	sy
 8008042:	f3bf 8f4f 	dsb	sy
 8008046:	60fb      	str	r3, [r7, #12]
}
 8008048:	bf00      	nop
 800804a:	e7fe      	b.n	800804a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800804c:	2202      	movs	r2, #2
 800804e:	2100      	movs	r1, #0
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f7ff ff49 	bl	8007ee8 <xQueueGenericCreate>
 8008056:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d002      	beq.n	8008064 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	683a      	ldr	r2, [r7, #0]
 8008062:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008064:	697b      	ldr	r3, [r7, #20]
	}
 8008066:	4618      	mov	r0, r3
 8008068:	3718      	adds	r7, #24
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
	...

08008070 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b08e      	sub	sp, #56	; 0x38
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	607a      	str	r2, [r7, #4]
 800807c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800807e:	2300      	movs	r3, #0
 8008080:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008088:	2b00      	cmp	r3, #0
 800808a:	d10a      	bne.n	80080a2 <xQueueGenericSend+0x32>
	__asm volatile
 800808c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008090:	f383 8811 	msr	BASEPRI, r3
 8008094:	f3bf 8f6f 	isb	sy
 8008098:	f3bf 8f4f 	dsb	sy
 800809c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800809e:	bf00      	nop
 80080a0:	e7fe      	b.n	80080a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d103      	bne.n	80080b0 <xQueueGenericSend+0x40>
 80080a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d101      	bne.n	80080b4 <xQueueGenericSend+0x44>
 80080b0:	2301      	movs	r3, #1
 80080b2:	e000      	b.n	80080b6 <xQueueGenericSend+0x46>
 80080b4:	2300      	movs	r3, #0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d10a      	bne.n	80080d0 <xQueueGenericSend+0x60>
	__asm volatile
 80080ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080be:	f383 8811 	msr	BASEPRI, r3
 80080c2:	f3bf 8f6f 	isb	sy
 80080c6:	f3bf 8f4f 	dsb	sy
 80080ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80080cc:	bf00      	nop
 80080ce:	e7fe      	b.n	80080ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	d103      	bne.n	80080de <xQueueGenericSend+0x6e>
 80080d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d101      	bne.n	80080e2 <xQueueGenericSend+0x72>
 80080de:	2301      	movs	r3, #1
 80080e0:	e000      	b.n	80080e4 <xQueueGenericSend+0x74>
 80080e2:	2300      	movs	r3, #0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d10a      	bne.n	80080fe <xQueueGenericSend+0x8e>
	__asm volatile
 80080e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ec:	f383 8811 	msr	BASEPRI, r3
 80080f0:	f3bf 8f6f 	isb	sy
 80080f4:	f3bf 8f4f 	dsb	sy
 80080f8:	623b      	str	r3, [r7, #32]
}
 80080fa:	bf00      	nop
 80080fc:	e7fe      	b.n	80080fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080fe:	f001 fc0b 	bl	8009918 <xTaskGetSchedulerState>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d102      	bne.n	800810e <xQueueGenericSend+0x9e>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d101      	bne.n	8008112 <xQueueGenericSend+0xa2>
 800810e:	2301      	movs	r3, #1
 8008110:	e000      	b.n	8008114 <xQueueGenericSend+0xa4>
 8008112:	2300      	movs	r3, #0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d10a      	bne.n	800812e <xQueueGenericSend+0xbe>
	__asm volatile
 8008118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811c:	f383 8811 	msr	BASEPRI, r3
 8008120:	f3bf 8f6f 	isb	sy
 8008124:	f3bf 8f4f 	dsb	sy
 8008128:	61fb      	str	r3, [r7, #28]
}
 800812a:	bf00      	nop
 800812c:	e7fe      	b.n	800812c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800812e:	f001 ff41 	bl	8009fb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800813a:	429a      	cmp	r2, r3
 800813c:	d302      	bcc.n	8008144 <xQueueGenericSend+0xd4>
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	2b02      	cmp	r3, #2
 8008142:	d129      	bne.n	8008198 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008144:	683a      	ldr	r2, [r7, #0]
 8008146:	68b9      	ldr	r1, [r7, #8]
 8008148:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800814a:	f000 fc3b 	bl	80089c4 <prvCopyDataToQueue>
 800814e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008154:	2b00      	cmp	r3, #0
 8008156:	d010      	beq.n	800817a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815a:	3324      	adds	r3, #36	; 0x24
 800815c:	4618      	mov	r0, r3
 800815e:	f001 fa1b 	bl	8009598 <xTaskRemoveFromEventList>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d013      	beq.n	8008190 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008168:	4b3f      	ldr	r3, [pc, #252]	; (8008268 <xQueueGenericSend+0x1f8>)
 800816a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800816e:	601a      	str	r2, [r3, #0]
 8008170:	f3bf 8f4f 	dsb	sy
 8008174:	f3bf 8f6f 	isb	sy
 8008178:	e00a      	b.n	8008190 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800817a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800817c:	2b00      	cmp	r3, #0
 800817e:	d007      	beq.n	8008190 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008180:	4b39      	ldr	r3, [pc, #228]	; (8008268 <xQueueGenericSend+0x1f8>)
 8008182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008186:	601a      	str	r2, [r3, #0]
 8008188:	f3bf 8f4f 	dsb	sy
 800818c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008190:	f001 ff40 	bl	800a014 <vPortExitCritical>
				return pdPASS;
 8008194:	2301      	movs	r3, #1
 8008196:	e063      	b.n	8008260 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d103      	bne.n	80081a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800819e:	f001 ff39 	bl	800a014 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80081a2:	2300      	movs	r3, #0
 80081a4:	e05c      	b.n	8008260 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80081a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d106      	bne.n	80081ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80081ac:	f107 0314 	add.w	r3, r7, #20
 80081b0:	4618      	mov	r0, r3
 80081b2:	f001 fa53 	bl	800965c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80081b6:	2301      	movs	r3, #1
 80081b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80081ba:	f001 ff2b 	bl	800a014 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081be:	f001 f803 	bl	80091c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081c2:	f001 fef7 	bl	8009fb4 <vPortEnterCritical>
 80081c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081cc:	b25b      	sxtb	r3, r3
 80081ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d2:	d103      	bne.n	80081dc <xQueueGenericSend+0x16c>
 80081d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d6:	2200      	movs	r2, #0
 80081d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081e2:	b25b      	sxtb	r3, r3
 80081e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081e8:	d103      	bne.n	80081f2 <xQueueGenericSend+0x182>
 80081ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ec:	2200      	movs	r2, #0
 80081ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081f2:	f001 ff0f 	bl	800a014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80081f6:	1d3a      	adds	r2, r7, #4
 80081f8:	f107 0314 	add.w	r3, r7, #20
 80081fc:	4611      	mov	r1, r2
 80081fe:	4618      	mov	r0, r3
 8008200:	f001 fa42 	bl	8009688 <xTaskCheckForTimeOut>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d124      	bne.n	8008254 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800820a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800820c:	f000 fcd2 	bl	8008bb4 <prvIsQueueFull>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d018      	beq.n	8008248 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008218:	3310      	adds	r3, #16
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	4611      	mov	r1, r2
 800821e:	4618      	mov	r0, r3
 8008220:	f001 f996 	bl	8009550 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008224:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008226:	f000 fc5d 	bl	8008ae4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800822a:	f000 ffdb 	bl	80091e4 <xTaskResumeAll>
 800822e:	4603      	mov	r3, r0
 8008230:	2b00      	cmp	r3, #0
 8008232:	f47f af7c 	bne.w	800812e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008236:	4b0c      	ldr	r3, [pc, #48]	; (8008268 <xQueueGenericSend+0x1f8>)
 8008238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800823c:	601a      	str	r2, [r3, #0]
 800823e:	f3bf 8f4f 	dsb	sy
 8008242:	f3bf 8f6f 	isb	sy
 8008246:	e772      	b.n	800812e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008248:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800824a:	f000 fc4b 	bl	8008ae4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800824e:	f000 ffc9 	bl	80091e4 <xTaskResumeAll>
 8008252:	e76c      	b.n	800812e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008254:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008256:	f000 fc45 	bl	8008ae4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800825a:	f000 ffc3 	bl	80091e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800825e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008260:	4618      	mov	r0, r3
 8008262:	3738      	adds	r7, #56	; 0x38
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	e000ed04 	.word	0xe000ed04

0800826c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b090      	sub	sp, #64	; 0x40
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
 8008278:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800827e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008280:	2b00      	cmp	r3, #0
 8008282:	d10a      	bne.n	800829a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008288:	f383 8811 	msr	BASEPRI, r3
 800828c:	f3bf 8f6f 	isb	sy
 8008290:	f3bf 8f4f 	dsb	sy
 8008294:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008296:	bf00      	nop
 8008298:	e7fe      	b.n	8008298 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d103      	bne.n	80082a8 <xQueueGenericSendFromISR+0x3c>
 80082a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d101      	bne.n	80082ac <xQueueGenericSendFromISR+0x40>
 80082a8:	2301      	movs	r3, #1
 80082aa:	e000      	b.n	80082ae <xQueueGenericSendFromISR+0x42>
 80082ac:	2300      	movs	r3, #0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d10a      	bne.n	80082c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80082b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b6:	f383 8811 	msr	BASEPRI, r3
 80082ba:	f3bf 8f6f 	isb	sy
 80082be:	f3bf 8f4f 	dsb	sy
 80082c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80082c4:	bf00      	nop
 80082c6:	e7fe      	b.n	80082c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	2b02      	cmp	r3, #2
 80082cc:	d103      	bne.n	80082d6 <xQueueGenericSendFromISR+0x6a>
 80082ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d101      	bne.n	80082da <xQueueGenericSendFromISR+0x6e>
 80082d6:	2301      	movs	r3, #1
 80082d8:	e000      	b.n	80082dc <xQueueGenericSendFromISR+0x70>
 80082da:	2300      	movs	r3, #0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d10a      	bne.n	80082f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80082e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e4:	f383 8811 	msr	BASEPRI, r3
 80082e8:	f3bf 8f6f 	isb	sy
 80082ec:	f3bf 8f4f 	dsb	sy
 80082f0:	623b      	str	r3, [r7, #32]
}
 80082f2:	bf00      	nop
 80082f4:	e7fe      	b.n	80082f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80082f6:	f001 ff3f 	bl	800a178 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80082fa:	f3ef 8211 	mrs	r2, BASEPRI
 80082fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008302:	f383 8811 	msr	BASEPRI, r3
 8008306:	f3bf 8f6f 	isb	sy
 800830a:	f3bf 8f4f 	dsb	sy
 800830e:	61fa      	str	r2, [r7, #28]
 8008310:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008312:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008314:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800831a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800831e:	429a      	cmp	r2, r3
 8008320:	d302      	bcc.n	8008328 <xQueueGenericSendFromISR+0xbc>
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	2b02      	cmp	r3, #2
 8008326:	d12f      	bne.n	8008388 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800832a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800832e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008336:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008338:	683a      	ldr	r2, [r7, #0]
 800833a:	68b9      	ldr	r1, [r7, #8]
 800833c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800833e:	f000 fb41 	bl	80089c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008342:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800834a:	d112      	bne.n	8008372 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800834c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008350:	2b00      	cmp	r3, #0
 8008352:	d016      	beq.n	8008382 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008356:	3324      	adds	r3, #36	; 0x24
 8008358:	4618      	mov	r0, r3
 800835a:	f001 f91d 	bl	8009598 <xTaskRemoveFromEventList>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00e      	beq.n	8008382 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00b      	beq.n	8008382 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2201      	movs	r2, #1
 800836e:	601a      	str	r2, [r3, #0]
 8008370:	e007      	b.n	8008382 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008372:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008376:	3301      	adds	r3, #1
 8008378:	b2db      	uxtb	r3, r3
 800837a:	b25a      	sxtb	r2, r3
 800837c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008382:	2301      	movs	r3, #1
 8008384:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008386:	e001      	b.n	800838c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008388:	2300      	movs	r3, #0
 800838a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800838c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800838e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008396:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800839a:	4618      	mov	r0, r3
 800839c:	3740      	adds	r7, #64	; 0x40
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b08e      	sub	sp, #56	; 0x38
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
 80083aa:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80083b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d10a      	bne.n	80083cc <xQueueGiveFromISR+0x2a>
	__asm volatile
 80083b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ba:	f383 8811 	msr	BASEPRI, r3
 80083be:	f3bf 8f6f 	isb	sy
 80083c2:	f3bf 8f4f 	dsb	sy
 80083c6:	623b      	str	r3, [r7, #32]
}
 80083c8:	bf00      	nop
 80083ca:	e7fe      	b.n	80083ca <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80083cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d00a      	beq.n	80083ea <xQueueGiveFromISR+0x48>
	__asm volatile
 80083d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d8:	f383 8811 	msr	BASEPRI, r3
 80083dc:	f3bf 8f6f 	isb	sy
 80083e0:	f3bf 8f4f 	dsb	sy
 80083e4:	61fb      	str	r3, [r7, #28]
}
 80083e6:	bf00      	nop
 80083e8:	e7fe      	b.n	80083e8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80083ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d103      	bne.n	80083fa <xQueueGiveFromISR+0x58>
 80083f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d101      	bne.n	80083fe <xQueueGiveFromISR+0x5c>
 80083fa:	2301      	movs	r3, #1
 80083fc:	e000      	b.n	8008400 <xQueueGiveFromISR+0x5e>
 80083fe:	2300      	movs	r3, #0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d10a      	bne.n	800841a <xQueueGiveFromISR+0x78>
	__asm volatile
 8008404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008408:	f383 8811 	msr	BASEPRI, r3
 800840c:	f3bf 8f6f 	isb	sy
 8008410:	f3bf 8f4f 	dsb	sy
 8008414:	61bb      	str	r3, [r7, #24]
}
 8008416:	bf00      	nop
 8008418:	e7fe      	b.n	8008418 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800841a:	f001 fead 	bl	800a178 <vPortValidateInterruptPriority>
	__asm volatile
 800841e:	f3ef 8211 	mrs	r2, BASEPRI
 8008422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008426:	f383 8811 	msr	BASEPRI, r3
 800842a:	f3bf 8f6f 	isb	sy
 800842e:	f3bf 8f4f 	dsb	sy
 8008432:	617a      	str	r2, [r7, #20]
 8008434:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008436:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008438:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800843a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800843e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008444:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008446:	429a      	cmp	r2, r3
 8008448:	d22b      	bcs.n	80084a2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800844a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800844c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008456:	1c5a      	adds	r2, r3, #1
 8008458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800845c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008464:	d112      	bne.n	800848c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846a:	2b00      	cmp	r3, #0
 800846c:	d016      	beq.n	800849c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800846e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008470:	3324      	adds	r3, #36	; 0x24
 8008472:	4618      	mov	r0, r3
 8008474:	f001 f890 	bl	8009598 <xTaskRemoveFromEventList>
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00e      	beq.n	800849c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d00b      	beq.n	800849c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	2201      	movs	r2, #1
 8008488:	601a      	str	r2, [r3, #0]
 800848a:	e007      	b.n	800849c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800848c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008490:	3301      	adds	r3, #1
 8008492:	b2db      	uxtb	r3, r3
 8008494:	b25a      	sxtb	r2, r3
 8008496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800849c:	2301      	movs	r3, #1
 800849e:	637b      	str	r3, [r7, #52]	; 0x34
 80084a0:	e001      	b.n	80084a6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80084a2:	2300      	movs	r3, #0
 80084a4:	637b      	str	r3, [r7, #52]	; 0x34
 80084a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f383 8811 	msr	BASEPRI, r3
}
 80084b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80084b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3738      	adds	r7, #56	; 0x38
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b08c      	sub	sp, #48	; 0x30
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80084c8:	2300      	movs	r3, #0
 80084ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80084d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d10a      	bne.n	80084ec <xQueueReceive+0x30>
	__asm volatile
 80084d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084da:	f383 8811 	msr	BASEPRI, r3
 80084de:	f3bf 8f6f 	isb	sy
 80084e2:	f3bf 8f4f 	dsb	sy
 80084e6:	623b      	str	r3, [r7, #32]
}
 80084e8:	bf00      	nop
 80084ea:	e7fe      	b.n	80084ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d103      	bne.n	80084fa <xQueueReceive+0x3e>
 80084f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d101      	bne.n	80084fe <xQueueReceive+0x42>
 80084fa:	2301      	movs	r3, #1
 80084fc:	e000      	b.n	8008500 <xQueueReceive+0x44>
 80084fe:	2300      	movs	r3, #0
 8008500:	2b00      	cmp	r3, #0
 8008502:	d10a      	bne.n	800851a <xQueueReceive+0x5e>
	__asm volatile
 8008504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008508:	f383 8811 	msr	BASEPRI, r3
 800850c:	f3bf 8f6f 	isb	sy
 8008510:	f3bf 8f4f 	dsb	sy
 8008514:	61fb      	str	r3, [r7, #28]
}
 8008516:	bf00      	nop
 8008518:	e7fe      	b.n	8008518 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800851a:	f001 f9fd 	bl	8009918 <xTaskGetSchedulerState>
 800851e:	4603      	mov	r3, r0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d102      	bne.n	800852a <xQueueReceive+0x6e>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d101      	bne.n	800852e <xQueueReceive+0x72>
 800852a:	2301      	movs	r3, #1
 800852c:	e000      	b.n	8008530 <xQueueReceive+0x74>
 800852e:	2300      	movs	r3, #0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d10a      	bne.n	800854a <xQueueReceive+0x8e>
	__asm volatile
 8008534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008538:	f383 8811 	msr	BASEPRI, r3
 800853c:	f3bf 8f6f 	isb	sy
 8008540:	f3bf 8f4f 	dsb	sy
 8008544:	61bb      	str	r3, [r7, #24]
}
 8008546:	bf00      	nop
 8008548:	e7fe      	b.n	8008548 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800854a:	f001 fd33 	bl	8009fb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800854e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008552:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008556:	2b00      	cmp	r3, #0
 8008558:	d01f      	beq.n	800859a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800855a:	68b9      	ldr	r1, [r7, #8]
 800855c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800855e:	f000 fa9b 	bl	8008a98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008564:	1e5a      	subs	r2, r3, #1
 8008566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008568:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800856a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00f      	beq.n	8008592 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008574:	3310      	adds	r3, #16
 8008576:	4618      	mov	r0, r3
 8008578:	f001 f80e 	bl	8009598 <xTaskRemoveFromEventList>
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d007      	beq.n	8008592 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008582:	4b3d      	ldr	r3, [pc, #244]	; (8008678 <xQueueReceive+0x1bc>)
 8008584:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008588:	601a      	str	r2, [r3, #0]
 800858a:	f3bf 8f4f 	dsb	sy
 800858e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008592:	f001 fd3f 	bl	800a014 <vPortExitCritical>
				return pdPASS;
 8008596:	2301      	movs	r3, #1
 8008598:	e069      	b.n	800866e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d103      	bne.n	80085a8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80085a0:	f001 fd38 	bl	800a014 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80085a4:	2300      	movs	r3, #0
 80085a6:	e062      	b.n	800866e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80085a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d106      	bne.n	80085bc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80085ae:	f107 0310 	add.w	r3, r7, #16
 80085b2:	4618      	mov	r0, r3
 80085b4:	f001 f852 	bl	800965c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80085b8:	2301      	movs	r3, #1
 80085ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80085bc:	f001 fd2a 	bl	800a014 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80085c0:	f000 fe02 	bl	80091c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80085c4:	f001 fcf6 	bl	8009fb4 <vPortEnterCritical>
 80085c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80085ce:	b25b      	sxtb	r3, r3
 80085d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d4:	d103      	bne.n	80085de <xQueueReceive+0x122>
 80085d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d8:	2200      	movs	r2, #0
 80085da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085e4:	b25b      	sxtb	r3, r3
 80085e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ea:	d103      	bne.n	80085f4 <xQueueReceive+0x138>
 80085ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ee:	2200      	movs	r2, #0
 80085f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085f4:	f001 fd0e 	bl	800a014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80085f8:	1d3a      	adds	r2, r7, #4
 80085fa:	f107 0310 	add.w	r3, r7, #16
 80085fe:	4611      	mov	r1, r2
 8008600:	4618      	mov	r0, r3
 8008602:	f001 f841 	bl	8009688 <xTaskCheckForTimeOut>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d123      	bne.n	8008654 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800860c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800860e:	f000 fabb 	bl	8008b88 <prvIsQueueEmpty>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d017      	beq.n	8008648 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861a:	3324      	adds	r3, #36	; 0x24
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	4611      	mov	r1, r2
 8008620:	4618      	mov	r0, r3
 8008622:	f000 ff95 	bl	8009550 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008626:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008628:	f000 fa5c 	bl	8008ae4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800862c:	f000 fdda 	bl	80091e4 <xTaskResumeAll>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d189      	bne.n	800854a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008636:	4b10      	ldr	r3, [pc, #64]	; (8008678 <xQueueReceive+0x1bc>)
 8008638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800863c:	601a      	str	r2, [r3, #0]
 800863e:	f3bf 8f4f 	dsb	sy
 8008642:	f3bf 8f6f 	isb	sy
 8008646:	e780      	b.n	800854a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800864a:	f000 fa4b 	bl	8008ae4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800864e:	f000 fdc9 	bl	80091e4 <xTaskResumeAll>
 8008652:	e77a      	b.n	800854a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008654:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008656:	f000 fa45 	bl	8008ae4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800865a:	f000 fdc3 	bl	80091e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800865e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008660:	f000 fa92 	bl	8008b88 <prvIsQueueEmpty>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	f43f af6f 	beq.w	800854a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800866c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800866e:	4618      	mov	r0, r3
 8008670:	3730      	adds	r7, #48	; 0x30
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	e000ed04 	.word	0xe000ed04

0800867c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b08e      	sub	sp, #56	; 0x38
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008686:	2300      	movs	r3, #0
 8008688:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800868e:	2300      	movs	r3, #0
 8008690:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008694:	2b00      	cmp	r3, #0
 8008696:	d10a      	bne.n	80086ae <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869c:	f383 8811 	msr	BASEPRI, r3
 80086a0:	f3bf 8f6f 	isb	sy
 80086a4:	f3bf 8f4f 	dsb	sy
 80086a8:	623b      	str	r3, [r7, #32]
}
 80086aa:	bf00      	nop
 80086ac:	e7fe      	b.n	80086ac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80086ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00a      	beq.n	80086cc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80086b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ba:	f383 8811 	msr	BASEPRI, r3
 80086be:	f3bf 8f6f 	isb	sy
 80086c2:	f3bf 8f4f 	dsb	sy
 80086c6:	61fb      	str	r3, [r7, #28]
}
 80086c8:	bf00      	nop
 80086ca:	e7fe      	b.n	80086ca <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086cc:	f001 f924 	bl	8009918 <xTaskGetSchedulerState>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d102      	bne.n	80086dc <xQueueSemaphoreTake+0x60>
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d101      	bne.n	80086e0 <xQueueSemaphoreTake+0x64>
 80086dc:	2301      	movs	r3, #1
 80086de:	e000      	b.n	80086e2 <xQueueSemaphoreTake+0x66>
 80086e0:	2300      	movs	r3, #0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d10a      	bne.n	80086fc <xQueueSemaphoreTake+0x80>
	__asm volatile
 80086e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ea:	f383 8811 	msr	BASEPRI, r3
 80086ee:	f3bf 8f6f 	isb	sy
 80086f2:	f3bf 8f4f 	dsb	sy
 80086f6:	61bb      	str	r3, [r7, #24]
}
 80086f8:	bf00      	nop
 80086fa:	e7fe      	b.n	80086fa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80086fc:	f001 fc5a 	bl	8009fb4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008704:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008708:	2b00      	cmp	r3, #0
 800870a:	d024      	beq.n	8008756 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800870c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870e:	1e5a      	subs	r2, r3, #1
 8008710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008712:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d104      	bne.n	8008726 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800871c:	f001 faa4 	bl	8009c68 <pvTaskIncrementMutexHeldCount>
 8008720:	4602      	mov	r2, r0
 8008722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008724:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008728:	691b      	ldr	r3, [r3, #16]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00f      	beq.n	800874e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800872e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008730:	3310      	adds	r3, #16
 8008732:	4618      	mov	r0, r3
 8008734:	f000 ff30 	bl	8009598 <xTaskRemoveFromEventList>
 8008738:	4603      	mov	r3, r0
 800873a:	2b00      	cmp	r3, #0
 800873c:	d007      	beq.n	800874e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800873e:	4b54      	ldr	r3, [pc, #336]	; (8008890 <xQueueSemaphoreTake+0x214>)
 8008740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008744:	601a      	str	r2, [r3, #0]
 8008746:	f3bf 8f4f 	dsb	sy
 800874a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800874e:	f001 fc61 	bl	800a014 <vPortExitCritical>
				return pdPASS;
 8008752:	2301      	movs	r3, #1
 8008754:	e097      	b.n	8008886 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d111      	bne.n	8008780 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800875c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00a      	beq.n	8008778 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008766:	f383 8811 	msr	BASEPRI, r3
 800876a:	f3bf 8f6f 	isb	sy
 800876e:	f3bf 8f4f 	dsb	sy
 8008772:	617b      	str	r3, [r7, #20]
}
 8008774:	bf00      	nop
 8008776:	e7fe      	b.n	8008776 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008778:	f001 fc4c 	bl	800a014 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800877c:	2300      	movs	r3, #0
 800877e:	e082      	b.n	8008886 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008782:	2b00      	cmp	r3, #0
 8008784:	d106      	bne.n	8008794 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008786:	f107 030c 	add.w	r3, r7, #12
 800878a:	4618      	mov	r0, r3
 800878c:	f000 ff66 	bl	800965c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008790:	2301      	movs	r3, #1
 8008792:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008794:	f001 fc3e 	bl	800a014 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008798:	f000 fd16 	bl	80091c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800879c:	f001 fc0a 	bl	8009fb4 <vPortEnterCritical>
 80087a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087a6:	b25b      	sxtb	r3, r3
 80087a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ac:	d103      	bne.n	80087b6 <xQueueSemaphoreTake+0x13a>
 80087ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b0:	2200      	movs	r2, #0
 80087b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087bc:	b25b      	sxtb	r3, r3
 80087be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087c2:	d103      	bne.n	80087cc <xQueueSemaphoreTake+0x150>
 80087c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c6:	2200      	movs	r2, #0
 80087c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087cc:	f001 fc22 	bl	800a014 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80087d0:	463a      	mov	r2, r7
 80087d2:	f107 030c 	add.w	r3, r7, #12
 80087d6:	4611      	mov	r1, r2
 80087d8:	4618      	mov	r0, r3
 80087da:	f000 ff55 	bl	8009688 <xTaskCheckForTimeOut>
 80087de:	4603      	mov	r3, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d132      	bne.n	800884a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80087e6:	f000 f9cf 	bl	8008b88 <prvIsQueueEmpty>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d026      	beq.n	800883e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80087f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d109      	bne.n	800880c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80087f8:	f001 fbdc 	bl	8009fb4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80087fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	4618      	mov	r0, r3
 8008802:	f001 f8a7 	bl	8009954 <xTaskPriorityInherit>
 8008806:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008808:	f001 fc04 	bl	800a014 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800880c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800880e:	3324      	adds	r3, #36	; 0x24
 8008810:	683a      	ldr	r2, [r7, #0]
 8008812:	4611      	mov	r1, r2
 8008814:	4618      	mov	r0, r3
 8008816:	f000 fe9b 	bl	8009550 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800881a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800881c:	f000 f962 	bl	8008ae4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008820:	f000 fce0 	bl	80091e4 <xTaskResumeAll>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	f47f af68 	bne.w	80086fc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800882c:	4b18      	ldr	r3, [pc, #96]	; (8008890 <xQueueSemaphoreTake+0x214>)
 800882e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008832:	601a      	str	r2, [r3, #0]
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	f3bf 8f6f 	isb	sy
 800883c:	e75e      	b.n	80086fc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800883e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008840:	f000 f950 	bl	8008ae4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008844:	f000 fcce 	bl	80091e4 <xTaskResumeAll>
 8008848:	e758      	b.n	80086fc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800884a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800884c:	f000 f94a 	bl	8008ae4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008850:	f000 fcc8 	bl	80091e4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008854:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008856:	f000 f997 	bl	8008b88 <prvIsQueueEmpty>
 800885a:	4603      	mov	r3, r0
 800885c:	2b00      	cmp	r3, #0
 800885e:	f43f af4d 	beq.w	80086fc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008864:	2b00      	cmp	r3, #0
 8008866:	d00d      	beq.n	8008884 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008868:	f001 fba4 	bl	8009fb4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800886c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800886e:	f000 f891 	bl	8008994 <prvGetDisinheritPriorityAfterTimeout>
 8008872:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800887a:	4618      	mov	r0, r3
 800887c:	f001 f966 	bl	8009b4c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008880:	f001 fbc8 	bl	800a014 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008884:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008886:	4618      	mov	r0, r3
 8008888:	3738      	adds	r7, #56	; 0x38
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	e000ed04 	.word	0xe000ed04

08008894 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b08e      	sub	sp, #56	; 0x38
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80088a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d10a      	bne.n	80088c0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80088aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ae:	f383 8811 	msr	BASEPRI, r3
 80088b2:	f3bf 8f6f 	isb	sy
 80088b6:	f3bf 8f4f 	dsb	sy
 80088ba:	623b      	str	r3, [r7, #32]
}
 80088bc:	bf00      	nop
 80088be:	e7fe      	b.n	80088be <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d103      	bne.n	80088ce <xQueueReceiveFromISR+0x3a>
 80088c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d101      	bne.n	80088d2 <xQueueReceiveFromISR+0x3e>
 80088ce:	2301      	movs	r3, #1
 80088d0:	e000      	b.n	80088d4 <xQueueReceiveFromISR+0x40>
 80088d2:	2300      	movs	r3, #0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d10a      	bne.n	80088ee <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80088d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088dc:	f383 8811 	msr	BASEPRI, r3
 80088e0:	f3bf 8f6f 	isb	sy
 80088e4:	f3bf 8f4f 	dsb	sy
 80088e8:	61fb      	str	r3, [r7, #28]
}
 80088ea:	bf00      	nop
 80088ec:	e7fe      	b.n	80088ec <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80088ee:	f001 fc43 	bl	800a178 <vPortValidateInterruptPriority>
	__asm volatile
 80088f2:	f3ef 8211 	mrs	r2, BASEPRI
 80088f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fa:	f383 8811 	msr	BASEPRI, r3
 80088fe:	f3bf 8f6f 	isb	sy
 8008902:	f3bf 8f4f 	dsb	sy
 8008906:	61ba      	str	r2, [r7, #24]
 8008908:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800890a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800890c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800890e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008912:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008916:	2b00      	cmp	r3, #0
 8008918:	d02f      	beq.n	800897a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800891a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008924:	68b9      	ldr	r1, [r7, #8]
 8008926:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008928:	f000 f8b6 	bl	8008a98 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800892c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892e:	1e5a      	subs	r2, r3, #1
 8008930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008932:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008934:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800893c:	d112      	bne.n	8008964 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800893e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008940:	691b      	ldr	r3, [r3, #16]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d016      	beq.n	8008974 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008948:	3310      	adds	r3, #16
 800894a:	4618      	mov	r0, r3
 800894c:	f000 fe24 	bl	8009598 <xTaskRemoveFromEventList>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d00e      	beq.n	8008974 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00b      	beq.n	8008974 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	601a      	str	r2, [r3, #0]
 8008962:	e007      	b.n	8008974 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008968:	3301      	adds	r3, #1
 800896a:	b2db      	uxtb	r3, r3
 800896c:	b25a      	sxtb	r2, r3
 800896e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008974:	2301      	movs	r3, #1
 8008976:	637b      	str	r3, [r7, #52]	; 0x34
 8008978:	e001      	b.n	800897e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800897a:	2300      	movs	r3, #0
 800897c:	637b      	str	r3, [r7, #52]	; 0x34
 800897e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008980:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	f383 8811 	msr	BASEPRI, r3
}
 8008988:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800898a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800898c:	4618      	mov	r0, r3
 800898e:	3738      	adds	r7, #56	; 0x38
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008994:	b480      	push	{r7}
 8008996:	b085      	sub	sp, #20
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d006      	beq.n	80089b2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f1c3 0307 	rsb	r3, r3, #7
 80089ae:	60fb      	str	r3, [r7, #12]
 80089b0:	e001      	b.n	80089b6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80089b2:	2300      	movs	r3, #0
 80089b4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80089b6:	68fb      	ldr	r3, [r7, #12]
	}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3714      	adds	r7, #20
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b086      	sub	sp, #24
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	60b9      	str	r1, [r7, #8]
 80089ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80089d0:	2300      	movs	r3, #0
 80089d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d10d      	bne.n	80089fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d14d      	bne.n	8008a86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	4618      	mov	r0, r3
 80089f0:	f001 f826 	bl	8009a40 <xTaskPriorityDisinherit>
 80089f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	609a      	str	r2, [r3, #8]
 80089fc:	e043      	b.n	8008a86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d119      	bne.n	8008a38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6858      	ldr	r0, [r3, #4]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	68b9      	ldr	r1, [r7, #8]
 8008a10:	f001 feff 	bl	800a812 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	685a      	ldr	r2, [r3, #4]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a1c:	441a      	add	r2, r3
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	685a      	ldr	r2, [r3, #4]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d32b      	bcc.n	8008a86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	605a      	str	r2, [r3, #4]
 8008a36:	e026      	b.n	8008a86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	68d8      	ldr	r0, [r3, #12]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a40:	461a      	mov	r2, r3
 8008a42:	68b9      	ldr	r1, [r7, #8]
 8008a44:	f001 fee5 	bl	800a812 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	68da      	ldr	r2, [r3, #12]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a50:	425b      	negs	r3, r3
 8008a52:	441a      	add	r2, r3
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	68da      	ldr	r2, [r3, #12]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d207      	bcs.n	8008a74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	689a      	ldr	r2, [r3, #8]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6c:	425b      	negs	r3, r3
 8008a6e:	441a      	add	r2, r3
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d105      	bne.n	8008a86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d002      	beq.n	8008a86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	3b01      	subs	r3, #1
 8008a84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	1c5a      	adds	r2, r3, #1
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008a8e:	697b      	ldr	r3, [r7, #20]
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3718      	adds	r7, #24
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d018      	beq.n	8008adc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	68da      	ldr	r2, [r3, #12]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab2:	441a      	add	r2, r3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	68da      	ldr	r2, [r3, #12]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d303      	bcc.n	8008acc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	68d9      	ldr	r1, [r3, #12]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	6838      	ldr	r0, [r7, #0]
 8008ad8:	f001 fe9b 	bl	800a812 <memcpy>
	}
}
 8008adc:	bf00      	nop
 8008ade:	3708      	adds	r7, #8
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008aec:	f001 fa62 	bl	8009fb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008af6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008af8:	e011      	b.n	8008b1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d012      	beq.n	8008b28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	3324      	adds	r3, #36	; 0x24
 8008b06:	4618      	mov	r0, r3
 8008b08:	f000 fd46 	bl	8009598 <xTaskRemoveFromEventList>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d001      	beq.n	8008b16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008b12:	f000 fe1b 	bl	800974c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008b16:	7bfb      	ldrb	r3, [r7, #15]
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	b2db      	uxtb	r3, r3
 8008b1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	dce9      	bgt.n	8008afa <prvUnlockQueue+0x16>
 8008b26:	e000      	b.n	8008b2a <prvUnlockQueue+0x46>
					break;
 8008b28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	22ff      	movs	r2, #255	; 0xff
 8008b2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008b32:	f001 fa6f 	bl	800a014 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008b36:	f001 fa3d 	bl	8009fb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b42:	e011      	b.n	8008b68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	691b      	ldr	r3, [r3, #16]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d012      	beq.n	8008b72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	3310      	adds	r3, #16
 8008b50:	4618      	mov	r0, r3
 8008b52:	f000 fd21 	bl	8009598 <xTaskRemoveFromEventList>
 8008b56:	4603      	mov	r3, r0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d001      	beq.n	8008b60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008b5c:	f000 fdf6 	bl	800974c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008b60:	7bbb      	ldrb	r3, [r7, #14]
 8008b62:	3b01      	subs	r3, #1
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	dce9      	bgt.n	8008b44 <prvUnlockQueue+0x60>
 8008b70:	e000      	b.n	8008b74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008b72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	22ff      	movs	r2, #255	; 0xff
 8008b78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008b7c:	f001 fa4a 	bl	800a014 <vPortExitCritical>
}
 8008b80:	bf00      	nop
 8008b82:	3710      	adds	r7, #16
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}

08008b88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b90:	f001 fa10 	bl	8009fb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d102      	bne.n	8008ba2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	60fb      	str	r3, [r7, #12]
 8008ba0:	e001      	b.n	8008ba6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ba6:	f001 fa35 	bl	800a014 <vPortExitCritical>

	return xReturn;
 8008baa:	68fb      	ldr	r3, [r7, #12]
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3710      	adds	r7, #16
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008bbc:	f001 f9fa 	bl	8009fb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d102      	bne.n	8008bd2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	60fb      	str	r3, [r7, #12]
 8008bd0:	e001      	b.n	8008bd6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008bd6:	f001 fa1d 	bl	800a014 <vPortExitCritical>

	return xReturn;
 8008bda:	68fb      	ldr	r3, [r7, #12]
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3710      	adds	r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b08e      	sub	sp, #56	; 0x38
 8008be8:	af04      	add	r7, sp, #16
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	607a      	str	r2, [r7, #4]
 8008bf0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d10a      	bne.n	8008c0e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfc:	f383 8811 	msr	BASEPRI, r3
 8008c00:	f3bf 8f6f 	isb	sy
 8008c04:	f3bf 8f4f 	dsb	sy
 8008c08:	623b      	str	r3, [r7, #32]
}
 8008c0a:	bf00      	nop
 8008c0c:	e7fe      	b.n	8008c0c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d10a      	bne.n	8008c2a <xTaskCreateStatic+0x46>
	__asm volatile
 8008c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c18:	f383 8811 	msr	BASEPRI, r3
 8008c1c:	f3bf 8f6f 	isb	sy
 8008c20:	f3bf 8f4f 	dsb	sy
 8008c24:	61fb      	str	r3, [r7, #28]
}
 8008c26:	bf00      	nop
 8008c28:	e7fe      	b.n	8008c28 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008c2a:	23b4      	movs	r3, #180	; 0xb4
 8008c2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	2bb4      	cmp	r3, #180	; 0xb4
 8008c32:	d00a      	beq.n	8008c4a <xTaskCreateStatic+0x66>
	__asm volatile
 8008c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c38:	f383 8811 	msr	BASEPRI, r3
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	f3bf 8f4f 	dsb	sy
 8008c44:	61bb      	str	r3, [r7, #24]
}
 8008c46:	bf00      	nop
 8008c48:	e7fe      	b.n	8008c48 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008c4a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d01e      	beq.n	8008c90 <xTaskCreateStatic+0xac>
 8008c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d01b      	beq.n	8008c90 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c5a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c60:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c64:	2202      	movs	r2, #2
 8008c66:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	9303      	str	r3, [sp, #12]
 8008c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c70:	9302      	str	r3, [sp, #8]
 8008c72:	f107 0314 	add.w	r3, r7, #20
 8008c76:	9301      	str	r3, [sp, #4]
 8008c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7a:	9300      	str	r3, [sp, #0]
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	68b9      	ldr	r1, [r7, #8]
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	f000 f850 	bl	8008d28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c8a:	f000 f8eb 	bl	8008e64 <prvAddNewTaskToReadyList>
 8008c8e:	e001      	b.n	8008c94 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008c90:	2300      	movs	r3, #0
 8008c92:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008c94:	697b      	ldr	r3, [r7, #20]
	}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3728      	adds	r7, #40	; 0x28
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b08c      	sub	sp, #48	; 0x30
 8008ca2:	af04      	add	r7, sp, #16
 8008ca4:	60f8      	str	r0, [r7, #12]
 8008ca6:	60b9      	str	r1, [r7, #8]
 8008ca8:	603b      	str	r3, [r7, #0]
 8008caa:	4613      	mov	r3, r2
 8008cac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008cae:	88fb      	ldrh	r3, [r7, #6]
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f001 faa0 	bl	800a1f8 <pvPortMalloc>
 8008cb8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d00e      	beq.n	8008cde <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008cc0:	20b4      	movs	r0, #180	; 0xb4
 8008cc2:	f001 fa99 	bl	800a1f8 <pvPortMalloc>
 8008cc6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d003      	beq.n	8008cd6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008cce:	69fb      	ldr	r3, [r7, #28]
 8008cd0:	697a      	ldr	r2, [r7, #20]
 8008cd2:	631a      	str	r2, [r3, #48]	; 0x30
 8008cd4:	e005      	b.n	8008ce2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008cd6:	6978      	ldr	r0, [r7, #20]
 8008cd8:	f001 fb5a 	bl	800a390 <vPortFree>
 8008cdc:	e001      	b.n	8008ce2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008ce2:	69fb      	ldr	r3, [r7, #28]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d017      	beq.n	8008d18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008ce8:	69fb      	ldr	r3, [r7, #28]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008cf0:	88fa      	ldrh	r2, [r7, #6]
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	9303      	str	r3, [sp, #12]
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	9302      	str	r3, [sp, #8]
 8008cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cfc:	9301      	str	r3, [sp, #4]
 8008cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d00:	9300      	str	r3, [sp, #0]
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	68b9      	ldr	r1, [r7, #8]
 8008d06:	68f8      	ldr	r0, [r7, #12]
 8008d08:	f000 f80e 	bl	8008d28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d0c:	69f8      	ldr	r0, [r7, #28]
 8008d0e:	f000 f8a9 	bl	8008e64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008d12:	2301      	movs	r3, #1
 8008d14:	61bb      	str	r3, [r7, #24]
 8008d16:	e002      	b.n	8008d1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008d18:	f04f 33ff 	mov.w	r3, #4294967295
 8008d1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008d1e:	69bb      	ldr	r3, [r7, #24]
	}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3720      	adds	r7, #32
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b088      	sub	sp, #32
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
 8008d34:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008d40:	3b01      	subs	r3, #1
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	4413      	add	r3, r2
 8008d46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008d48:	69bb      	ldr	r3, [r7, #24]
 8008d4a:	f023 0307 	bic.w	r3, r3, #7
 8008d4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	f003 0307 	and.w	r3, r3, #7
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00a      	beq.n	8008d70 <prvInitialiseNewTask+0x48>
	__asm volatile
 8008d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5e:	f383 8811 	msr	BASEPRI, r3
 8008d62:	f3bf 8f6f 	isb	sy
 8008d66:	f3bf 8f4f 	dsb	sy
 8008d6a:	617b      	str	r3, [r7, #20]
}
 8008d6c:	bf00      	nop
 8008d6e:	e7fe      	b.n	8008d6e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d01f      	beq.n	8008db6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d76:	2300      	movs	r3, #0
 8008d78:	61fb      	str	r3, [r7, #28]
 8008d7a:	e012      	b.n	8008da2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008d7c:	68ba      	ldr	r2, [r7, #8]
 8008d7e:	69fb      	ldr	r3, [r7, #28]
 8008d80:	4413      	add	r3, r2
 8008d82:	7819      	ldrb	r1, [r3, #0]
 8008d84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	4413      	add	r3, r2
 8008d8a:	3334      	adds	r3, #52	; 0x34
 8008d8c:	460a      	mov	r2, r1
 8008d8e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008d90:	68ba      	ldr	r2, [r7, #8]
 8008d92:	69fb      	ldr	r3, [r7, #28]
 8008d94:	4413      	add	r3, r2
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d006      	beq.n	8008daa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	3301      	adds	r3, #1
 8008da0:	61fb      	str	r3, [r7, #28]
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	2b0f      	cmp	r3, #15
 8008da6:	d9e9      	bls.n	8008d7c <prvInitialiseNewTask+0x54>
 8008da8:	e000      	b.n	8008dac <prvInitialiseNewTask+0x84>
			{
				break;
 8008daa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dae:	2200      	movs	r2, #0
 8008db0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008db4:	e003      	b.n	8008dbe <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db8:	2200      	movs	r2, #0
 8008dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc0:	2b06      	cmp	r3, #6
 8008dc2:	d901      	bls.n	8008dc8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008dc4:	2306      	movs	r3, #6
 8008dc6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dcc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008dd2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ddc:	3304      	adds	r3, #4
 8008dde:	4618      	mov	r0, r3
 8008de0:	f7fe ff0e 	bl	8007c00 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de6:	3318      	adds	r3, #24
 8008de8:	4618      	mov	r0, r3
 8008dea:	f7fe ff09 	bl	8007c00 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008df2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df6:	f1c3 0207 	rsb	r2, r3, #7
 8008dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e02:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e06:	2200      	movs	r2, #0
 8008e08:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e16:	334c      	adds	r3, #76	; 0x4c
 8008e18:	2260      	movs	r2, #96	; 0x60
 8008e1a:	2100      	movs	r1, #0
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f001 fd06 	bl	800a82e <memset>
 8008e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e24:	4a0c      	ldr	r2, [pc, #48]	; (8008e58 <prvInitialiseNewTask+0x130>)
 8008e26:	651a      	str	r2, [r3, #80]	; 0x50
 8008e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e2a:	4a0c      	ldr	r2, [pc, #48]	; (8008e5c <prvInitialiseNewTask+0x134>)
 8008e2c:	655a      	str	r2, [r3, #84]	; 0x54
 8008e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e30:	4a0b      	ldr	r2, [pc, #44]	; (8008e60 <prvInitialiseNewTask+0x138>)
 8008e32:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008e34:	683a      	ldr	r2, [r7, #0]
 8008e36:	68f9      	ldr	r1, [r7, #12]
 8008e38:	69b8      	ldr	r0, [r7, #24]
 8008e3a:	f000 ff8f 	bl	8009d5c <pxPortInitialiseStack>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e42:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d002      	beq.n	8008e50 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e4e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e50:	bf00      	nop
 8008e52:	3720      	adds	r7, #32
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	0800efb0 	.word	0x0800efb0
 8008e5c:	0800efd0 	.word	0x0800efd0
 8008e60:	0800ef90 	.word	0x0800ef90

08008e64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008e6c:	f001 f8a2 	bl	8009fb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008e70:	4b2a      	ldr	r3, [pc, #168]	; (8008f1c <prvAddNewTaskToReadyList+0xb8>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	3301      	adds	r3, #1
 8008e76:	4a29      	ldr	r2, [pc, #164]	; (8008f1c <prvAddNewTaskToReadyList+0xb8>)
 8008e78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008e7a:	4b29      	ldr	r3, [pc, #164]	; (8008f20 <prvAddNewTaskToReadyList+0xbc>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d109      	bne.n	8008e96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008e82:	4a27      	ldr	r2, [pc, #156]	; (8008f20 <prvAddNewTaskToReadyList+0xbc>)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e88:	4b24      	ldr	r3, [pc, #144]	; (8008f1c <prvAddNewTaskToReadyList+0xb8>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d110      	bne.n	8008eb2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008e90:	f000 fc80 	bl	8009794 <prvInitialiseTaskLists>
 8008e94:	e00d      	b.n	8008eb2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008e96:	4b23      	ldr	r3, [pc, #140]	; (8008f24 <prvAddNewTaskToReadyList+0xc0>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d109      	bne.n	8008eb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008e9e:	4b20      	ldr	r3, [pc, #128]	; (8008f20 <prvAddNewTaskToReadyList+0xbc>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d802      	bhi.n	8008eb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008eac:	4a1c      	ldr	r2, [pc, #112]	; (8008f20 <prvAddNewTaskToReadyList+0xbc>)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008eb2:	4b1d      	ldr	r3, [pc, #116]	; (8008f28 <prvAddNewTaskToReadyList+0xc4>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	4a1b      	ldr	r2, [pc, #108]	; (8008f28 <prvAddNewTaskToReadyList+0xc4>)
 8008eba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	409a      	lsls	r2, r3
 8008ec4:	4b19      	ldr	r3, [pc, #100]	; (8008f2c <prvAddNewTaskToReadyList+0xc8>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	4a18      	ldr	r2, [pc, #96]	; (8008f2c <prvAddNewTaskToReadyList+0xc8>)
 8008ecc:	6013      	str	r3, [r2, #0]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	4413      	add	r3, r2
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	4a15      	ldr	r2, [pc, #84]	; (8008f30 <prvAddNewTaskToReadyList+0xcc>)
 8008edc:	441a      	add	r2, r3
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	3304      	adds	r3, #4
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	4610      	mov	r0, r2
 8008ee6:	f7fe fe98 	bl	8007c1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008eea:	f001 f893 	bl	800a014 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008eee:	4b0d      	ldr	r3, [pc, #52]	; (8008f24 <prvAddNewTaskToReadyList+0xc0>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00e      	beq.n	8008f14 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008ef6:	4b0a      	ldr	r3, [pc, #40]	; (8008f20 <prvAddNewTaskToReadyList+0xbc>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d207      	bcs.n	8008f14 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008f04:	4b0b      	ldr	r3, [pc, #44]	; (8008f34 <prvAddNewTaskToReadyList+0xd0>)
 8008f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f0a:	601a      	str	r2, [r3, #0]
 8008f0c:	f3bf 8f4f 	dsb	sy
 8008f10:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f14:	bf00      	nop
 8008f16:	3708      	adds	r7, #8
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	20000834 	.word	0x20000834
 8008f20:	20000734 	.word	0x20000734
 8008f24:	20000840 	.word	0x20000840
 8008f28:	20000850 	.word	0x20000850
 8008f2c:	2000083c 	.word	0x2000083c
 8008f30:	20000738 	.word	0x20000738
 8008f34:	e000ed04 	.word	0xe000ed04

08008f38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008f40:	2300      	movs	r3, #0
 8008f42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d017      	beq.n	8008f7a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008f4a:	4b13      	ldr	r3, [pc, #76]	; (8008f98 <vTaskDelay+0x60>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00a      	beq.n	8008f68 <vTaskDelay+0x30>
	__asm volatile
 8008f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f56:	f383 8811 	msr	BASEPRI, r3
 8008f5a:	f3bf 8f6f 	isb	sy
 8008f5e:	f3bf 8f4f 	dsb	sy
 8008f62:	60bb      	str	r3, [r7, #8]
}
 8008f64:	bf00      	nop
 8008f66:	e7fe      	b.n	8008f66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008f68:	f000 f92e 	bl	80091c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008f6c:	2100      	movs	r1, #0
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 fe8e 	bl	8009c90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008f74:	f000 f936 	bl	80091e4 <xTaskResumeAll>
 8008f78:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d107      	bne.n	8008f90 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008f80:	4b06      	ldr	r3, [pc, #24]	; (8008f9c <vTaskDelay+0x64>)
 8008f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f86:	601a      	str	r2, [r3, #0]
 8008f88:	f3bf 8f4f 	dsb	sy
 8008f8c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f90:	bf00      	nop
 8008f92:	3710      	adds	r7, #16
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	2000085c 	.word	0x2000085c
 8008f9c:	e000ed04 	.word	0xe000ed04

08008fa0 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b088      	sub	sp, #32
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8008faa:	2300      	movs	r3, #0
 8008fac:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	2b06      	cmp	r3, #6
 8008fb2:	d90a      	bls.n	8008fca <vTaskPrioritySet+0x2a>
	__asm volatile
 8008fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb8:	f383 8811 	msr	BASEPRI, r3
 8008fbc:	f3bf 8f6f 	isb	sy
 8008fc0:	f3bf 8f4f 	dsb	sy
 8008fc4:	60fb      	str	r3, [r7, #12]
}
 8008fc6:	bf00      	nop
 8008fc8:	e7fe      	b.n	8008fc8 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	2b06      	cmp	r3, #6
 8008fce:	d901      	bls.n	8008fd4 <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008fd0:	2306      	movs	r3, #6
 8008fd2:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8008fd4:	f000 ffee 	bl	8009fb4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d102      	bne.n	8008fe4 <vTaskPrioritySet+0x44>
 8008fde:	4b41      	ldr	r3, [pc, #260]	; (80090e4 <vTaskPrioritySet+0x144>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	e000      	b.n	8008fe6 <vTaskPrioritySet+0x46>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8008fe8:	69bb      	ldr	r3, [r7, #24]
 8008fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fec:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8008fee:	697a      	ldr	r2, [r7, #20]
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d06f      	beq.n	80090d6 <vTaskPrioritySet+0x136>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8008ff6:	683a      	ldr	r2, [r7, #0]
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d90d      	bls.n	800901a <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 8008ffe:	4b39      	ldr	r3, [pc, #228]	; (80090e4 <vTaskPrioritySet+0x144>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	69ba      	ldr	r2, [r7, #24]
 8009004:	429a      	cmp	r2, r3
 8009006:	d00f      	beq.n	8009028 <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8009008:	4b36      	ldr	r3, [pc, #216]	; (80090e4 <vTaskPrioritySet+0x144>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800900e:	683a      	ldr	r2, [r7, #0]
 8009010:	429a      	cmp	r2, r3
 8009012:	d309      	bcc.n	8009028 <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 8009014:	2301      	movs	r3, #1
 8009016:	61fb      	str	r3, [r7, #28]
 8009018:	e006      	b.n	8009028 <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 800901a:	4b32      	ldr	r3, [pc, #200]	; (80090e4 <vTaskPrioritySet+0x144>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	69ba      	ldr	r2, [r7, #24]
 8009020:	429a      	cmp	r2, r3
 8009022:	d101      	bne.n	8009028 <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8009024:	2301      	movs	r3, #1
 8009026:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009028:	69bb      	ldr	r3, [r7, #24]
 800902a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800902c:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800902e:	69bb      	ldr	r3, [r7, #24]
 8009030:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009036:	429a      	cmp	r2, r3
 8009038:	d102      	bne.n	8009040 <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	683a      	ldr	r2, [r7, #0]
 800903e:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8009040:	69bb      	ldr	r3, [r7, #24]
 8009042:	683a      	ldr	r2, [r7, #0]
 8009044:	645a      	str	r2, [r3, #68]	; 0x44
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	699b      	ldr	r3, [r3, #24]
 800904a:	2b00      	cmp	r3, #0
 800904c:	db04      	blt.n	8009058 <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	f1c3 0207 	rsb	r2, r3, #7
 8009054:	69bb      	ldr	r3, [r7, #24]
 8009056:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009058:	69bb      	ldr	r3, [r7, #24]
 800905a:	6959      	ldr	r1, [r3, #20]
 800905c:	693a      	ldr	r2, [r7, #16]
 800905e:	4613      	mov	r3, r2
 8009060:	009b      	lsls	r3, r3, #2
 8009062:	4413      	add	r3, r2
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	4a20      	ldr	r2, [pc, #128]	; (80090e8 <vTaskPrioritySet+0x148>)
 8009068:	4413      	add	r3, r2
 800906a:	4299      	cmp	r1, r3
 800906c:	d128      	bne.n	80090c0 <vTaskPrioritySet+0x120>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	3304      	adds	r3, #4
 8009072:	4618      	mov	r0, r3
 8009074:	f7fe fe2e 	bl	8007cd4 <uxListRemove>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d109      	bne.n	8009092 <vTaskPrioritySet+0xf2>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 800907e:	2201      	movs	r2, #1
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	fa02 f303 	lsl.w	r3, r2, r3
 8009086:	43da      	mvns	r2, r3
 8009088:	4b18      	ldr	r3, [pc, #96]	; (80090ec <vTaskPrioritySet+0x14c>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4013      	ands	r3, r2
 800908e:	4a17      	ldr	r2, [pc, #92]	; (80090ec <vTaskPrioritySet+0x14c>)
 8009090:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8009092:	69bb      	ldr	r3, [r7, #24]
 8009094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009096:	2201      	movs	r2, #1
 8009098:	409a      	lsls	r2, r3
 800909a:	4b14      	ldr	r3, [pc, #80]	; (80090ec <vTaskPrioritySet+0x14c>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4313      	orrs	r3, r2
 80090a0:	4a12      	ldr	r2, [pc, #72]	; (80090ec <vTaskPrioritySet+0x14c>)
 80090a2:	6013      	str	r3, [r2, #0]
 80090a4:	69bb      	ldr	r3, [r7, #24]
 80090a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090a8:	4613      	mov	r3, r2
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	4413      	add	r3, r2
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	4a0d      	ldr	r2, [pc, #52]	; (80090e8 <vTaskPrioritySet+0x148>)
 80090b2:	441a      	add	r2, r3
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	3304      	adds	r3, #4
 80090b8:	4619      	mov	r1, r3
 80090ba:	4610      	mov	r0, r2
 80090bc:	f7fe fdad 	bl	8007c1a <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d007      	beq.n	80090d6 <vTaskPrioritySet+0x136>
				{
					taskYIELD_IF_USING_PREEMPTION();
 80090c6:	4b0a      	ldr	r3, [pc, #40]	; (80090f0 <vTaskPrioritySet+0x150>)
 80090c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090cc:	601a      	str	r2, [r3, #0]
 80090ce:	f3bf 8f4f 	dsb	sy
 80090d2:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 80090d6:	f000 ff9d 	bl	800a014 <vPortExitCritical>
	}
 80090da:	bf00      	nop
 80090dc:	3720      	adds	r7, #32
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	20000734 	.word	0x20000734
 80090e8:	20000738 	.word	0x20000738
 80090ec:	2000083c 	.word	0x2000083c
 80090f0:	e000ed04 	.word	0xe000ed04

080090f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b08a      	sub	sp, #40	; 0x28
 80090f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80090fa:	2300      	movs	r3, #0
 80090fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80090fe:	2300      	movs	r3, #0
 8009100:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009102:	463a      	mov	r2, r7
 8009104:	1d39      	adds	r1, r7, #4
 8009106:	f107 0308 	add.w	r3, r7, #8
 800910a:	4618      	mov	r0, r3
 800910c:	f7f9 fedc 	bl	8002ec8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009110:	6839      	ldr	r1, [r7, #0]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	68ba      	ldr	r2, [r7, #8]
 8009116:	9202      	str	r2, [sp, #8]
 8009118:	9301      	str	r3, [sp, #4]
 800911a:	2300      	movs	r3, #0
 800911c:	9300      	str	r3, [sp, #0]
 800911e:	2300      	movs	r3, #0
 8009120:	460a      	mov	r2, r1
 8009122:	4921      	ldr	r1, [pc, #132]	; (80091a8 <vTaskStartScheduler+0xb4>)
 8009124:	4821      	ldr	r0, [pc, #132]	; (80091ac <vTaskStartScheduler+0xb8>)
 8009126:	f7ff fd5d 	bl	8008be4 <xTaskCreateStatic>
 800912a:	4603      	mov	r3, r0
 800912c:	4a20      	ldr	r2, [pc, #128]	; (80091b0 <vTaskStartScheduler+0xbc>)
 800912e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009130:	4b1f      	ldr	r3, [pc, #124]	; (80091b0 <vTaskStartScheduler+0xbc>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d002      	beq.n	800913e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009138:	2301      	movs	r3, #1
 800913a:	617b      	str	r3, [r7, #20]
 800913c:	e001      	b.n	8009142 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800913e:	2300      	movs	r3, #0
 8009140:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	2b01      	cmp	r3, #1
 8009146:	d11b      	bne.n	8009180 <vTaskStartScheduler+0x8c>
	__asm volatile
 8009148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800914c:	f383 8811 	msr	BASEPRI, r3
 8009150:	f3bf 8f6f 	isb	sy
 8009154:	f3bf 8f4f 	dsb	sy
 8009158:	613b      	str	r3, [r7, #16]
}
 800915a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800915c:	4b15      	ldr	r3, [pc, #84]	; (80091b4 <vTaskStartScheduler+0xc0>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	334c      	adds	r3, #76	; 0x4c
 8009162:	4a15      	ldr	r2, [pc, #84]	; (80091b8 <vTaskStartScheduler+0xc4>)
 8009164:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009166:	4b15      	ldr	r3, [pc, #84]	; (80091bc <vTaskStartScheduler+0xc8>)
 8009168:	f04f 32ff 	mov.w	r2, #4294967295
 800916c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800916e:	4b14      	ldr	r3, [pc, #80]	; (80091c0 <vTaskStartScheduler+0xcc>)
 8009170:	2201      	movs	r2, #1
 8009172:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009174:	4b13      	ldr	r3, [pc, #76]	; (80091c4 <vTaskStartScheduler+0xd0>)
 8009176:	2200      	movs	r2, #0
 8009178:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800917a:	f000 fe79 	bl	8009e70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800917e:	e00e      	b.n	800919e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009186:	d10a      	bne.n	800919e <vTaskStartScheduler+0xaa>
	__asm volatile
 8009188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918c:	f383 8811 	msr	BASEPRI, r3
 8009190:	f3bf 8f6f 	isb	sy
 8009194:	f3bf 8f4f 	dsb	sy
 8009198:	60fb      	str	r3, [r7, #12]
}
 800919a:	bf00      	nop
 800919c:	e7fe      	b.n	800919c <vTaskStartScheduler+0xa8>
}
 800919e:	bf00      	nop
 80091a0:	3718      	adds	r7, #24
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	0800ef68 	.word	0x0800ef68
 80091ac:	08009765 	.word	0x08009765
 80091b0:	20000858 	.word	0x20000858
 80091b4:	20000734 	.word	0x20000734
 80091b8:	20000058 	.word	0x20000058
 80091bc:	20000854 	.word	0x20000854
 80091c0:	20000840 	.word	0x20000840
 80091c4:	20000838 	.word	0x20000838

080091c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80091c8:	b480      	push	{r7}
 80091ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80091cc:	4b04      	ldr	r3, [pc, #16]	; (80091e0 <vTaskSuspendAll+0x18>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	3301      	adds	r3, #1
 80091d2:	4a03      	ldr	r2, [pc, #12]	; (80091e0 <vTaskSuspendAll+0x18>)
 80091d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80091d6:	bf00      	nop
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr
 80091e0:	2000085c 	.word	0x2000085c

080091e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80091ea:	2300      	movs	r3, #0
 80091ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80091ee:	2300      	movs	r3, #0
 80091f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80091f2:	4b41      	ldr	r3, [pc, #260]	; (80092f8 <xTaskResumeAll+0x114>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d10a      	bne.n	8009210 <xTaskResumeAll+0x2c>
	__asm volatile
 80091fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fe:	f383 8811 	msr	BASEPRI, r3
 8009202:	f3bf 8f6f 	isb	sy
 8009206:	f3bf 8f4f 	dsb	sy
 800920a:	603b      	str	r3, [r7, #0]
}
 800920c:	bf00      	nop
 800920e:	e7fe      	b.n	800920e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009210:	f000 fed0 	bl	8009fb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009214:	4b38      	ldr	r3, [pc, #224]	; (80092f8 <xTaskResumeAll+0x114>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	3b01      	subs	r3, #1
 800921a:	4a37      	ldr	r2, [pc, #220]	; (80092f8 <xTaskResumeAll+0x114>)
 800921c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800921e:	4b36      	ldr	r3, [pc, #216]	; (80092f8 <xTaskResumeAll+0x114>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d161      	bne.n	80092ea <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009226:	4b35      	ldr	r3, [pc, #212]	; (80092fc <xTaskResumeAll+0x118>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d05d      	beq.n	80092ea <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800922e:	e02e      	b.n	800928e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009230:	4b33      	ldr	r3, [pc, #204]	; (8009300 <xTaskResumeAll+0x11c>)
 8009232:	68db      	ldr	r3, [r3, #12]
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	3318      	adds	r3, #24
 800923c:	4618      	mov	r0, r3
 800923e:	f7fe fd49 	bl	8007cd4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	3304      	adds	r3, #4
 8009246:	4618      	mov	r0, r3
 8009248:	f7fe fd44 	bl	8007cd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009250:	2201      	movs	r2, #1
 8009252:	409a      	lsls	r2, r3
 8009254:	4b2b      	ldr	r3, [pc, #172]	; (8009304 <xTaskResumeAll+0x120>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4313      	orrs	r3, r2
 800925a:	4a2a      	ldr	r2, [pc, #168]	; (8009304 <xTaskResumeAll+0x120>)
 800925c:	6013      	str	r3, [r2, #0]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009262:	4613      	mov	r3, r2
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	4413      	add	r3, r2
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	4a27      	ldr	r2, [pc, #156]	; (8009308 <xTaskResumeAll+0x124>)
 800926c:	441a      	add	r2, r3
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	3304      	adds	r3, #4
 8009272:	4619      	mov	r1, r3
 8009274:	4610      	mov	r0, r2
 8009276:	f7fe fcd0 	bl	8007c1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800927e:	4b23      	ldr	r3, [pc, #140]	; (800930c <xTaskResumeAll+0x128>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009284:	429a      	cmp	r2, r3
 8009286:	d302      	bcc.n	800928e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009288:	4b21      	ldr	r3, [pc, #132]	; (8009310 <xTaskResumeAll+0x12c>)
 800928a:	2201      	movs	r2, #1
 800928c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800928e:	4b1c      	ldr	r3, [pc, #112]	; (8009300 <xTaskResumeAll+0x11c>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d1cc      	bne.n	8009230 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d001      	beq.n	80092a0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800929c:	f000 fb1c 	bl	80098d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80092a0:	4b1c      	ldr	r3, [pc, #112]	; (8009314 <xTaskResumeAll+0x130>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d010      	beq.n	80092ce <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80092ac:	f000 f836 	bl	800931c <xTaskIncrementTick>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d002      	beq.n	80092bc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80092b6:	4b16      	ldr	r3, [pc, #88]	; (8009310 <xTaskResumeAll+0x12c>)
 80092b8:	2201      	movs	r2, #1
 80092ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	3b01      	subs	r3, #1
 80092c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d1f1      	bne.n	80092ac <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80092c8:	4b12      	ldr	r3, [pc, #72]	; (8009314 <xTaskResumeAll+0x130>)
 80092ca:	2200      	movs	r2, #0
 80092cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80092ce:	4b10      	ldr	r3, [pc, #64]	; (8009310 <xTaskResumeAll+0x12c>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d009      	beq.n	80092ea <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80092d6:	2301      	movs	r3, #1
 80092d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80092da:	4b0f      	ldr	r3, [pc, #60]	; (8009318 <xTaskResumeAll+0x134>)
 80092dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092e0:	601a      	str	r2, [r3, #0]
 80092e2:	f3bf 8f4f 	dsb	sy
 80092e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80092ea:	f000 fe93 	bl	800a014 <vPortExitCritical>

	return xAlreadyYielded;
 80092ee:	68bb      	ldr	r3, [r7, #8]
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3710      	adds	r7, #16
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}
 80092f8:	2000085c 	.word	0x2000085c
 80092fc:	20000834 	.word	0x20000834
 8009300:	200007f4 	.word	0x200007f4
 8009304:	2000083c 	.word	0x2000083c
 8009308:	20000738 	.word	0x20000738
 800930c:	20000734 	.word	0x20000734
 8009310:	20000848 	.word	0x20000848
 8009314:	20000844 	.word	0x20000844
 8009318:	e000ed04 	.word	0xe000ed04

0800931c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b086      	sub	sp, #24
 8009320:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009322:	2300      	movs	r3, #0
 8009324:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009326:	4b4e      	ldr	r3, [pc, #312]	; (8009460 <xTaskIncrementTick+0x144>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	2b00      	cmp	r3, #0
 800932c:	f040 808e 	bne.w	800944c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009330:	4b4c      	ldr	r3, [pc, #304]	; (8009464 <xTaskIncrementTick+0x148>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	3301      	adds	r3, #1
 8009336:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009338:	4a4a      	ldr	r2, [pc, #296]	; (8009464 <xTaskIncrementTick+0x148>)
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d120      	bne.n	8009386 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009344:	4b48      	ldr	r3, [pc, #288]	; (8009468 <xTaskIncrementTick+0x14c>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00a      	beq.n	8009364 <xTaskIncrementTick+0x48>
	__asm volatile
 800934e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009352:	f383 8811 	msr	BASEPRI, r3
 8009356:	f3bf 8f6f 	isb	sy
 800935a:	f3bf 8f4f 	dsb	sy
 800935e:	603b      	str	r3, [r7, #0]
}
 8009360:	bf00      	nop
 8009362:	e7fe      	b.n	8009362 <xTaskIncrementTick+0x46>
 8009364:	4b40      	ldr	r3, [pc, #256]	; (8009468 <xTaskIncrementTick+0x14c>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	60fb      	str	r3, [r7, #12]
 800936a:	4b40      	ldr	r3, [pc, #256]	; (800946c <xTaskIncrementTick+0x150>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4a3e      	ldr	r2, [pc, #248]	; (8009468 <xTaskIncrementTick+0x14c>)
 8009370:	6013      	str	r3, [r2, #0]
 8009372:	4a3e      	ldr	r2, [pc, #248]	; (800946c <xTaskIncrementTick+0x150>)
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6013      	str	r3, [r2, #0]
 8009378:	4b3d      	ldr	r3, [pc, #244]	; (8009470 <xTaskIncrementTick+0x154>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	3301      	adds	r3, #1
 800937e:	4a3c      	ldr	r2, [pc, #240]	; (8009470 <xTaskIncrementTick+0x154>)
 8009380:	6013      	str	r3, [r2, #0]
 8009382:	f000 faa9 	bl	80098d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009386:	4b3b      	ldr	r3, [pc, #236]	; (8009474 <xTaskIncrementTick+0x158>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	693a      	ldr	r2, [r7, #16]
 800938c:	429a      	cmp	r2, r3
 800938e:	d348      	bcc.n	8009422 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009390:	4b35      	ldr	r3, [pc, #212]	; (8009468 <xTaskIncrementTick+0x14c>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d104      	bne.n	80093a4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800939a:	4b36      	ldr	r3, [pc, #216]	; (8009474 <xTaskIncrementTick+0x158>)
 800939c:	f04f 32ff 	mov.w	r2, #4294967295
 80093a0:	601a      	str	r2, [r3, #0]
					break;
 80093a2:	e03e      	b.n	8009422 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093a4:	4b30      	ldr	r3, [pc, #192]	; (8009468 <xTaskIncrementTick+0x14c>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80093b4:	693a      	ldr	r2, [r7, #16]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d203      	bcs.n	80093c4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80093bc:	4a2d      	ldr	r2, [pc, #180]	; (8009474 <xTaskIncrementTick+0x158>)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80093c2:	e02e      	b.n	8009422 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	3304      	adds	r3, #4
 80093c8:	4618      	mov	r0, r3
 80093ca:	f7fe fc83 	bl	8007cd4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d004      	beq.n	80093e0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	3318      	adds	r3, #24
 80093da:	4618      	mov	r0, r3
 80093dc:	f7fe fc7a 	bl	8007cd4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e4:	2201      	movs	r2, #1
 80093e6:	409a      	lsls	r2, r3
 80093e8:	4b23      	ldr	r3, [pc, #140]	; (8009478 <xTaskIncrementTick+0x15c>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4313      	orrs	r3, r2
 80093ee:	4a22      	ldr	r2, [pc, #136]	; (8009478 <xTaskIncrementTick+0x15c>)
 80093f0:	6013      	str	r3, [r2, #0]
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093f6:	4613      	mov	r3, r2
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	4413      	add	r3, r2
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	4a1f      	ldr	r2, [pc, #124]	; (800947c <xTaskIncrementTick+0x160>)
 8009400:	441a      	add	r2, r3
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	3304      	adds	r3, #4
 8009406:	4619      	mov	r1, r3
 8009408:	4610      	mov	r0, r2
 800940a:	f7fe fc06 	bl	8007c1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009412:	4b1b      	ldr	r3, [pc, #108]	; (8009480 <xTaskIncrementTick+0x164>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009418:	429a      	cmp	r2, r3
 800941a:	d3b9      	bcc.n	8009390 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800941c:	2301      	movs	r3, #1
 800941e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009420:	e7b6      	b.n	8009390 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009422:	4b17      	ldr	r3, [pc, #92]	; (8009480 <xTaskIncrementTick+0x164>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009428:	4914      	ldr	r1, [pc, #80]	; (800947c <xTaskIncrementTick+0x160>)
 800942a:	4613      	mov	r3, r2
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	4413      	add	r3, r2
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	440b      	add	r3, r1
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2b01      	cmp	r3, #1
 8009438:	d901      	bls.n	800943e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800943a:	2301      	movs	r3, #1
 800943c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800943e:	4b11      	ldr	r3, [pc, #68]	; (8009484 <xTaskIncrementTick+0x168>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d007      	beq.n	8009456 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009446:	2301      	movs	r3, #1
 8009448:	617b      	str	r3, [r7, #20]
 800944a:	e004      	b.n	8009456 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800944c:	4b0e      	ldr	r3, [pc, #56]	; (8009488 <xTaskIncrementTick+0x16c>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	3301      	adds	r3, #1
 8009452:	4a0d      	ldr	r2, [pc, #52]	; (8009488 <xTaskIncrementTick+0x16c>)
 8009454:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009456:	697b      	ldr	r3, [r7, #20]
}
 8009458:	4618      	mov	r0, r3
 800945a:	3718      	adds	r7, #24
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	2000085c 	.word	0x2000085c
 8009464:	20000838 	.word	0x20000838
 8009468:	200007ec 	.word	0x200007ec
 800946c:	200007f0 	.word	0x200007f0
 8009470:	2000084c 	.word	0x2000084c
 8009474:	20000854 	.word	0x20000854
 8009478:	2000083c 	.word	0x2000083c
 800947c:	20000738 	.word	0x20000738
 8009480:	20000734 	.word	0x20000734
 8009484:	20000848 	.word	0x20000848
 8009488:	20000844 	.word	0x20000844

0800948c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800948c:	b480      	push	{r7}
 800948e:	b087      	sub	sp, #28
 8009490:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009492:	4b29      	ldr	r3, [pc, #164]	; (8009538 <vTaskSwitchContext+0xac>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d003      	beq.n	80094a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800949a:	4b28      	ldr	r3, [pc, #160]	; (800953c <vTaskSwitchContext+0xb0>)
 800949c:	2201      	movs	r2, #1
 800949e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80094a0:	e044      	b.n	800952c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80094a2:	4b26      	ldr	r3, [pc, #152]	; (800953c <vTaskSwitchContext+0xb0>)
 80094a4:	2200      	movs	r2, #0
 80094a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094a8:	4b25      	ldr	r3, [pc, #148]	; (8009540 <vTaskSwitchContext+0xb4>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	fab3 f383 	clz	r3, r3
 80094b4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80094b6:	7afb      	ldrb	r3, [r7, #11]
 80094b8:	f1c3 031f 	rsb	r3, r3, #31
 80094bc:	617b      	str	r3, [r7, #20]
 80094be:	4921      	ldr	r1, [pc, #132]	; (8009544 <vTaskSwitchContext+0xb8>)
 80094c0:	697a      	ldr	r2, [r7, #20]
 80094c2:	4613      	mov	r3, r2
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	4413      	add	r3, r2
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	440b      	add	r3, r1
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d10a      	bne.n	80094e8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80094d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d6:	f383 8811 	msr	BASEPRI, r3
 80094da:	f3bf 8f6f 	isb	sy
 80094de:	f3bf 8f4f 	dsb	sy
 80094e2:	607b      	str	r3, [r7, #4]
}
 80094e4:	bf00      	nop
 80094e6:	e7fe      	b.n	80094e6 <vTaskSwitchContext+0x5a>
 80094e8:	697a      	ldr	r2, [r7, #20]
 80094ea:	4613      	mov	r3, r2
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	4413      	add	r3, r2
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	4a14      	ldr	r2, [pc, #80]	; (8009544 <vTaskSwitchContext+0xb8>)
 80094f4:	4413      	add	r3, r2
 80094f6:	613b      	str	r3, [r7, #16]
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	685a      	ldr	r2, [r3, #4]
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	605a      	str	r2, [r3, #4]
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	685a      	ldr	r2, [r3, #4]
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	3308      	adds	r3, #8
 800950a:	429a      	cmp	r2, r3
 800950c:	d104      	bne.n	8009518 <vTaskSwitchContext+0x8c>
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	685a      	ldr	r2, [r3, #4]
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	605a      	str	r2, [r3, #4]
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	4a0a      	ldr	r2, [pc, #40]	; (8009548 <vTaskSwitchContext+0xbc>)
 8009520:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009522:	4b09      	ldr	r3, [pc, #36]	; (8009548 <vTaskSwitchContext+0xbc>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	334c      	adds	r3, #76	; 0x4c
 8009528:	4a08      	ldr	r2, [pc, #32]	; (800954c <vTaskSwitchContext+0xc0>)
 800952a:	6013      	str	r3, [r2, #0]
}
 800952c:	bf00      	nop
 800952e:	371c      	adds	r7, #28
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr
 8009538:	2000085c 	.word	0x2000085c
 800953c:	20000848 	.word	0x20000848
 8009540:	2000083c 	.word	0x2000083c
 8009544:	20000738 	.word	0x20000738
 8009548:	20000734 	.word	0x20000734
 800954c:	20000058 	.word	0x20000058

08009550 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d10a      	bne.n	8009576 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009564:	f383 8811 	msr	BASEPRI, r3
 8009568:	f3bf 8f6f 	isb	sy
 800956c:	f3bf 8f4f 	dsb	sy
 8009570:	60fb      	str	r3, [r7, #12]
}
 8009572:	bf00      	nop
 8009574:	e7fe      	b.n	8009574 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009576:	4b07      	ldr	r3, [pc, #28]	; (8009594 <vTaskPlaceOnEventList+0x44>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	3318      	adds	r3, #24
 800957c:	4619      	mov	r1, r3
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f7fe fb6f 	bl	8007c62 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009584:	2101      	movs	r1, #1
 8009586:	6838      	ldr	r0, [r7, #0]
 8009588:	f000 fb82 	bl	8009c90 <prvAddCurrentTaskToDelayedList>
}
 800958c:	bf00      	nop
 800958e:	3710      	adds	r7, #16
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}
 8009594:	20000734 	.word	0x20000734

08009598 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b086      	sub	sp, #24
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d10a      	bne.n	80095c4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80095ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b2:	f383 8811 	msr	BASEPRI, r3
 80095b6:	f3bf 8f6f 	isb	sy
 80095ba:	f3bf 8f4f 	dsb	sy
 80095be:	60fb      	str	r3, [r7, #12]
}
 80095c0:	bf00      	nop
 80095c2:	e7fe      	b.n	80095c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	3318      	adds	r3, #24
 80095c8:	4618      	mov	r0, r3
 80095ca:	f7fe fb83 	bl	8007cd4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095ce:	4b1d      	ldr	r3, [pc, #116]	; (8009644 <xTaskRemoveFromEventList+0xac>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d11c      	bne.n	8009610 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	3304      	adds	r3, #4
 80095da:	4618      	mov	r0, r3
 80095dc:	f7fe fb7a 	bl	8007cd4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e4:	2201      	movs	r2, #1
 80095e6:	409a      	lsls	r2, r3
 80095e8:	4b17      	ldr	r3, [pc, #92]	; (8009648 <xTaskRemoveFromEventList+0xb0>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4313      	orrs	r3, r2
 80095ee:	4a16      	ldr	r2, [pc, #88]	; (8009648 <xTaskRemoveFromEventList+0xb0>)
 80095f0:	6013      	str	r3, [r2, #0]
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095f6:	4613      	mov	r3, r2
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	4413      	add	r3, r2
 80095fc:	009b      	lsls	r3, r3, #2
 80095fe:	4a13      	ldr	r2, [pc, #76]	; (800964c <xTaskRemoveFromEventList+0xb4>)
 8009600:	441a      	add	r2, r3
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	3304      	adds	r3, #4
 8009606:	4619      	mov	r1, r3
 8009608:	4610      	mov	r0, r2
 800960a:	f7fe fb06 	bl	8007c1a <vListInsertEnd>
 800960e:	e005      	b.n	800961c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	3318      	adds	r3, #24
 8009614:	4619      	mov	r1, r3
 8009616:	480e      	ldr	r0, [pc, #56]	; (8009650 <xTaskRemoveFromEventList+0xb8>)
 8009618:	f7fe faff 	bl	8007c1a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009620:	4b0c      	ldr	r3, [pc, #48]	; (8009654 <xTaskRemoveFromEventList+0xbc>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009626:	429a      	cmp	r2, r3
 8009628:	d905      	bls.n	8009636 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800962a:	2301      	movs	r3, #1
 800962c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800962e:	4b0a      	ldr	r3, [pc, #40]	; (8009658 <xTaskRemoveFromEventList+0xc0>)
 8009630:	2201      	movs	r2, #1
 8009632:	601a      	str	r2, [r3, #0]
 8009634:	e001      	b.n	800963a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009636:	2300      	movs	r3, #0
 8009638:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800963a:	697b      	ldr	r3, [r7, #20]
}
 800963c:	4618      	mov	r0, r3
 800963e:	3718      	adds	r7, #24
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	2000085c 	.word	0x2000085c
 8009648:	2000083c 	.word	0x2000083c
 800964c:	20000738 	.word	0x20000738
 8009650:	200007f4 	.word	0x200007f4
 8009654:	20000734 	.word	0x20000734
 8009658:	20000848 	.word	0x20000848

0800965c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009664:	4b06      	ldr	r3, [pc, #24]	; (8009680 <vTaskInternalSetTimeOutState+0x24>)
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800966c:	4b05      	ldr	r3, [pc, #20]	; (8009684 <vTaskInternalSetTimeOutState+0x28>)
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	605a      	str	r2, [r3, #4]
}
 8009674:	bf00      	nop
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr
 8009680:	2000084c 	.word	0x2000084c
 8009684:	20000838 	.word	0x20000838

08009688 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b088      	sub	sp, #32
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d10a      	bne.n	80096ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800969c:	f383 8811 	msr	BASEPRI, r3
 80096a0:	f3bf 8f6f 	isb	sy
 80096a4:	f3bf 8f4f 	dsb	sy
 80096a8:	613b      	str	r3, [r7, #16]
}
 80096aa:	bf00      	nop
 80096ac:	e7fe      	b.n	80096ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d10a      	bne.n	80096ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80096b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b8:	f383 8811 	msr	BASEPRI, r3
 80096bc:	f3bf 8f6f 	isb	sy
 80096c0:	f3bf 8f4f 	dsb	sy
 80096c4:	60fb      	str	r3, [r7, #12]
}
 80096c6:	bf00      	nop
 80096c8:	e7fe      	b.n	80096c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80096ca:	f000 fc73 	bl	8009fb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80096ce:	4b1d      	ldr	r3, [pc, #116]	; (8009744 <xTaskCheckForTimeOut+0xbc>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	69ba      	ldr	r2, [r7, #24]
 80096da:	1ad3      	subs	r3, r2, r3
 80096dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096e6:	d102      	bne.n	80096ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80096e8:	2300      	movs	r3, #0
 80096ea:	61fb      	str	r3, [r7, #28]
 80096ec:	e023      	b.n	8009736 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	4b15      	ldr	r3, [pc, #84]	; (8009748 <xTaskCheckForTimeOut+0xc0>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d007      	beq.n	800970a <xTaskCheckForTimeOut+0x82>
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	69ba      	ldr	r2, [r7, #24]
 8009700:	429a      	cmp	r2, r3
 8009702:	d302      	bcc.n	800970a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009704:	2301      	movs	r3, #1
 8009706:	61fb      	str	r3, [r7, #28]
 8009708:	e015      	b.n	8009736 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	697a      	ldr	r2, [r7, #20]
 8009710:	429a      	cmp	r2, r3
 8009712:	d20b      	bcs.n	800972c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	1ad2      	subs	r2, r2, r3
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f7ff ff9b 	bl	800965c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009726:	2300      	movs	r3, #0
 8009728:	61fb      	str	r3, [r7, #28]
 800972a:	e004      	b.n	8009736 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	2200      	movs	r2, #0
 8009730:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009732:	2301      	movs	r3, #1
 8009734:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009736:	f000 fc6d 	bl	800a014 <vPortExitCritical>

	return xReturn;
 800973a:	69fb      	ldr	r3, [r7, #28]
}
 800973c:	4618      	mov	r0, r3
 800973e:	3720      	adds	r7, #32
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}
 8009744:	20000838 	.word	0x20000838
 8009748:	2000084c 	.word	0x2000084c

0800974c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800974c:	b480      	push	{r7}
 800974e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009750:	4b03      	ldr	r3, [pc, #12]	; (8009760 <vTaskMissedYield+0x14>)
 8009752:	2201      	movs	r2, #1
 8009754:	601a      	str	r2, [r3, #0]
}
 8009756:	bf00      	nop
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr
 8009760:	20000848 	.word	0x20000848

08009764 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800976c:	f000 f852 	bl	8009814 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009770:	4b06      	ldr	r3, [pc, #24]	; (800978c <prvIdleTask+0x28>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	2b01      	cmp	r3, #1
 8009776:	d9f9      	bls.n	800976c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009778:	4b05      	ldr	r3, [pc, #20]	; (8009790 <prvIdleTask+0x2c>)
 800977a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800977e:	601a      	str	r2, [r3, #0]
 8009780:	f3bf 8f4f 	dsb	sy
 8009784:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009788:	e7f0      	b.n	800976c <prvIdleTask+0x8>
 800978a:	bf00      	nop
 800978c:	20000738 	.word	0x20000738
 8009790:	e000ed04 	.word	0xe000ed04

08009794 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800979a:	2300      	movs	r3, #0
 800979c:	607b      	str	r3, [r7, #4]
 800979e:	e00c      	b.n	80097ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	4613      	mov	r3, r2
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	4413      	add	r3, r2
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	4a12      	ldr	r2, [pc, #72]	; (80097f4 <prvInitialiseTaskLists+0x60>)
 80097ac:	4413      	add	r3, r2
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7fe fa06 	bl	8007bc0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	3301      	adds	r3, #1
 80097b8:	607b      	str	r3, [r7, #4]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2b06      	cmp	r3, #6
 80097be:	d9ef      	bls.n	80097a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80097c0:	480d      	ldr	r0, [pc, #52]	; (80097f8 <prvInitialiseTaskLists+0x64>)
 80097c2:	f7fe f9fd 	bl	8007bc0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80097c6:	480d      	ldr	r0, [pc, #52]	; (80097fc <prvInitialiseTaskLists+0x68>)
 80097c8:	f7fe f9fa 	bl	8007bc0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80097cc:	480c      	ldr	r0, [pc, #48]	; (8009800 <prvInitialiseTaskLists+0x6c>)
 80097ce:	f7fe f9f7 	bl	8007bc0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80097d2:	480c      	ldr	r0, [pc, #48]	; (8009804 <prvInitialiseTaskLists+0x70>)
 80097d4:	f7fe f9f4 	bl	8007bc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80097d8:	480b      	ldr	r0, [pc, #44]	; (8009808 <prvInitialiseTaskLists+0x74>)
 80097da:	f7fe f9f1 	bl	8007bc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80097de:	4b0b      	ldr	r3, [pc, #44]	; (800980c <prvInitialiseTaskLists+0x78>)
 80097e0:	4a05      	ldr	r2, [pc, #20]	; (80097f8 <prvInitialiseTaskLists+0x64>)
 80097e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80097e4:	4b0a      	ldr	r3, [pc, #40]	; (8009810 <prvInitialiseTaskLists+0x7c>)
 80097e6:	4a05      	ldr	r2, [pc, #20]	; (80097fc <prvInitialiseTaskLists+0x68>)
 80097e8:	601a      	str	r2, [r3, #0]
}
 80097ea:	bf00      	nop
 80097ec:	3708      	adds	r7, #8
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	20000738 	.word	0x20000738
 80097f8:	200007c4 	.word	0x200007c4
 80097fc:	200007d8 	.word	0x200007d8
 8009800:	200007f4 	.word	0x200007f4
 8009804:	20000808 	.word	0x20000808
 8009808:	20000820 	.word	0x20000820
 800980c:	200007ec 	.word	0x200007ec
 8009810:	200007f0 	.word	0x200007f0

08009814 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800981a:	e019      	b.n	8009850 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800981c:	f000 fbca 	bl	8009fb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009820:	4b10      	ldr	r3, [pc, #64]	; (8009864 <prvCheckTasksWaitingTermination+0x50>)
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	68db      	ldr	r3, [r3, #12]
 8009826:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	3304      	adds	r3, #4
 800982c:	4618      	mov	r0, r3
 800982e:	f7fe fa51 	bl	8007cd4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009832:	4b0d      	ldr	r3, [pc, #52]	; (8009868 <prvCheckTasksWaitingTermination+0x54>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	3b01      	subs	r3, #1
 8009838:	4a0b      	ldr	r2, [pc, #44]	; (8009868 <prvCheckTasksWaitingTermination+0x54>)
 800983a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800983c:	4b0b      	ldr	r3, [pc, #44]	; (800986c <prvCheckTasksWaitingTermination+0x58>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	3b01      	subs	r3, #1
 8009842:	4a0a      	ldr	r2, [pc, #40]	; (800986c <prvCheckTasksWaitingTermination+0x58>)
 8009844:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009846:	f000 fbe5 	bl	800a014 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 f810 	bl	8009870 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009850:	4b06      	ldr	r3, [pc, #24]	; (800986c <prvCheckTasksWaitingTermination+0x58>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d1e1      	bne.n	800981c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009858:	bf00      	nop
 800985a:	bf00      	nop
 800985c:	3708      	adds	r7, #8
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	20000808 	.word	0x20000808
 8009868:	20000834 	.word	0x20000834
 800986c:	2000081c 	.word	0x2000081c

08009870 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	334c      	adds	r3, #76	; 0x4c
 800987c:	4618      	mov	r0, r3
 800987e:	f001 fd79 	bl	800b374 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009888:	2b00      	cmp	r3, #0
 800988a:	d108      	bne.n	800989e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009890:	4618      	mov	r0, r3
 8009892:	f000 fd7d 	bl	800a390 <vPortFree>
				vPortFree( pxTCB );
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f000 fd7a 	bl	800a390 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800989c:	e018      	b.n	80098d0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d103      	bne.n	80098b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 fd71 	bl	800a390 <vPortFree>
	}
 80098ae:	e00f      	b.n	80098d0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80098b6:	2b02      	cmp	r3, #2
 80098b8:	d00a      	beq.n	80098d0 <prvDeleteTCB+0x60>
	__asm volatile
 80098ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098be:	f383 8811 	msr	BASEPRI, r3
 80098c2:	f3bf 8f6f 	isb	sy
 80098c6:	f3bf 8f4f 	dsb	sy
 80098ca:	60fb      	str	r3, [r7, #12]
}
 80098cc:	bf00      	nop
 80098ce:	e7fe      	b.n	80098ce <prvDeleteTCB+0x5e>
	}
 80098d0:	bf00      	nop
 80098d2:	3710      	adds	r7, #16
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80098d8:	b480      	push	{r7}
 80098da:	b083      	sub	sp, #12
 80098dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098de:	4b0c      	ldr	r3, [pc, #48]	; (8009910 <prvResetNextTaskUnblockTime+0x38>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d104      	bne.n	80098f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80098e8:	4b0a      	ldr	r3, [pc, #40]	; (8009914 <prvResetNextTaskUnblockTime+0x3c>)
 80098ea:	f04f 32ff 	mov.w	r2, #4294967295
 80098ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80098f0:	e008      	b.n	8009904 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098f2:	4b07      	ldr	r3, [pc, #28]	; (8009910 <prvResetNextTaskUnblockTime+0x38>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	68db      	ldr	r3, [r3, #12]
 80098fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	4a04      	ldr	r2, [pc, #16]	; (8009914 <prvResetNextTaskUnblockTime+0x3c>)
 8009902:	6013      	str	r3, [r2, #0]
}
 8009904:	bf00      	nop
 8009906:	370c      	adds	r7, #12
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr
 8009910:	200007ec 	.word	0x200007ec
 8009914:	20000854 	.word	0x20000854

08009918 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009918:	b480      	push	{r7}
 800991a:	b083      	sub	sp, #12
 800991c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800991e:	4b0b      	ldr	r3, [pc, #44]	; (800994c <xTaskGetSchedulerState+0x34>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d102      	bne.n	800992c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009926:	2301      	movs	r3, #1
 8009928:	607b      	str	r3, [r7, #4]
 800992a:	e008      	b.n	800993e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800992c:	4b08      	ldr	r3, [pc, #32]	; (8009950 <xTaskGetSchedulerState+0x38>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d102      	bne.n	800993a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009934:	2302      	movs	r3, #2
 8009936:	607b      	str	r3, [r7, #4]
 8009938:	e001      	b.n	800993e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800993a:	2300      	movs	r3, #0
 800993c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800993e:	687b      	ldr	r3, [r7, #4]
	}
 8009940:	4618      	mov	r0, r3
 8009942:	370c      	adds	r7, #12
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr
 800994c:	20000840 	.word	0x20000840
 8009950:	2000085c 	.word	0x2000085c

08009954 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009960:	2300      	movs	r3, #0
 8009962:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d05e      	beq.n	8009a28 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800996e:	4b31      	ldr	r3, [pc, #196]	; (8009a34 <xTaskPriorityInherit+0xe0>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009974:	429a      	cmp	r2, r3
 8009976:	d24e      	bcs.n	8009a16 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	699b      	ldr	r3, [r3, #24]
 800997c:	2b00      	cmp	r3, #0
 800997e:	db06      	blt.n	800998e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009980:	4b2c      	ldr	r3, [pc, #176]	; (8009a34 <xTaskPriorityInherit+0xe0>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009986:	f1c3 0207 	rsb	r2, r3, #7
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	6959      	ldr	r1, [r3, #20]
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009996:	4613      	mov	r3, r2
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	4413      	add	r3, r2
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	4a26      	ldr	r2, [pc, #152]	; (8009a38 <xTaskPriorityInherit+0xe4>)
 80099a0:	4413      	add	r3, r2
 80099a2:	4299      	cmp	r1, r3
 80099a4:	d12f      	bne.n	8009a06 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	3304      	adds	r3, #4
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7fe f992 	bl	8007cd4 <uxListRemove>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d10a      	bne.n	80099cc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ba:	2201      	movs	r2, #1
 80099bc:	fa02 f303 	lsl.w	r3, r2, r3
 80099c0:	43da      	mvns	r2, r3
 80099c2:	4b1e      	ldr	r3, [pc, #120]	; (8009a3c <xTaskPriorityInherit+0xe8>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4013      	ands	r3, r2
 80099c8:	4a1c      	ldr	r2, [pc, #112]	; (8009a3c <xTaskPriorityInherit+0xe8>)
 80099ca:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80099cc:	4b19      	ldr	r3, [pc, #100]	; (8009a34 <xTaskPriorityInherit+0xe0>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099da:	2201      	movs	r2, #1
 80099dc:	409a      	lsls	r2, r3
 80099de:	4b17      	ldr	r3, [pc, #92]	; (8009a3c <xTaskPriorityInherit+0xe8>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4313      	orrs	r3, r2
 80099e4:	4a15      	ldr	r2, [pc, #84]	; (8009a3c <xTaskPriorityInherit+0xe8>)
 80099e6:	6013      	str	r3, [r2, #0]
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099ec:	4613      	mov	r3, r2
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	4413      	add	r3, r2
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	4a10      	ldr	r2, [pc, #64]	; (8009a38 <xTaskPriorityInherit+0xe4>)
 80099f6:	441a      	add	r2, r3
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	3304      	adds	r3, #4
 80099fc:	4619      	mov	r1, r3
 80099fe:	4610      	mov	r0, r2
 8009a00:	f7fe f90b 	bl	8007c1a <vListInsertEnd>
 8009a04:	e004      	b.n	8009a10 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009a06:	4b0b      	ldr	r3, [pc, #44]	; (8009a34 <xTaskPriorityInherit+0xe0>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009a10:	2301      	movs	r3, #1
 8009a12:	60fb      	str	r3, [r7, #12]
 8009a14:	e008      	b.n	8009a28 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a1a:	4b06      	ldr	r3, [pc, #24]	; (8009a34 <xTaskPriorityInherit+0xe0>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d201      	bcs.n	8009a28 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009a24:	2301      	movs	r3, #1
 8009a26:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a28:	68fb      	ldr	r3, [r7, #12]
	}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	20000734 	.word	0x20000734
 8009a38:	20000738 	.word	0x20000738
 8009a3c:	2000083c 	.word	0x2000083c

08009a40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b086      	sub	sp, #24
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d06e      	beq.n	8009b34 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009a56:	4b3a      	ldr	r3, [pc, #232]	; (8009b40 <xTaskPriorityDisinherit+0x100>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	693a      	ldr	r2, [r7, #16]
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d00a      	beq.n	8009a76 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a64:	f383 8811 	msr	BASEPRI, r3
 8009a68:	f3bf 8f6f 	isb	sy
 8009a6c:	f3bf 8f4f 	dsb	sy
 8009a70:	60fb      	str	r3, [r7, #12]
}
 8009a72:	bf00      	nop
 8009a74:	e7fe      	b.n	8009a74 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d10a      	bne.n	8009a94 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a82:	f383 8811 	msr	BASEPRI, r3
 8009a86:	f3bf 8f6f 	isb	sy
 8009a8a:	f3bf 8f4f 	dsb	sy
 8009a8e:	60bb      	str	r3, [r7, #8]
}
 8009a90:	bf00      	nop
 8009a92:	e7fe      	b.n	8009a92 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a98:	1e5a      	subs	r2, r3, #1
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d044      	beq.n	8009b34 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d140      	bne.n	8009b34 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	3304      	adds	r3, #4
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7fe f90c 	bl	8007cd4 <uxListRemove>
 8009abc:	4603      	mov	r3, r0
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d115      	bne.n	8009aee <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ac6:	491f      	ldr	r1, [pc, #124]	; (8009b44 <xTaskPriorityDisinherit+0x104>)
 8009ac8:	4613      	mov	r3, r2
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	4413      	add	r3, r2
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	440b      	add	r3, r1
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d10a      	bne.n	8009aee <xTaskPriorityDisinherit+0xae>
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009adc:	2201      	movs	r2, #1
 8009ade:	fa02 f303 	lsl.w	r3, r2, r3
 8009ae2:	43da      	mvns	r2, r3
 8009ae4:	4b18      	ldr	r3, [pc, #96]	; (8009b48 <xTaskPriorityDisinherit+0x108>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4013      	ands	r3, r2
 8009aea:	4a17      	ldr	r2, [pc, #92]	; (8009b48 <xTaskPriorityDisinherit+0x108>)
 8009aec:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009afa:	f1c3 0207 	rsb	r2, r3, #7
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b06:	2201      	movs	r2, #1
 8009b08:	409a      	lsls	r2, r3
 8009b0a:	4b0f      	ldr	r3, [pc, #60]	; (8009b48 <xTaskPriorityDisinherit+0x108>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	4a0d      	ldr	r2, [pc, #52]	; (8009b48 <xTaskPriorityDisinherit+0x108>)
 8009b12:	6013      	str	r3, [r2, #0]
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b18:	4613      	mov	r3, r2
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	4413      	add	r3, r2
 8009b1e:	009b      	lsls	r3, r3, #2
 8009b20:	4a08      	ldr	r2, [pc, #32]	; (8009b44 <xTaskPriorityDisinherit+0x104>)
 8009b22:	441a      	add	r2, r3
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	3304      	adds	r3, #4
 8009b28:	4619      	mov	r1, r3
 8009b2a:	4610      	mov	r0, r2
 8009b2c:	f7fe f875 	bl	8007c1a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009b30:	2301      	movs	r3, #1
 8009b32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009b34:	697b      	ldr	r3, [r7, #20]
	}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3718      	adds	r7, #24
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	20000734 	.word	0x20000734
 8009b44:	20000738 	.word	0x20000738
 8009b48:	2000083c 	.word	0x2000083c

08009b4c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b088      	sub	sp, #32
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d077      	beq.n	8009c54 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009b64:	69bb      	ldr	r3, [r7, #24]
 8009b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d10a      	bne.n	8009b82 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b70:	f383 8811 	msr	BASEPRI, r3
 8009b74:	f3bf 8f6f 	isb	sy
 8009b78:	f3bf 8f4f 	dsb	sy
 8009b7c:	60fb      	str	r3, [r7, #12]
}
 8009b7e:	bf00      	nop
 8009b80:	e7fe      	b.n	8009b80 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009b82:	69bb      	ldr	r3, [r7, #24]
 8009b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b86:	683a      	ldr	r2, [r7, #0]
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d902      	bls.n	8009b92 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	61fb      	str	r3, [r7, #28]
 8009b90:	e002      	b.n	8009b98 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009b92:	69bb      	ldr	r3, [r7, #24]
 8009b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b96:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b9c:	69fa      	ldr	r2, [r7, #28]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d058      	beq.n	8009c54 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009ba2:	69bb      	ldr	r3, [r7, #24]
 8009ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ba6:	697a      	ldr	r2, [r7, #20]
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d153      	bne.n	8009c54 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009bac:	4b2b      	ldr	r3, [pc, #172]	; (8009c5c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	69ba      	ldr	r2, [r7, #24]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d10a      	bne.n	8009bcc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bba:	f383 8811 	msr	BASEPRI, r3
 8009bbe:	f3bf 8f6f 	isb	sy
 8009bc2:	f3bf 8f4f 	dsb	sy
 8009bc6:	60bb      	str	r3, [r7, #8]
}
 8009bc8:	bf00      	nop
 8009bca:	e7fe      	b.n	8009bca <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009bcc:	69bb      	ldr	r3, [r7, #24]
 8009bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	69fa      	ldr	r2, [r7, #28]
 8009bd6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009bd8:	69bb      	ldr	r3, [r7, #24]
 8009bda:	699b      	ldr	r3, [r3, #24]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	db04      	blt.n	8009bea <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009be0:	69fb      	ldr	r3, [r7, #28]
 8009be2:	f1c3 0207 	rsb	r2, r3, #7
 8009be6:	69bb      	ldr	r3, [r7, #24]
 8009be8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009bea:	69bb      	ldr	r3, [r7, #24]
 8009bec:	6959      	ldr	r1, [r3, #20]
 8009bee:	693a      	ldr	r2, [r7, #16]
 8009bf0:	4613      	mov	r3, r2
 8009bf2:	009b      	lsls	r3, r3, #2
 8009bf4:	4413      	add	r3, r2
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	4a19      	ldr	r2, [pc, #100]	; (8009c60 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009bfa:	4413      	add	r3, r2
 8009bfc:	4299      	cmp	r1, r3
 8009bfe:	d129      	bne.n	8009c54 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c00:	69bb      	ldr	r3, [r7, #24]
 8009c02:	3304      	adds	r3, #4
 8009c04:	4618      	mov	r0, r3
 8009c06:	f7fe f865 	bl	8007cd4 <uxListRemove>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d10a      	bne.n	8009c26 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009c10:	69bb      	ldr	r3, [r7, #24]
 8009c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c14:	2201      	movs	r2, #1
 8009c16:	fa02 f303 	lsl.w	r3, r2, r3
 8009c1a:	43da      	mvns	r2, r3
 8009c1c:	4b11      	ldr	r3, [pc, #68]	; (8009c64 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4013      	ands	r3, r2
 8009c22:	4a10      	ldr	r2, [pc, #64]	; (8009c64 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009c24:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	409a      	lsls	r2, r3
 8009c2e:	4b0d      	ldr	r3, [pc, #52]	; (8009c64 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4313      	orrs	r3, r2
 8009c34:	4a0b      	ldr	r2, [pc, #44]	; (8009c64 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009c36:	6013      	str	r3, [r2, #0]
 8009c38:	69bb      	ldr	r3, [r7, #24]
 8009c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c3c:	4613      	mov	r3, r2
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	4413      	add	r3, r2
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	4a06      	ldr	r2, [pc, #24]	; (8009c60 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009c46:	441a      	add	r2, r3
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	3304      	adds	r3, #4
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	4610      	mov	r0, r2
 8009c50:	f7fd ffe3 	bl	8007c1a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009c54:	bf00      	nop
 8009c56:	3720      	adds	r7, #32
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}
 8009c5c:	20000734 	.word	0x20000734
 8009c60:	20000738 	.word	0x20000738
 8009c64:	2000083c 	.word	0x2000083c

08009c68 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009c68:	b480      	push	{r7}
 8009c6a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009c6c:	4b07      	ldr	r3, [pc, #28]	; (8009c8c <pvTaskIncrementMutexHeldCount+0x24>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d004      	beq.n	8009c7e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009c74:	4b05      	ldr	r3, [pc, #20]	; (8009c8c <pvTaskIncrementMutexHeldCount+0x24>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009c7a:	3201      	adds	r2, #1
 8009c7c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009c7e:	4b03      	ldr	r3, [pc, #12]	; (8009c8c <pvTaskIncrementMutexHeldCount+0x24>)
 8009c80:	681b      	ldr	r3, [r3, #0]
	}
 8009c82:	4618      	mov	r0, r3
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr
 8009c8c:	20000734 	.word	0x20000734

08009c90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009c9a:	4b29      	ldr	r3, [pc, #164]	; (8009d40 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ca0:	4b28      	ldr	r3, [pc, #160]	; (8009d44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	3304      	adds	r3, #4
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f7fe f814 	bl	8007cd4 <uxListRemove>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d10b      	bne.n	8009cca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009cb2:	4b24      	ldr	r3, [pc, #144]	; (8009d44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb8:	2201      	movs	r2, #1
 8009cba:	fa02 f303 	lsl.w	r3, r2, r3
 8009cbe:	43da      	mvns	r2, r3
 8009cc0:	4b21      	ldr	r3, [pc, #132]	; (8009d48 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4013      	ands	r3, r2
 8009cc6:	4a20      	ldr	r2, [pc, #128]	; (8009d48 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009cc8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cd0:	d10a      	bne.n	8009ce8 <prvAddCurrentTaskToDelayedList+0x58>
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d007      	beq.n	8009ce8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009cd8:	4b1a      	ldr	r3, [pc, #104]	; (8009d44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	3304      	adds	r3, #4
 8009cde:	4619      	mov	r1, r3
 8009ce0:	481a      	ldr	r0, [pc, #104]	; (8009d4c <prvAddCurrentTaskToDelayedList+0xbc>)
 8009ce2:	f7fd ff9a 	bl	8007c1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009ce6:	e026      	b.n	8009d36 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009ce8:	68fa      	ldr	r2, [r7, #12]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	4413      	add	r3, r2
 8009cee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009cf0:	4b14      	ldr	r3, [pc, #80]	; (8009d44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	68ba      	ldr	r2, [r7, #8]
 8009cf6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009cf8:	68ba      	ldr	r2, [r7, #8]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d209      	bcs.n	8009d14 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d00:	4b13      	ldr	r3, [pc, #76]	; (8009d50 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	4b0f      	ldr	r3, [pc, #60]	; (8009d44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	3304      	adds	r3, #4
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	4610      	mov	r0, r2
 8009d0e:	f7fd ffa8 	bl	8007c62 <vListInsert>
}
 8009d12:	e010      	b.n	8009d36 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d14:	4b0f      	ldr	r3, [pc, #60]	; (8009d54 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009d16:	681a      	ldr	r2, [r3, #0]
 8009d18:	4b0a      	ldr	r3, [pc, #40]	; (8009d44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	3304      	adds	r3, #4
 8009d1e:	4619      	mov	r1, r3
 8009d20:	4610      	mov	r0, r2
 8009d22:	f7fd ff9e 	bl	8007c62 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009d26:	4b0c      	ldr	r3, [pc, #48]	; (8009d58 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	68ba      	ldr	r2, [r7, #8]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d202      	bcs.n	8009d36 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009d30:	4a09      	ldr	r2, [pc, #36]	; (8009d58 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	6013      	str	r3, [r2, #0]
}
 8009d36:	bf00      	nop
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	20000838 	.word	0x20000838
 8009d44:	20000734 	.word	0x20000734
 8009d48:	2000083c 	.word	0x2000083c
 8009d4c:	20000820 	.word	0x20000820
 8009d50:	200007f0 	.word	0x200007f0
 8009d54:	200007ec 	.word	0x200007ec
 8009d58:	20000854 	.word	0x20000854

08009d5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b085      	sub	sp, #20
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	60f8      	str	r0, [r7, #12]
 8009d64:	60b9      	str	r1, [r7, #8]
 8009d66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	3b04      	subs	r3, #4
 8009d6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009d74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	3b04      	subs	r3, #4
 8009d7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	f023 0201 	bic.w	r2, r3, #1
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	3b04      	subs	r3, #4
 8009d8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009d8c:	4a0c      	ldr	r2, [pc, #48]	; (8009dc0 <pxPortInitialiseStack+0x64>)
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	3b14      	subs	r3, #20
 8009d96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009d98:	687a      	ldr	r2, [r7, #4]
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	3b04      	subs	r3, #4
 8009da2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f06f 0202 	mvn.w	r2, #2
 8009daa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	3b20      	subs	r3, #32
 8009db0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009db2:	68fb      	ldr	r3, [r7, #12]
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3714      	adds	r7, #20
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr
 8009dc0:	08009dc5 	.word	0x08009dc5

08009dc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b085      	sub	sp, #20
 8009dc8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009dce:	4b12      	ldr	r3, [pc, #72]	; (8009e18 <prvTaskExitError+0x54>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dd6:	d00a      	beq.n	8009dee <prvTaskExitError+0x2a>
	__asm volatile
 8009dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ddc:	f383 8811 	msr	BASEPRI, r3
 8009de0:	f3bf 8f6f 	isb	sy
 8009de4:	f3bf 8f4f 	dsb	sy
 8009de8:	60fb      	str	r3, [r7, #12]
}
 8009dea:	bf00      	nop
 8009dec:	e7fe      	b.n	8009dec <prvTaskExitError+0x28>
	__asm volatile
 8009dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df2:	f383 8811 	msr	BASEPRI, r3
 8009df6:	f3bf 8f6f 	isb	sy
 8009dfa:	f3bf 8f4f 	dsb	sy
 8009dfe:	60bb      	str	r3, [r7, #8]
}
 8009e00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009e02:	bf00      	nop
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d0fc      	beq.n	8009e04 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009e0a:	bf00      	nop
 8009e0c:	bf00      	nop
 8009e0e:	3714      	adds	r7, #20
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr
 8009e18:	20000054 	.word	0x20000054
 8009e1c:	00000000 	.word	0x00000000

08009e20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009e20:	4b07      	ldr	r3, [pc, #28]	; (8009e40 <pxCurrentTCBConst2>)
 8009e22:	6819      	ldr	r1, [r3, #0]
 8009e24:	6808      	ldr	r0, [r1, #0]
 8009e26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e2a:	f380 8809 	msr	PSP, r0
 8009e2e:	f3bf 8f6f 	isb	sy
 8009e32:	f04f 0000 	mov.w	r0, #0
 8009e36:	f380 8811 	msr	BASEPRI, r0
 8009e3a:	4770      	bx	lr
 8009e3c:	f3af 8000 	nop.w

08009e40 <pxCurrentTCBConst2>:
 8009e40:	20000734 	.word	0x20000734
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009e44:	bf00      	nop
 8009e46:	bf00      	nop

08009e48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009e48:	4808      	ldr	r0, [pc, #32]	; (8009e6c <prvPortStartFirstTask+0x24>)
 8009e4a:	6800      	ldr	r0, [r0, #0]
 8009e4c:	6800      	ldr	r0, [r0, #0]
 8009e4e:	f380 8808 	msr	MSP, r0
 8009e52:	f04f 0000 	mov.w	r0, #0
 8009e56:	f380 8814 	msr	CONTROL, r0
 8009e5a:	b662      	cpsie	i
 8009e5c:	b661      	cpsie	f
 8009e5e:	f3bf 8f4f 	dsb	sy
 8009e62:	f3bf 8f6f 	isb	sy
 8009e66:	df00      	svc	0
 8009e68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009e6a:	bf00      	nop
 8009e6c:	e000ed08 	.word	0xe000ed08

08009e70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b086      	sub	sp, #24
 8009e74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009e76:	4b46      	ldr	r3, [pc, #280]	; (8009f90 <xPortStartScheduler+0x120>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a46      	ldr	r2, [pc, #280]	; (8009f94 <xPortStartScheduler+0x124>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d10a      	bne.n	8009e96 <xPortStartScheduler+0x26>
	__asm volatile
 8009e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e84:	f383 8811 	msr	BASEPRI, r3
 8009e88:	f3bf 8f6f 	isb	sy
 8009e8c:	f3bf 8f4f 	dsb	sy
 8009e90:	613b      	str	r3, [r7, #16]
}
 8009e92:	bf00      	nop
 8009e94:	e7fe      	b.n	8009e94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009e96:	4b3e      	ldr	r3, [pc, #248]	; (8009f90 <xPortStartScheduler+0x120>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4a3f      	ldr	r2, [pc, #252]	; (8009f98 <xPortStartScheduler+0x128>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d10a      	bne.n	8009eb6 <xPortStartScheduler+0x46>
	__asm volatile
 8009ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea4:	f383 8811 	msr	BASEPRI, r3
 8009ea8:	f3bf 8f6f 	isb	sy
 8009eac:	f3bf 8f4f 	dsb	sy
 8009eb0:	60fb      	str	r3, [r7, #12]
}
 8009eb2:	bf00      	nop
 8009eb4:	e7fe      	b.n	8009eb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009eb6:	4b39      	ldr	r3, [pc, #228]	; (8009f9c <xPortStartScheduler+0x12c>)
 8009eb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	22ff      	movs	r2, #255	; 0xff
 8009ec6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ed0:	78fb      	ldrb	r3, [r7, #3]
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009ed8:	b2da      	uxtb	r2, r3
 8009eda:	4b31      	ldr	r3, [pc, #196]	; (8009fa0 <xPortStartScheduler+0x130>)
 8009edc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009ede:	4b31      	ldr	r3, [pc, #196]	; (8009fa4 <xPortStartScheduler+0x134>)
 8009ee0:	2207      	movs	r2, #7
 8009ee2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ee4:	e009      	b.n	8009efa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009ee6:	4b2f      	ldr	r3, [pc, #188]	; (8009fa4 <xPortStartScheduler+0x134>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	3b01      	subs	r3, #1
 8009eec:	4a2d      	ldr	r2, [pc, #180]	; (8009fa4 <xPortStartScheduler+0x134>)
 8009eee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009ef0:	78fb      	ldrb	r3, [r7, #3]
 8009ef2:	b2db      	uxtb	r3, r3
 8009ef4:	005b      	lsls	r3, r3, #1
 8009ef6:	b2db      	uxtb	r3, r3
 8009ef8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009efa:	78fb      	ldrb	r3, [r7, #3]
 8009efc:	b2db      	uxtb	r3, r3
 8009efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f02:	2b80      	cmp	r3, #128	; 0x80
 8009f04:	d0ef      	beq.n	8009ee6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009f06:	4b27      	ldr	r3, [pc, #156]	; (8009fa4 <xPortStartScheduler+0x134>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f1c3 0307 	rsb	r3, r3, #7
 8009f0e:	2b04      	cmp	r3, #4
 8009f10:	d00a      	beq.n	8009f28 <xPortStartScheduler+0xb8>
	__asm volatile
 8009f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f16:	f383 8811 	msr	BASEPRI, r3
 8009f1a:	f3bf 8f6f 	isb	sy
 8009f1e:	f3bf 8f4f 	dsb	sy
 8009f22:	60bb      	str	r3, [r7, #8]
}
 8009f24:	bf00      	nop
 8009f26:	e7fe      	b.n	8009f26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009f28:	4b1e      	ldr	r3, [pc, #120]	; (8009fa4 <xPortStartScheduler+0x134>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	021b      	lsls	r3, r3, #8
 8009f2e:	4a1d      	ldr	r2, [pc, #116]	; (8009fa4 <xPortStartScheduler+0x134>)
 8009f30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009f32:	4b1c      	ldr	r3, [pc, #112]	; (8009fa4 <xPortStartScheduler+0x134>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009f3a:	4a1a      	ldr	r2, [pc, #104]	; (8009fa4 <xPortStartScheduler+0x134>)
 8009f3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	b2da      	uxtb	r2, r3
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009f46:	4b18      	ldr	r3, [pc, #96]	; (8009fa8 <xPortStartScheduler+0x138>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a17      	ldr	r2, [pc, #92]	; (8009fa8 <xPortStartScheduler+0x138>)
 8009f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009f50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009f52:	4b15      	ldr	r3, [pc, #84]	; (8009fa8 <xPortStartScheduler+0x138>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a14      	ldr	r2, [pc, #80]	; (8009fa8 <xPortStartScheduler+0x138>)
 8009f58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009f5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009f5e:	f000 f8dd 	bl	800a11c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009f62:	4b12      	ldr	r3, [pc, #72]	; (8009fac <xPortStartScheduler+0x13c>)
 8009f64:	2200      	movs	r2, #0
 8009f66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009f68:	f000 f8fc 	bl	800a164 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009f6c:	4b10      	ldr	r3, [pc, #64]	; (8009fb0 <xPortStartScheduler+0x140>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a0f      	ldr	r2, [pc, #60]	; (8009fb0 <xPortStartScheduler+0x140>)
 8009f72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009f76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009f78:	f7ff ff66 	bl	8009e48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009f7c:	f7ff fa86 	bl	800948c <vTaskSwitchContext>
	prvTaskExitError();
 8009f80:	f7ff ff20 	bl	8009dc4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009f84:	2300      	movs	r3, #0
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3718      	adds	r7, #24
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	e000ed00 	.word	0xe000ed00
 8009f94:	410fc271 	.word	0x410fc271
 8009f98:	410fc270 	.word	0x410fc270
 8009f9c:	e000e400 	.word	0xe000e400
 8009fa0:	20000860 	.word	0x20000860
 8009fa4:	20000864 	.word	0x20000864
 8009fa8:	e000ed20 	.word	0xe000ed20
 8009fac:	20000054 	.word	0x20000054
 8009fb0:	e000ef34 	.word	0xe000ef34

08009fb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
	__asm volatile
 8009fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fbe:	f383 8811 	msr	BASEPRI, r3
 8009fc2:	f3bf 8f6f 	isb	sy
 8009fc6:	f3bf 8f4f 	dsb	sy
 8009fca:	607b      	str	r3, [r7, #4]
}
 8009fcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009fce:	4b0f      	ldr	r3, [pc, #60]	; (800a00c <vPortEnterCritical+0x58>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	4a0d      	ldr	r2, [pc, #52]	; (800a00c <vPortEnterCritical+0x58>)
 8009fd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009fd8:	4b0c      	ldr	r3, [pc, #48]	; (800a00c <vPortEnterCritical+0x58>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d10f      	bne.n	800a000 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009fe0:	4b0b      	ldr	r3, [pc, #44]	; (800a010 <vPortEnterCritical+0x5c>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d00a      	beq.n	800a000 <vPortEnterCritical+0x4c>
	__asm volatile
 8009fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fee:	f383 8811 	msr	BASEPRI, r3
 8009ff2:	f3bf 8f6f 	isb	sy
 8009ff6:	f3bf 8f4f 	dsb	sy
 8009ffa:	603b      	str	r3, [r7, #0]
}
 8009ffc:	bf00      	nop
 8009ffe:	e7fe      	b.n	8009ffe <vPortEnterCritical+0x4a>
	}
}
 800a000:	bf00      	nop
 800a002:	370c      	adds	r7, #12
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr
 800a00c:	20000054 	.word	0x20000054
 800a010:	e000ed04 	.word	0xe000ed04

0800a014 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a01a:	4b12      	ldr	r3, [pc, #72]	; (800a064 <vPortExitCritical+0x50>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d10a      	bne.n	800a038 <vPortExitCritical+0x24>
	__asm volatile
 800a022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a026:	f383 8811 	msr	BASEPRI, r3
 800a02a:	f3bf 8f6f 	isb	sy
 800a02e:	f3bf 8f4f 	dsb	sy
 800a032:	607b      	str	r3, [r7, #4]
}
 800a034:	bf00      	nop
 800a036:	e7fe      	b.n	800a036 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a038:	4b0a      	ldr	r3, [pc, #40]	; (800a064 <vPortExitCritical+0x50>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	3b01      	subs	r3, #1
 800a03e:	4a09      	ldr	r2, [pc, #36]	; (800a064 <vPortExitCritical+0x50>)
 800a040:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a042:	4b08      	ldr	r3, [pc, #32]	; (800a064 <vPortExitCritical+0x50>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d105      	bne.n	800a056 <vPortExitCritical+0x42>
 800a04a:	2300      	movs	r3, #0
 800a04c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	f383 8811 	msr	BASEPRI, r3
}
 800a054:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a056:	bf00      	nop
 800a058:	370c      	adds	r7, #12
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr
 800a062:	bf00      	nop
 800a064:	20000054 	.word	0x20000054
	...

0800a070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a070:	f3ef 8009 	mrs	r0, PSP
 800a074:	f3bf 8f6f 	isb	sy
 800a078:	4b15      	ldr	r3, [pc, #84]	; (800a0d0 <pxCurrentTCBConst>)
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	f01e 0f10 	tst.w	lr, #16
 800a080:	bf08      	it	eq
 800a082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a08a:	6010      	str	r0, [r2, #0]
 800a08c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a090:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a094:	f380 8811 	msr	BASEPRI, r0
 800a098:	f3bf 8f4f 	dsb	sy
 800a09c:	f3bf 8f6f 	isb	sy
 800a0a0:	f7ff f9f4 	bl	800948c <vTaskSwitchContext>
 800a0a4:	f04f 0000 	mov.w	r0, #0
 800a0a8:	f380 8811 	msr	BASEPRI, r0
 800a0ac:	bc09      	pop	{r0, r3}
 800a0ae:	6819      	ldr	r1, [r3, #0]
 800a0b0:	6808      	ldr	r0, [r1, #0]
 800a0b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b6:	f01e 0f10 	tst.w	lr, #16
 800a0ba:	bf08      	it	eq
 800a0bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a0c0:	f380 8809 	msr	PSP, r0
 800a0c4:	f3bf 8f6f 	isb	sy
 800a0c8:	4770      	bx	lr
 800a0ca:	bf00      	nop
 800a0cc:	f3af 8000 	nop.w

0800a0d0 <pxCurrentTCBConst>:
 800a0d0:	20000734 	.word	0x20000734
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a0d4:	bf00      	nop
 800a0d6:	bf00      	nop

0800a0d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
	__asm volatile
 800a0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e2:	f383 8811 	msr	BASEPRI, r3
 800a0e6:	f3bf 8f6f 	isb	sy
 800a0ea:	f3bf 8f4f 	dsb	sy
 800a0ee:	607b      	str	r3, [r7, #4]
}
 800a0f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a0f2:	f7ff f913 	bl	800931c <xTaskIncrementTick>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d003      	beq.n	800a104 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a0fc:	4b06      	ldr	r3, [pc, #24]	; (800a118 <SysTick_Handler+0x40>)
 800a0fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a102:	601a      	str	r2, [r3, #0]
 800a104:	2300      	movs	r3, #0
 800a106:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	f383 8811 	msr	BASEPRI, r3
}
 800a10e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a110:	bf00      	nop
 800a112:	3708      	adds	r7, #8
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}
 800a118:	e000ed04 	.word	0xe000ed04

0800a11c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a11c:	b480      	push	{r7}
 800a11e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a120:	4b0b      	ldr	r3, [pc, #44]	; (800a150 <vPortSetupTimerInterrupt+0x34>)
 800a122:	2200      	movs	r2, #0
 800a124:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a126:	4b0b      	ldr	r3, [pc, #44]	; (800a154 <vPortSetupTimerInterrupt+0x38>)
 800a128:	2200      	movs	r2, #0
 800a12a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a12c:	4b0a      	ldr	r3, [pc, #40]	; (800a158 <vPortSetupTimerInterrupt+0x3c>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a0a      	ldr	r2, [pc, #40]	; (800a15c <vPortSetupTimerInterrupt+0x40>)
 800a132:	fba2 2303 	umull	r2, r3, r2, r3
 800a136:	099b      	lsrs	r3, r3, #6
 800a138:	4a09      	ldr	r2, [pc, #36]	; (800a160 <vPortSetupTimerInterrupt+0x44>)
 800a13a:	3b01      	subs	r3, #1
 800a13c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a13e:	4b04      	ldr	r3, [pc, #16]	; (800a150 <vPortSetupTimerInterrupt+0x34>)
 800a140:	2207      	movs	r2, #7
 800a142:	601a      	str	r2, [r3, #0]
}
 800a144:	bf00      	nop
 800a146:	46bd      	mov	sp, r7
 800a148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14c:	4770      	bx	lr
 800a14e:	bf00      	nop
 800a150:	e000e010 	.word	0xe000e010
 800a154:	e000e018 	.word	0xe000e018
 800a158:	20000048 	.word	0x20000048
 800a15c:	10624dd3 	.word	0x10624dd3
 800a160:	e000e014 	.word	0xe000e014

0800a164 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a164:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a174 <vPortEnableVFP+0x10>
 800a168:	6801      	ldr	r1, [r0, #0]
 800a16a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a16e:	6001      	str	r1, [r0, #0]
 800a170:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a172:	bf00      	nop
 800a174:	e000ed88 	.word	0xe000ed88

0800a178 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a178:	b480      	push	{r7}
 800a17a:	b085      	sub	sp, #20
 800a17c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a17e:	f3ef 8305 	mrs	r3, IPSR
 800a182:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2b0f      	cmp	r3, #15
 800a188:	d914      	bls.n	800a1b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a18a:	4a17      	ldr	r2, [pc, #92]	; (800a1e8 <vPortValidateInterruptPriority+0x70>)
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	4413      	add	r3, r2
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a194:	4b15      	ldr	r3, [pc, #84]	; (800a1ec <vPortValidateInterruptPriority+0x74>)
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	7afa      	ldrb	r2, [r7, #11]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d20a      	bcs.n	800a1b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a2:	f383 8811 	msr	BASEPRI, r3
 800a1a6:	f3bf 8f6f 	isb	sy
 800a1aa:	f3bf 8f4f 	dsb	sy
 800a1ae:	607b      	str	r3, [r7, #4]
}
 800a1b0:	bf00      	nop
 800a1b2:	e7fe      	b.n	800a1b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a1b4:	4b0e      	ldr	r3, [pc, #56]	; (800a1f0 <vPortValidateInterruptPriority+0x78>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a1bc:	4b0d      	ldr	r3, [pc, #52]	; (800a1f4 <vPortValidateInterruptPriority+0x7c>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d90a      	bls.n	800a1da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a1c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c8:	f383 8811 	msr	BASEPRI, r3
 800a1cc:	f3bf 8f6f 	isb	sy
 800a1d0:	f3bf 8f4f 	dsb	sy
 800a1d4:	603b      	str	r3, [r7, #0]
}
 800a1d6:	bf00      	nop
 800a1d8:	e7fe      	b.n	800a1d8 <vPortValidateInterruptPriority+0x60>
	}
 800a1da:	bf00      	nop
 800a1dc:	3714      	adds	r7, #20
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr
 800a1e6:	bf00      	nop
 800a1e8:	e000e3f0 	.word	0xe000e3f0
 800a1ec:	20000860 	.word	0x20000860
 800a1f0:	e000ed0c 	.word	0xe000ed0c
 800a1f4:	20000864 	.word	0x20000864

0800a1f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b08a      	sub	sp, #40	; 0x28
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a200:	2300      	movs	r3, #0
 800a202:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a204:	f7fe ffe0 	bl	80091c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a208:	4b5b      	ldr	r3, [pc, #364]	; (800a378 <pvPortMalloc+0x180>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d101      	bne.n	800a214 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a210:	f000 f920 	bl	800a454 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a214:	4b59      	ldr	r3, [pc, #356]	; (800a37c <pvPortMalloc+0x184>)
 800a216:	681a      	ldr	r2, [r3, #0]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	4013      	ands	r3, r2
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	f040 8093 	bne.w	800a348 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d01d      	beq.n	800a264 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a228:	2208      	movs	r2, #8
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	4413      	add	r3, r2
 800a22e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f003 0307 	and.w	r3, r3, #7
 800a236:	2b00      	cmp	r3, #0
 800a238:	d014      	beq.n	800a264 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f023 0307 	bic.w	r3, r3, #7
 800a240:	3308      	adds	r3, #8
 800a242:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f003 0307 	and.w	r3, r3, #7
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d00a      	beq.n	800a264 <pvPortMalloc+0x6c>
	__asm volatile
 800a24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a252:	f383 8811 	msr	BASEPRI, r3
 800a256:	f3bf 8f6f 	isb	sy
 800a25a:	f3bf 8f4f 	dsb	sy
 800a25e:	617b      	str	r3, [r7, #20]
}
 800a260:	bf00      	nop
 800a262:	e7fe      	b.n	800a262 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d06e      	beq.n	800a348 <pvPortMalloc+0x150>
 800a26a:	4b45      	ldr	r3, [pc, #276]	; (800a380 <pvPortMalloc+0x188>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	429a      	cmp	r2, r3
 800a272:	d869      	bhi.n	800a348 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a274:	4b43      	ldr	r3, [pc, #268]	; (800a384 <pvPortMalloc+0x18c>)
 800a276:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a278:	4b42      	ldr	r3, [pc, #264]	; (800a384 <pvPortMalloc+0x18c>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a27e:	e004      	b.n	800a28a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a282:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	429a      	cmp	r2, r3
 800a292:	d903      	bls.n	800a29c <pvPortMalloc+0xa4>
 800a294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d1f1      	bne.n	800a280 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a29c:	4b36      	ldr	r3, [pc, #216]	; (800a378 <pvPortMalloc+0x180>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	d050      	beq.n	800a348 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a2a6:	6a3b      	ldr	r3, [r7, #32]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	2208      	movs	r2, #8
 800a2ac:	4413      	add	r3, r2
 800a2ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	6a3b      	ldr	r3, [r7, #32]
 800a2b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ba:	685a      	ldr	r2, [r3, #4]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	1ad2      	subs	r2, r2, r3
 800a2c0:	2308      	movs	r3, #8
 800a2c2:	005b      	lsls	r3, r3, #1
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d91f      	bls.n	800a308 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a2c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	4413      	add	r3, r2
 800a2ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	f003 0307 	and.w	r3, r3, #7
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d00a      	beq.n	800a2f0 <pvPortMalloc+0xf8>
	__asm volatile
 800a2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2de:	f383 8811 	msr	BASEPRI, r3
 800a2e2:	f3bf 8f6f 	isb	sy
 800a2e6:	f3bf 8f4f 	dsb	sy
 800a2ea:	613b      	str	r3, [r7, #16]
}
 800a2ec:	bf00      	nop
 800a2ee:	e7fe      	b.n	800a2ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f2:	685a      	ldr	r2, [r3, #4]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	1ad2      	subs	r2, r2, r3
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a302:	69b8      	ldr	r0, [r7, #24]
 800a304:	f000 f908 	bl	800a518 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a308:	4b1d      	ldr	r3, [pc, #116]	; (800a380 <pvPortMalloc+0x188>)
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	1ad3      	subs	r3, r2, r3
 800a312:	4a1b      	ldr	r2, [pc, #108]	; (800a380 <pvPortMalloc+0x188>)
 800a314:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a316:	4b1a      	ldr	r3, [pc, #104]	; (800a380 <pvPortMalloc+0x188>)
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	4b1b      	ldr	r3, [pc, #108]	; (800a388 <pvPortMalloc+0x190>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	429a      	cmp	r2, r3
 800a320:	d203      	bcs.n	800a32a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a322:	4b17      	ldr	r3, [pc, #92]	; (800a380 <pvPortMalloc+0x188>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4a18      	ldr	r2, [pc, #96]	; (800a388 <pvPortMalloc+0x190>)
 800a328:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32c:	685a      	ldr	r2, [r3, #4]
 800a32e:	4b13      	ldr	r3, [pc, #76]	; (800a37c <pvPortMalloc+0x184>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	431a      	orrs	r2, r3
 800a334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a336:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a33a:	2200      	movs	r2, #0
 800a33c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a33e:	4b13      	ldr	r3, [pc, #76]	; (800a38c <pvPortMalloc+0x194>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	3301      	adds	r3, #1
 800a344:	4a11      	ldr	r2, [pc, #68]	; (800a38c <pvPortMalloc+0x194>)
 800a346:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a348:	f7fe ff4c 	bl	80091e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a34c:	69fb      	ldr	r3, [r7, #28]
 800a34e:	f003 0307 	and.w	r3, r3, #7
 800a352:	2b00      	cmp	r3, #0
 800a354:	d00a      	beq.n	800a36c <pvPortMalloc+0x174>
	__asm volatile
 800a356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35a:	f383 8811 	msr	BASEPRI, r3
 800a35e:	f3bf 8f6f 	isb	sy
 800a362:	f3bf 8f4f 	dsb	sy
 800a366:	60fb      	str	r3, [r7, #12]
}
 800a368:	bf00      	nop
 800a36a:	e7fe      	b.n	800a36a <pvPortMalloc+0x172>
	return pvReturn;
 800a36c:	69fb      	ldr	r3, [r7, #28]
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3728      	adds	r7, #40	; 0x28
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	20004470 	.word	0x20004470
 800a37c:	20004484 	.word	0x20004484
 800a380:	20004474 	.word	0x20004474
 800a384:	20004468 	.word	0x20004468
 800a388:	20004478 	.word	0x20004478
 800a38c:	2000447c 	.word	0x2000447c

0800a390 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b086      	sub	sp, #24
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d04d      	beq.n	800a43e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a3a2:	2308      	movs	r3, #8
 800a3a4:	425b      	negs	r3, r3
 800a3a6:	697a      	ldr	r2, [r7, #20]
 800a3a8:	4413      	add	r3, r2
 800a3aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	685a      	ldr	r2, [r3, #4]
 800a3b4:	4b24      	ldr	r3, [pc, #144]	; (800a448 <vPortFree+0xb8>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4013      	ands	r3, r2
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d10a      	bne.n	800a3d4 <vPortFree+0x44>
	__asm volatile
 800a3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c2:	f383 8811 	msr	BASEPRI, r3
 800a3c6:	f3bf 8f6f 	isb	sy
 800a3ca:	f3bf 8f4f 	dsb	sy
 800a3ce:	60fb      	str	r3, [r7, #12]
}
 800a3d0:	bf00      	nop
 800a3d2:	e7fe      	b.n	800a3d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d00a      	beq.n	800a3f2 <vPortFree+0x62>
	__asm volatile
 800a3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e0:	f383 8811 	msr	BASEPRI, r3
 800a3e4:	f3bf 8f6f 	isb	sy
 800a3e8:	f3bf 8f4f 	dsb	sy
 800a3ec:	60bb      	str	r3, [r7, #8]
}
 800a3ee:	bf00      	nop
 800a3f0:	e7fe      	b.n	800a3f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	685a      	ldr	r2, [r3, #4]
 800a3f6:	4b14      	ldr	r3, [pc, #80]	; (800a448 <vPortFree+0xb8>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4013      	ands	r3, r2
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d01e      	beq.n	800a43e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a400:	693b      	ldr	r3, [r7, #16]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d11a      	bne.n	800a43e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	685a      	ldr	r2, [r3, #4]
 800a40c:	4b0e      	ldr	r3, [pc, #56]	; (800a448 <vPortFree+0xb8>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	43db      	mvns	r3, r3
 800a412:	401a      	ands	r2, r3
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a418:	f7fe fed6 	bl	80091c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	685a      	ldr	r2, [r3, #4]
 800a420:	4b0a      	ldr	r3, [pc, #40]	; (800a44c <vPortFree+0xbc>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4413      	add	r3, r2
 800a426:	4a09      	ldr	r2, [pc, #36]	; (800a44c <vPortFree+0xbc>)
 800a428:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a42a:	6938      	ldr	r0, [r7, #16]
 800a42c:	f000 f874 	bl	800a518 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a430:	4b07      	ldr	r3, [pc, #28]	; (800a450 <vPortFree+0xc0>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	3301      	adds	r3, #1
 800a436:	4a06      	ldr	r2, [pc, #24]	; (800a450 <vPortFree+0xc0>)
 800a438:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a43a:	f7fe fed3 	bl	80091e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a43e:	bf00      	nop
 800a440:	3718      	adds	r7, #24
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	20004484 	.word	0x20004484
 800a44c:	20004474 	.word	0x20004474
 800a450:	20004480 	.word	0x20004480

0800a454 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a454:	b480      	push	{r7}
 800a456:	b085      	sub	sp, #20
 800a458:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a45a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a45e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a460:	4b27      	ldr	r3, [pc, #156]	; (800a500 <prvHeapInit+0xac>)
 800a462:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f003 0307 	and.w	r3, r3, #7
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d00c      	beq.n	800a488 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	3307      	adds	r3, #7
 800a472:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f023 0307 	bic.w	r3, r3, #7
 800a47a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a47c:	68ba      	ldr	r2, [r7, #8]
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	1ad3      	subs	r3, r2, r3
 800a482:	4a1f      	ldr	r2, [pc, #124]	; (800a500 <prvHeapInit+0xac>)
 800a484:	4413      	add	r3, r2
 800a486:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a48c:	4a1d      	ldr	r2, [pc, #116]	; (800a504 <prvHeapInit+0xb0>)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a492:	4b1c      	ldr	r3, [pc, #112]	; (800a504 <prvHeapInit+0xb0>)
 800a494:	2200      	movs	r2, #0
 800a496:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	68ba      	ldr	r2, [r7, #8]
 800a49c:	4413      	add	r3, r2
 800a49e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a4a0:	2208      	movs	r2, #8
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	1a9b      	subs	r3, r3, r2
 800a4a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f023 0307 	bic.w	r3, r3, #7
 800a4ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	4a15      	ldr	r2, [pc, #84]	; (800a508 <prvHeapInit+0xb4>)
 800a4b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a4b6:	4b14      	ldr	r3, [pc, #80]	; (800a508 <prvHeapInit+0xb4>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a4be:	4b12      	ldr	r3, [pc, #72]	; (800a508 <prvHeapInit+0xb4>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	68fa      	ldr	r2, [r7, #12]
 800a4ce:	1ad2      	subs	r2, r2, r3
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a4d4:	4b0c      	ldr	r3, [pc, #48]	; (800a508 <prvHeapInit+0xb4>)
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	4a0a      	ldr	r2, [pc, #40]	; (800a50c <prvHeapInit+0xb8>)
 800a4e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	4a09      	ldr	r2, [pc, #36]	; (800a510 <prvHeapInit+0xbc>)
 800a4ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a4ec:	4b09      	ldr	r3, [pc, #36]	; (800a514 <prvHeapInit+0xc0>)
 800a4ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a4f2:	601a      	str	r2, [r3, #0]
}
 800a4f4:	bf00      	nop
 800a4f6:	3714      	adds	r7, #20
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr
 800a500:	20000868 	.word	0x20000868
 800a504:	20004468 	.word	0x20004468
 800a508:	20004470 	.word	0x20004470
 800a50c:	20004478 	.word	0x20004478
 800a510:	20004474 	.word	0x20004474
 800a514:	20004484 	.word	0x20004484

0800a518 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a518:	b480      	push	{r7}
 800a51a:	b085      	sub	sp, #20
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a520:	4b28      	ldr	r3, [pc, #160]	; (800a5c4 <prvInsertBlockIntoFreeList+0xac>)
 800a522:	60fb      	str	r3, [r7, #12]
 800a524:	e002      	b.n	800a52c <prvInsertBlockIntoFreeList+0x14>
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	60fb      	str	r3, [r7, #12]
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	429a      	cmp	r2, r3
 800a534:	d8f7      	bhi.n	800a526 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	685b      	ldr	r3, [r3, #4]
 800a53e:	68ba      	ldr	r2, [r7, #8]
 800a540:	4413      	add	r3, r2
 800a542:	687a      	ldr	r2, [r7, #4]
 800a544:	429a      	cmp	r2, r3
 800a546:	d108      	bne.n	800a55a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	685a      	ldr	r2, [r3, #4]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	441a      	add	r2, r3
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	68ba      	ldr	r2, [r7, #8]
 800a564:	441a      	add	r2, r3
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d118      	bne.n	800a5a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	4b15      	ldr	r3, [pc, #84]	; (800a5c8 <prvInsertBlockIntoFreeList+0xb0>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	429a      	cmp	r2, r3
 800a578:	d00d      	beq.n	800a596 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	685a      	ldr	r2, [r3, #4]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	441a      	add	r2, r3
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	601a      	str	r2, [r3, #0]
 800a594:	e008      	b.n	800a5a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a596:	4b0c      	ldr	r3, [pc, #48]	; (800a5c8 <prvInsertBlockIntoFreeList+0xb0>)
 800a598:	681a      	ldr	r2, [r3, #0]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	601a      	str	r2, [r3, #0]
 800a59e:	e003      	b.n	800a5a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a5a8:	68fa      	ldr	r2, [r7, #12]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d002      	beq.n	800a5b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5b6:	bf00      	nop
 800a5b8:	3714      	adds	r7, #20
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr
 800a5c2:	bf00      	nop
 800a5c4:	20004468 	.word	0x20004468
 800a5c8:	20004470 	.word	0x20004470

0800a5cc <__errno>:
 800a5cc:	4b01      	ldr	r3, [pc, #4]	; (800a5d4 <__errno+0x8>)
 800a5ce:	6818      	ldr	r0, [r3, #0]
 800a5d0:	4770      	bx	lr
 800a5d2:	bf00      	nop
 800a5d4:	20000058 	.word	0x20000058

0800a5d8 <std>:
 800a5d8:	2300      	movs	r3, #0
 800a5da:	b510      	push	{r4, lr}
 800a5dc:	4604      	mov	r4, r0
 800a5de:	e9c0 3300 	strd	r3, r3, [r0]
 800a5e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a5e6:	6083      	str	r3, [r0, #8]
 800a5e8:	8181      	strh	r1, [r0, #12]
 800a5ea:	6643      	str	r3, [r0, #100]	; 0x64
 800a5ec:	81c2      	strh	r2, [r0, #14]
 800a5ee:	6183      	str	r3, [r0, #24]
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	2208      	movs	r2, #8
 800a5f4:	305c      	adds	r0, #92	; 0x5c
 800a5f6:	f000 f91a 	bl	800a82e <memset>
 800a5fa:	4b05      	ldr	r3, [pc, #20]	; (800a610 <std+0x38>)
 800a5fc:	6263      	str	r3, [r4, #36]	; 0x24
 800a5fe:	4b05      	ldr	r3, [pc, #20]	; (800a614 <std+0x3c>)
 800a600:	62a3      	str	r3, [r4, #40]	; 0x28
 800a602:	4b05      	ldr	r3, [pc, #20]	; (800a618 <std+0x40>)
 800a604:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a606:	4b05      	ldr	r3, [pc, #20]	; (800a61c <std+0x44>)
 800a608:	6224      	str	r4, [r4, #32]
 800a60a:	6323      	str	r3, [r4, #48]	; 0x30
 800a60c:	bd10      	pop	{r4, pc}
 800a60e:	bf00      	nop
 800a610:	0800b48d 	.word	0x0800b48d
 800a614:	0800b4af 	.word	0x0800b4af
 800a618:	0800b4e7 	.word	0x0800b4e7
 800a61c:	0800b50b 	.word	0x0800b50b

0800a620 <_cleanup_r>:
 800a620:	4901      	ldr	r1, [pc, #4]	; (800a628 <_cleanup_r+0x8>)
 800a622:	f000 b8af 	b.w	800a784 <_fwalk_reent>
 800a626:	bf00      	nop
 800a628:	0800c4d9 	.word	0x0800c4d9

0800a62c <__sfmoreglue>:
 800a62c:	b570      	push	{r4, r5, r6, lr}
 800a62e:	2268      	movs	r2, #104	; 0x68
 800a630:	1e4d      	subs	r5, r1, #1
 800a632:	4355      	muls	r5, r2
 800a634:	460e      	mov	r6, r1
 800a636:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a63a:	f000 f921 	bl	800a880 <_malloc_r>
 800a63e:	4604      	mov	r4, r0
 800a640:	b140      	cbz	r0, 800a654 <__sfmoreglue+0x28>
 800a642:	2100      	movs	r1, #0
 800a644:	e9c0 1600 	strd	r1, r6, [r0]
 800a648:	300c      	adds	r0, #12
 800a64a:	60a0      	str	r0, [r4, #8]
 800a64c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a650:	f000 f8ed 	bl	800a82e <memset>
 800a654:	4620      	mov	r0, r4
 800a656:	bd70      	pop	{r4, r5, r6, pc}

0800a658 <__sfp_lock_acquire>:
 800a658:	4801      	ldr	r0, [pc, #4]	; (800a660 <__sfp_lock_acquire+0x8>)
 800a65a:	f000 b8d8 	b.w	800a80e <__retarget_lock_acquire_recursive>
 800a65e:	bf00      	nop
 800a660:	20004489 	.word	0x20004489

0800a664 <__sfp_lock_release>:
 800a664:	4801      	ldr	r0, [pc, #4]	; (800a66c <__sfp_lock_release+0x8>)
 800a666:	f000 b8d3 	b.w	800a810 <__retarget_lock_release_recursive>
 800a66a:	bf00      	nop
 800a66c:	20004489 	.word	0x20004489

0800a670 <__sinit_lock_acquire>:
 800a670:	4801      	ldr	r0, [pc, #4]	; (800a678 <__sinit_lock_acquire+0x8>)
 800a672:	f000 b8cc 	b.w	800a80e <__retarget_lock_acquire_recursive>
 800a676:	bf00      	nop
 800a678:	2000448a 	.word	0x2000448a

0800a67c <__sinit_lock_release>:
 800a67c:	4801      	ldr	r0, [pc, #4]	; (800a684 <__sinit_lock_release+0x8>)
 800a67e:	f000 b8c7 	b.w	800a810 <__retarget_lock_release_recursive>
 800a682:	bf00      	nop
 800a684:	2000448a 	.word	0x2000448a

0800a688 <__sinit>:
 800a688:	b510      	push	{r4, lr}
 800a68a:	4604      	mov	r4, r0
 800a68c:	f7ff fff0 	bl	800a670 <__sinit_lock_acquire>
 800a690:	69a3      	ldr	r3, [r4, #24]
 800a692:	b11b      	cbz	r3, 800a69c <__sinit+0x14>
 800a694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a698:	f7ff bff0 	b.w	800a67c <__sinit_lock_release>
 800a69c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a6a0:	6523      	str	r3, [r4, #80]	; 0x50
 800a6a2:	4b13      	ldr	r3, [pc, #76]	; (800a6f0 <__sinit+0x68>)
 800a6a4:	4a13      	ldr	r2, [pc, #76]	; (800a6f4 <__sinit+0x6c>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	62a2      	str	r2, [r4, #40]	; 0x28
 800a6aa:	42a3      	cmp	r3, r4
 800a6ac:	bf04      	itt	eq
 800a6ae:	2301      	moveq	r3, #1
 800a6b0:	61a3      	streq	r3, [r4, #24]
 800a6b2:	4620      	mov	r0, r4
 800a6b4:	f000 f820 	bl	800a6f8 <__sfp>
 800a6b8:	6060      	str	r0, [r4, #4]
 800a6ba:	4620      	mov	r0, r4
 800a6bc:	f000 f81c 	bl	800a6f8 <__sfp>
 800a6c0:	60a0      	str	r0, [r4, #8]
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	f000 f818 	bl	800a6f8 <__sfp>
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	60e0      	str	r0, [r4, #12]
 800a6cc:	2104      	movs	r1, #4
 800a6ce:	6860      	ldr	r0, [r4, #4]
 800a6d0:	f7ff ff82 	bl	800a5d8 <std>
 800a6d4:	68a0      	ldr	r0, [r4, #8]
 800a6d6:	2201      	movs	r2, #1
 800a6d8:	2109      	movs	r1, #9
 800a6da:	f7ff ff7d 	bl	800a5d8 <std>
 800a6de:	68e0      	ldr	r0, [r4, #12]
 800a6e0:	2202      	movs	r2, #2
 800a6e2:	2112      	movs	r1, #18
 800a6e4:	f7ff ff78 	bl	800a5d8 <std>
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	61a3      	str	r3, [r4, #24]
 800a6ec:	e7d2      	b.n	800a694 <__sinit+0xc>
 800a6ee:	bf00      	nop
 800a6f0:	0800eff0 	.word	0x0800eff0
 800a6f4:	0800a621 	.word	0x0800a621

0800a6f8 <__sfp>:
 800a6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6fa:	4607      	mov	r7, r0
 800a6fc:	f7ff ffac 	bl	800a658 <__sfp_lock_acquire>
 800a700:	4b1e      	ldr	r3, [pc, #120]	; (800a77c <__sfp+0x84>)
 800a702:	681e      	ldr	r6, [r3, #0]
 800a704:	69b3      	ldr	r3, [r6, #24]
 800a706:	b913      	cbnz	r3, 800a70e <__sfp+0x16>
 800a708:	4630      	mov	r0, r6
 800a70a:	f7ff ffbd 	bl	800a688 <__sinit>
 800a70e:	3648      	adds	r6, #72	; 0x48
 800a710:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a714:	3b01      	subs	r3, #1
 800a716:	d503      	bpl.n	800a720 <__sfp+0x28>
 800a718:	6833      	ldr	r3, [r6, #0]
 800a71a:	b30b      	cbz	r3, 800a760 <__sfp+0x68>
 800a71c:	6836      	ldr	r6, [r6, #0]
 800a71e:	e7f7      	b.n	800a710 <__sfp+0x18>
 800a720:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a724:	b9d5      	cbnz	r5, 800a75c <__sfp+0x64>
 800a726:	4b16      	ldr	r3, [pc, #88]	; (800a780 <__sfp+0x88>)
 800a728:	60e3      	str	r3, [r4, #12]
 800a72a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a72e:	6665      	str	r5, [r4, #100]	; 0x64
 800a730:	f000 f86c 	bl	800a80c <__retarget_lock_init_recursive>
 800a734:	f7ff ff96 	bl	800a664 <__sfp_lock_release>
 800a738:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a73c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a740:	6025      	str	r5, [r4, #0]
 800a742:	61a5      	str	r5, [r4, #24]
 800a744:	2208      	movs	r2, #8
 800a746:	4629      	mov	r1, r5
 800a748:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a74c:	f000 f86f 	bl	800a82e <memset>
 800a750:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a754:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a758:	4620      	mov	r0, r4
 800a75a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a75c:	3468      	adds	r4, #104	; 0x68
 800a75e:	e7d9      	b.n	800a714 <__sfp+0x1c>
 800a760:	2104      	movs	r1, #4
 800a762:	4638      	mov	r0, r7
 800a764:	f7ff ff62 	bl	800a62c <__sfmoreglue>
 800a768:	4604      	mov	r4, r0
 800a76a:	6030      	str	r0, [r6, #0]
 800a76c:	2800      	cmp	r0, #0
 800a76e:	d1d5      	bne.n	800a71c <__sfp+0x24>
 800a770:	f7ff ff78 	bl	800a664 <__sfp_lock_release>
 800a774:	230c      	movs	r3, #12
 800a776:	603b      	str	r3, [r7, #0]
 800a778:	e7ee      	b.n	800a758 <__sfp+0x60>
 800a77a:	bf00      	nop
 800a77c:	0800eff0 	.word	0x0800eff0
 800a780:	ffff0001 	.word	0xffff0001

0800a784 <_fwalk_reent>:
 800a784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a788:	4606      	mov	r6, r0
 800a78a:	4688      	mov	r8, r1
 800a78c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a790:	2700      	movs	r7, #0
 800a792:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a796:	f1b9 0901 	subs.w	r9, r9, #1
 800a79a:	d505      	bpl.n	800a7a8 <_fwalk_reent+0x24>
 800a79c:	6824      	ldr	r4, [r4, #0]
 800a79e:	2c00      	cmp	r4, #0
 800a7a0:	d1f7      	bne.n	800a792 <_fwalk_reent+0xe>
 800a7a2:	4638      	mov	r0, r7
 800a7a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7a8:	89ab      	ldrh	r3, [r5, #12]
 800a7aa:	2b01      	cmp	r3, #1
 800a7ac:	d907      	bls.n	800a7be <_fwalk_reent+0x3a>
 800a7ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	d003      	beq.n	800a7be <_fwalk_reent+0x3a>
 800a7b6:	4629      	mov	r1, r5
 800a7b8:	4630      	mov	r0, r6
 800a7ba:	47c0      	blx	r8
 800a7bc:	4307      	orrs	r7, r0
 800a7be:	3568      	adds	r5, #104	; 0x68
 800a7c0:	e7e9      	b.n	800a796 <_fwalk_reent+0x12>
	...

0800a7c4 <__libc_init_array>:
 800a7c4:	b570      	push	{r4, r5, r6, lr}
 800a7c6:	4d0d      	ldr	r5, [pc, #52]	; (800a7fc <__libc_init_array+0x38>)
 800a7c8:	4c0d      	ldr	r4, [pc, #52]	; (800a800 <__libc_init_array+0x3c>)
 800a7ca:	1b64      	subs	r4, r4, r5
 800a7cc:	10a4      	asrs	r4, r4, #2
 800a7ce:	2600      	movs	r6, #0
 800a7d0:	42a6      	cmp	r6, r4
 800a7d2:	d109      	bne.n	800a7e8 <__libc_init_array+0x24>
 800a7d4:	4d0b      	ldr	r5, [pc, #44]	; (800a804 <__libc_init_array+0x40>)
 800a7d6:	4c0c      	ldr	r4, [pc, #48]	; (800a808 <__libc_init_array+0x44>)
 800a7d8:	f004 faf8 	bl	800edcc <_init>
 800a7dc:	1b64      	subs	r4, r4, r5
 800a7de:	10a4      	asrs	r4, r4, #2
 800a7e0:	2600      	movs	r6, #0
 800a7e2:	42a6      	cmp	r6, r4
 800a7e4:	d105      	bne.n	800a7f2 <__libc_init_array+0x2e>
 800a7e6:	bd70      	pop	{r4, r5, r6, pc}
 800a7e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7ec:	4798      	blx	r3
 800a7ee:	3601      	adds	r6, #1
 800a7f0:	e7ee      	b.n	800a7d0 <__libc_init_array+0xc>
 800a7f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7f6:	4798      	blx	r3
 800a7f8:	3601      	adds	r6, #1
 800a7fa:	e7f2      	b.n	800a7e2 <__libc_init_array+0x1e>
 800a7fc:	0800f5c0 	.word	0x0800f5c0
 800a800:	0800f5c0 	.word	0x0800f5c0
 800a804:	0800f5c0 	.word	0x0800f5c0
 800a808:	0800f5c4 	.word	0x0800f5c4

0800a80c <__retarget_lock_init_recursive>:
 800a80c:	4770      	bx	lr

0800a80e <__retarget_lock_acquire_recursive>:
 800a80e:	4770      	bx	lr

0800a810 <__retarget_lock_release_recursive>:
 800a810:	4770      	bx	lr

0800a812 <memcpy>:
 800a812:	440a      	add	r2, r1
 800a814:	4291      	cmp	r1, r2
 800a816:	f100 33ff 	add.w	r3, r0, #4294967295
 800a81a:	d100      	bne.n	800a81e <memcpy+0xc>
 800a81c:	4770      	bx	lr
 800a81e:	b510      	push	{r4, lr}
 800a820:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a824:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a828:	4291      	cmp	r1, r2
 800a82a:	d1f9      	bne.n	800a820 <memcpy+0xe>
 800a82c:	bd10      	pop	{r4, pc}

0800a82e <memset>:
 800a82e:	4402      	add	r2, r0
 800a830:	4603      	mov	r3, r0
 800a832:	4293      	cmp	r3, r2
 800a834:	d100      	bne.n	800a838 <memset+0xa>
 800a836:	4770      	bx	lr
 800a838:	f803 1b01 	strb.w	r1, [r3], #1
 800a83c:	e7f9      	b.n	800a832 <memset+0x4>
	...

0800a840 <sbrk_aligned>:
 800a840:	b570      	push	{r4, r5, r6, lr}
 800a842:	4e0e      	ldr	r6, [pc, #56]	; (800a87c <sbrk_aligned+0x3c>)
 800a844:	460c      	mov	r4, r1
 800a846:	6831      	ldr	r1, [r6, #0]
 800a848:	4605      	mov	r5, r0
 800a84a:	b911      	cbnz	r1, 800a852 <sbrk_aligned+0x12>
 800a84c:	f000 fdee 	bl	800b42c <_sbrk_r>
 800a850:	6030      	str	r0, [r6, #0]
 800a852:	4621      	mov	r1, r4
 800a854:	4628      	mov	r0, r5
 800a856:	f000 fde9 	bl	800b42c <_sbrk_r>
 800a85a:	1c43      	adds	r3, r0, #1
 800a85c:	d00a      	beq.n	800a874 <sbrk_aligned+0x34>
 800a85e:	1cc4      	adds	r4, r0, #3
 800a860:	f024 0403 	bic.w	r4, r4, #3
 800a864:	42a0      	cmp	r0, r4
 800a866:	d007      	beq.n	800a878 <sbrk_aligned+0x38>
 800a868:	1a21      	subs	r1, r4, r0
 800a86a:	4628      	mov	r0, r5
 800a86c:	f000 fdde 	bl	800b42c <_sbrk_r>
 800a870:	3001      	adds	r0, #1
 800a872:	d101      	bne.n	800a878 <sbrk_aligned+0x38>
 800a874:	f04f 34ff 	mov.w	r4, #4294967295
 800a878:	4620      	mov	r0, r4
 800a87a:	bd70      	pop	{r4, r5, r6, pc}
 800a87c:	20004490 	.word	0x20004490

0800a880 <_malloc_r>:
 800a880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a884:	1ccd      	adds	r5, r1, #3
 800a886:	f025 0503 	bic.w	r5, r5, #3
 800a88a:	3508      	adds	r5, #8
 800a88c:	2d0c      	cmp	r5, #12
 800a88e:	bf38      	it	cc
 800a890:	250c      	movcc	r5, #12
 800a892:	2d00      	cmp	r5, #0
 800a894:	4607      	mov	r7, r0
 800a896:	db01      	blt.n	800a89c <_malloc_r+0x1c>
 800a898:	42a9      	cmp	r1, r5
 800a89a:	d905      	bls.n	800a8a8 <_malloc_r+0x28>
 800a89c:	230c      	movs	r3, #12
 800a89e:	603b      	str	r3, [r7, #0]
 800a8a0:	2600      	movs	r6, #0
 800a8a2:	4630      	mov	r0, r6
 800a8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8a8:	4e2e      	ldr	r6, [pc, #184]	; (800a964 <_malloc_r+0xe4>)
 800a8aa:	f001 fed5 	bl	800c658 <__malloc_lock>
 800a8ae:	6833      	ldr	r3, [r6, #0]
 800a8b0:	461c      	mov	r4, r3
 800a8b2:	bb34      	cbnz	r4, 800a902 <_malloc_r+0x82>
 800a8b4:	4629      	mov	r1, r5
 800a8b6:	4638      	mov	r0, r7
 800a8b8:	f7ff ffc2 	bl	800a840 <sbrk_aligned>
 800a8bc:	1c43      	adds	r3, r0, #1
 800a8be:	4604      	mov	r4, r0
 800a8c0:	d14d      	bne.n	800a95e <_malloc_r+0xde>
 800a8c2:	6834      	ldr	r4, [r6, #0]
 800a8c4:	4626      	mov	r6, r4
 800a8c6:	2e00      	cmp	r6, #0
 800a8c8:	d140      	bne.n	800a94c <_malloc_r+0xcc>
 800a8ca:	6823      	ldr	r3, [r4, #0]
 800a8cc:	4631      	mov	r1, r6
 800a8ce:	4638      	mov	r0, r7
 800a8d0:	eb04 0803 	add.w	r8, r4, r3
 800a8d4:	f000 fdaa 	bl	800b42c <_sbrk_r>
 800a8d8:	4580      	cmp	r8, r0
 800a8da:	d13a      	bne.n	800a952 <_malloc_r+0xd2>
 800a8dc:	6821      	ldr	r1, [r4, #0]
 800a8de:	3503      	adds	r5, #3
 800a8e0:	1a6d      	subs	r5, r5, r1
 800a8e2:	f025 0503 	bic.w	r5, r5, #3
 800a8e6:	3508      	adds	r5, #8
 800a8e8:	2d0c      	cmp	r5, #12
 800a8ea:	bf38      	it	cc
 800a8ec:	250c      	movcc	r5, #12
 800a8ee:	4629      	mov	r1, r5
 800a8f0:	4638      	mov	r0, r7
 800a8f2:	f7ff ffa5 	bl	800a840 <sbrk_aligned>
 800a8f6:	3001      	adds	r0, #1
 800a8f8:	d02b      	beq.n	800a952 <_malloc_r+0xd2>
 800a8fa:	6823      	ldr	r3, [r4, #0]
 800a8fc:	442b      	add	r3, r5
 800a8fe:	6023      	str	r3, [r4, #0]
 800a900:	e00e      	b.n	800a920 <_malloc_r+0xa0>
 800a902:	6822      	ldr	r2, [r4, #0]
 800a904:	1b52      	subs	r2, r2, r5
 800a906:	d41e      	bmi.n	800a946 <_malloc_r+0xc6>
 800a908:	2a0b      	cmp	r2, #11
 800a90a:	d916      	bls.n	800a93a <_malloc_r+0xba>
 800a90c:	1961      	adds	r1, r4, r5
 800a90e:	42a3      	cmp	r3, r4
 800a910:	6025      	str	r5, [r4, #0]
 800a912:	bf18      	it	ne
 800a914:	6059      	strne	r1, [r3, #4]
 800a916:	6863      	ldr	r3, [r4, #4]
 800a918:	bf08      	it	eq
 800a91a:	6031      	streq	r1, [r6, #0]
 800a91c:	5162      	str	r2, [r4, r5]
 800a91e:	604b      	str	r3, [r1, #4]
 800a920:	4638      	mov	r0, r7
 800a922:	f104 060b 	add.w	r6, r4, #11
 800a926:	f001 fe9d 	bl	800c664 <__malloc_unlock>
 800a92a:	f026 0607 	bic.w	r6, r6, #7
 800a92e:	1d23      	adds	r3, r4, #4
 800a930:	1af2      	subs	r2, r6, r3
 800a932:	d0b6      	beq.n	800a8a2 <_malloc_r+0x22>
 800a934:	1b9b      	subs	r3, r3, r6
 800a936:	50a3      	str	r3, [r4, r2]
 800a938:	e7b3      	b.n	800a8a2 <_malloc_r+0x22>
 800a93a:	6862      	ldr	r2, [r4, #4]
 800a93c:	42a3      	cmp	r3, r4
 800a93e:	bf0c      	ite	eq
 800a940:	6032      	streq	r2, [r6, #0]
 800a942:	605a      	strne	r2, [r3, #4]
 800a944:	e7ec      	b.n	800a920 <_malloc_r+0xa0>
 800a946:	4623      	mov	r3, r4
 800a948:	6864      	ldr	r4, [r4, #4]
 800a94a:	e7b2      	b.n	800a8b2 <_malloc_r+0x32>
 800a94c:	4634      	mov	r4, r6
 800a94e:	6876      	ldr	r6, [r6, #4]
 800a950:	e7b9      	b.n	800a8c6 <_malloc_r+0x46>
 800a952:	230c      	movs	r3, #12
 800a954:	603b      	str	r3, [r7, #0]
 800a956:	4638      	mov	r0, r7
 800a958:	f001 fe84 	bl	800c664 <__malloc_unlock>
 800a95c:	e7a1      	b.n	800a8a2 <_malloc_r+0x22>
 800a95e:	6025      	str	r5, [r4, #0]
 800a960:	e7de      	b.n	800a920 <_malloc_r+0xa0>
 800a962:	bf00      	nop
 800a964:	2000448c 	.word	0x2000448c

0800a968 <__cvt>:
 800a968:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a96c:	ec55 4b10 	vmov	r4, r5, d0
 800a970:	2d00      	cmp	r5, #0
 800a972:	460e      	mov	r6, r1
 800a974:	4619      	mov	r1, r3
 800a976:	462b      	mov	r3, r5
 800a978:	bfbb      	ittet	lt
 800a97a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a97e:	461d      	movlt	r5, r3
 800a980:	2300      	movge	r3, #0
 800a982:	232d      	movlt	r3, #45	; 0x2d
 800a984:	700b      	strb	r3, [r1, #0]
 800a986:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a988:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a98c:	4691      	mov	r9, r2
 800a98e:	f023 0820 	bic.w	r8, r3, #32
 800a992:	bfbc      	itt	lt
 800a994:	4622      	movlt	r2, r4
 800a996:	4614      	movlt	r4, r2
 800a998:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a99c:	d005      	beq.n	800a9aa <__cvt+0x42>
 800a99e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a9a2:	d100      	bne.n	800a9a6 <__cvt+0x3e>
 800a9a4:	3601      	adds	r6, #1
 800a9a6:	2102      	movs	r1, #2
 800a9a8:	e000      	b.n	800a9ac <__cvt+0x44>
 800a9aa:	2103      	movs	r1, #3
 800a9ac:	ab03      	add	r3, sp, #12
 800a9ae:	9301      	str	r3, [sp, #4]
 800a9b0:	ab02      	add	r3, sp, #8
 800a9b2:	9300      	str	r3, [sp, #0]
 800a9b4:	ec45 4b10 	vmov	d0, r4, r5
 800a9b8:	4653      	mov	r3, sl
 800a9ba:	4632      	mov	r2, r6
 800a9bc:	f000 ff18 	bl	800b7f0 <_dtoa_r>
 800a9c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a9c4:	4607      	mov	r7, r0
 800a9c6:	d102      	bne.n	800a9ce <__cvt+0x66>
 800a9c8:	f019 0f01 	tst.w	r9, #1
 800a9cc:	d022      	beq.n	800aa14 <__cvt+0xac>
 800a9ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a9d2:	eb07 0906 	add.w	r9, r7, r6
 800a9d6:	d110      	bne.n	800a9fa <__cvt+0x92>
 800a9d8:	783b      	ldrb	r3, [r7, #0]
 800a9da:	2b30      	cmp	r3, #48	; 0x30
 800a9dc:	d10a      	bne.n	800a9f4 <__cvt+0x8c>
 800a9de:	2200      	movs	r2, #0
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	4620      	mov	r0, r4
 800a9e4:	4629      	mov	r1, r5
 800a9e6:	f7f6 f87f 	bl	8000ae8 <__aeabi_dcmpeq>
 800a9ea:	b918      	cbnz	r0, 800a9f4 <__cvt+0x8c>
 800a9ec:	f1c6 0601 	rsb	r6, r6, #1
 800a9f0:	f8ca 6000 	str.w	r6, [sl]
 800a9f4:	f8da 3000 	ldr.w	r3, [sl]
 800a9f8:	4499      	add	r9, r3
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	4620      	mov	r0, r4
 800aa00:	4629      	mov	r1, r5
 800aa02:	f7f6 f871 	bl	8000ae8 <__aeabi_dcmpeq>
 800aa06:	b108      	cbz	r0, 800aa0c <__cvt+0xa4>
 800aa08:	f8cd 900c 	str.w	r9, [sp, #12]
 800aa0c:	2230      	movs	r2, #48	; 0x30
 800aa0e:	9b03      	ldr	r3, [sp, #12]
 800aa10:	454b      	cmp	r3, r9
 800aa12:	d307      	bcc.n	800aa24 <__cvt+0xbc>
 800aa14:	9b03      	ldr	r3, [sp, #12]
 800aa16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa18:	1bdb      	subs	r3, r3, r7
 800aa1a:	4638      	mov	r0, r7
 800aa1c:	6013      	str	r3, [r2, #0]
 800aa1e:	b004      	add	sp, #16
 800aa20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa24:	1c59      	adds	r1, r3, #1
 800aa26:	9103      	str	r1, [sp, #12]
 800aa28:	701a      	strb	r2, [r3, #0]
 800aa2a:	e7f0      	b.n	800aa0e <__cvt+0xa6>

0800aa2c <__exponent>:
 800aa2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa2e:	4603      	mov	r3, r0
 800aa30:	2900      	cmp	r1, #0
 800aa32:	bfb8      	it	lt
 800aa34:	4249      	neglt	r1, r1
 800aa36:	f803 2b02 	strb.w	r2, [r3], #2
 800aa3a:	bfb4      	ite	lt
 800aa3c:	222d      	movlt	r2, #45	; 0x2d
 800aa3e:	222b      	movge	r2, #43	; 0x2b
 800aa40:	2909      	cmp	r1, #9
 800aa42:	7042      	strb	r2, [r0, #1]
 800aa44:	dd2a      	ble.n	800aa9c <__exponent+0x70>
 800aa46:	f10d 0407 	add.w	r4, sp, #7
 800aa4a:	46a4      	mov	ip, r4
 800aa4c:	270a      	movs	r7, #10
 800aa4e:	46a6      	mov	lr, r4
 800aa50:	460a      	mov	r2, r1
 800aa52:	fb91 f6f7 	sdiv	r6, r1, r7
 800aa56:	fb07 1516 	mls	r5, r7, r6, r1
 800aa5a:	3530      	adds	r5, #48	; 0x30
 800aa5c:	2a63      	cmp	r2, #99	; 0x63
 800aa5e:	f104 34ff 	add.w	r4, r4, #4294967295
 800aa62:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800aa66:	4631      	mov	r1, r6
 800aa68:	dcf1      	bgt.n	800aa4e <__exponent+0x22>
 800aa6a:	3130      	adds	r1, #48	; 0x30
 800aa6c:	f1ae 0502 	sub.w	r5, lr, #2
 800aa70:	f804 1c01 	strb.w	r1, [r4, #-1]
 800aa74:	1c44      	adds	r4, r0, #1
 800aa76:	4629      	mov	r1, r5
 800aa78:	4561      	cmp	r1, ip
 800aa7a:	d30a      	bcc.n	800aa92 <__exponent+0x66>
 800aa7c:	f10d 0209 	add.w	r2, sp, #9
 800aa80:	eba2 020e 	sub.w	r2, r2, lr
 800aa84:	4565      	cmp	r5, ip
 800aa86:	bf88      	it	hi
 800aa88:	2200      	movhi	r2, #0
 800aa8a:	4413      	add	r3, r2
 800aa8c:	1a18      	subs	r0, r3, r0
 800aa8e:	b003      	add	sp, #12
 800aa90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa92:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa96:	f804 2f01 	strb.w	r2, [r4, #1]!
 800aa9a:	e7ed      	b.n	800aa78 <__exponent+0x4c>
 800aa9c:	2330      	movs	r3, #48	; 0x30
 800aa9e:	3130      	adds	r1, #48	; 0x30
 800aaa0:	7083      	strb	r3, [r0, #2]
 800aaa2:	70c1      	strb	r1, [r0, #3]
 800aaa4:	1d03      	adds	r3, r0, #4
 800aaa6:	e7f1      	b.n	800aa8c <__exponent+0x60>

0800aaa8 <_printf_float>:
 800aaa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaac:	ed2d 8b02 	vpush	{d8}
 800aab0:	b08d      	sub	sp, #52	; 0x34
 800aab2:	460c      	mov	r4, r1
 800aab4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800aab8:	4616      	mov	r6, r2
 800aaba:	461f      	mov	r7, r3
 800aabc:	4605      	mov	r5, r0
 800aabe:	f001 fd47 	bl	800c550 <_localeconv_r>
 800aac2:	f8d0 a000 	ldr.w	sl, [r0]
 800aac6:	4650      	mov	r0, sl
 800aac8:	f7f5 fb92 	bl	80001f0 <strlen>
 800aacc:	2300      	movs	r3, #0
 800aace:	930a      	str	r3, [sp, #40]	; 0x28
 800aad0:	6823      	ldr	r3, [r4, #0]
 800aad2:	9305      	str	r3, [sp, #20]
 800aad4:	f8d8 3000 	ldr.w	r3, [r8]
 800aad8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800aadc:	3307      	adds	r3, #7
 800aade:	f023 0307 	bic.w	r3, r3, #7
 800aae2:	f103 0208 	add.w	r2, r3, #8
 800aae6:	f8c8 2000 	str.w	r2, [r8]
 800aaea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800aaf2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800aaf6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aafa:	9307      	str	r3, [sp, #28]
 800aafc:	f8cd 8018 	str.w	r8, [sp, #24]
 800ab00:	ee08 0a10 	vmov	s16, r0
 800ab04:	4b9f      	ldr	r3, [pc, #636]	; (800ad84 <_printf_float+0x2dc>)
 800ab06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ab0e:	f7f6 f81d 	bl	8000b4c <__aeabi_dcmpun>
 800ab12:	bb88      	cbnz	r0, 800ab78 <_printf_float+0xd0>
 800ab14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab18:	4b9a      	ldr	r3, [pc, #616]	; (800ad84 <_printf_float+0x2dc>)
 800ab1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ab1e:	f7f5 fff7 	bl	8000b10 <__aeabi_dcmple>
 800ab22:	bb48      	cbnz	r0, 800ab78 <_printf_float+0xd0>
 800ab24:	2200      	movs	r2, #0
 800ab26:	2300      	movs	r3, #0
 800ab28:	4640      	mov	r0, r8
 800ab2a:	4649      	mov	r1, r9
 800ab2c:	f7f5 ffe6 	bl	8000afc <__aeabi_dcmplt>
 800ab30:	b110      	cbz	r0, 800ab38 <_printf_float+0x90>
 800ab32:	232d      	movs	r3, #45	; 0x2d
 800ab34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab38:	4b93      	ldr	r3, [pc, #588]	; (800ad88 <_printf_float+0x2e0>)
 800ab3a:	4894      	ldr	r0, [pc, #592]	; (800ad8c <_printf_float+0x2e4>)
 800ab3c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ab40:	bf94      	ite	ls
 800ab42:	4698      	movls	r8, r3
 800ab44:	4680      	movhi	r8, r0
 800ab46:	2303      	movs	r3, #3
 800ab48:	6123      	str	r3, [r4, #16]
 800ab4a:	9b05      	ldr	r3, [sp, #20]
 800ab4c:	f023 0204 	bic.w	r2, r3, #4
 800ab50:	6022      	str	r2, [r4, #0]
 800ab52:	f04f 0900 	mov.w	r9, #0
 800ab56:	9700      	str	r7, [sp, #0]
 800ab58:	4633      	mov	r3, r6
 800ab5a:	aa0b      	add	r2, sp, #44	; 0x2c
 800ab5c:	4621      	mov	r1, r4
 800ab5e:	4628      	mov	r0, r5
 800ab60:	f000 f9d8 	bl	800af14 <_printf_common>
 800ab64:	3001      	adds	r0, #1
 800ab66:	f040 8090 	bne.w	800ac8a <_printf_float+0x1e2>
 800ab6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab6e:	b00d      	add	sp, #52	; 0x34
 800ab70:	ecbd 8b02 	vpop	{d8}
 800ab74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab78:	4642      	mov	r2, r8
 800ab7a:	464b      	mov	r3, r9
 800ab7c:	4640      	mov	r0, r8
 800ab7e:	4649      	mov	r1, r9
 800ab80:	f7f5 ffe4 	bl	8000b4c <__aeabi_dcmpun>
 800ab84:	b140      	cbz	r0, 800ab98 <_printf_float+0xf0>
 800ab86:	464b      	mov	r3, r9
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	bfbc      	itt	lt
 800ab8c:	232d      	movlt	r3, #45	; 0x2d
 800ab8e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ab92:	487f      	ldr	r0, [pc, #508]	; (800ad90 <_printf_float+0x2e8>)
 800ab94:	4b7f      	ldr	r3, [pc, #508]	; (800ad94 <_printf_float+0x2ec>)
 800ab96:	e7d1      	b.n	800ab3c <_printf_float+0x94>
 800ab98:	6863      	ldr	r3, [r4, #4]
 800ab9a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ab9e:	9206      	str	r2, [sp, #24]
 800aba0:	1c5a      	adds	r2, r3, #1
 800aba2:	d13f      	bne.n	800ac24 <_printf_float+0x17c>
 800aba4:	2306      	movs	r3, #6
 800aba6:	6063      	str	r3, [r4, #4]
 800aba8:	9b05      	ldr	r3, [sp, #20]
 800abaa:	6861      	ldr	r1, [r4, #4]
 800abac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800abb0:	2300      	movs	r3, #0
 800abb2:	9303      	str	r3, [sp, #12]
 800abb4:	ab0a      	add	r3, sp, #40	; 0x28
 800abb6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800abba:	ab09      	add	r3, sp, #36	; 0x24
 800abbc:	ec49 8b10 	vmov	d0, r8, r9
 800abc0:	9300      	str	r3, [sp, #0]
 800abc2:	6022      	str	r2, [r4, #0]
 800abc4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800abc8:	4628      	mov	r0, r5
 800abca:	f7ff fecd 	bl	800a968 <__cvt>
 800abce:	9b06      	ldr	r3, [sp, #24]
 800abd0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800abd2:	2b47      	cmp	r3, #71	; 0x47
 800abd4:	4680      	mov	r8, r0
 800abd6:	d108      	bne.n	800abea <_printf_float+0x142>
 800abd8:	1cc8      	adds	r0, r1, #3
 800abda:	db02      	blt.n	800abe2 <_printf_float+0x13a>
 800abdc:	6863      	ldr	r3, [r4, #4]
 800abde:	4299      	cmp	r1, r3
 800abe0:	dd41      	ble.n	800ac66 <_printf_float+0x1be>
 800abe2:	f1ab 0b02 	sub.w	fp, fp, #2
 800abe6:	fa5f fb8b 	uxtb.w	fp, fp
 800abea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800abee:	d820      	bhi.n	800ac32 <_printf_float+0x18a>
 800abf0:	3901      	subs	r1, #1
 800abf2:	465a      	mov	r2, fp
 800abf4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800abf8:	9109      	str	r1, [sp, #36]	; 0x24
 800abfa:	f7ff ff17 	bl	800aa2c <__exponent>
 800abfe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac00:	1813      	adds	r3, r2, r0
 800ac02:	2a01      	cmp	r2, #1
 800ac04:	4681      	mov	r9, r0
 800ac06:	6123      	str	r3, [r4, #16]
 800ac08:	dc02      	bgt.n	800ac10 <_printf_float+0x168>
 800ac0a:	6822      	ldr	r2, [r4, #0]
 800ac0c:	07d2      	lsls	r2, r2, #31
 800ac0e:	d501      	bpl.n	800ac14 <_printf_float+0x16c>
 800ac10:	3301      	adds	r3, #1
 800ac12:	6123      	str	r3, [r4, #16]
 800ac14:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d09c      	beq.n	800ab56 <_printf_float+0xae>
 800ac1c:	232d      	movs	r3, #45	; 0x2d
 800ac1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac22:	e798      	b.n	800ab56 <_printf_float+0xae>
 800ac24:	9a06      	ldr	r2, [sp, #24]
 800ac26:	2a47      	cmp	r2, #71	; 0x47
 800ac28:	d1be      	bne.n	800aba8 <_printf_float+0x100>
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d1bc      	bne.n	800aba8 <_printf_float+0x100>
 800ac2e:	2301      	movs	r3, #1
 800ac30:	e7b9      	b.n	800aba6 <_printf_float+0xfe>
 800ac32:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ac36:	d118      	bne.n	800ac6a <_printf_float+0x1c2>
 800ac38:	2900      	cmp	r1, #0
 800ac3a:	6863      	ldr	r3, [r4, #4]
 800ac3c:	dd0b      	ble.n	800ac56 <_printf_float+0x1ae>
 800ac3e:	6121      	str	r1, [r4, #16]
 800ac40:	b913      	cbnz	r3, 800ac48 <_printf_float+0x1a0>
 800ac42:	6822      	ldr	r2, [r4, #0]
 800ac44:	07d0      	lsls	r0, r2, #31
 800ac46:	d502      	bpl.n	800ac4e <_printf_float+0x1a6>
 800ac48:	3301      	adds	r3, #1
 800ac4a:	440b      	add	r3, r1
 800ac4c:	6123      	str	r3, [r4, #16]
 800ac4e:	65a1      	str	r1, [r4, #88]	; 0x58
 800ac50:	f04f 0900 	mov.w	r9, #0
 800ac54:	e7de      	b.n	800ac14 <_printf_float+0x16c>
 800ac56:	b913      	cbnz	r3, 800ac5e <_printf_float+0x1b6>
 800ac58:	6822      	ldr	r2, [r4, #0]
 800ac5a:	07d2      	lsls	r2, r2, #31
 800ac5c:	d501      	bpl.n	800ac62 <_printf_float+0x1ba>
 800ac5e:	3302      	adds	r3, #2
 800ac60:	e7f4      	b.n	800ac4c <_printf_float+0x1a4>
 800ac62:	2301      	movs	r3, #1
 800ac64:	e7f2      	b.n	800ac4c <_printf_float+0x1a4>
 800ac66:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ac6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac6c:	4299      	cmp	r1, r3
 800ac6e:	db05      	blt.n	800ac7c <_printf_float+0x1d4>
 800ac70:	6823      	ldr	r3, [r4, #0]
 800ac72:	6121      	str	r1, [r4, #16]
 800ac74:	07d8      	lsls	r0, r3, #31
 800ac76:	d5ea      	bpl.n	800ac4e <_printf_float+0x1a6>
 800ac78:	1c4b      	adds	r3, r1, #1
 800ac7a:	e7e7      	b.n	800ac4c <_printf_float+0x1a4>
 800ac7c:	2900      	cmp	r1, #0
 800ac7e:	bfd4      	ite	le
 800ac80:	f1c1 0202 	rsble	r2, r1, #2
 800ac84:	2201      	movgt	r2, #1
 800ac86:	4413      	add	r3, r2
 800ac88:	e7e0      	b.n	800ac4c <_printf_float+0x1a4>
 800ac8a:	6823      	ldr	r3, [r4, #0]
 800ac8c:	055a      	lsls	r2, r3, #21
 800ac8e:	d407      	bmi.n	800aca0 <_printf_float+0x1f8>
 800ac90:	6923      	ldr	r3, [r4, #16]
 800ac92:	4642      	mov	r2, r8
 800ac94:	4631      	mov	r1, r6
 800ac96:	4628      	mov	r0, r5
 800ac98:	47b8      	blx	r7
 800ac9a:	3001      	adds	r0, #1
 800ac9c:	d12c      	bne.n	800acf8 <_printf_float+0x250>
 800ac9e:	e764      	b.n	800ab6a <_printf_float+0xc2>
 800aca0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aca4:	f240 80e0 	bls.w	800ae68 <_printf_float+0x3c0>
 800aca8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800acac:	2200      	movs	r2, #0
 800acae:	2300      	movs	r3, #0
 800acb0:	f7f5 ff1a 	bl	8000ae8 <__aeabi_dcmpeq>
 800acb4:	2800      	cmp	r0, #0
 800acb6:	d034      	beq.n	800ad22 <_printf_float+0x27a>
 800acb8:	4a37      	ldr	r2, [pc, #220]	; (800ad98 <_printf_float+0x2f0>)
 800acba:	2301      	movs	r3, #1
 800acbc:	4631      	mov	r1, r6
 800acbe:	4628      	mov	r0, r5
 800acc0:	47b8      	blx	r7
 800acc2:	3001      	adds	r0, #1
 800acc4:	f43f af51 	beq.w	800ab6a <_printf_float+0xc2>
 800acc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800accc:	429a      	cmp	r2, r3
 800acce:	db02      	blt.n	800acd6 <_printf_float+0x22e>
 800acd0:	6823      	ldr	r3, [r4, #0]
 800acd2:	07d8      	lsls	r0, r3, #31
 800acd4:	d510      	bpl.n	800acf8 <_printf_float+0x250>
 800acd6:	ee18 3a10 	vmov	r3, s16
 800acda:	4652      	mov	r2, sl
 800acdc:	4631      	mov	r1, r6
 800acde:	4628      	mov	r0, r5
 800ace0:	47b8      	blx	r7
 800ace2:	3001      	adds	r0, #1
 800ace4:	f43f af41 	beq.w	800ab6a <_printf_float+0xc2>
 800ace8:	f04f 0800 	mov.w	r8, #0
 800acec:	f104 091a 	add.w	r9, r4, #26
 800acf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acf2:	3b01      	subs	r3, #1
 800acf4:	4543      	cmp	r3, r8
 800acf6:	dc09      	bgt.n	800ad0c <_printf_float+0x264>
 800acf8:	6823      	ldr	r3, [r4, #0]
 800acfa:	079b      	lsls	r3, r3, #30
 800acfc:	f100 8105 	bmi.w	800af0a <_printf_float+0x462>
 800ad00:	68e0      	ldr	r0, [r4, #12]
 800ad02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad04:	4298      	cmp	r0, r3
 800ad06:	bfb8      	it	lt
 800ad08:	4618      	movlt	r0, r3
 800ad0a:	e730      	b.n	800ab6e <_printf_float+0xc6>
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	464a      	mov	r2, r9
 800ad10:	4631      	mov	r1, r6
 800ad12:	4628      	mov	r0, r5
 800ad14:	47b8      	blx	r7
 800ad16:	3001      	adds	r0, #1
 800ad18:	f43f af27 	beq.w	800ab6a <_printf_float+0xc2>
 800ad1c:	f108 0801 	add.w	r8, r8, #1
 800ad20:	e7e6      	b.n	800acf0 <_printf_float+0x248>
 800ad22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	dc39      	bgt.n	800ad9c <_printf_float+0x2f4>
 800ad28:	4a1b      	ldr	r2, [pc, #108]	; (800ad98 <_printf_float+0x2f0>)
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	4631      	mov	r1, r6
 800ad2e:	4628      	mov	r0, r5
 800ad30:	47b8      	blx	r7
 800ad32:	3001      	adds	r0, #1
 800ad34:	f43f af19 	beq.w	800ab6a <_printf_float+0xc2>
 800ad38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad3c:	4313      	orrs	r3, r2
 800ad3e:	d102      	bne.n	800ad46 <_printf_float+0x29e>
 800ad40:	6823      	ldr	r3, [r4, #0]
 800ad42:	07d9      	lsls	r1, r3, #31
 800ad44:	d5d8      	bpl.n	800acf8 <_printf_float+0x250>
 800ad46:	ee18 3a10 	vmov	r3, s16
 800ad4a:	4652      	mov	r2, sl
 800ad4c:	4631      	mov	r1, r6
 800ad4e:	4628      	mov	r0, r5
 800ad50:	47b8      	blx	r7
 800ad52:	3001      	adds	r0, #1
 800ad54:	f43f af09 	beq.w	800ab6a <_printf_float+0xc2>
 800ad58:	f04f 0900 	mov.w	r9, #0
 800ad5c:	f104 0a1a 	add.w	sl, r4, #26
 800ad60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad62:	425b      	negs	r3, r3
 800ad64:	454b      	cmp	r3, r9
 800ad66:	dc01      	bgt.n	800ad6c <_printf_float+0x2c4>
 800ad68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad6a:	e792      	b.n	800ac92 <_printf_float+0x1ea>
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	4652      	mov	r2, sl
 800ad70:	4631      	mov	r1, r6
 800ad72:	4628      	mov	r0, r5
 800ad74:	47b8      	blx	r7
 800ad76:	3001      	adds	r0, #1
 800ad78:	f43f aef7 	beq.w	800ab6a <_printf_float+0xc2>
 800ad7c:	f109 0901 	add.w	r9, r9, #1
 800ad80:	e7ee      	b.n	800ad60 <_printf_float+0x2b8>
 800ad82:	bf00      	nop
 800ad84:	7fefffff 	.word	0x7fefffff
 800ad88:	0800eff4 	.word	0x0800eff4
 800ad8c:	0800eff8 	.word	0x0800eff8
 800ad90:	0800f000 	.word	0x0800f000
 800ad94:	0800effc 	.word	0x0800effc
 800ad98:	0800f004 	.word	0x0800f004
 800ad9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ada0:	429a      	cmp	r2, r3
 800ada2:	bfa8      	it	ge
 800ada4:	461a      	movge	r2, r3
 800ada6:	2a00      	cmp	r2, #0
 800ada8:	4691      	mov	r9, r2
 800adaa:	dc37      	bgt.n	800ae1c <_printf_float+0x374>
 800adac:	f04f 0b00 	mov.w	fp, #0
 800adb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800adb4:	f104 021a 	add.w	r2, r4, #26
 800adb8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800adba:	9305      	str	r3, [sp, #20]
 800adbc:	eba3 0309 	sub.w	r3, r3, r9
 800adc0:	455b      	cmp	r3, fp
 800adc2:	dc33      	bgt.n	800ae2c <_printf_float+0x384>
 800adc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800adc8:	429a      	cmp	r2, r3
 800adca:	db3b      	blt.n	800ae44 <_printf_float+0x39c>
 800adcc:	6823      	ldr	r3, [r4, #0]
 800adce:	07da      	lsls	r2, r3, #31
 800add0:	d438      	bmi.n	800ae44 <_printf_float+0x39c>
 800add2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800add4:	9a05      	ldr	r2, [sp, #20]
 800add6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800add8:	1a9a      	subs	r2, r3, r2
 800adda:	eba3 0901 	sub.w	r9, r3, r1
 800adde:	4591      	cmp	r9, r2
 800ade0:	bfa8      	it	ge
 800ade2:	4691      	movge	r9, r2
 800ade4:	f1b9 0f00 	cmp.w	r9, #0
 800ade8:	dc35      	bgt.n	800ae56 <_printf_float+0x3ae>
 800adea:	f04f 0800 	mov.w	r8, #0
 800adee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800adf2:	f104 0a1a 	add.w	sl, r4, #26
 800adf6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800adfa:	1a9b      	subs	r3, r3, r2
 800adfc:	eba3 0309 	sub.w	r3, r3, r9
 800ae00:	4543      	cmp	r3, r8
 800ae02:	f77f af79 	ble.w	800acf8 <_printf_float+0x250>
 800ae06:	2301      	movs	r3, #1
 800ae08:	4652      	mov	r2, sl
 800ae0a:	4631      	mov	r1, r6
 800ae0c:	4628      	mov	r0, r5
 800ae0e:	47b8      	blx	r7
 800ae10:	3001      	adds	r0, #1
 800ae12:	f43f aeaa 	beq.w	800ab6a <_printf_float+0xc2>
 800ae16:	f108 0801 	add.w	r8, r8, #1
 800ae1a:	e7ec      	b.n	800adf6 <_printf_float+0x34e>
 800ae1c:	4613      	mov	r3, r2
 800ae1e:	4631      	mov	r1, r6
 800ae20:	4642      	mov	r2, r8
 800ae22:	4628      	mov	r0, r5
 800ae24:	47b8      	blx	r7
 800ae26:	3001      	adds	r0, #1
 800ae28:	d1c0      	bne.n	800adac <_printf_float+0x304>
 800ae2a:	e69e      	b.n	800ab6a <_printf_float+0xc2>
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	4631      	mov	r1, r6
 800ae30:	4628      	mov	r0, r5
 800ae32:	9205      	str	r2, [sp, #20]
 800ae34:	47b8      	blx	r7
 800ae36:	3001      	adds	r0, #1
 800ae38:	f43f ae97 	beq.w	800ab6a <_printf_float+0xc2>
 800ae3c:	9a05      	ldr	r2, [sp, #20]
 800ae3e:	f10b 0b01 	add.w	fp, fp, #1
 800ae42:	e7b9      	b.n	800adb8 <_printf_float+0x310>
 800ae44:	ee18 3a10 	vmov	r3, s16
 800ae48:	4652      	mov	r2, sl
 800ae4a:	4631      	mov	r1, r6
 800ae4c:	4628      	mov	r0, r5
 800ae4e:	47b8      	blx	r7
 800ae50:	3001      	adds	r0, #1
 800ae52:	d1be      	bne.n	800add2 <_printf_float+0x32a>
 800ae54:	e689      	b.n	800ab6a <_printf_float+0xc2>
 800ae56:	9a05      	ldr	r2, [sp, #20]
 800ae58:	464b      	mov	r3, r9
 800ae5a:	4442      	add	r2, r8
 800ae5c:	4631      	mov	r1, r6
 800ae5e:	4628      	mov	r0, r5
 800ae60:	47b8      	blx	r7
 800ae62:	3001      	adds	r0, #1
 800ae64:	d1c1      	bne.n	800adea <_printf_float+0x342>
 800ae66:	e680      	b.n	800ab6a <_printf_float+0xc2>
 800ae68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae6a:	2a01      	cmp	r2, #1
 800ae6c:	dc01      	bgt.n	800ae72 <_printf_float+0x3ca>
 800ae6e:	07db      	lsls	r3, r3, #31
 800ae70:	d538      	bpl.n	800aee4 <_printf_float+0x43c>
 800ae72:	2301      	movs	r3, #1
 800ae74:	4642      	mov	r2, r8
 800ae76:	4631      	mov	r1, r6
 800ae78:	4628      	mov	r0, r5
 800ae7a:	47b8      	blx	r7
 800ae7c:	3001      	adds	r0, #1
 800ae7e:	f43f ae74 	beq.w	800ab6a <_printf_float+0xc2>
 800ae82:	ee18 3a10 	vmov	r3, s16
 800ae86:	4652      	mov	r2, sl
 800ae88:	4631      	mov	r1, r6
 800ae8a:	4628      	mov	r0, r5
 800ae8c:	47b8      	blx	r7
 800ae8e:	3001      	adds	r0, #1
 800ae90:	f43f ae6b 	beq.w	800ab6a <_printf_float+0xc2>
 800ae94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ae98:	2200      	movs	r2, #0
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	f7f5 fe24 	bl	8000ae8 <__aeabi_dcmpeq>
 800aea0:	b9d8      	cbnz	r0, 800aeda <_printf_float+0x432>
 800aea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aea4:	f108 0201 	add.w	r2, r8, #1
 800aea8:	3b01      	subs	r3, #1
 800aeaa:	4631      	mov	r1, r6
 800aeac:	4628      	mov	r0, r5
 800aeae:	47b8      	blx	r7
 800aeb0:	3001      	adds	r0, #1
 800aeb2:	d10e      	bne.n	800aed2 <_printf_float+0x42a>
 800aeb4:	e659      	b.n	800ab6a <_printf_float+0xc2>
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	4652      	mov	r2, sl
 800aeba:	4631      	mov	r1, r6
 800aebc:	4628      	mov	r0, r5
 800aebe:	47b8      	blx	r7
 800aec0:	3001      	adds	r0, #1
 800aec2:	f43f ae52 	beq.w	800ab6a <_printf_float+0xc2>
 800aec6:	f108 0801 	add.w	r8, r8, #1
 800aeca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aecc:	3b01      	subs	r3, #1
 800aece:	4543      	cmp	r3, r8
 800aed0:	dcf1      	bgt.n	800aeb6 <_printf_float+0x40e>
 800aed2:	464b      	mov	r3, r9
 800aed4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aed8:	e6dc      	b.n	800ac94 <_printf_float+0x1ec>
 800aeda:	f04f 0800 	mov.w	r8, #0
 800aede:	f104 0a1a 	add.w	sl, r4, #26
 800aee2:	e7f2      	b.n	800aeca <_printf_float+0x422>
 800aee4:	2301      	movs	r3, #1
 800aee6:	4642      	mov	r2, r8
 800aee8:	e7df      	b.n	800aeaa <_printf_float+0x402>
 800aeea:	2301      	movs	r3, #1
 800aeec:	464a      	mov	r2, r9
 800aeee:	4631      	mov	r1, r6
 800aef0:	4628      	mov	r0, r5
 800aef2:	47b8      	blx	r7
 800aef4:	3001      	adds	r0, #1
 800aef6:	f43f ae38 	beq.w	800ab6a <_printf_float+0xc2>
 800aefa:	f108 0801 	add.w	r8, r8, #1
 800aefe:	68e3      	ldr	r3, [r4, #12]
 800af00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af02:	1a5b      	subs	r3, r3, r1
 800af04:	4543      	cmp	r3, r8
 800af06:	dcf0      	bgt.n	800aeea <_printf_float+0x442>
 800af08:	e6fa      	b.n	800ad00 <_printf_float+0x258>
 800af0a:	f04f 0800 	mov.w	r8, #0
 800af0e:	f104 0919 	add.w	r9, r4, #25
 800af12:	e7f4      	b.n	800aefe <_printf_float+0x456>

0800af14 <_printf_common>:
 800af14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af18:	4616      	mov	r6, r2
 800af1a:	4699      	mov	r9, r3
 800af1c:	688a      	ldr	r2, [r1, #8]
 800af1e:	690b      	ldr	r3, [r1, #16]
 800af20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af24:	4293      	cmp	r3, r2
 800af26:	bfb8      	it	lt
 800af28:	4613      	movlt	r3, r2
 800af2a:	6033      	str	r3, [r6, #0]
 800af2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af30:	4607      	mov	r7, r0
 800af32:	460c      	mov	r4, r1
 800af34:	b10a      	cbz	r2, 800af3a <_printf_common+0x26>
 800af36:	3301      	adds	r3, #1
 800af38:	6033      	str	r3, [r6, #0]
 800af3a:	6823      	ldr	r3, [r4, #0]
 800af3c:	0699      	lsls	r1, r3, #26
 800af3e:	bf42      	ittt	mi
 800af40:	6833      	ldrmi	r3, [r6, #0]
 800af42:	3302      	addmi	r3, #2
 800af44:	6033      	strmi	r3, [r6, #0]
 800af46:	6825      	ldr	r5, [r4, #0]
 800af48:	f015 0506 	ands.w	r5, r5, #6
 800af4c:	d106      	bne.n	800af5c <_printf_common+0x48>
 800af4e:	f104 0a19 	add.w	sl, r4, #25
 800af52:	68e3      	ldr	r3, [r4, #12]
 800af54:	6832      	ldr	r2, [r6, #0]
 800af56:	1a9b      	subs	r3, r3, r2
 800af58:	42ab      	cmp	r3, r5
 800af5a:	dc26      	bgt.n	800afaa <_printf_common+0x96>
 800af5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800af60:	1e13      	subs	r3, r2, #0
 800af62:	6822      	ldr	r2, [r4, #0]
 800af64:	bf18      	it	ne
 800af66:	2301      	movne	r3, #1
 800af68:	0692      	lsls	r2, r2, #26
 800af6a:	d42b      	bmi.n	800afc4 <_printf_common+0xb0>
 800af6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af70:	4649      	mov	r1, r9
 800af72:	4638      	mov	r0, r7
 800af74:	47c0      	blx	r8
 800af76:	3001      	adds	r0, #1
 800af78:	d01e      	beq.n	800afb8 <_printf_common+0xa4>
 800af7a:	6823      	ldr	r3, [r4, #0]
 800af7c:	68e5      	ldr	r5, [r4, #12]
 800af7e:	6832      	ldr	r2, [r6, #0]
 800af80:	f003 0306 	and.w	r3, r3, #6
 800af84:	2b04      	cmp	r3, #4
 800af86:	bf08      	it	eq
 800af88:	1aad      	subeq	r5, r5, r2
 800af8a:	68a3      	ldr	r3, [r4, #8]
 800af8c:	6922      	ldr	r2, [r4, #16]
 800af8e:	bf0c      	ite	eq
 800af90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af94:	2500      	movne	r5, #0
 800af96:	4293      	cmp	r3, r2
 800af98:	bfc4      	itt	gt
 800af9a:	1a9b      	subgt	r3, r3, r2
 800af9c:	18ed      	addgt	r5, r5, r3
 800af9e:	2600      	movs	r6, #0
 800afa0:	341a      	adds	r4, #26
 800afa2:	42b5      	cmp	r5, r6
 800afa4:	d11a      	bne.n	800afdc <_printf_common+0xc8>
 800afa6:	2000      	movs	r0, #0
 800afa8:	e008      	b.n	800afbc <_printf_common+0xa8>
 800afaa:	2301      	movs	r3, #1
 800afac:	4652      	mov	r2, sl
 800afae:	4649      	mov	r1, r9
 800afb0:	4638      	mov	r0, r7
 800afb2:	47c0      	blx	r8
 800afb4:	3001      	adds	r0, #1
 800afb6:	d103      	bne.n	800afc0 <_printf_common+0xac>
 800afb8:	f04f 30ff 	mov.w	r0, #4294967295
 800afbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afc0:	3501      	adds	r5, #1
 800afc2:	e7c6      	b.n	800af52 <_printf_common+0x3e>
 800afc4:	18e1      	adds	r1, r4, r3
 800afc6:	1c5a      	adds	r2, r3, #1
 800afc8:	2030      	movs	r0, #48	; 0x30
 800afca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800afce:	4422      	add	r2, r4
 800afd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800afd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800afd8:	3302      	adds	r3, #2
 800afda:	e7c7      	b.n	800af6c <_printf_common+0x58>
 800afdc:	2301      	movs	r3, #1
 800afde:	4622      	mov	r2, r4
 800afe0:	4649      	mov	r1, r9
 800afe2:	4638      	mov	r0, r7
 800afe4:	47c0      	blx	r8
 800afe6:	3001      	adds	r0, #1
 800afe8:	d0e6      	beq.n	800afb8 <_printf_common+0xa4>
 800afea:	3601      	adds	r6, #1
 800afec:	e7d9      	b.n	800afa2 <_printf_common+0x8e>
	...

0800aff0 <_printf_i>:
 800aff0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aff4:	7e0f      	ldrb	r7, [r1, #24]
 800aff6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aff8:	2f78      	cmp	r7, #120	; 0x78
 800affa:	4691      	mov	r9, r2
 800affc:	4680      	mov	r8, r0
 800affe:	460c      	mov	r4, r1
 800b000:	469a      	mov	sl, r3
 800b002:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b006:	d807      	bhi.n	800b018 <_printf_i+0x28>
 800b008:	2f62      	cmp	r7, #98	; 0x62
 800b00a:	d80a      	bhi.n	800b022 <_printf_i+0x32>
 800b00c:	2f00      	cmp	r7, #0
 800b00e:	f000 80d8 	beq.w	800b1c2 <_printf_i+0x1d2>
 800b012:	2f58      	cmp	r7, #88	; 0x58
 800b014:	f000 80a3 	beq.w	800b15e <_printf_i+0x16e>
 800b018:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b01c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b020:	e03a      	b.n	800b098 <_printf_i+0xa8>
 800b022:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b026:	2b15      	cmp	r3, #21
 800b028:	d8f6      	bhi.n	800b018 <_printf_i+0x28>
 800b02a:	a101      	add	r1, pc, #4	; (adr r1, 800b030 <_printf_i+0x40>)
 800b02c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b030:	0800b089 	.word	0x0800b089
 800b034:	0800b09d 	.word	0x0800b09d
 800b038:	0800b019 	.word	0x0800b019
 800b03c:	0800b019 	.word	0x0800b019
 800b040:	0800b019 	.word	0x0800b019
 800b044:	0800b019 	.word	0x0800b019
 800b048:	0800b09d 	.word	0x0800b09d
 800b04c:	0800b019 	.word	0x0800b019
 800b050:	0800b019 	.word	0x0800b019
 800b054:	0800b019 	.word	0x0800b019
 800b058:	0800b019 	.word	0x0800b019
 800b05c:	0800b1a9 	.word	0x0800b1a9
 800b060:	0800b0cd 	.word	0x0800b0cd
 800b064:	0800b18b 	.word	0x0800b18b
 800b068:	0800b019 	.word	0x0800b019
 800b06c:	0800b019 	.word	0x0800b019
 800b070:	0800b1cb 	.word	0x0800b1cb
 800b074:	0800b019 	.word	0x0800b019
 800b078:	0800b0cd 	.word	0x0800b0cd
 800b07c:	0800b019 	.word	0x0800b019
 800b080:	0800b019 	.word	0x0800b019
 800b084:	0800b193 	.word	0x0800b193
 800b088:	682b      	ldr	r3, [r5, #0]
 800b08a:	1d1a      	adds	r2, r3, #4
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	602a      	str	r2, [r5, #0]
 800b090:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b094:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b098:	2301      	movs	r3, #1
 800b09a:	e0a3      	b.n	800b1e4 <_printf_i+0x1f4>
 800b09c:	6820      	ldr	r0, [r4, #0]
 800b09e:	6829      	ldr	r1, [r5, #0]
 800b0a0:	0606      	lsls	r6, r0, #24
 800b0a2:	f101 0304 	add.w	r3, r1, #4
 800b0a6:	d50a      	bpl.n	800b0be <_printf_i+0xce>
 800b0a8:	680e      	ldr	r6, [r1, #0]
 800b0aa:	602b      	str	r3, [r5, #0]
 800b0ac:	2e00      	cmp	r6, #0
 800b0ae:	da03      	bge.n	800b0b8 <_printf_i+0xc8>
 800b0b0:	232d      	movs	r3, #45	; 0x2d
 800b0b2:	4276      	negs	r6, r6
 800b0b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0b8:	485e      	ldr	r0, [pc, #376]	; (800b234 <_printf_i+0x244>)
 800b0ba:	230a      	movs	r3, #10
 800b0bc:	e019      	b.n	800b0f2 <_printf_i+0x102>
 800b0be:	680e      	ldr	r6, [r1, #0]
 800b0c0:	602b      	str	r3, [r5, #0]
 800b0c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b0c6:	bf18      	it	ne
 800b0c8:	b236      	sxthne	r6, r6
 800b0ca:	e7ef      	b.n	800b0ac <_printf_i+0xbc>
 800b0cc:	682b      	ldr	r3, [r5, #0]
 800b0ce:	6820      	ldr	r0, [r4, #0]
 800b0d0:	1d19      	adds	r1, r3, #4
 800b0d2:	6029      	str	r1, [r5, #0]
 800b0d4:	0601      	lsls	r1, r0, #24
 800b0d6:	d501      	bpl.n	800b0dc <_printf_i+0xec>
 800b0d8:	681e      	ldr	r6, [r3, #0]
 800b0da:	e002      	b.n	800b0e2 <_printf_i+0xf2>
 800b0dc:	0646      	lsls	r6, r0, #25
 800b0de:	d5fb      	bpl.n	800b0d8 <_printf_i+0xe8>
 800b0e0:	881e      	ldrh	r6, [r3, #0]
 800b0e2:	4854      	ldr	r0, [pc, #336]	; (800b234 <_printf_i+0x244>)
 800b0e4:	2f6f      	cmp	r7, #111	; 0x6f
 800b0e6:	bf0c      	ite	eq
 800b0e8:	2308      	moveq	r3, #8
 800b0ea:	230a      	movne	r3, #10
 800b0ec:	2100      	movs	r1, #0
 800b0ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b0f2:	6865      	ldr	r5, [r4, #4]
 800b0f4:	60a5      	str	r5, [r4, #8]
 800b0f6:	2d00      	cmp	r5, #0
 800b0f8:	bfa2      	ittt	ge
 800b0fa:	6821      	ldrge	r1, [r4, #0]
 800b0fc:	f021 0104 	bicge.w	r1, r1, #4
 800b100:	6021      	strge	r1, [r4, #0]
 800b102:	b90e      	cbnz	r6, 800b108 <_printf_i+0x118>
 800b104:	2d00      	cmp	r5, #0
 800b106:	d04d      	beq.n	800b1a4 <_printf_i+0x1b4>
 800b108:	4615      	mov	r5, r2
 800b10a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b10e:	fb03 6711 	mls	r7, r3, r1, r6
 800b112:	5dc7      	ldrb	r7, [r0, r7]
 800b114:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b118:	4637      	mov	r7, r6
 800b11a:	42bb      	cmp	r3, r7
 800b11c:	460e      	mov	r6, r1
 800b11e:	d9f4      	bls.n	800b10a <_printf_i+0x11a>
 800b120:	2b08      	cmp	r3, #8
 800b122:	d10b      	bne.n	800b13c <_printf_i+0x14c>
 800b124:	6823      	ldr	r3, [r4, #0]
 800b126:	07de      	lsls	r6, r3, #31
 800b128:	d508      	bpl.n	800b13c <_printf_i+0x14c>
 800b12a:	6923      	ldr	r3, [r4, #16]
 800b12c:	6861      	ldr	r1, [r4, #4]
 800b12e:	4299      	cmp	r1, r3
 800b130:	bfde      	ittt	le
 800b132:	2330      	movle	r3, #48	; 0x30
 800b134:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b138:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b13c:	1b52      	subs	r2, r2, r5
 800b13e:	6122      	str	r2, [r4, #16]
 800b140:	f8cd a000 	str.w	sl, [sp]
 800b144:	464b      	mov	r3, r9
 800b146:	aa03      	add	r2, sp, #12
 800b148:	4621      	mov	r1, r4
 800b14a:	4640      	mov	r0, r8
 800b14c:	f7ff fee2 	bl	800af14 <_printf_common>
 800b150:	3001      	adds	r0, #1
 800b152:	d14c      	bne.n	800b1ee <_printf_i+0x1fe>
 800b154:	f04f 30ff 	mov.w	r0, #4294967295
 800b158:	b004      	add	sp, #16
 800b15a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b15e:	4835      	ldr	r0, [pc, #212]	; (800b234 <_printf_i+0x244>)
 800b160:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b164:	6829      	ldr	r1, [r5, #0]
 800b166:	6823      	ldr	r3, [r4, #0]
 800b168:	f851 6b04 	ldr.w	r6, [r1], #4
 800b16c:	6029      	str	r1, [r5, #0]
 800b16e:	061d      	lsls	r5, r3, #24
 800b170:	d514      	bpl.n	800b19c <_printf_i+0x1ac>
 800b172:	07df      	lsls	r7, r3, #31
 800b174:	bf44      	itt	mi
 800b176:	f043 0320 	orrmi.w	r3, r3, #32
 800b17a:	6023      	strmi	r3, [r4, #0]
 800b17c:	b91e      	cbnz	r6, 800b186 <_printf_i+0x196>
 800b17e:	6823      	ldr	r3, [r4, #0]
 800b180:	f023 0320 	bic.w	r3, r3, #32
 800b184:	6023      	str	r3, [r4, #0]
 800b186:	2310      	movs	r3, #16
 800b188:	e7b0      	b.n	800b0ec <_printf_i+0xfc>
 800b18a:	6823      	ldr	r3, [r4, #0]
 800b18c:	f043 0320 	orr.w	r3, r3, #32
 800b190:	6023      	str	r3, [r4, #0]
 800b192:	2378      	movs	r3, #120	; 0x78
 800b194:	4828      	ldr	r0, [pc, #160]	; (800b238 <_printf_i+0x248>)
 800b196:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b19a:	e7e3      	b.n	800b164 <_printf_i+0x174>
 800b19c:	0659      	lsls	r1, r3, #25
 800b19e:	bf48      	it	mi
 800b1a0:	b2b6      	uxthmi	r6, r6
 800b1a2:	e7e6      	b.n	800b172 <_printf_i+0x182>
 800b1a4:	4615      	mov	r5, r2
 800b1a6:	e7bb      	b.n	800b120 <_printf_i+0x130>
 800b1a8:	682b      	ldr	r3, [r5, #0]
 800b1aa:	6826      	ldr	r6, [r4, #0]
 800b1ac:	6961      	ldr	r1, [r4, #20]
 800b1ae:	1d18      	adds	r0, r3, #4
 800b1b0:	6028      	str	r0, [r5, #0]
 800b1b2:	0635      	lsls	r5, r6, #24
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	d501      	bpl.n	800b1bc <_printf_i+0x1cc>
 800b1b8:	6019      	str	r1, [r3, #0]
 800b1ba:	e002      	b.n	800b1c2 <_printf_i+0x1d2>
 800b1bc:	0670      	lsls	r0, r6, #25
 800b1be:	d5fb      	bpl.n	800b1b8 <_printf_i+0x1c8>
 800b1c0:	8019      	strh	r1, [r3, #0]
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	6123      	str	r3, [r4, #16]
 800b1c6:	4615      	mov	r5, r2
 800b1c8:	e7ba      	b.n	800b140 <_printf_i+0x150>
 800b1ca:	682b      	ldr	r3, [r5, #0]
 800b1cc:	1d1a      	adds	r2, r3, #4
 800b1ce:	602a      	str	r2, [r5, #0]
 800b1d0:	681d      	ldr	r5, [r3, #0]
 800b1d2:	6862      	ldr	r2, [r4, #4]
 800b1d4:	2100      	movs	r1, #0
 800b1d6:	4628      	mov	r0, r5
 800b1d8:	f7f5 f812 	bl	8000200 <memchr>
 800b1dc:	b108      	cbz	r0, 800b1e2 <_printf_i+0x1f2>
 800b1de:	1b40      	subs	r0, r0, r5
 800b1e0:	6060      	str	r0, [r4, #4]
 800b1e2:	6863      	ldr	r3, [r4, #4]
 800b1e4:	6123      	str	r3, [r4, #16]
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1ec:	e7a8      	b.n	800b140 <_printf_i+0x150>
 800b1ee:	6923      	ldr	r3, [r4, #16]
 800b1f0:	462a      	mov	r2, r5
 800b1f2:	4649      	mov	r1, r9
 800b1f4:	4640      	mov	r0, r8
 800b1f6:	47d0      	blx	sl
 800b1f8:	3001      	adds	r0, #1
 800b1fa:	d0ab      	beq.n	800b154 <_printf_i+0x164>
 800b1fc:	6823      	ldr	r3, [r4, #0]
 800b1fe:	079b      	lsls	r3, r3, #30
 800b200:	d413      	bmi.n	800b22a <_printf_i+0x23a>
 800b202:	68e0      	ldr	r0, [r4, #12]
 800b204:	9b03      	ldr	r3, [sp, #12]
 800b206:	4298      	cmp	r0, r3
 800b208:	bfb8      	it	lt
 800b20a:	4618      	movlt	r0, r3
 800b20c:	e7a4      	b.n	800b158 <_printf_i+0x168>
 800b20e:	2301      	movs	r3, #1
 800b210:	4632      	mov	r2, r6
 800b212:	4649      	mov	r1, r9
 800b214:	4640      	mov	r0, r8
 800b216:	47d0      	blx	sl
 800b218:	3001      	adds	r0, #1
 800b21a:	d09b      	beq.n	800b154 <_printf_i+0x164>
 800b21c:	3501      	adds	r5, #1
 800b21e:	68e3      	ldr	r3, [r4, #12]
 800b220:	9903      	ldr	r1, [sp, #12]
 800b222:	1a5b      	subs	r3, r3, r1
 800b224:	42ab      	cmp	r3, r5
 800b226:	dcf2      	bgt.n	800b20e <_printf_i+0x21e>
 800b228:	e7eb      	b.n	800b202 <_printf_i+0x212>
 800b22a:	2500      	movs	r5, #0
 800b22c:	f104 0619 	add.w	r6, r4, #25
 800b230:	e7f5      	b.n	800b21e <_printf_i+0x22e>
 800b232:	bf00      	nop
 800b234:	0800f006 	.word	0x0800f006
 800b238:	0800f017 	.word	0x0800f017

0800b23c <iprintf>:
 800b23c:	b40f      	push	{r0, r1, r2, r3}
 800b23e:	4b0a      	ldr	r3, [pc, #40]	; (800b268 <iprintf+0x2c>)
 800b240:	b513      	push	{r0, r1, r4, lr}
 800b242:	681c      	ldr	r4, [r3, #0]
 800b244:	b124      	cbz	r4, 800b250 <iprintf+0x14>
 800b246:	69a3      	ldr	r3, [r4, #24]
 800b248:	b913      	cbnz	r3, 800b250 <iprintf+0x14>
 800b24a:	4620      	mov	r0, r4
 800b24c:	f7ff fa1c 	bl	800a688 <__sinit>
 800b250:	ab05      	add	r3, sp, #20
 800b252:	9a04      	ldr	r2, [sp, #16]
 800b254:	68a1      	ldr	r1, [r4, #8]
 800b256:	9301      	str	r3, [sp, #4]
 800b258:	4620      	mov	r0, r4
 800b25a:	f001 ff75 	bl	800d148 <_vfiprintf_r>
 800b25e:	b002      	add	sp, #8
 800b260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b264:	b004      	add	sp, #16
 800b266:	4770      	bx	lr
 800b268:	20000058 	.word	0x20000058

0800b26c <_puts_r>:
 800b26c:	b570      	push	{r4, r5, r6, lr}
 800b26e:	460e      	mov	r6, r1
 800b270:	4605      	mov	r5, r0
 800b272:	b118      	cbz	r0, 800b27c <_puts_r+0x10>
 800b274:	6983      	ldr	r3, [r0, #24]
 800b276:	b90b      	cbnz	r3, 800b27c <_puts_r+0x10>
 800b278:	f7ff fa06 	bl	800a688 <__sinit>
 800b27c:	69ab      	ldr	r3, [r5, #24]
 800b27e:	68ac      	ldr	r4, [r5, #8]
 800b280:	b913      	cbnz	r3, 800b288 <_puts_r+0x1c>
 800b282:	4628      	mov	r0, r5
 800b284:	f7ff fa00 	bl	800a688 <__sinit>
 800b288:	4b2c      	ldr	r3, [pc, #176]	; (800b33c <_puts_r+0xd0>)
 800b28a:	429c      	cmp	r4, r3
 800b28c:	d120      	bne.n	800b2d0 <_puts_r+0x64>
 800b28e:	686c      	ldr	r4, [r5, #4]
 800b290:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b292:	07db      	lsls	r3, r3, #31
 800b294:	d405      	bmi.n	800b2a2 <_puts_r+0x36>
 800b296:	89a3      	ldrh	r3, [r4, #12]
 800b298:	0598      	lsls	r0, r3, #22
 800b29a:	d402      	bmi.n	800b2a2 <_puts_r+0x36>
 800b29c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b29e:	f7ff fab6 	bl	800a80e <__retarget_lock_acquire_recursive>
 800b2a2:	89a3      	ldrh	r3, [r4, #12]
 800b2a4:	0719      	lsls	r1, r3, #28
 800b2a6:	d51d      	bpl.n	800b2e4 <_puts_r+0x78>
 800b2a8:	6923      	ldr	r3, [r4, #16]
 800b2aa:	b1db      	cbz	r3, 800b2e4 <_puts_r+0x78>
 800b2ac:	3e01      	subs	r6, #1
 800b2ae:	68a3      	ldr	r3, [r4, #8]
 800b2b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b2b4:	3b01      	subs	r3, #1
 800b2b6:	60a3      	str	r3, [r4, #8]
 800b2b8:	bb39      	cbnz	r1, 800b30a <_puts_r+0x9e>
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	da38      	bge.n	800b330 <_puts_r+0xc4>
 800b2be:	4622      	mov	r2, r4
 800b2c0:	210a      	movs	r1, #10
 800b2c2:	4628      	mov	r0, r5
 800b2c4:	f000 f926 	bl	800b514 <__swbuf_r>
 800b2c8:	3001      	adds	r0, #1
 800b2ca:	d011      	beq.n	800b2f0 <_puts_r+0x84>
 800b2cc:	250a      	movs	r5, #10
 800b2ce:	e011      	b.n	800b2f4 <_puts_r+0x88>
 800b2d0:	4b1b      	ldr	r3, [pc, #108]	; (800b340 <_puts_r+0xd4>)
 800b2d2:	429c      	cmp	r4, r3
 800b2d4:	d101      	bne.n	800b2da <_puts_r+0x6e>
 800b2d6:	68ac      	ldr	r4, [r5, #8]
 800b2d8:	e7da      	b.n	800b290 <_puts_r+0x24>
 800b2da:	4b1a      	ldr	r3, [pc, #104]	; (800b344 <_puts_r+0xd8>)
 800b2dc:	429c      	cmp	r4, r3
 800b2de:	bf08      	it	eq
 800b2e0:	68ec      	ldreq	r4, [r5, #12]
 800b2e2:	e7d5      	b.n	800b290 <_puts_r+0x24>
 800b2e4:	4621      	mov	r1, r4
 800b2e6:	4628      	mov	r0, r5
 800b2e8:	f000 f978 	bl	800b5dc <__swsetup_r>
 800b2ec:	2800      	cmp	r0, #0
 800b2ee:	d0dd      	beq.n	800b2ac <_puts_r+0x40>
 800b2f0:	f04f 35ff 	mov.w	r5, #4294967295
 800b2f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b2f6:	07da      	lsls	r2, r3, #31
 800b2f8:	d405      	bmi.n	800b306 <_puts_r+0x9a>
 800b2fa:	89a3      	ldrh	r3, [r4, #12]
 800b2fc:	059b      	lsls	r3, r3, #22
 800b2fe:	d402      	bmi.n	800b306 <_puts_r+0x9a>
 800b300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b302:	f7ff fa85 	bl	800a810 <__retarget_lock_release_recursive>
 800b306:	4628      	mov	r0, r5
 800b308:	bd70      	pop	{r4, r5, r6, pc}
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	da04      	bge.n	800b318 <_puts_r+0xac>
 800b30e:	69a2      	ldr	r2, [r4, #24]
 800b310:	429a      	cmp	r2, r3
 800b312:	dc06      	bgt.n	800b322 <_puts_r+0xb6>
 800b314:	290a      	cmp	r1, #10
 800b316:	d004      	beq.n	800b322 <_puts_r+0xb6>
 800b318:	6823      	ldr	r3, [r4, #0]
 800b31a:	1c5a      	adds	r2, r3, #1
 800b31c:	6022      	str	r2, [r4, #0]
 800b31e:	7019      	strb	r1, [r3, #0]
 800b320:	e7c5      	b.n	800b2ae <_puts_r+0x42>
 800b322:	4622      	mov	r2, r4
 800b324:	4628      	mov	r0, r5
 800b326:	f000 f8f5 	bl	800b514 <__swbuf_r>
 800b32a:	3001      	adds	r0, #1
 800b32c:	d1bf      	bne.n	800b2ae <_puts_r+0x42>
 800b32e:	e7df      	b.n	800b2f0 <_puts_r+0x84>
 800b330:	6823      	ldr	r3, [r4, #0]
 800b332:	250a      	movs	r5, #10
 800b334:	1c5a      	adds	r2, r3, #1
 800b336:	6022      	str	r2, [r4, #0]
 800b338:	701d      	strb	r5, [r3, #0]
 800b33a:	e7db      	b.n	800b2f4 <_puts_r+0x88>
 800b33c:	0800efb0 	.word	0x0800efb0
 800b340:	0800efd0 	.word	0x0800efd0
 800b344:	0800ef90 	.word	0x0800ef90

0800b348 <puts>:
 800b348:	4b02      	ldr	r3, [pc, #8]	; (800b354 <puts+0xc>)
 800b34a:	4601      	mov	r1, r0
 800b34c:	6818      	ldr	r0, [r3, #0]
 800b34e:	f7ff bf8d 	b.w	800b26c <_puts_r>
 800b352:	bf00      	nop
 800b354:	20000058 	.word	0x20000058

0800b358 <cleanup_glue>:
 800b358:	b538      	push	{r3, r4, r5, lr}
 800b35a:	460c      	mov	r4, r1
 800b35c:	6809      	ldr	r1, [r1, #0]
 800b35e:	4605      	mov	r5, r0
 800b360:	b109      	cbz	r1, 800b366 <cleanup_glue+0xe>
 800b362:	f7ff fff9 	bl	800b358 <cleanup_glue>
 800b366:	4621      	mov	r1, r4
 800b368:	4628      	mov	r0, r5
 800b36a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b36e:	f001 bd19 	b.w	800cda4 <_free_r>
	...

0800b374 <_reclaim_reent>:
 800b374:	4b2c      	ldr	r3, [pc, #176]	; (800b428 <_reclaim_reent+0xb4>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	4283      	cmp	r3, r0
 800b37a:	b570      	push	{r4, r5, r6, lr}
 800b37c:	4604      	mov	r4, r0
 800b37e:	d051      	beq.n	800b424 <_reclaim_reent+0xb0>
 800b380:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b382:	b143      	cbz	r3, 800b396 <_reclaim_reent+0x22>
 800b384:	68db      	ldr	r3, [r3, #12]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d14a      	bne.n	800b420 <_reclaim_reent+0xac>
 800b38a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b38c:	6819      	ldr	r1, [r3, #0]
 800b38e:	b111      	cbz	r1, 800b396 <_reclaim_reent+0x22>
 800b390:	4620      	mov	r0, r4
 800b392:	f001 fd07 	bl	800cda4 <_free_r>
 800b396:	6961      	ldr	r1, [r4, #20]
 800b398:	b111      	cbz	r1, 800b3a0 <_reclaim_reent+0x2c>
 800b39a:	4620      	mov	r0, r4
 800b39c:	f001 fd02 	bl	800cda4 <_free_r>
 800b3a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b3a2:	b111      	cbz	r1, 800b3aa <_reclaim_reent+0x36>
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	f001 fcfd 	bl	800cda4 <_free_r>
 800b3aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b3ac:	b111      	cbz	r1, 800b3b4 <_reclaim_reent+0x40>
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	f001 fcf8 	bl	800cda4 <_free_r>
 800b3b4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b3b6:	b111      	cbz	r1, 800b3be <_reclaim_reent+0x4a>
 800b3b8:	4620      	mov	r0, r4
 800b3ba:	f001 fcf3 	bl	800cda4 <_free_r>
 800b3be:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b3c0:	b111      	cbz	r1, 800b3c8 <_reclaim_reent+0x54>
 800b3c2:	4620      	mov	r0, r4
 800b3c4:	f001 fcee 	bl	800cda4 <_free_r>
 800b3c8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b3ca:	b111      	cbz	r1, 800b3d2 <_reclaim_reent+0x5e>
 800b3cc:	4620      	mov	r0, r4
 800b3ce:	f001 fce9 	bl	800cda4 <_free_r>
 800b3d2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b3d4:	b111      	cbz	r1, 800b3dc <_reclaim_reent+0x68>
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	f001 fce4 	bl	800cda4 <_free_r>
 800b3dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3de:	b111      	cbz	r1, 800b3e6 <_reclaim_reent+0x72>
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	f001 fcdf 	bl	800cda4 <_free_r>
 800b3e6:	69a3      	ldr	r3, [r4, #24]
 800b3e8:	b1e3      	cbz	r3, 800b424 <_reclaim_reent+0xb0>
 800b3ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	4798      	blx	r3
 800b3f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b3f2:	b1b9      	cbz	r1, 800b424 <_reclaim_reent+0xb0>
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b3fa:	f7ff bfad 	b.w	800b358 <cleanup_glue>
 800b3fe:	5949      	ldr	r1, [r1, r5]
 800b400:	b941      	cbnz	r1, 800b414 <_reclaim_reent+0xa0>
 800b402:	3504      	adds	r5, #4
 800b404:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b406:	2d80      	cmp	r5, #128	; 0x80
 800b408:	68d9      	ldr	r1, [r3, #12]
 800b40a:	d1f8      	bne.n	800b3fe <_reclaim_reent+0x8a>
 800b40c:	4620      	mov	r0, r4
 800b40e:	f001 fcc9 	bl	800cda4 <_free_r>
 800b412:	e7ba      	b.n	800b38a <_reclaim_reent+0x16>
 800b414:	680e      	ldr	r6, [r1, #0]
 800b416:	4620      	mov	r0, r4
 800b418:	f001 fcc4 	bl	800cda4 <_free_r>
 800b41c:	4631      	mov	r1, r6
 800b41e:	e7ef      	b.n	800b400 <_reclaim_reent+0x8c>
 800b420:	2500      	movs	r5, #0
 800b422:	e7ef      	b.n	800b404 <_reclaim_reent+0x90>
 800b424:	bd70      	pop	{r4, r5, r6, pc}
 800b426:	bf00      	nop
 800b428:	20000058 	.word	0x20000058

0800b42c <_sbrk_r>:
 800b42c:	b538      	push	{r3, r4, r5, lr}
 800b42e:	4d06      	ldr	r5, [pc, #24]	; (800b448 <_sbrk_r+0x1c>)
 800b430:	2300      	movs	r3, #0
 800b432:	4604      	mov	r4, r0
 800b434:	4608      	mov	r0, r1
 800b436:	602b      	str	r3, [r5, #0]
 800b438:	f7f8 fb12 	bl	8003a60 <_sbrk>
 800b43c:	1c43      	adds	r3, r0, #1
 800b43e:	d102      	bne.n	800b446 <_sbrk_r+0x1a>
 800b440:	682b      	ldr	r3, [r5, #0]
 800b442:	b103      	cbz	r3, 800b446 <_sbrk_r+0x1a>
 800b444:	6023      	str	r3, [r4, #0]
 800b446:	bd38      	pop	{r3, r4, r5, pc}
 800b448:	20004494 	.word	0x20004494

0800b44c <siprintf>:
 800b44c:	b40e      	push	{r1, r2, r3}
 800b44e:	b500      	push	{lr}
 800b450:	b09c      	sub	sp, #112	; 0x70
 800b452:	ab1d      	add	r3, sp, #116	; 0x74
 800b454:	9002      	str	r0, [sp, #8]
 800b456:	9006      	str	r0, [sp, #24]
 800b458:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b45c:	4809      	ldr	r0, [pc, #36]	; (800b484 <siprintf+0x38>)
 800b45e:	9107      	str	r1, [sp, #28]
 800b460:	9104      	str	r1, [sp, #16]
 800b462:	4909      	ldr	r1, [pc, #36]	; (800b488 <siprintf+0x3c>)
 800b464:	f853 2b04 	ldr.w	r2, [r3], #4
 800b468:	9105      	str	r1, [sp, #20]
 800b46a:	6800      	ldr	r0, [r0, #0]
 800b46c:	9301      	str	r3, [sp, #4]
 800b46e:	a902      	add	r1, sp, #8
 800b470:	f001 fd40 	bl	800cef4 <_svfiprintf_r>
 800b474:	9b02      	ldr	r3, [sp, #8]
 800b476:	2200      	movs	r2, #0
 800b478:	701a      	strb	r2, [r3, #0]
 800b47a:	b01c      	add	sp, #112	; 0x70
 800b47c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b480:	b003      	add	sp, #12
 800b482:	4770      	bx	lr
 800b484:	20000058 	.word	0x20000058
 800b488:	ffff0208 	.word	0xffff0208

0800b48c <__sread>:
 800b48c:	b510      	push	{r4, lr}
 800b48e:	460c      	mov	r4, r1
 800b490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b494:	f001 ff88 	bl	800d3a8 <_read_r>
 800b498:	2800      	cmp	r0, #0
 800b49a:	bfab      	itete	ge
 800b49c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b49e:	89a3      	ldrhlt	r3, [r4, #12]
 800b4a0:	181b      	addge	r3, r3, r0
 800b4a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b4a6:	bfac      	ite	ge
 800b4a8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b4aa:	81a3      	strhlt	r3, [r4, #12]
 800b4ac:	bd10      	pop	{r4, pc}

0800b4ae <__swrite>:
 800b4ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4b2:	461f      	mov	r7, r3
 800b4b4:	898b      	ldrh	r3, [r1, #12]
 800b4b6:	05db      	lsls	r3, r3, #23
 800b4b8:	4605      	mov	r5, r0
 800b4ba:	460c      	mov	r4, r1
 800b4bc:	4616      	mov	r6, r2
 800b4be:	d505      	bpl.n	800b4cc <__swrite+0x1e>
 800b4c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4c4:	2302      	movs	r3, #2
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	f001 f846 	bl	800c558 <_lseek_r>
 800b4cc:	89a3      	ldrh	r3, [r4, #12]
 800b4ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b4d6:	81a3      	strh	r3, [r4, #12]
 800b4d8:	4632      	mov	r2, r6
 800b4da:	463b      	mov	r3, r7
 800b4dc:	4628      	mov	r0, r5
 800b4de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4e2:	f000 b869 	b.w	800b5b8 <_write_r>

0800b4e6 <__sseek>:
 800b4e6:	b510      	push	{r4, lr}
 800b4e8:	460c      	mov	r4, r1
 800b4ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4ee:	f001 f833 	bl	800c558 <_lseek_r>
 800b4f2:	1c43      	adds	r3, r0, #1
 800b4f4:	89a3      	ldrh	r3, [r4, #12]
 800b4f6:	bf15      	itete	ne
 800b4f8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b4fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b4fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b502:	81a3      	strheq	r3, [r4, #12]
 800b504:	bf18      	it	ne
 800b506:	81a3      	strhne	r3, [r4, #12]
 800b508:	bd10      	pop	{r4, pc}

0800b50a <__sclose>:
 800b50a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b50e:	f000 b8d3 	b.w	800b6b8 <_close_r>
	...

0800b514 <__swbuf_r>:
 800b514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b516:	460e      	mov	r6, r1
 800b518:	4614      	mov	r4, r2
 800b51a:	4605      	mov	r5, r0
 800b51c:	b118      	cbz	r0, 800b526 <__swbuf_r+0x12>
 800b51e:	6983      	ldr	r3, [r0, #24]
 800b520:	b90b      	cbnz	r3, 800b526 <__swbuf_r+0x12>
 800b522:	f7ff f8b1 	bl	800a688 <__sinit>
 800b526:	4b21      	ldr	r3, [pc, #132]	; (800b5ac <__swbuf_r+0x98>)
 800b528:	429c      	cmp	r4, r3
 800b52a:	d12b      	bne.n	800b584 <__swbuf_r+0x70>
 800b52c:	686c      	ldr	r4, [r5, #4]
 800b52e:	69a3      	ldr	r3, [r4, #24]
 800b530:	60a3      	str	r3, [r4, #8]
 800b532:	89a3      	ldrh	r3, [r4, #12]
 800b534:	071a      	lsls	r2, r3, #28
 800b536:	d52f      	bpl.n	800b598 <__swbuf_r+0x84>
 800b538:	6923      	ldr	r3, [r4, #16]
 800b53a:	b36b      	cbz	r3, 800b598 <__swbuf_r+0x84>
 800b53c:	6923      	ldr	r3, [r4, #16]
 800b53e:	6820      	ldr	r0, [r4, #0]
 800b540:	1ac0      	subs	r0, r0, r3
 800b542:	6963      	ldr	r3, [r4, #20]
 800b544:	b2f6      	uxtb	r6, r6
 800b546:	4283      	cmp	r3, r0
 800b548:	4637      	mov	r7, r6
 800b54a:	dc04      	bgt.n	800b556 <__swbuf_r+0x42>
 800b54c:	4621      	mov	r1, r4
 800b54e:	4628      	mov	r0, r5
 800b550:	f000 ffc2 	bl	800c4d8 <_fflush_r>
 800b554:	bb30      	cbnz	r0, 800b5a4 <__swbuf_r+0x90>
 800b556:	68a3      	ldr	r3, [r4, #8]
 800b558:	3b01      	subs	r3, #1
 800b55a:	60a3      	str	r3, [r4, #8]
 800b55c:	6823      	ldr	r3, [r4, #0]
 800b55e:	1c5a      	adds	r2, r3, #1
 800b560:	6022      	str	r2, [r4, #0]
 800b562:	701e      	strb	r6, [r3, #0]
 800b564:	6963      	ldr	r3, [r4, #20]
 800b566:	3001      	adds	r0, #1
 800b568:	4283      	cmp	r3, r0
 800b56a:	d004      	beq.n	800b576 <__swbuf_r+0x62>
 800b56c:	89a3      	ldrh	r3, [r4, #12]
 800b56e:	07db      	lsls	r3, r3, #31
 800b570:	d506      	bpl.n	800b580 <__swbuf_r+0x6c>
 800b572:	2e0a      	cmp	r6, #10
 800b574:	d104      	bne.n	800b580 <__swbuf_r+0x6c>
 800b576:	4621      	mov	r1, r4
 800b578:	4628      	mov	r0, r5
 800b57a:	f000 ffad 	bl	800c4d8 <_fflush_r>
 800b57e:	b988      	cbnz	r0, 800b5a4 <__swbuf_r+0x90>
 800b580:	4638      	mov	r0, r7
 800b582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b584:	4b0a      	ldr	r3, [pc, #40]	; (800b5b0 <__swbuf_r+0x9c>)
 800b586:	429c      	cmp	r4, r3
 800b588:	d101      	bne.n	800b58e <__swbuf_r+0x7a>
 800b58a:	68ac      	ldr	r4, [r5, #8]
 800b58c:	e7cf      	b.n	800b52e <__swbuf_r+0x1a>
 800b58e:	4b09      	ldr	r3, [pc, #36]	; (800b5b4 <__swbuf_r+0xa0>)
 800b590:	429c      	cmp	r4, r3
 800b592:	bf08      	it	eq
 800b594:	68ec      	ldreq	r4, [r5, #12]
 800b596:	e7ca      	b.n	800b52e <__swbuf_r+0x1a>
 800b598:	4621      	mov	r1, r4
 800b59a:	4628      	mov	r0, r5
 800b59c:	f000 f81e 	bl	800b5dc <__swsetup_r>
 800b5a0:	2800      	cmp	r0, #0
 800b5a2:	d0cb      	beq.n	800b53c <__swbuf_r+0x28>
 800b5a4:	f04f 37ff 	mov.w	r7, #4294967295
 800b5a8:	e7ea      	b.n	800b580 <__swbuf_r+0x6c>
 800b5aa:	bf00      	nop
 800b5ac:	0800efb0 	.word	0x0800efb0
 800b5b0:	0800efd0 	.word	0x0800efd0
 800b5b4:	0800ef90 	.word	0x0800ef90

0800b5b8 <_write_r>:
 800b5b8:	b538      	push	{r3, r4, r5, lr}
 800b5ba:	4d07      	ldr	r5, [pc, #28]	; (800b5d8 <_write_r+0x20>)
 800b5bc:	4604      	mov	r4, r0
 800b5be:	4608      	mov	r0, r1
 800b5c0:	4611      	mov	r1, r2
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	602a      	str	r2, [r5, #0]
 800b5c6:	461a      	mov	r2, r3
 800b5c8:	f7f6 fca8 	bl	8001f1c <_write>
 800b5cc:	1c43      	adds	r3, r0, #1
 800b5ce:	d102      	bne.n	800b5d6 <_write_r+0x1e>
 800b5d0:	682b      	ldr	r3, [r5, #0]
 800b5d2:	b103      	cbz	r3, 800b5d6 <_write_r+0x1e>
 800b5d4:	6023      	str	r3, [r4, #0]
 800b5d6:	bd38      	pop	{r3, r4, r5, pc}
 800b5d8:	20004494 	.word	0x20004494

0800b5dc <__swsetup_r>:
 800b5dc:	4b32      	ldr	r3, [pc, #200]	; (800b6a8 <__swsetup_r+0xcc>)
 800b5de:	b570      	push	{r4, r5, r6, lr}
 800b5e0:	681d      	ldr	r5, [r3, #0]
 800b5e2:	4606      	mov	r6, r0
 800b5e4:	460c      	mov	r4, r1
 800b5e6:	b125      	cbz	r5, 800b5f2 <__swsetup_r+0x16>
 800b5e8:	69ab      	ldr	r3, [r5, #24]
 800b5ea:	b913      	cbnz	r3, 800b5f2 <__swsetup_r+0x16>
 800b5ec:	4628      	mov	r0, r5
 800b5ee:	f7ff f84b 	bl	800a688 <__sinit>
 800b5f2:	4b2e      	ldr	r3, [pc, #184]	; (800b6ac <__swsetup_r+0xd0>)
 800b5f4:	429c      	cmp	r4, r3
 800b5f6:	d10f      	bne.n	800b618 <__swsetup_r+0x3c>
 800b5f8:	686c      	ldr	r4, [r5, #4]
 800b5fa:	89a3      	ldrh	r3, [r4, #12]
 800b5fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b600:	0719      	lsls	r1, r3, #28
 800b602:	d42c      	bmi.n	800b65e <__swsetup_r+0x82>
 800b604:	06dd      	lsls	r5, r3, #27
 800b606:	d411      	bmi.n	800b62c <__swsetup_r+0x50>
 800b608:	2309      	movs	r3, #9
 800b60a:	6033      	str	r3, [r6, #0]
 800b60c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b610:	81a3      	strh	r3, [r4, #12]
 800b612:	f04f 30ff 	mov.w	r0, #4294967295
 800b616:	e03e      	b.n	800b696 <__swsetup_r+0xba>
 800b618:	4b25      	ldr	r3, [pc, #148]	; (800b6b0 <__swsetup_r+0xd4>)
 800b61a:	429c      	cmp	r4, r3
 800b61c:	d101      	bne.n	800b622 <__swsetup_r+0x46>
 800b61e:	68ac      	ldr	r4, [r5, #8]
 800b620:	e7eb      	b.n	800b5fa <__swsetup_r+0x1e>
 800b622:	4b24      	ldr	r3, [pc, #144]	; (800b6b4 <__swsetup_r+0xd8>)
 800b624:	429c      	cmp	r4, r3
 800b626:	bf08      	it	eq
 800b628:	68ec      	ldreq	r4, [r5, #12]
 800b62a:	e7e6      	b.n	800b5fa <__swsetup_r+0x1e>
 800b62c:	0758      	lsls	r0, r3, #29
 800b62e:	d512      	bpl.n	800b656 <__swsetup_r+0x7a>
 800b630:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b632:	b141      	cbz	r1, 800b646 <__swsetup_r+0x6a>
 800b634:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b638:	4299      	cmp	r1, r3
 800b63a:	d002      	beq.n	800b642 <__swsetup_r+0x66>
 800b63c:	4630      	mov	r0, r6
 800b63e:	f001 fbb1 	bl	800cda4 <_free_r>
 800b642:	2300      	movs	r3, #0
 800b644:	6363      	str	r3, [r4, #52]	; 0x34
 800b646:	89a3      	ldrh	r3, [r4, #12]
 800b648:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b64c:	81a3      	strh	r3, [r4, #12]
 800b64e:	2300      	movs	r3, #0
 800b650:	6063      	str	r3, [r4, #4]
 800b652:	6923      	ldr	r3, [r4, #16]
 800b654:	6023      	str	r3, [r4, #0]
 800b656:	89a3      	ldrh	r3, [r4, #12]
 800b658:	f043 0308 	orr.w	r3, r3, #8
 800b65c:	81a3      	strh	r3, [r4, #12]
 800b65e:	6923      	ldr	r3, [r4, #16]
 800b660:	b94b      	cbnz	r3, 800b676 <__swsetup_r+0x9a>
 800b662:	89a3      	ldrh	r3, [r4, #12]
 800b664:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b66c:	d003      	beq.n	800b676 <__swsetup_r+0x9a>
 800b66e:	4621      	mov	r1, r4
 800b670:	4630      	mov	r0, r6
 800b672:	f000 ffa9 	bl	800c5c8 <__smakebuf_r>
 800b676:	89a0      	ldrh	r0, [r4, #12]
 800b678:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b67c:	f010 0301 	ands.w	r3, r0, #1
 800b680:	d00a      	beq.n	800b698 <__swsetup_r+0xbc>
 800b682:	2300      	movs	r3, #0
 800b684:	60a3      	str	r3, [r4, #8]
 800b686:	6963      	ldr	r3, [r4, #20]
 800b688:	425b      	negs	r3, r3
 800b68a:	61a3      	str	r3, [r4, #24]
 800b68c:	6923      	ldr	r3, [r4, #16]
 800b68e:	b943      	cbnz	r3, 800b6a2 <__swsetup_r+0xc6>
 800b690:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b694:	d1ba      	bne.n	800b60c <__swsetup_r+0x30>
 800b696:	bd70      	pop	{r4, r5, r6, pc}
 800b698:	0781      	lsls	r1, r0, #30
 800b69a:	bf58      	it	pl
 800b69c:	6963      	ldrpl	r3, [r4, #20]
 800b69e:	60a3      	str	r3, [r4, #8]
 800b6a0:	e7f4      	b.n	800b68c <__swsetup_r+0xb0>
 800b6a2:	2000      	movs	r0, #0
 800b6a4:	e7f7      	b.n	800b696 <__swsetup_r+0xba>
 800b6a6:	bf00      	nop
 800b6a8:	20000058 	.word	0x20000058
 800b6ac:	0800efb0 	.word	0x0800efb0
 800b6b0:	0800efd0 	.word	0x0800efd0
 800b6b4:	0800ef90 	.word	0x0800ef90

0800b6b8 <_close_r>:
 800b6b8:	b538      	push	{r3, r4, r5, lr}
 800b6ba:	4d06      	ldr	r5, [pc, #24]	; (800b6d4 <_close_r+0x1c>)
 800b6bc:	2300      	movs	r3, #0
 800b6be:	4604      	mov	r4, r0
 800b6c0:	4608      	mov	r0, r1
 800b6c2:	602b      	str	r3, [r5, #0]
 800b6c4:	f7f8 f997 	bl	80039f6 <_close>
 800b6c8:	1c43      	adds	r3, r0, #1
 800b6ca:	d102      	bne.n	800b6d2 <_close_r+0x1a>
 800b6cc:	682b      	ldr	r3, [r5, #0]
 800b6ce:	b103      	cbz	r3, 800b6d2 <_close_r+0x1a>
 800b6d0:	6023      	str	r3, [r4, #0]
 800b6d2:	bd38      	pop	{r3, r4, r5, pc}
 800b6d4:	20004494 	.word	0x20004494

0800b6d8 <quorem>:
 800b6d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6dc:	6903      	ldr	r3, [r0, #16]
 800b6de:	690c      	ldr	r4, [r1, #16]
 800b6e0:	42a3      	cmp	r3, r4
 800b6e2:	4607      	mov	r7, r0
 800b6e4:	f2c0 8081 	blt.w	800b7ea <quorem+0x112>
 800b6e8:	3c01      	subs	r4, #1
 800b6ea:	f101 0814 	add.w	r8, r1, #20
 800b6ee:	f100 0514 	add.w	r5, r0, #20
 800b6f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b6f6:	9301      	str	r3, [sp, #4]
 800b6f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b6fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b700:	3301      	adds	r3, #1
 800b702:	429a      	cmp	r2, r3
 800b704:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b708:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b70c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b710:	d331      	bcc.n	800b776 <quorem+0x9e>
 800b712:	f04f 0e00 	mov.w	lr, #0
 800b716:	4640      	mov	r0, r8
 800b718:	46ac      	mov	ip, r5
 800b71a:	46f2      	mov	sl, lr
 800b71c:	f850 2b04 	ldr.w	r2, [r0], #4
 800b720:	b293      	uxth	r3, r2
 800b722:	fb06 e303 	mla	r3, r6, r3, lr
 800b726:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b72a:	b29b      	uxth	r3, r3
 800b72c:	ebaa 0303 	sub.w	r3, sl, r3
 800b730:	f8dc a000 	ldr.w	sl, [ip]
 800b734:	0c12      	lsrs	r2, r2, #16
 800b736:	fa13 f38a 	uxtah	r3, r3, sl
 800b73a:	fb06 e202 	mla	r2, r6, r2, lr
 800b73e:	9300      	str	r3, [sp, #0]
 800b740:	9b00      	ldr	r3, [sp, #0]
 800b742:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b746:	b292      	uxth	r2, r2
 800b748:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b74c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b750:	f8bd 3000 	ldrh.w	r3, [sp]
 800b754:	4581      	cmp	r9, r0
 800b756:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b75a:	f84c 3b04 	str.w	r3, [ip], #4
 800b75e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b762:	d2db      	bcs.n	800b71c <quorem+0x44>
 800b764:	f855 300b 	ldr.w	r3, [r5, fp]
 800b768:	b92b      	cbnz	r3, 800b776 <quorem+0x9e>
 800b76a:	9b01      	ldr	r3, [sp, #4]
 800b76c:	3b04      	subs	r3, #4
 800b76e:	429d      	cmp	r5, r3
 800b770:	461a      	mov	r2, r3
 800b772:	d32e      	bcc.n	800b7d2 <quorem+0xfa>
 800b774:	613c      	str	r4, [r7, #16]
 800b776:	4638      	mov	r0, r7
 800b778:	f001 f9fc 	bl	800cb74 <__mcmp>
 800b77c:	2800      	cmp	r0, #0
 800b77e:	db24      	blt.n	800b7ca <quorem+0xf2>
 800b780:	3601      	adds	r6, #1
 800b782:	4628      	mov	r0, r5
 800b784:	f04f 0c00 	mov.w	ip, #0
 800b788:	f858 2b04 	ldr.w	r2, [r8], #4
 800b78c:	f8d0 e000 	ldr.w	lr, [r0]
 800b790:	b293      	uxth	r3, r2
 800b792:	ebac 0303 	sub.w	r3, ip, r3
 800b796:	0c12      	lsrs	r2, r2, #16
 800b798:	fa13 f38e 	uxtah	r3, r3, lr
 800b79c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b7a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b7a4:	b29b      	uxth	r3, r3
 800b7a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7aa:	45c1      	cmp	r9, r8
 800b7ac:	f840 3b04 	str.w	r3, [r0], #4
 800b7b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b7b4:	d2e8      	bcs.n	800b788 <quorem+0xb0>
 800b7b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7be:	b922      	cbnz	r2, 800b7ca <quorem+0xf2>
 800b7c0:	3b04      	subs	r3, #4
 800b7c2:	429d      	cmp	r5, r3
 800b7c4:	461a      	mov	r2, r3
 800b7c6:	d30a      	bcc.n	800b7de <quorem+0x106>
 800b7c8:	613c      	str	r4, [r7, #16]
 800b7ca:	4630      	mov	r0, r6
 800b7cc:	b003      	add	sp, #12
 800b7ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7d2:	6812      	ldr	r2, [r2, #0]
 800b7d4:	3b04      	subs	r3, #4
 800b7d6:	2a00      	cmp	r2, #0
 800b7d8:	d1cc      	bne.n	800b774 <quorem+0x9c>
 800b7da:	3c01      	subs	r4, #1
 800b7dc:	e7c7      	b.n	800b76e <quorem+0x96>
 800b7de:	6812      	ldr	r2, [r2, #0]
 800b7e0:	3b04      	subs	r3, #4
 800b7e2:	2a00      	cmp	r2, #0
 800b7e4:	d1f0      	bne.n	800b7c8 <quorem+0xf0>
 800b7e6:	3c01      	subs	r4, #1
 800b7e8:	e7eb      	b.n	800b7c2 <quorem+0xea>
 800b7ea:	2000      	movs	r0, #0
 800b7ec:	e7ee      	b.n	800b7cc <quorem+0xf4>
	...

0800b7f0 <_dtoa_r>:
 800b7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7f4:	ed2d 8b04 	vpush	{d8-d9}
 800b7f8:	ec57 6b10 	vmov	r6, r7, d0
 800b7fc:	b093      	sub	sp, #76	; 0x4c
 800b7fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b800:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b804:	9106      	str	r1, [sp, #24]
 800b806:	ee10 aa10 	vmov	sl, s0
 800b80a:	4604      	mov	r4, r0
 800b80c:	9209      	str	r2, [sp, #36]	; 0x24
 800b80e:	930c      	str	r3, [sp, #48]	; 0x30
 800b810:	46bb      	mov	fp, r7
 800b812:	b975      	cbnz	r5, 800b832 <_dtoa_r+0x42>
 800b814:	2010      	movs	r0, #16
 800b816:	f000 ff17 	bl	800c648 <malloc>
 800b81a:	4602      	mov	r2, r0
 800b81c:	6260      	str	r0, [r4, #36]	; 0x24
 800b81e:	b920      	cbnz	r0, 800b82a <_dtoa_r+0x3a>
 800b820:	4ba7      	ldr	r3, [pc, #668]	; (800bac0 <_dtoa_r+0x2d0>)
 800b822:	21ea      	movs	r1, #234	; 0xea
 800b824:	48a7      	ldr	r0, [pc, #668]	; (800bac4 <_dtoa_r+0x2d4>)
 800b826:	f001 fdd1 	bl	800d3cc <__assert_func>
 800b82a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b82e:	6005      	str	r5, [r0, #0]
 800b830:	60c5      	str	r5, [r0, #12]
 800b832:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b834:	6819      	ldr	r1, [r3, #0]
 800b836:	b151      	cbz	r1, 800b84e <_dtoa_r+0x5e>
 800b838:	685a      	ldr	r2, [r3, #4]
 800b83a:	604a      	str	r2, [r1, #4]
 800b83c:	2301      	movs	r3, #1
 800b83e:	4093      	lsls	r3, r2
 800b840:	608b      	str	r3, [r1, #8]
 800b842:	4620      	mov	r0, r4
 800b844:	f000 ff54 	bl	800c6f0 <_Bfree>
 800b848:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b84a:	2200      	movs	r2, #0
 800b84c:	601a      	str	r2, [r3, #0]
 800b84e:	1e3b      	subs	r3, r7, #0
 800b850:	bfaa      	itet	ge
 800b852:	2300      	movge	r3, #0
 800b854:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b858:	f8c8 3000 	strge.w	r3, [r8]
 800b85c:	4b9a      	ldr	r3, [pc, #616]	; (800bac8 <_dtoa_r+0x2d8>)
 800b85e:	bfbc      	itt	lt
 800b860:	2201      	movlt	r2, #1
 800b862:	f8c8 2000 	strlt.w	r2, [r8]
 800b866:	ea33 030b 	bics.w	r3, r3, fp
 800b86a:	d11b      	bne.n	800b8a4 <_dtoa_r+0xb4>
 800b86c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b86e:	f242 730f 	movw	r3, #9999	; 0x270f
 800b872:	6013      	str	r3, [r2, #0]
 800b874:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b878:	4333      	orrs	r3, r6
 800b87a:	f000 8592 	beq.w	800c3a2 <_dtoa_r+0xbb2>
 800b87e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b880:	b963      	cbnz	r3, 800b89c <_dtoa_r+0xac>
 800b882:	4b92      	ldr	r3, [pc, #584]	; (800bacc <_dtoa_r+0x2dc>)
 800b884:	e022      	b.n	800b8cc <_dtoa_r+0xdc>
 800b886:	4b92      	ldr	r3, [pc, #584]	; (800bad0 <_dtoa_r+0x2e0>)
 800b888:	9301      	str	r3, [sp, #4]
 800b88a:	3308      	adds	r3, #8
 800b88c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b88e:	6013      	str	r3, [r2, #0]
 800b890:	9801      	ldr	r0, [sp, #4]
 800b892:	b013      	add	sp, #76	; 0x4c
 800b894:	ecbd 8b04 	vpop	{d8-d9}
 800b898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b89c:	4b8b      	ldr	r3, [pc, #556]	; (800bacc <_dtoa_r+0x2dc>)
 800b89e:	9301      	str	r3, [sp, #4]
 800b8a0:	3303      	adds	r3, #3
 800b8a2:	e7f3      	b.n	800b88c <_dtoa_r+0x9c>
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	4650      	mov	r0, sl
 800b8aa:	4659      	mov	r1, fp
 800b8ac:	f7f5 f91c 	bl	8000ae8 <__aeabi_dcmpeq>
 800b8b0:	ec4b ab19 	vmov	d9, sl, fp
 800b8b4:	4680      	mov	r8, r0
 800b8b6:	b158      	cbz	r0, 800b8d0 <_dtoa_r+0xe0>
 800b8b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	6013      	str	r3, [r2, #0]
 800b8be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	f000 856b 	beq.w	800c39c <_dtoa_r+0xbac>
 800b8c6:	4883      	ldr	r0, [pc, #524]	; (800bad4 <_dtoa_r+0x2e4>)
 800b8c8:	6018      	str	r0, [r3, #0]
 800b8ca:	1e43      	subs	r3, r0, #1
 800b8cc:	9301      	str	r3, [sp, #4]
 800b8ce:	e7df      	b.n	800b890 <_dtoa_r+0xa0>
 800b8d0:	ec4b ab10 	vmov	d0, sl, fp
 800b8d4:	aa10      	add	r2, sp, #64	; 0x40
 800b8d6:	a911      	add	r1, sp, #68	; 0x44
 800b8d8:	4620      	mov	r0, r4
 800b8da:	f001 f9f1 	bl	800ccc0 <__d2b>
 800b8de:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b8e2:	ee08 0a10 	vmov	s16, r0
 800b8e6:	2d00      	cmp	r5, #0
 800b8e8:	f000 8084 	beq.w	800b9f4 <_dtoa_r+0x204>
 800b8ec:	ee19 3a90 	vmov	r3, s19
 800b8f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b8f4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b8f8:	4656      	mov	r6, sl
 800b8fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b8fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b902:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b906:	4b74      	ldr	r3, [pc, #464]	; (800bad8 <_dtoa_r+0x2e8>)
 800b908:	2200      	movs	r2, #0
 800b90a:	4630      	mov	r0, r6
 800b90c:	4639      	mov	r1, r7
 800b90e:	f7f4 fccb 	bl	80002a8 <__aeabi_dsub>
 800b912:	a365      	add	r3, pc, #404	; (adr r3, 800baa8 <_dtoa_r+0x2b8>)
 800b914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b918:	f7f4 fe7e 	bl	8000618 <__aeabi_dmul>
 800b91c:	a364      	add	r3, pc, #400	; (adr r3, 800bab0 <_dtoa_r+0x2c0>)
 800b91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b922:	f7f4 fcc3 	bl	80002ac <__adddf3>
 800b926:	4606      	mov	r6, r0
 800b928:	4628      	mov	r0, r5
 800b92a:	460f      	mov	r7, r1
 800b92c:	f7f4 fe0a 	bl	8000544 <__aeabi_i2d>
 800b930:	a361      	add	r3, pc, #388	; (adr r3, 800bab8 <_dtoa_r+0x2c8>)
 800b932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b936:	f7f4 fe6f 	bl	8000618 <__aeabi_dmul>
 800b93a:	4602      	mov	r2, r0
 800b93c:	460b      	mov	r3, r1
 800b93e:	4630      	mov	r0, r6
 800b940:	4639      	mov	r1, r7
 800b942:	f7f4 fcb3 	bl	80002ac <__adddf3>
 800b946:	4606      	mov	r6, r0
 800b948:	460f      	mov	r7, r1
 800b94a:	f7f5 f915 	bl	8000b78 <__aeabi_d2iz>
 800b94e:	2200      	movs	r2, #0
 800b950:	9000      	str	r0, [sp, #0]
 800b952:	2300      	movs	r3, #0
 800b954:	4630      	mov	r0, r6
 800b956:	4639      	mov	r1, r7
 800b958:	f7f5 f8d0 	bl	8000afc <__aeabi_dcmplt>
 800b95c:	b150      	cbz	r0, 800b974 <_dtoa_r+0x184>
 800b95e:	9800      	ldr	r0, [sp, #0]
 800b960:	f7f4 fdf0 	bl	8000544 <__aeabi_i2d>
 800b964:	4632      	mov	r2, r6
 800b966:	463b      	mov	r3, r7
 800b968:	f7f5 f8be 	bl	8000ae8 <__aeabi_dcmpeq>
 800b96c:	b910      	cbnz	r0, 800b974 <_dtoa_r+0x184>
 800b96e:	9b00      	ldr	r3, [sp, #0]
 800b970:	3b01      	subs	r3, #1
 800b972:	9300      	str	r3, [sp, #0]
 800b974:	9b00      	ldr	r3, [sp, #0]
 800b976:	2b16      	cmp	r3, #22
 800b978:	d85a      	bhi.n	800ba30 <_dtoa_r+0x240>
 800b97a:	9a00      	ldr	r2, [sp, #0]
 800b97c:	4b57      	ldr	r3, [pc, #348]	; (800badc <_dtoa_r+0x2ec>)
 800b97e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b986:	ec51 0b19 	vmov	r0, r1, d9
 800b98a:	f7f5 f8b7 	bl	8000afc <__aeabi_dcmplt>
 800b98e:	2800      	cmp	r0, #0
 800b990:	d050      	beq.n	800ba34 <_dtoa_r+0x244>
 800b992:	9b00      	ldr	r3, [sp, #0]
 800b994:	3b01      	subs	r3, #1
 800b996:	9300      	str	r3, [sp, #0]
 800b998:	2300      	movs	r3, #0
 800b99a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b99c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b99e:	1b5d      	subs	r5, r3, r5
 800b9a0:	1e6b      	subs	r3, r5, #1
 800b9a2:	9305      	str	r3, [sp, #20]
 800b9a4:	bf45      	ittet	mi
 800b9a6:	f1c5 0301 	rsbmi	r3, r5, #1
 800b9aa:	9304      	strmi	r3, [sp, #16]
 800b9ac:	2300      	movpl	r3, #0
 800b9ae:	2300      	movmi	r3, #0
 800b9b0:	bf4c      	ite	mi
 800b9b2:	9305      	strmi	r3, [sp, #20]
 800b9b4:	9304      	strpl	r3, [sp, #16]
 800b9b6:	9b00      	ldr	r3, [sp, #0]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	db3d      	blt.n	800ba38 <_dtoa_r+0x248>
 800b9bc:	9b05      	ldr	r3, [sp, #20]
 800b9be:	9a00      	ldr	r2, [sp, #0]
 800b9c0:	920a      	str	r2, [sp, #40]	; 0x28
 800b9c2:	4413      	add	r3, r2
 800b9c4:	9305      	str	r3, [sp, #20]
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	9307      	str	r3, [sp, #28]
 800b9ca:	9b06      	ldr	r3, [sp, #24]
 800b9cc:	2b09      	cmp	r3, #9
 800b9ce:	f200 8089 	bhi.w	800bae4 <_dtoa_r+0x2f4>
 800b9d2:	2b05      	cmp	r3, #5
 800b9d4:	bfc4      	itt	gt
 800b9d6:	3b04      	subgt	r3, #4
 800b9d8:	9306      	strgt	r3, [sp, #24]
 800b9da:	9b06      	ldr	r3, [sp, #24]
 800b9dc:	f1a3 0302 	sub.w	r3, r3, #2
 800b9e0:	bfcc      	ite	gt
 800b9e2:	2500      	movgt	r5, #0
 800b9e4:	2501      	movle	r5, #1
 800b9e6:	2b03      	cmp	r3, #3
 800b9e8:	f200 8087 	bhi.w	800bafa <_dtoa_r+0x30a>
 800b9ec:	e8df f003 	tbb	[pc, r3]
 800b9f0:	59383a2d 	.word	0x59383a2d
 800b9f4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b9f8:	441d      	add	r5, r3
 800b9fa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b9fe:	2b20      	cmp	r3, #32
 800ba00:	bfc1      	itttt	gt
 800ba02:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ba06:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ba0a:	fa0b f303 	lslgt.w	r3, fp, r3
 800ba0e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ba12:	bfda      	itte	le
 800ba14:	f1c3 0320 	rsble	r3, r3, #32
 800ba18:	fa06 f003 	lslle.w	r0, r6, r3
 800ba1c:	4318      	orrgt	r0, r3
 800ba1e:	f7f4 fd81 	bl	8000524 <__aeabi_ui2d>
 800ba22:	2301      	movs	r3, #1
 800ba24:	4606      	mov	r6, r0
 800ba26:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ba2a:	3d01      	subs	r5, #1
 800ba2c:	930e      	str	r3, [sp, #56]	; 0x38
 800ba2e:	e76a      	b.n	800b906 <_dtoa_r+0x116>
 800ba30:	2301      	movs	r3, #1
 800ba32:	e7b2      	b.n	800b99a <_dtoa_r+0x1aa>
 800ba34:	900b      	str	r0, [sp, #44]	; 0x2c
 800ba36:	e7b1      	b.n	800b99c <_dtoa_r+0x1ac>
 800ba38:	9b04      	ldr	r3, [sp, #16]
 800ba3a:	9a00      	ldr	r2, [sp, #0]
 800ba3c:	1a9b      	subs	r3, r3, r2
 800ba3e:	9304      	str	r3, [sp, #16]
 800ba40:	4253      	negs	r3, r2
 800ba42:	9307      	str	r3, [sp, #28]
 800ba44:	2300      	movs	r3, #0
 800ba46:	930a      	str	r3, [sp, #40]	; 0x28
 800ba48:	e7bf      	b.n	800b9ca <_dtoa_r+0x1da>
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	9308      	str	r3, [sp, #32]
 800ba4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	dc55      	bgt.n	800bb00 <_dtoa_r+0x310>
 800ba54:	2301      	movs	r3, #1
 800ba56:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	9209      	str	r2, [sp, #36]	; 0x24
 800ba5e:	e00c      	b.n	800ba7a <_dtoa_r+0x28a>
 800ba60:	2301      	movs	r3, #1
 800ba62:	e7f3      	b.n	800ba4c <_dtoa_r+0x25c>
 800ba64:	2300      	movs	r3, #0
 800ba66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba68:	9308      	str	r3, [sp, #32]
 800ba6a:	9b00      	ldr	r3, [sp, #0]
 800ba6c:	4413      	add	r3, r2
 800ba6e:	9302      	str	r3, [sp, #8]
 800ba70:	3301      	adds	r3, #1
 800ba72:	2b01      	cmp	r3, #1
 800ba74:	9303      	str	r3, [sp, #12]
 800ba76:	bfb8      	it	lt
 800ba78:	2301      	movlt	r3, #1
 800ba7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	6042      	str	r2, [r0, #4]
 800ba80:	2204      	movs	r2, #4
 800ba82:	f102 0614 	add.w	r6, r2, #20
 800ba86:	429e      	cmp	r6, r3
 800ba88:	6841      	ldr	r1, [r0, #4]
 800ba8a:	d93d      	bls.n	800bb08 <_dtoa_r+0x318>
 800ba8c:	4620      	mov	r0, r4
 800ba8e:	f000 fdef 	bl	800c670 <_Balloc>
 800ba92:	9001      	str	r0, [sp, #4]
 800ba94:	2800      	cmp	r0, #0
 800ba96:	d13b      	bne.n	800bb10 <_dtoa_r+0x320>
 800ba98:	4b11      	ldr	r3, [pc, #68]	; (800bae0 <_dtoa_r+0x2f0>)
 800ba9a:	4602      	mov	r2, r0
 800ba9c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800baa0:	e6c0      	b.n	800b824 <_dtoa_r+0x34>
 800baa2:	2301      	movs	r3, #1
 800baa4:	e7df      	b.n	800ba66 <_dtoa_r+0x276>
 800baa6:	bf00      	nop
 800baa8:	636f4361 	.word	0x636f4361
 800baac:	3fd287a7 	.word	0x3fd287a7
 800bab0:	8b60c8b3 	.word	0x8b60c8b3
 800bab4:	3fc68a28 	.word	0x3fc68a28
 800bab8:	509f79fb 	.word	0x509f79fb
 800babc:	3fd34413 	.word	0x3fd34413
 800bac0:	0800f035 	.word	0x0800f035
 800bac4:	0800f04c 	.word	0x0800f04c
 800bac8:	7ff00000 	.word	0x7ff00000
 800bacc:	0800f031 	.word	0x0800f031
 800bad0:	0800f028 	.word	0x0800f028
 800bad4:	0800f005 	.word	0x0800f005
 800bad8:	3ff80000 	.word	0x3ff80000
 800badc:	0800f140 	.word	0x0800f140
 800bae0:	0800f0a7 	.word	0x0800f0a7
 800bae4:	2501      	movs	r5, #1
 800bae6:	2300      	movs	r3, #0
 800bae8:	9306      	str	r3, [sp, #24]
 800baea:	9508      	str	r5, [sp, #32]
 800baec:	f04f 33ff 	mov.w	r3, #4294967295
 800baf0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800baf4:	2200      	movs	r2, #0
 800baf6:	2312      	movs	r3, #18
 800baf8:	e7b0      	b.n	800ba5c <_dtoa_r+0x26c>
 800bafa:	2301      	movs	r3, #1
 800bafc:	9308      	str	r3, [sp, #32]
 800bafe:	e7f5      	b.n	800baec <_dtoa_r+0x2fc>
 800bb00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb02:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bb06:	e7b8      	b.n	800ba7a <_dtoa_r+0x28a>
 800bb08:	3101      	adds	r1, #1
 800bb0a:	6041      	str	r1, [r0, #4]
 800bb0c:	0052      	lsls	r2, r2, #1
 800bb0e:	e7b8      	b.n	800ba82 <_dtoa_r+0x292>
 800bb10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb12:	9a01      	ldr	r2, [sp, #4]
 800bb14:	601a      	str	r2, [r3, #0]
 800bb16:	9b03      	ldr	r3, [sp, #12]
 800bb18:	2b0e      	cmp	r3, #14
 800bb1a:	f200 809d 	bhi.w	800bc58 <_dtoa_r+0x468>
 800bb1e:	2d00      	cmp	r5, #0
 800bb20:	f000 809a 	beq.w	800bc58 <_dtoa_r+0x468>
 800bb24:	9b00      	ldr	r3, [sp, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	dd32      	ble.n	800bb90 <_dtoa_r+0x3a0>
 800bb2a:	4ab7      	ldr	r2, [pc, #732]	; (800be08 <_dtoa_r+0x618>)
 800bb2c:	f003 030f 	and.w	r3, r3, #15
 800bb30:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bb34:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb38:	9b00      	ldr	r3, [sp, #0]
 800bb3a:	05d8      	lsls	r0, r3, #23
 800bb3c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bb40:	d516      	bpl.n	800bb70 <_dtoa_r+0x380>
 800bb42:	4bb2      	ldr	r3, [pc, #712]	; (800be0c <_dtoa_r+0x61c>)
 800bb44:	ec51 0b19 	vmov	r0, r1, d9
 800bb48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb4c:	f7f4 fe8e 	bl	800086c <__aeabi_ddiv>
 800bb50:	f007 070f 	and.w	r7, r7, #15
 800bb54:	4682      	mov	sl, r0
 800bb56:	468b      	mov	fp, r1
 800bb58:	2503      	movs	r5, #3
 800bb5a:	4eac      	ldr	r6, [pc, #688]	; (800be0c <_dtoa_r+0x61c>)
 800bb5c:	b957      	cbnz	r7, 800bb74 <_dtoa_r+0x384>
 800bb5e:	4642      	mov	r2, r8
 800bb60:	464b      	mov	r3, r9
 800bb62:	4650      	mov	r0, sl
 800bb64:	4659      	mov	r1, fp
 800bb66:	f7f4 fe81 	bl	800086c <__aeabi_ddiv>
 800bb6a:	4682      	mov	sl, r0
 800bb6c:	468b      	mov	fp, r1
 800bb6e:	e028      	b.n	800bbc2 <_dtoa_r+0x3d2>
 800bb70:	2502      	movs	r5, #2
 800bb72:	e7f2      	b.n	800bb5a <_dtoa_r+0x36a>
 800bb74:	07f9      	lsls	r1, r7, #31
 800bb76:	d508      	bpl.n	800bb8a <_dtoa_r+0x39a>
 800bb78:	4640      	mov	r0, r8
 800bb7a:	4649      	mov	r1, r9
 800bb7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bb80:	f7f4 fd4a 	bl	8000618 <__aeabi_dmul>
 800bb84:	3501      	adds	r5, #1
 800bb86:	4680      	mov	r8, r0
 800bb88:	4689      	mov	r9, r1
 800bb8a:	107f      	asrs	r7, r7, #1
 800bb8c:	3608      	adds	r6, #8
 800bb8e:	e7e5      	b.n	800bb5c <_dtoa_r+0x36c>
 800bb90:	f000 809b 	beq.w	800bcca <_dtoa_r+0x4da>
 800bb94:	9b00      	ldr	r3, [sp, #0]
 800bb96:	4f9d      	ldr	r7, [pc, #628]	; (800be0c <_dtoa_r+0x61c>)
 800bb98:	425e      	negs	r6, r3
 800bb9a:	4b9b      	ldr	r3, [pc, #620]	; (800be08 <_dtoa_r+0x618>)
 800bb9c:	f006 020f 	and.w	r2, r6, #15
 800bba0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba8:	ec51 0b19 	vmov	r0, r1, d9
 800bbac:	f7f4 fd34 	bl	8000618 <__aeabi_dmul>
 800bbb0:	1136      	asrs	r6, r6, #4
 800bbb2:	4682      	mov	sl, r0
 800bbb4:	468b      	mov	fp, r1
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	2502      	movs	r5, #2
 800bbba:	2e00      	cmp	r6, #0
 800bbbc:	d17a      	bne.n	800bcb4 <_dtoa_r+0x4c4>
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d1d3      	bne.n	800bb6a <_dtoa_r+0x37a>
 800bbc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	f000 8082 	beq.w	800bcce <_dtoa_r+0x4de>
 800bbca:	4b91      	ldr	r3, [pc, #580]	; (800be10 <_dtoa_r+0x620>)
 800bbcc:	2200      	movs	r2, #0
 800bbce:	4650      	mov	r0, sl
 800bbd0:	4659      	mov	r1, fp
 800bbd2:	f7f4 ff93 	bl	8000afc <__aeabi_dcmplt>
 800bbd6:	2800      	cmp	r0, #0
 800bbd8:	d079      	beq.n	800bcce <_dtoa_r+0x4de>
 800bbda:	9b03      	ldr	r3, [sp, #12]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d076      	beq.n	800bcce <_dtoa_r+0x4de>
 800bbe0:	9b02      	ldr	r3, [sp, #8]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	dd36      	ble.n	800bc54 <_dtoa_r+0x464>
 800bbe6:	9b00      	ldr	r3, [sp, #0]
 800bbe8:	4650      	mov	r0, sl
 800bbea:	4659      	mov	r1, fp
 800bbec:	1e5f      	subs	r7, r3, #1
 800bbee:	2200      	movs	r2, #0
 800bbf0:	4b88      	ldr	r3, [pc, #544]	; (800be14 <_dtoa_r+0x624>)
 800bbf2:	f7f4 fd11 	bl	8000618 <__aeabi_dmul>
 800bbf6:	9e02      	ldr	r6, [sp, #8]
 800bbf8:	4682      	mov	sl, r0
 800bbfa:	468b      	mov	fp, r1
 800bbfc:	3501      	adds	r5, #1
 800bbfe:	4628      	mov	r0, r5
 800bc00:	f7f4 fca0 	bl	8000544 <__aeabi_i2d>
 800bc04:	4652      	mov	r2, sl
 800bc06:	465b      	mov	r3, fp
 800bc08:	f7f4 fd06 	bl	8000618 <__aeabi_dmul>
 800bc0c:	4b82      	ldr	r3, [pc, #520]	; (800be18 <_dtoa_r+0x628>)
 800bc0e:	2200      	movs	r2, #0
 800bc10:	f7f4 fb4c 	bl	80002ac <__adddf3>
 800bc14:	46d0      	mov	r8, sl
 800bc16:	46d9      	mov	r9, fp
 800bc18:	4682      	mov	sl, r0
 800bc1a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bc1e:	2e00      	cmp	r6, #0
 800bc20:	d158      	bne.n	800bcd4 <_dtoa_r+0x4e4>
 800bc22:	4b7e      	ldr	r3, [pc, #504]	; (800be1c <_dtoa_r+0x62c>)
 800bc24:	2200      	movs	r2, #0
 800bc26:	4640      	mov	r0, r8
 800bc28:	4649      	mov	r1, r9
 800bc2a:	f7f4 fb3d 	bl	80002a8 <__aeabi_dsub>
 800bc2e:	4652      	mov	r2, sl
 800bc30:	465b      	mov	r3, fp
 800bc32:	4680      	mov	r8, r0
 800bc34:	4689      	mov	r9, r1
 800bc36:	f7f4 ff7f 	bl	8000b38 <__aeabi_dcmpgt>
 800bc3a:	2800      	cmp	r0, #0
 800bc3c:	f040 8295 	bne.w	800c16a <_dtoa_r+0x97a>
 800bc40:	4652      	mov	r2, sl
 800bc42:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bc46:	4640      	mov	r0, r8
 800bc48:	4649      	mov	r1, r9
 800bc4a:	f7f4 ff57 	bl	8000afc <__aeabi_dcmplt>
 800bc4e:	2800      	cmp	r0, #0
 800bc50:	f040 8289 	bne.w	800c166 <_dtoa_r+0x976>
 800bc54:	ec5b ab19 	vmov	sl, fp, d9
 800bc58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	f2c0 8148 	blt.w	800bef0 <_dtoa_r+0x700>
 800bc60:	9a00      	ldr	r2, [sp, #0]
 800bc62:	2a0e      	cmp	r2, #14
 800bc64:	f300 8144 	bgt.w	800bef0 <_dtoa_r+0x700>
 800bc68:	4b67      	ldr	r3, [pc, #412]	; (800be08 <_dtoa_r+0x618>)
 800bc6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc6e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	f280 80d5 	bge.w	800be24 <_dtoa_r+0x634>
 800bc7a:	9b03      	ldr	r3, [sp, #12]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	f300 80d1 	bgt.w	800be24 <_dtoa_r+0x634>
 800bc82:	f040 826f 	bne.w	800c164 <_dtoa_r+0x974>
 800bc86:	4b65      	ldr	r3, [pc, #404]	; (800be1c <_dtoa_r+0x62c>)
 800bc88:	2200      	movs	r2, #0
 800bc8a:	4640      	mov	r0, r8
 800bc8c:	4649      	mov	r1, r9
 800bc8e:	f7f4 fcc3 	bl	8000618 <__aeabi_dmul>
 800bc92:	4652      	mov	r2, sl
 800bc94:	465b      	mov	r3, fp
 800bc96:	f7f4 ff45 	bl	8000b24 <__aeabi_dcmpge>
 800bc9a:	9e03      	ldr	r6, [sp, #12]
 800bc9c:	4637      	mov	r7, r6
 800bc9e:	2800      	cmp	r0, #0
 800bca0:	f040 8245 	bne.w	800c12e <_dtoa_r+0x93e>
 800bca4:	9d01      	ldr	r5, [sp, #4]
 800bca6:	2331      	movs	r3, #49	; 0x31
 800bca8:	f805 3b01 	strb.w	r3, [r5], #1
 800bcac:	9b00      	ldr	r3, [sp, #0]
 800bcae:	3301      	adds	r3, #1
 800bcb0:	9300      	str	r3, [sp, #0]
 800bcb2:	e240      	b.n	800c136 <_dtoa_r+0x946>
 800bcb4:	07f2      	lsls	r2, r6, #31
 800bcb6:	d505      	bpl.n	800bcc4 <_dtoa_r+0x4d4>
 800bcb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcbc:	f7f4 fcac 	bl	8000618 <__aeabi_dmul>
 800bcc0:	3501      	adds	r5, #1
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	1076      	asrs	r6, r6, #1
 800bcc6:	3708      	adds	r7, #8
 800bcc8:	e777      	b.n	800bbba <_dtoa_r+0x3ca>
 800bcca:	2502      	movs	r5, #2
 800bccc:	e779      	b.n	800bbc2 <_dtoa_r+0x3d2>
 800bcce:	9f00      	ldr	r7, [sp, #0]
 800bcd0:	9e03      	ldr	r6, [sp, #12]
 800bcd2:	e794      	b.n	800bbfe <_dtoa_r+0x40e>
 800bcd4:	9901      	ldr	r1, [sp, #4]
 800bcd6:	4b4c      	ldr	r3, [pc, #304]	; (800be08 <_dtoa_r+0x618>)
 800bcd8:	4431      	add	r1, r6
 800bcda:	910d      	str	r1, [sp, #52]	; 0x34
 800bcdc:	9908      	ldr	r1, [sp, #32]
 800bcde:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bce2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bce6:	2900      	cmp	r1, #0
 800bce8:	d043      	beq.n	800bd72 <_dtoa_r+0x582>
 800bcea:	494d      	ldr	r1, [pc, #308]	; (800be20 <_dtoa_r+0x630>)
 800bcec:	2000      	movs	r0, #0
 800bcee:	f7f4 fdbd 	bl	800086c <__aeabi_ddiv>
 800bcf2:	4652      	mov	r2, sl
 800bcf4:	465b      	mov	r3, fp
 800bcf6:	f7f4 fad7 	bl	80002a8 <__aeabi_dsub>
 800bcfa:	9d01      	ldr	r5, [sp, #4]
 800bcfc:	4682      	mov	sl, r0
 800bcfe:	468b      	mov	fp, r1
 800bd00:	4649      	mov	r1, r9
 800bd02:	4640      	mov	r0, r8
 800bd04:	f7f4 ff38 	bl	8000b78 <__aeabi_d2iz>
 800bd08:	4606      	mov	r6, r0
 800bd0a:	f7f4 fc1b 	bl	8000544 <__aeabi_i2d>
 800bd0e:	4602      	mov	r2, r0
 800bd10:	460b      	mov	r3, r1
 800bd12:	4640      	mov	r0, r8
 800bd14:	4649      	mov	r1, r9
 800bd16:	f7f4 fac7 	bl	80002a8 <__aeabi_dsub>
 800bd1a:	3630      	adds	r6, #48	; 0x30
 800bd1c:	f805 6b01 	strb.w	r6, [r5], #1
 800bd20:	4652      	mov	r2, sl
 800bd22:	465b      	mov	r3, fp
 800bd24:	4680      	mov	r8, r0
 800bd26:	4689      	mov	r9, r1
 800bd28:	f7f4 fee8 	bl	8000afc <__aeabi_dcmplt>
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	d163      	bne.n	800bdf8 <_dtoa_r+0x608>
 800bd30:	4642      	mov	r2, r8
 800bd32:	464b      	mov	r3, r9
 800bd34:	4936      	ldr	r1, [pc, #216]	; (800be10 <_dtoa_r+0x620>)
 800bd36:	2000      	movs	r0, #0
 800bd38:	f7f4 fab6 	bl	80002a8 <__aeabi_dsub>
 800bd3c:	4652      	mov	r2, sl
 800bd3e:	465b      	mov	r3, fp
 800bd40:	f7f4 fedc 	bl	8000afc <__aeabi_dcmplt>
 800bd44:	2800      	cmp	r0, #0
 800bd46:	f040 80b5 	bne.w	800beb4 <_dtoa_r+0x6c4>
 800bd4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd4c:	429d      	cmp	r5, r3
 800bd4e:	d081      	beq.n	800bc54 <_dtoa_r+0x464>
 800bd50:	4b30      	ldr	r3, [pc, #192]	; (800be14 <_dtoa_r+0x624>)
 800bd52:	2200      	movs	r2, #0
 800bd54:	4650      	mov	r0, sl
 800bd56:	4659      	mov	r1, fp
 800bd58:	f7f4 fc5e 	bl	8000618 <__aeabi_dmul>
 800bd5c:	4b2d      	ldr	r3, [pc, #180]	; (800be14 <_dtoa_r+0x624>)
 800bd5e:	4682      	mov	sl, r0
 800bd60:	468b      	mov	fp, r1
 800bd62:	4640      	mov	r0, r8
 800bd64:	4649      	mov	r1, r9
 800bd66:	2200      	movs	r2, #0
 800bd68:	f7f4 fc56 	bl	8000618 <__aeabi_dmul>
 800bd6c:	4680      	mov	r8, r0
 800bd6e:	4689      	mov	r9, r1
 800bd70:	e7c6      	b.n	800bd00 <_dtoa_r+0x510>
 800bd72:	4650      	mov	r0, sl
 800bd74:	4659      	mov	r1, fp
 800bd76:	f7f4 fc4f 	bl	8000618 <__aeabi_dmul>
 800bd7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd7c:	9d01      	ldr	r5, [sp, #4]
 800bd7e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd80:	4682      	mov	sl, r0
 800bd82:	468b      	mov	fp, r1
 800bd84:	4649      	mov	r1, r9
 800bd86:	4640      	mov	r0, r8
 800bd88:	f7f4 fef6 	bl	8000b78 <__aeabi_d2iz>
 800bd8c:	4606      	mov	r6, r0
 800bd8e:	f7f4 fbd9 	bl	8000544 <__aeabi_i2d>
 800bd92:	3630      	adds	r6, #48	; 0x30
 800bd94:	4602      	mov	r2, r0
 800bd96:	460b      	mov	r3, r1
 800bd98:	4640      	mov	r0, r8
 800bd9a:	4649      	mov	r1, r9
 800bd9c:	f7f4 fa84 	bl	80002a8 <__aeabi_dsub>
 800bda0:	f805 6b01 	strb.w	r6, [r5], #1
 800bda4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bda6:	429d      	cmp	r5, r3
 800bda8:	4680      	mov	r8, r0
 800bdaa:	4689      	mov	r9, r1
 800bdac:	f04f 0200 	mov.w	r2, #0
 800bdb0:	d124      	bne.n	800bdfc <_dtoa_r+0x60c>
 800bdb2:	4b1b      	ldr	r3, [pc, #108]	; (800be20 <_dtoa_r+0x630>)
 800bdb4:	4650      	mov	r0, sl
 800bdb6:	4659      	mov	r1, fp
 800bdb8:	f7f4 fa78 	bl	80002ac <__adddf3>
 800bdbc:	4602      	mov	r2, r0
 800bdbe:	460b      	mov	r3, r1
 800bdc0:	4640      	mov	r0, r8
 800bdc2:	4649      	mov	r1, r9
 800bdc4:	f7f4 feb8 	bl	8000b38 <__aeabi_dcmpgt>
 800bdc8:	2800      	cmp	r0, #0
 800bdca:	d173      	bne.n	800beb4 <_dtoa_r+0x6c4>
 800bdcc:	4652      	mov	r2, sl
 800bdce:	465b      	mov	r3, fp
 800bdd0:	4913      	ldr	r1, [pc, #76]	; (800be20 <_dtoa_r+0x630>)
 800bdd2:	2000      	movs	r0, #0
 800bdd4:	f7f4 fa68 	bl	80002a8 <__aeabi_dsub>
 800bdd8:	4602      	mov	r2, r0
 800bdda:	460b      	mov	r3, r1
 800bddc:	4640      	mov	r0, r8
 800bdde:	4649      	mov	r1, r9
 800bde0:	f7f4 fe8c 	bl	8000afc <__aeabi_dcmplt>
 800bde4:	2800      	cmp	r0, #0
 800bde6:	f43f af35 	beq.w	800bc54 <_dtoa_r+0x464>
 800bdea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bdec:	1e6b      	subs	r3, r5, #1
 800bdee:	930f      	str	r3, [sp, #60]	; 0x3c
 800bdf0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bdf4:	2b30      	cmp	r3, #48	; 0x30
 800bdf6:	d0f8      	beq.n	800bdea <_dtoa_r+0x5fa>
 800bdf8:	9700      	str	r7, [sp, #0]
 800bdfa:	e049      	b.n	800be90 <_dtoa_r+0x6a0>
 800bdfc:	4b05      	ldr	r3, [pc, #20]	; (800be14 <_dtoa_r+0x624>)
 800bdfe:	f7f4 fc0b 	bl	8000618 <__aeabi_dmul>
 800be02:	4680      	mov	r8, r0
 800be04:	4689      	mov	r9, r1
 800be06:	e7bd      	b.n	800bd84 <_dtoa_r+0x594>
 800be08:	0800f140 	.word	0x0800f140
 800be0c:	0800f118 	.word	0x0800f118
 800be10:	3ff00000 	.word	0x3ff00000
 800be14:	40240000 	.word	0x40240000
 800be18:	401c0000 	.word	0x401c0000
 800be1c:	40140000 	.word	0x40140000
 800be20:	3fe00000 	.word	0x3fe00000
 800be24:	9d01      	ldr	r5, [sp, #4]
 800be26:	4656      	mov	r6, sl
 800be28:	465f      	mov	r7, fp
 800be2a:	4642      	mov	r2, r8
 800be2c:	464b      	mov	r3, r9
 800be2e:	4630      	mov	r0, r6
 800be30:	4639      	mov	r1, r7
 800be32:	f7f4 fd1b 	bl	800086c <__aeabi_ddiv>
 800be36:	f7f4 fe9f 	bl	8000b78 <__aeabi_d2iz>
 800be3a:	4682      	mov	sl, r0
 800be3c:	f7f4 fb82 	bl	8000544 <__aeabi_i2d>
 800be40:	4642      	mov	r2, r8
 800be42:	464b      	mov	r3, r9
 800be44:	f7f4 fbe8 	bl	8000618 <__aeabi_dmul>
 800be48:	4602      	mov	r2, r0
 800be4a:	460b      	mov	r3, r1
 800be4c:	4630      	mov	r0, r6
 800be4e:	4639      	mov	r1, r7
 800be50:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800be54:	f7f4 fa28 	bl	80002a8 <__aeabi_dsub>
 800be58:	f805 6b01 	strb.w	r6, [r5], #1
 800be5c:	9e01      	ldr	r6, [sp, #4]
 800be5e:	9f03      	ldr	r7, [sp, #12]
 800be60:	1bae      	subs	r6, r5, r6
 800be62:	42b7      	cmp	r7, r6
 800be64:	4602      	mov	r2, r0
 800be66:	460b      	mov	r3, r1
 800be68:	d135      	bne.n	800bed6 <_dtoa_r+0x6e6>
 800be6a:	f7f4 fa1f 	bl	80002ac <__adddf3>
 800be6e:	4642      	mov	r2, r8
 800be70:	464b      	mov	r3, r9
 800be72:	4606      	mov	r6, r0
 800be74:	460f      	mov	r7, r1
 800be76:	f7f4 fe5f 	bl	8000b38 <__aeabi_dcmpgt>
 800be7a:	b9d0      	cbnz	r0, 800beb2 <_dtoa_r+0x6c2>
 800be7c:	4642      	mov	r2, r8
 800be7e:	464b      	mov	r3, r9
 800be80:	4630      	mov	r0, r6
 800be82:	4639      	mov	r1, r7
 800be84:	f7f4 fe30 	bl	8000ae8 <__aeabi_dcmpeq>
 800be88:	b110      	cbz	r0, 800be90 <_dtoa_r+0x6a0>
 800be8a:	f01a 0f01 	tst.w	sl, #1
 800be8e:	d110      	bne.n	800beb2 <_dtoa_r+0x6c2>
 800be90:	4620      	mov	r0, r4
 800be92:	ee18 1a10 	vmov	r1, s16
 800be96:	f000 fc2b 	bl	800c6f0 <_Bfree>
 800be9a:	2300      	movs	r3, #0
 800be9c:	9800      	ldr	r0, [sp, #0]
 800be9e:	702b      	strb	r3, [r5, #0]
 800bea0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bea2:	3001      	adds	r0, #1
 800bea4:	6018      	str	r0, [r3, #0]
 800bea6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	f43f acf1 	beq.w	800b890 <_dtoa_r+0xa0>
 800beae:	601d      	str	r5, [r3, #0]
 800beb0:	e4ee      	b.n	800b890 <_dtoa_r+0xa0>
 800beb2:	9f00      	ldr	r7, [sp, #0]
 800beb4:	462b      	mov	r3, r5
 800beb6:	461d      	mov	r5, r3
 800beb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bebc:	2a39      	cmp	r2, #57	; 0x39
 800bebe:	d106      	bne.n	800bece <_dtoa_r+0x6de>
 800bec0:	9a01      	ldr	r2, [sp, #4]
 800bec2:	429a      	cmp	r2, r3
 800bec4:	d1f7      	bne.n	800beb6 <_dtoa_r+0x6c6>
 800bec6:	9901      	ldr	r1, [sp, #4]
 800bec8:	2230      	movs	r2, #48	; 0x30
 800beca:	3701      	adds	r7, #1
 800becc:	700a      	strb	r2, [r1, #0]
 800bece:	781a      	ldrb	r2, [r3, #0]
 800bed0:	3201      	adds	r2, #1
 800bed2:	701a      	strb	r2, [r3, #0]
 800bed4:	e790      	b.n	800bdf8 <_dtoa_r+0x608>
 800bed6:	4ba6      	ldr	r3, [pc, #664]	; (800c170 <_dtoa_r+0x980>)
 800bed8:	2200      	movs	r2, #0
 800beda:	f7f4 fb9d 	bl	8000618 <__aeabi_dmul>
 800bede:	2200      	movs	r2, #0
 800bee0:	2300      	movs	r3, #0
 800bee2:	4606      	mov	r6, r0
 800bee4:	460f      	mov	r7, r1
 800bee6:	f7f4 fdff 	bl	8000ae8 <__aeabi_dcmpeq>
 800beea:	2800      	cmp	r0, #0
 800beec:	d09d      	beq.n	800be2a <_dtoa_r+0x63a>
 800beee:	e7cf      	b.n	800be90 <_dtoa_r+0x6a0>
 800bef0:	9a08      	ldr	r2, [sp, #32]
 800bef2:	2a00      	cmp	r2, #0
 800bef4:	f000 80d7 	beq.w	800c0a6 <_dtoa_r+0x8b6>
 800bef8:	9a06      	ldr	r2, [sp, #24]
 800befa:	2a01      	cmp	r2, #1
 800befc:	f300 80ba 	bgt.w	800c074 <_dtoa_r+0x884>
 800bf00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf02:	2a00      	cmp	r2, #0
 800bf04:	f000 80b2 	beq.w	800c06c <_dtoa_r+0x87c>
 800bf08:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bf0c:	9e07      	ldr	r6, [sp, #28]
 800bf0e:	9d04      	ldr	r5, [sp, #16]
 800bf10:	9a04      	ldr	r2, [sp, #16]
 800bf12:	441a      	add	r2, r3
 800bf14:	9204      	str	r2, [sp, #16]
 800bf16:	9a05      	ldr	r2, [sp, #20]
 800bf18:	2101      	movs	r1, #1
 800bf1a:	441a      	add	r2, r3
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	9205      	str	r2, [sp, #20]
 800bf20:	f000 fc9e 	bl	800c860 <__i2b>
 800bf24:	4607      	mov	r7, r0
 800bf26:	2d00      	cmp	r5, #0
 800bf28:	dd0c      	ble.n	800bf44 <_dtoa_r+0x754>
 800bf2a:	9b05      	ldr	r3, [sp, #20]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	dd09      	ble.n	800bf44 <_dtoa_r+0x754>
 800bf30:	42ab      	cmp	r3, r5
 800bf32:	9a04      	ldr	r2, [sp, #16]
 800bf34:	bfa8      	it	ge
 800bf36:	462b      	movge	r3, r5
 800bf38:	1ad2      	subs	r2, r2, r3
 800bf3a:	9204      	str	r2, [sp, #16]
 800bf3c:	9a05      	ldr	r2, [sp, #20]
 800bf3e:	1aed      	subs	r5, r5, r3
 800bf40:	1ad3      	subs	r3, r2, r3
 800bf42:	9305      	str	r3, [sp, #20]
 800bf44:	9b07      	ldr	r3, [sp, #28]
 800bf46:	b31b      	cbz	r3, 800bf90 <_dtoa_r+0x7a0>
 800bf48:	9b08      	ldr	r3, [sp, #32]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	f000 80af 	beq.w	800c0ae <_dtoa_r+0x8be>
 800bf50:	2e00      	cmp	r6, #0
 800bf52:	dd13      	ble.n	800bf7c <_dtoa_r+0x78c>
 800bf54:	4639      	mov	r1, r7
 800bf56:	4632      	mov	r2, r6
 800bf58:	4620      	mov	r0, r4
 800bf5a:	f000 fd41 	bl	800c9e0 <__pow5mult>
 800bf5e:	ee18 2a10 	vmov	r2, s16
 800bf62:	4601      	mov	r1, r0
 800bf64:	4607      	mov	r7, r0
 800bf66:	4620      	mov	r0, r4
 800bf68:	f000 fc90 	bl	800c88c <__multiply>
 800bf6c:	ee18 1a10 	vmov	r1, s16
 800bf70:	4680      	mov	r8, r0
 800bf72:	4620      	mov	r0, r4
 800bf74:	f000 fbbc 	bl	800c6f0 <_Bfree>
 800bf78:	ee08 8a10 	vmov	s16, r8
 800bf7c:	9b07      	ldr	r3, [sp, #28]
 800bf7e:	1b9a      	subs	r2, r3, r6
 800bf80:	d006      	beq.n	800bf90 <_dtoa_r+0x7a0>
 800bf82:	ee18 1a10 	vmov	r1, s16
 800bf86:	4620      	mov	r0, r4
 800bf88:	f000 fd2a 	bl	800c9e0 <__pow5mult>
 800bf8c:	ee08 0a10 	vmov	s16, r0
 800bf90:	2101      	movs	r1, #1
 800bf92:	4620      	mov	r0, r4
 800bf94:	f000 fc64 	bl	800c860 <__i2b>
 800bf98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	4606      	mov	r6, r0
 800bf9e:	f340 8088 	ble.w	800c0b2 <_dtoa_r+0x8c2>
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	4601      	mov	r1, r0
 800bfa6:	4620      	mov	r0, r4
 800bfa8:	f000 fd1a 	bl	800c9e0 <__pow5mult>
 800bfac:	9b06      	ldr	r3, [sp, #24]
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	4606      	mov	r6, r0
 800bfb2:	f340 8081 	ble.w	800c0b8 <_dtoa_r+0x8c8>
 800bfb6:	f04f 0800 	mov.w	r8, #0
 800bfba:	6933      	ldr	r3, [r6, #16]
 800bfbc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bfc0:	6918      	ldr	r0, [r3, #16]
 800bfc2:	f000 fbfd 	bl	800c7c0 <__hi0bits>
 800bfc6:	f1c0 0020 	rsb	r0, r0, #32
 800bfca:	9b05      	ldr	r3, [sp, #20]
 800bfcc:	4418      	add	r0, r3
 800bfce:	f010 001f 	ands.w	r0, r0, #31
 800bfd2:	f000 8092 	beq.w	800c0fa <_dtoa_r+0x90a>
 800bfd6:	f1c0 0320 	rsb	r3, r0, #32
 800bfda:	2b04      	cmp	r3, #4
 800bfdc:	f340 808a 	ble.w	800c0f4 <_dtoa_r+0x904>
 800bfe0:	f1c0 001c 	rsb	r0, r0, #28
 800bfe4:	9b04      	ldr	r3, [sp, #16]
 800bfe6:	4403      	add	r3, r0
 800bfe8:	9304      	str	r3, [sp, #16]
 800bfea:	9b05      	ldr	r3, [sp, #20]
 800bfec:	4403      	add	r3, r0
 800bfee:	4405      	add	r5, r0
 800bff0:	9305      	str	r3, [sp, #20]
 800bff2:	9b04      	ldr	r3, [sp, #16]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	dd07      	ble.n	800c008 <_dtoa_r+0x818>
 800bff8:	ee18 1a10 	vmov	r1, s16
 800bffc:	461a      	mov	r2, r3
 800bffe:	4620      	mov	r0, r4
 800c000:	f000 fd48 	bl	800ca94 <__lshift>
 800c004:	ee08 0a10 	vmov	s16, r0
 800c008:	9b05      	ldr	r3, [sp, #20]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	dd05      	ble.n	800c01a <_dtoa_r+0x82a>
 800c00e:	4631      	mov	r1, r6
 800c010:	461a      	mov	r2, r3
 800c012:	4620      	mov	r0, r4
 800c014:	f000 fd3e 	bl	800ca94 <__lshift>
 800c018:	4606      	mov	r6, r0
 800c01a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d06e      	beq.n	800c0fe <_dtoa_r+0x90e>
 800c020:	ee18 0a10 	vmov	r0, s16
 800c024:	4631      	mov	r1, r6
 800c026:	f000 fda5 	bl	800cb74 <__mcmp>
 800c02a:	2800      	cmp	r0, #0
 800c02c:	da67      	bge.n	800c0fe <_dtoa_r+0x90e>
 800c02e:	9b00      	ldr	r3, [sp, #0]
 800c030:	3b01      	subs	r3, #1
 800c032:	ee18 1a10 	vmov	r1, s16
 800c036:	9300      	str	r3, [sp, #0]
 800c038:	220a      	movs	r2, #10
 800c03a:	2300      	movs	r3, #0
 800c03c:	4620      	mov	r0, r4
 800c03e:	f000 fb79 	bl	800c734 <__multadd>
 800c042:	9b08      	ldr	r3, [sp, #32]
 800c044:	ee08 0a10 	vmov	s16, r0
 800c048:	2b00      	cmp	r3, #0
 800c04a:	f000 81b1 	beq.w	800c3b0 <_dtoa_r+0xbc0>
 800c04e:	2300      	movs	r3, #0
 800c050:	4639      	mov	r1, r7
 800c052:	220a      	movs	r2, #10
 800c054:	4620      	mov	r0, r4
 800c056:	f000 fb6d 	bl	800c734 <__multadd>
 800c05a:	9b02      	ldr	r3, [sp, #8]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	4607      	mov	r7, r0
 800c060:	f300 808e 	bgt.w	800c180 <_dtoa_r+0x990>
 800c064:	9b06      	ldr	r3, [sp, #24]
 800c066:	2b02      	cmp	r3, #2
 800c068:	dc51      	bgt.n	800c10e <_dtoa_r+0x91e>
 800c06a:	e089      	b.n	800c180 <_dtoa_r+0x990>
 800c06c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c06e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c072:	e74b      	b.n	800bf0c <_dtoa_r+0x71c>
 800c074:	9b03      	ldr	r3, [sp, #12]
 800c076:	1e5e      	subs	r6, r3, #1
 800c078:	9b07      	ldr	r3, [sp, #28]
 800c07a:	42b3      	cmp	r3, r6
 800c07c:	bfbf      	itttt	lt
 800c07e:	9b07      	ldrlt	r3, [sp, #28]
 800c080:	9607      	strlt	r6, [sp, #28]
 800c082:	1af2      	sublt	r2, r6, r3
 800c084:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c086:	bfb6      	itet	lt
 800c088:	189b      	addlt	r3, r3, r2
 800c08a:	1b9e      	subge	r6, r3, r6
 800c08c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c08e:	9b03      	ldr	r3, [sp, #12]
 800c090:	bfb8      	it	lt
 800c092:	2600      	movlt	r6, #0
 800c094:	2b00      	cmp	r3, #0
 800c096:	bfb7      	itett	lt
 800c098:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c09c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c0a0:	1a9d      	sublt	r5, r3, r2
 800c0a2:	2300      	movlt	r3, #0
 800c0a4:	e734      	b.n	800bf10 <_dtoa_r+0x720>
 800c0a6:	9e07      	ldr	r6, [sp, #28]
 800c0a8:	9d04      	ldr	r5, [sp, #16]
 800c0aa:	9f08      	ldr	r7, [sp, #32]
 800c0ac:	e73b      	b.n	800bf26 <_dtoa_r+0x736>
 800c0ae:	9a07      	ldr	r2, [sp, #28]
 800c0b0:	e767      	b.n	800bf82 <_dtoa_r+0x792>
 800c0b2:	9b06      	ldr	r3, [sp, #24]
 800c0b4:	2b01      	cmp	r3, #1
 800c0b6:	dc18      	bgt.n	800c0ea <_dtoa_r+0x8fa>
 800c0b8:	f1ba 0f00 	cmp.w	sl, #0
 800c0bc:	d115      	bne.n	800c0ea <_dtoa_r+0x8fa>
 800c0be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c0c2:	b993      	cbnz	r3, 800c0ea <_dtoa_r+0x8fa>
 800c0c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c0c8:	0d1b      	lsrs	r3, r3, #20
 800c0ca:	051b      	lsls	r3, r3, #20
 800c0cc:	b183      	cbz	r3, 800c0f0 <_dtoa_r+0x900>
 800c0ce:	9b04      	ldr	r3, [sp, #16]
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	9304      	str	r3, [sp, #16]
 800c0d4:	9b05      	ldr	r3, [sp, #20]
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	9305      	str	r3, [sp, #20]
 800c0da:	f04f 0801 	mov.w	r8, #1
 800c0de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	f47f af6a 	bne.w	800bfba <_dtoa_r+0x7ca>
 800c0e6:	2001      	movs	r0, #1
 800c0e8:	e76f      	b.n	800bfca <_dtoa_r+0x7da>
 800c0ea:	f04f 0800 	mov.w	r8, #0
 800c0ee:	e7f6      	b.n	800c0de <_dtoa_r+0x8ee>
 800c0f0:	4698      	mov	r8, r3
 800c0f2:	e7f4      	b.n	800c0de <_dtoa_r+0x8ee>
 800c0f4:	f43f af7d 	beq.w	800bff2 <_dtoa_r+0x802>
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	301c      	adds	r0, #28
 800c0fc:	e772      	b.n	800bfe4 <_dtoa_r+0x7f4>
 800c0fe:	9b03      	ldr	r3, [sp, #12]
 800c100:	2b00      	cmp	r3, #0
 800c102:	dc37      	bgt.n	800c174 <_dtoa_r+0x984>
 800c104:	9b06      	ldr	r3, [sp, #24]
 800c106:	2b02      	cmp	r3, #2
 800c108:	dd34      	ble.n	800c174 <_dtoa_r+0x984>
 800c10a:	9b03      	ldr	r3, [sp, #12]
 800c10c:	9302      	str	r3, [sp, #8]
 800c10e:	9b02      	ldr	r3, [sp, #8]
 800c110:	b96b      	cbnz	r3, 800c12e <_dtoa_r+0x93e>
 800c112:	4631      	mov	r1, r6
 800c114:	2205      	movs	r2, #5
 800c116:	4620      	mov	r0, r4
 800c118:	f000 fb0c 	bl	800c734 <__multadd>
 800c11c:	4601      	mov	r1, r0
 800c11e:	4606      	mov	r6, r0
 800c120:	ee18 0a10 	vmov	r0, s16
 800c124:	f000 fd26 	bl	800cb74 <__mcmp>
 800c128:	2800      	cmp	r0, #0
 800c12a:	f73f adbb 	bgt.w	800bca4 <_dtoa_r+0x4b4>
 800c12e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c130:	9d01      	ldr	r5, [sp, #4]
 800c132:	43db      	mvns	r3, r3
 800c134:	9300      	str	r3, [sp, #0]
 800c136:	f04f 0800 	mov.w	r8, #0
 800c13a:	4631      	mov	r1, r6
 800c13c:	4620      	mov	r0, r4
 800c13e:	f000 fad7 	bl	800c6f0 <_Bfree>
 800c142:	2f00      	cmp	r7, #0
 800c144:	f43f aea4 	beq.w	800be90 <_dtoa_r+0x6a0>
 800c148:	f1b8 0f00 	cmp.w	r8, #0
 800c14c:	d005      	beq.n	800c15a <_dtoa_r+0x96a>
 800c14e:	45b8      	cmp	r8, r7
 800c150:	d003      	beq.n	800c15a <_dtoa_r+0x96a>
 800c152:	4641      	mov	r1, r8
 800c154:	4620      	mov	r0, r4
 800c156:	f000 facb 	bl	800c6f0 <_Bfree>
 800c15a:	4639      	mov	r1, r7
 800c15c:	4620      	mov	r0, r4
 800c15e:	f000 fac7 	bl	800c6f0 <_Bfree>
 800c162:	e695      	b.n	800be90 <_dtoa_r+0x6a0>
 800c164:	2600      	movs	r6, #0
 800c166:	4637      	mov	r7, r6
 800c168:	e7e1      	b.n	800c12e <_dtoa_r+0x93e>
 800c16a:	9700      	str	r7, [sp, #0]
 800c16c:	4637      	mov	r7, r6
 800c16e:	e599      	b.n	800bca4 <_dtoa_r+0x4b4>
 800c170:	40240000 	.word	0x40240000
 800c174:	9b08      	ldr	r3, [sp, #32]
 800c176:	2b00      	cmp	r3, #0
 800c178:	f000 80ca 	beq.w	800c310 <_dtoa_r+0xb20>
 800c17c:	9b03      	ldr	r3, [sp, #12]
 800c17e:	9302      	str	r3, [sp, #8]
 800c180:	2d00      	cmp	r5, #0
 800c182:	dd05      	ble.n	800c190 <_dtoa_r+0x9a0>
 800c184:	4639      	mov	r1, r7
 800c186:	462a      	mov	r2, r5
 800c188:	4620      	mov	r0, r4
 800c18a:	f000 fc83 	bl	800ca94 <__lshift>
 800c18e:	4607      	mov	r7, r0
 800c190:	f1b8 0f00 	cmp.w	r8, #0
 800c194:	d05b      	beq.n	800c24e <_dtoa_r+0xa5e>
 800c196:	6879      	ldr	r1, [r7, #4]
 800c198:	4620      	mov	r0, r4
 800c19a:	f000 fa69 	bl	800c670 <_Balloc>
 800c19e:	4605      	mov	r5, r0
 800c1a0:	b928      	cbnz	r0, 800c1ae <_dtoa_r+0x9be>
 800c1a2:	4b87      	ldr	r3, [pc, #540]	; (800c3c0 <_dtoa_r+0xbd0>)
 800c1a4:	4602      	mov	r2, r0
 800c1a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c1aa:	f7ff bb3b 	b.w	800b824 <_dtoa_r+0x34>
 800c1ae:	693a      	ldr	r2, [r7, #16]
 800c1b0:	3202      	adds	r2, #2
 800c1b2:	0092      	lsls	r2, r2, #2
 800c1b4:	f107 010c 	add.w	r1, r7, #12
 800c1b8:	300c      	adds	r0, #12
 800c1ba:	f7fe fb2a 	bl	800a812 <memcpy>
 800c1be:	2201      	movs	r2, #1
 800c1c0:	4629      	mov	r1, r5
 800c1c2:	4620      	mov	r0, r4
 800c1c4:	f000 fc66 	bl	800ca94 <__lshift>
 800c1c8:	9b01      	ldr	r3, [sp, #4]
 800c1ca:	f103 0901 	add.w	r9, r3, #1
 800c1ce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c1d2:	4413      	add	r3, r2
 800c1d4:	9305      	str	r3, [sp, #20]
 800c1d6:	f00a 0301 	and.w	r3, sl, #1
 800c1da:	46b8      	mov	r8, r7
 800c1dc:	9304      	str	r3, [sp, #16]
 800c1de:	4607      	mov	r7, r0
 800c1e0:	4631      	mov	r1, r6
 800c1e2:	ee18 0a10 	vmov	r0, s16
 800c1e6:	f7ff fa77 	bl	800b6d8 <quorem>
 800c1ea:	4641      	mov	r1, r8
 800c1ec:	9002      	str	r0, [sp, #8]
 800c1ee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c1f2:	ee18 0a10 	vmov	r0, s16
 800c1f6:	f000 fcbd 	bl	800cb74 <__mcmp>
 800c1fa:	463a      	mov	r2, r7
 800c1fc:	9003      	str	r0, [sp, #12]
 800c1fe:	4631      	mov	r1, r6
 800c200:	4620      	mov	r0, r4
 800c202:	f000 fcd3 	bl	800cbac <__mdiff>
 800c206:	68c2      	ldr	r2, [r0, #12]
 800c208:	f109 3bff 	add.w	fp, r9, #4294967295
 800c20c:	4605      	mov	r5, r0
 800c20e:	bb02      	cbnz	r2, 800c252 <_dtoa_r+0xa62>
 800c210:	4601      	mov	r1, r0
 800c212:	ee18 0a10 	vmov	r0, s16
 800c216:	f000 fcad 	bl	800cb74 <__mcmp>
 800c21a:	4602      	mov	r2, r0
 800c21c:	4629      	mov	r1, r5
 800c21e:	4620      	mov	r0, r4
 800c220:	9207      	str	r2, [sp, #28]
 800c222:	f000 fa65 	bl	800c6f0 <_Bfree>
 800c226:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c22a:	ea43 0102 	orr.w	r1, r3, r2
 800c22e:	9b04      	ldr	r3, [sp, #16]
 800c230:	430b      	orrs	r3, r1
 800c232:	464d      	mov	r5, r9
 800c234:	d10f      	bne.n	800c256 <_dtoa_r+0xa66>
 800c236:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c23a:	d02a      	beq.n	800c292 <_dtoa_r+0xaa2>
 800c23c:	9b03      	ldr	r3, [sp, #12]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	dd02      	ble.n	800c248 <_dtoa_r+0xa58>
 800c242:	9b02      	ldr	r3, [sp, #8]
 800c244:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c248:	f88b a000 	strb.w	sl, [fp]
 800c24c:	e775      	b.n	800c13a <_dtoa_r+0x94a>
 800c24e:	4638      	mov	r0, r7
 800c250:	e7ba      	b.n	800c1c8 <_dtoa_r+0x9d8>
 800c252:	2201      	movs	r2, #1
 800c254:	e7e2      	b.n	800c21c <_dtoa_r+0xa2c>
 800c256:	9b03      	ldr	r3, [sp, #12]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	db04      	blt.n	800c266 <_dtoa_r+0xa76>
 800c25c:	9906      	ldr	r1, [sp, #24]
 800c25e:	430b      	orrs	r3, r1
 800c260:	9904      	ldr	r1, [sp, #16]
 800c262:	430b      	orrs	r3, r1
 800c264:	d122      	bne.n	800c2ac <_dtoa_r+0xabc>
 800c266:	2a00      	cmp	r2, #0
 800c268:	ddee      	ble.n	800c248 <_dtoa_r+0xa58>
 800c26a:	ee18 1a10 	vmov	r1, s16
 800c26e:	2201      	movs	r2, #1
 800c270:	4620      	mov	r0, r4
 800c272:	f000 fc0f 	bl	800ca94 <__lshift>
 800c276:	4631      	mov	r1, r6
 800c278:	ee08 0a10 	vmov	s16, r0
 800c27c:	f000 fc7a 	bl	800cb74 <__mcmp>
 800c280:	2800      	cmp	r0, #0
 800c282:	dc03      	bgt.n	800c28c <_dtoa_r+0xa9c>
 800c284:	d1e0      	bne.n	800c248 <_dtoa_r+0xa58>
 800c286:	f01a 0f01 	tst.w	sl, #1
 800c28a:	d0dd      	beq.n	800c248 <_dtoa_r+0xa58>
 800c28c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c290:	d1d7      	bne.n	800c242 <_dtoa_r+0xa52>
 800c292:	2339      	movs	r3, #57	; 0x39
 800c294:	f88b 3000 	strb.w	r3, [fp]
 800c298:	462b      	mov	r3, r5
 800c29a:	461d      	mov	r5, r3
 800c29c:	3b01      	subs	r3, #1
 800c29e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c2a2:	2a39      	cmp	r2, #57	; 0x39
 800c2a4:	d071      	beq.n	800c38a <_dtoa_r+0xb9a>
 800c2a6:	3201      	adds	r2, #1
 800c2a8:	701a      	strb	r2, [r3, #0]
 800c2aa:	e746      	b.n	800c13a <_dtoa_r+0x94a>
 800c2ac:	2a00      	cmp	r2, #0
 800c2ae:	dd07      	ble.n	800c2c0 <_dtoa_r+0xad0>
 800c2b0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c2b4:	d0ed      	beq.n	800c292 <_dtoa_r+0xaa2>
 800c2b6:	f10a 0301 	add.w	r3, sl, #1
 800c2ba:	f88b 3000 	strb.w	r3, [fp]
 800c2be:	e73c      	b.n	800c13a <_dtoa_r+0x94a>
 800c2c0:	9b05      	ldr	r3, [sp, #20]
 800c2c2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c2c6:	4599      	cmp	r9, r3
 800c2c8:	d047      	beq.n	800c35a <_dtoa_r+0xb6a>
 800c2ca:	ee18 1a10 	vmov	r1, s16
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	220a      	movs	r2, #10
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	f000 fa2e 	bl	800c734 <__multadd>
 800c2d8:	45b8      	cmp	r8, r7
 800c2da:	ee08 0a10 	vmov	s16, r0
 800c2de:	f04f 0300 	mov.w	r3, #0
 800c2e2:	f04f 020a 	mov.w	r2, #10
 800c2e6:	4641      	mov	r1, r8
 800c2e8:	4620      	mov	r0, r4
 800c2ea:	d106      	bne.n	800c2fa <_dtoa_r+0xb0a>
 800c2ec:	f000 fa22 	bl	800c734 <__multadd>
 800c2f0:	4680      	mov	r8, r0
 800c2f2:	4607      	mov	r7, r0
 800c2f4:	f109 0901 	add.w	r9, r9, #1
 800c2f8:	e772      	b.n	800c1e0 <_dtoa_r+0x9f0>
 800c2fa:	f000 fa1b 	bl	800c734 <__multadd>
 800c2fe:	4639      	mov	r1, r7
 800c300:	4680      	mov	r8, r0
 800c302:	2300      	movs	r3, #0
 800c304:	220a      	movs	r2, #10
 800c306:	4620      	mov	r0, r4
 800c308:	f000 fa14 	bl	800c734 <__multadd>
 800c30c:	4607      	mov	r7, r0
 800c30e:	e7f1      	b.n	800c2f4 <_dtoa_r+0xb04>
 800c310:	9b03      	ldr	r3, [sp, #12]
 800c312:	9302      	str	r3, [sp, #8]
 800c314:	9d01      	ldr	r5, [sp, #4]
 800c316:	ee18 0a10 	vmov	r0, s16
 800c31a:	4631      	mov	r1, r6
 800c31c:	f7ff f9dc 	bl	800b6d8 <quorem>
 800c320:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c324:	9b01      	ldr	r3, [sp, #4]
 800c326:	f805 ab01 	strb.w	sl, [r5], #1
 800c32a:	1aea      	subs	r2, r5, r3
 800c32c:	9b02      	ldr	r3, [sp, #8]
 800c32e:	4293      	cmp	r3, r2
 800c330:	dd09      	ble.n	800c346 <_dtoa_r+0xb56>
 800c332:	ee18 1a10 	vmov	r1, s16
 800c336:	2300      	movs	r3, #0
 800c338:	220a      	movs	r2, #10
 800c33a:	4620      	mov	r0, r4
 800c33c:	f000 f9fa 	bl	800c734 <__multadd>
 800c340:	ee08 0a10 	vmov	s16, r0
 800c344:	e7e7      	b.n	800c316 <_dtoa_r+0xb26>
 800c346:	9b02      	ldr	r3, [sp, #8]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	bfc8      	it	gt
 800c34c:	461d      	movgt	r5, r3
 800c34e:	9b01      	ldr	r3, [sp, #4]
 800c350:	bfd8      	it	le
 800c352:	2501      	movle	r5, #1
 800c354:	441d      	add	r5, r3
 800c356:	f04f 0800 	mov.w	r8, #0
 800c35a:	ee18 1a10 	vmov	r1, s16
 800c35e:	2201      	movs	r2, #1
 800c360:	4620      	mov	r0, r4
 800c362:	f000 fb97 	bl	800ca94 <__lshift>
 800c366:	4631      	mov	r1, r6
 800c368:	ee08 0a10 	vmov	s16, r0
 800c36c:	f000 fc02 	bl	800cb74 <__mcmp>
 800c370:	2800      	cmp	r0, #0
 800c372:	dc91      	bgt.n	800c298 <_dtoa_r+0xaa8>
 800c374:	d102      	bne.n	800c37c <_dtoa_r+0xb8c>
 800c376:	f01a 0f01 	tst.w	sl, #1
 800c37a:	d18d      	bne.n	800c298 <_dtoa_r+0xaa8>
 800c37c:	462b      	mov	r3, r5
 800c37e:	461d      	mov	r5, r3
 800c380:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c384:	2a30      	cmp	r2, #48	; 0x30
 800c386:	d0fa      	beq.n	800c37e <_dtoa_r+0xb8e>
 800c388:	e6d7      	b.n	800c13a <_dtoa_r+0x94a>
 800c38a:	9a01      	ldr	r2, [sp, #4]
 800c38c:	429a      	cmp	r2, r3
 800c38e:	d184      	bne.n	800c29a <_dtoa_r+0xaaa>
 800c390:	9b00      	ldr	r3, [sp, #0]
 800c392:	3301      	adds	r3, #1
 800c394:	9300      	str	r3, [sp, #0]
 800c396:	2331      	movs	r3, #49	; 0x31
 800c398:	7013      	strb	r3, [r2, #0]
 800c39a:	e6ce      	b.n	800c13a <_dtoa_r+0x94a>
 800c39c:	4b09      	ldr	r3, [pc, #36]	; (800c3c4 <_dtoa_r+0xbd4>)
 800c39e:	f7ff ba95 	b.w	800b8cc <_dtoa_r+0xdc>
 800c3a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	f47f aa6e 	bne.w	800b886 <_dtoa_r+0x96>
 800c3aa:	4b07      	ldr	r3, [pc, #28]	; (800c3c8 <_dtoa_r+0xbd8>)
 800c3ac:	f7ff ba8e 	b.w	800b8cc <_dtoa_r+0xdc>
 800c3b0:	9b02      	ldr	r3, [sp, #8]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	dcae      	bgt.n	800c314 <_dtoa_r+0xb24>
 800c3b6:	9b06      	ldr	r3, [sp, #24]
 800c3b8:	2b02      	cmp	r3, #2
 800c3ba:	f73f aea8 	bgt.w	800c10e <_dtoa_r+0x91e>
 800c3be:	e7a9      	b.n	800c314 <_dtoa_r+0xb24>
 800c3c0:	0800f0a7 	.word	0x0800f0a7
 800c3c4:	0800f004 	.word	0x0800f004
 800c3c8:	0800f028 	.word	0x0800f028

0800c3cc <__sflush_r>:
 800c3cc:	898a      	ldrh	r2, [r1, #12]
 800c3ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3d2:	4605      	mov	r5, r0
 800c3d4:	0710      	lsls	r0, r2, #28
 800c3d6:	460c      	mov	r4, r1
 800c3d8:	d458      	bmi.n	800c48c <__sflush_r+0xc0>
 800c3da:	684b      	ldr	r3, [r1, #4]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	dc05      	bgt.n	800c3ec <__sflush_r+0x20>
 800c3e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	dc02      	bgt.n	800c3ec <__sflush_r+0x20>
 800c3e6:	2000      	movs	r0, #0
 800c3e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c3ee:	2e00      	cmp	r6, #0
 800c3f0:	d0f9      	beq.n	800c3e6 <__sflush_r+0x1a>
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c3f8:	682f      	ldr	r7, [r5, #0]
 800c3fa:	602b      	str	r3, [r5, #0]
 800c3fc:	d032      	beq.n	800c464 <__sflush_r+0x98>
 800c3fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c400:	89a3      	ldrh	r3, [r4, #12]
 800c402:	075a      	lsls	r2, r3, #29
 800c404:	d505      	bpl.n	800c412 <__sflush_r+0x46>
 800c406:	6863      	ldr	r3, [r4, #4]
 800c408:	1ac0      	subs	r0, r0, r3
 800c40a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c40c:	b10b      	cbz	r3, 800c412 <__sflush_r+0x46>
 800c40e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c410:	1ac0      	subs	r0, r0, r3
 800c412:	2300      	movs	r3, #0
 800c414:	4602      	mov	r2, r0
 800c416:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c418:	6a21      	ldr	r1, [r4, #32]
 800c41a:	4628      	mov	r0, r5
 800c41c:	47b0      	blx	r6
 800c41e:	1c43      	adds	r3, r0, #1
 800c420:	89a3      	ldrh	r3, [r4, #12]
 800c422:	d106      	bne.n	800c432 <__sflush_r+0x66>
 800c424:	6829      	ldr	r1, [r5, #0]
 800c426:	291d      	cmp	r1, #29
 800c428:	d82c      	bhi.n	800c484 <__sflush_r+0xb8>
 800c42a:	4a2a      	ldr	r2, [pc, #168]	; (800c4d4 <__sflush_r+0x108>)
 800c42c:	40ca      	lsrs	r2, r1
 800c42e:	07d6      	lsls	r6, r2, #31
 800c430:	d528      	bpl.n	800c484 <__sflush_r+0xb8>
 800c432:	2200      	movs	r2, #0
 800c434:	6062      	str	r2, [r4, #4]
 800c436:	04d9      	lsls	r1, r3, #19
 800c438:	6922      	ldr	r2, [r4, #16]
 800c43a:	6022      	str	r2, [r4, #0]
 800c43c:	d504      	bpl.n	800c448 <__sflush_r+0x7c>
 800c43e:	1c42      	adds	r2, r0, #1
 800c440:	d101      	bne.n	800c446 <__sflush_r+0x7a>
 800c442:	682b      	ldr	r3, [r5, #0]
 800c444:	b903      	cbnz	r3, 800c448 <__sflush_r+0x7c>
 800c446:	6560      	str	r0, [r4, #84]	; 0x54
 800c448:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c44a:	602f      	str	r7, [r5, #0]
 800c44c:	2900      	cmp	r1, #0
 800c44e:	d0ca      	beq.n	800c3e6 <__sflush_r+0x1a>
 800c450:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c454:	4299      	cmp	r1, r3
 800c456:	d002      	beq.n	800c45e <__sflush_r+0x92>
 800c458:	4628      	mov	r0, r5
 800c45a:	f000 fca3 	bl	800cda4 <_free_r>
 800c45e:	2000      	movs	r0, #0
 800c460:	6360      	str	r0, [r4, #52]	; 0x34
 800c462:	e7c1      	b.n	800c3e8 <__sflush_r+0x1c>
 800c464:	6a21      	ldr	r1, [r4, #32]
 800c466:	2301      	movs	r3, #1
 800c468:	4628      	mov	r0, r5
 800c46a:	47b0      	blx	r6
 800c46c:	1c41      	adds	r1, r0, #1
 800c46e:	d1c7      	bne.n	800c400 <__sflush_r+0x34>
 800c470:	682b      	ldr	r3, [r5, #0]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d0c4      	beq.n	800c400 <__sflush_r+0x34>
 800c476:	2b1d      	cmp	r3, #29
 800c478:	d001      	beq.n	800c47e <__sflush_r+0xb2>
 800c47a:	2b16      	cmp	r3, #22
 800c47c:	d101      	bne.n	800c482 <__sflush_r+0xb6>
 800c47e:	602f      	str	r7, [r5, #0]
 800c480:	e7b1      	b.n	800c3e6 <__sflush_r+0x1a>
 800c482:	89a3      	ldrh	r3, [r4, #12]
 800c484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c488:	81a3      	strh	r3, [r4, #12]
 800c48a:	e7ad      	b.n	800c3e8 <__sflush_r+0x1c>
 800c48c:	690f      	ldr	r7, [r1, #16]
 800c48e:	2f00      	cmp	r7, #0
 800c490:	d0a9      	beq.n	800c3e6 <__sflush_r+0x1a>
 800c492:	0793      	lsls	r3, r2, #30
 800c494:	680e      	ldr	r6, [r1, #0]
 800c496:	bf08      	it	eq
 800c498:	694b      	ldreq	r3, [r1, #20]
 800c49a:	600f      	str	r7, [r1, #0]
 800c49c:	bf18      	it	ne
 800c49e:	2300      	movne	r3, #0
 800c4a0:	eba6 0807 	sub.w	r8, r6, r7
 800c4a4:	608b      	str	r3, [r1, #8]
 800c4a6:	f1b8 0f00 	cmp.w	r8, #0
 800c4aa:	dd9c      	ble.n	800c3e6 <__sflush_r+0x1a>
 800c4ac:	6a21      	ldr	r1, [r4, #32]
 800c4ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c4b0:	4643      	mov	r3, r8
 800c4b2:	463a      	mov	r2, r7
 800c4b4:	4628      	mov	r0, r5
 800c4b6:	47b0      	blx	r6
 800c4b8:	2800      	cmp	r0, #0
 800c4ba:	dc06      	bgt.n	800c4ca <__sflush_r+0xfe>
 800c4bc:	89a3      	ldrh	r3, [r4, #12]
 800c4be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4c2:	81a3      	strh	r3, [r4, #12]
 800c4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4c8:	e78e      	b.n	800c3e8 <__sflush_r+0x1c>
 800c4ca:	4407      	add	r7, r0
 800c4cc:	eba8 0800 	sub.w	r8, r8, r0
 800c4d0:	e7e9      	b.n	800c4a6 <__sflush_r+0xda>
 800c4d2:	bf00      	nop
 800c4d4:	20400001 	.word	0x20400001

0800c4d8 <_fflush_r>:
 800c4d8:	b538      	push	{r3, r4, r5, lr}
 800c4da:	690b      	ldr	r3, [r1, #16]
 800c4dc:	4605      	mov	r5, r0
 800c4de:	460c      	mov	r4, r1
 800c4e0:	b913      	cbnz	r3, 800c4e8 <_fflush_r+0x10>
 800c4e2:	2500      	movs	r5, #0
 800c4e4:	4628      	mov	r0, r5
 800c4e6:	bd38      	pop	{r3, r4, r5, pc}
 800c4e8:	b118      	cbz	r0, 800c4f2 <_fflush_r+0x1a>
 800c4ea:	6983      	ldr	r3, [r0, #24]
 800c4ec:	b90b      	cbnz	r3, 800c4f2 <_fflush_r+0x1a>
 800c4ee:	f7fe f8cb 	bl	800a688 <__sinit>
 800c4f2:	4b14      	ldr	r3, [pc, #80]	; (800c544 <_fflush_r+0x6c>)
 800c4f4:	429c      	cmp	r4, r3
 800c4f6:	d11b      	bne.n	800c530 <_fflush_r+0x58>
 800c4f8:	686c      	ldr	r4, [r5, #4]
 800c4fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d0ef      	beq.n	800c4e2 <_fflush_r+0xa>
 800c502:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c504:	07d0      	lsls	r0, r2, #31
 800c506:	d404      	bmi.n	800c512 <_fflush_r+0x3a>
 800c508:	0599      	lsls	r1, r3, #22
 800c50a:	d402      	bmi.n	800c512 <_fflush_r+0x3a>
 800c50c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c50e:	f7fe f97e 	bl	800a80e <__retarget_lock_acquire_recursive>
 800c512:	4628      	mov	r0, r5
 800c514:	4621      	mov	r1, r4
 800c516:	f7ff ff59 	bl	800c3cc <__sflush_r>
 800c51a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c51c:	07da      	lsls	r2, r3, #31
 800c51e:	4605      	mov	r5, r0
 800c520:	d4e0      	bmi.n	800c4e4 <_fflush_r+0xc>
 800c522:	89a3      	ldrh	r3, [r4, #12]
 800c524:	059b      	lsls	r3, r3, #22
 800c526:	d4dd      	bmi.n	800c4e4 <_fflush_r+0xc>
 800c528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c52a:	f7fe f971 	bl	800a810 <__retarget_lock_release_recursive>
 800c52e:	e7d9      	b.n	800c4e4 <_fflush_r+0xc>
 800c530:	4b05      	ldr	r3, [pc, #20]	; (800c548 <_fflush_r+0x70>)
 800c532:	429c      	cmp	r4, r3
 800c534:	d101      	bne.n	800c53a <_fflush_r+0x62>
 800c536:	68ac      	ldr	r4, [r5, #8]
 800c538:	e7df      	b.n	800c4fa <_fflush_r+0x22>
 800c53a:	4b04      	ldr	r3, [pc, #16]	; (800c54c <_fflush_r+0x74>)
 800c53c:	429c      	cmp	r4, r3
 800c53e:	bf08      	it	eq
 800c540:	68ec      	ldreq	r4, [r5, #12]
 800c542:	e7da      	b.n	800c4fa <_fflush_r+0x22>
 800c544:	0800efb0 	.word	0x0800efb0
 800c548:	0800efd0 	.word	0x0800efd0
 800c54c:	0800ef90 	.word	0x0800ef90

0800c550 <_localeconv_r>:
 800c550:	4800      	ldr	r0, [pc, #0]	; (800c554 <_localeconv_r+0x4>)
 800c552:	4770      	bx	lr
 800c554:	200001ac 	.word	0x200001ac

0800c558 <_lseek_r>:
 800c558:	b538      	push	{r3, r4, r5, lr}
 800c55a:	4d07      	ldr	r5, [pc, #28]	; (800c578 <_lseek_r+0x20>)
 800c55c:	4604      	mov	r4, r0
 800c55e:	4608      	mov	r0, r1
 800c560:	4611      	mov	r1, r2
 800c562:	2200      	movs	r2, #0
 800c564:	602a      	str	r2, [r5, #0]
 800c566:	461a      	mov	r2, r3
 800c568:	f7f7 fa6c 	bl	8003a44 <_lseek>
 800c56c:	1c43      	adds	r3, r0, #1
 800c56e:	d102      	bne.n	800c576 <_lseek_r+0x1e>
 800c570:	682b      	ldr	r3, [r5, #0]
 800c572:	b103      	cbz	r3, 800c576 <_lseek_r+0x1e>
 800c574:	6023      	str	r3, [r4, #0]
 800c576:	bd38      	pop	{r3, r4, r5, pc}
 800c578:	20004494 	.word	0x20004494

0800c57c <__swhatbuf_r>:
 800c57c:	b570      	push	{r4, r5, r6, lr}
 800c57e:	460e      	mov	r6, r1
 800c580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c584:	2900      	cmp	r1, #0
 800c586:	b096      	sub	sp, #88	; 0x58
 800c588:	4614      	mov	r4, r2
 800c58a:	461d      	mov	r5, r3
 800c58c:	da08      	bge.n	800c5a0 <__swhatbuf_r+0x24>
 800c58e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c592:	2200      	movs	r2, #0
 800c594:	602a      	str	r2, [r5, #0]
 800c596:	061a      	lsls	r2, r3, #24
 800c598:	d410      	bmi.n	800c5bc <__swhatbuf_r+0x40>
 800c59a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c59e:	e00e      	b.n	800c5be <__swhatbuf_r+0x42>
 800c5a0:	466a      	mov	r2, sp
 800c5a2:	f000 ff43 	bl	800d42c <_fstat_r>
 800c5a6:	2800      	cmp	r0, #0
 800c5a8:	dbf1      	blt.n	800c58e <__swhatbuf_r+0x12>
 800c5aa:	9a01      	ldr	r2, [sp, #4]
 800c5ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c5b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c5b4:	425a      	negs	r2, r3
 800c5b6:	415a      	adcs	r2, r3
 800c5b8:	602a      	str	r2, [r5, #0]
 800c5ba:	e7ee      	b.n	800c59a <__swhatbuf_r+0x1e>
 800c5bc:	2340      	movs	r3, #64	; 0x40
 800c5be:	2000      	movs	r0, #0
 800c5c0:	6023      	str	r3, [r4, #0]
 800c5c2:	b016      	add	sp, #88	; 0x58
 800c5c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c5c8 <__smakebuf_r>:
 800c5c8:	898b      	ldrh	r3, [r1, #12]
 800c5ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c5cc:	079d      	lsls	r5, r3, #30
 800c5ce:	4606      	mov	r6, r0
 800c5d0:	460c      	mov	r4, r1
 800c5d2:	d507      	bpl.n	800c5e4 <__smakebuf_r+0x1c>
 800c5d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c5d8:	6023      	str	r3, [r4, #0]
 800c5da:	6123      	str	r3, [r4, #16]
 800c5dc:	2301      	movs	r3, #1
 800c5de:	6163      	str	r3, [r4, #20]
 800c5e0:	b002      	add	sp, #8
 800c5e2:	bd70      	pop	{r4, r5, r6, pc}
 800c5e4:	ab01      	add	r3, sp, #4
 800c5e6:	466a      	mov	r2, sp
 800c5e8:	f7ff ffc8 	bl	800c57c <__swhatbuf_r>
 800c5ec:	9900      	ldr	r1, [sp, #0]
 800c5ee:	4605      	mov	r5, r0
 800c5f0:	4630      	mov	r0, r6
 800c5f2:	f7fe f945 	bl	800a880 <_malloc_r>
 800c5f6:	b948      	cbnz	r0, 800c60c <__smakebuf_r+0x44>
 800c5f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5fc:	059a      	lsls	r2, r3, #22
 800c5fe:	d4ef      	bmi.n	800c5e0 <__smakebuf_r+0x18>
 800c600:	f023 0303 	bic.w	r3, r3, #3
 800c604:	f043 0302 	orr.w	r3, r3, #2
 800c608:	81a3      	strh	r3, [r4, #12]
 800c60a:	e7e3      	b.n	800c5d4 <__smakebuf_r+0xc>
 800c60c:	4b0d      	ldr	r3, [pc, #52]	; (800c644 <__smakebuf_r+0x7c>)
 800c60e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c610:	89a3      	ldrh	r3, [r4, #12]
 800c612:	6020      	str	r0, [r4, #0]
 800c614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c618:	81a3      	strh	r3, [r4, #12]
 800c61a:	9b00      	ldr	r3, [sp, #0]
 800c61c:	6163      	str	r3, [r4, #20]
 800c61e:	9b01      	ldr	r3, [sp, #4]
 800c620:	6120      	str	r0, [r4, #16]
 800c622:	b15b      	cbz	r3, 800c63c <__smakebuf_r+0x74>
 800c624:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c628:	4630      	mov	r0, r6
 800c62a:	f000 ff11 	bl	800d450 <_isatty_r>
 800c62e:	b128      	cbz	r0, 800c63c <__smakebuf_r+0x74>
 800c630:	89a3      	ldrh	r3, [r4, #12]
 800c632:	f023 0303 	bic.w	r3, r3, #3
 800c636:	f043 0301 	orr.w	r3, r3, #1
 800c63a:	81a3      	strh	r3, [r4, #12]
 800c63c:	89a0      	ldrh	r0, [r4, #12]
 800c63e:	4305      	orrs	r5, r0
 800c640:	81a5      	strh	r5, [r4, #12]
 800c642:	e7cd      	b.n	800c5e0 <__smakebuf_r+0x18>
 800c644:	0800a621 	.word	0x0800a621

0800c648 <malloc>:
 800c648:	4b02      	ldr	r3, [pc, #8]	; (800c654 <malloc+0xc>)
 800c64a:	4601      	mov	r1, r0
 800c64c:	6818      	ldr	r0, [r3, #0]
 800c64e:	f7fe b917 	b.w	800a880 <_malloc_r>
 800c652:	bf00      	nop
 800c654:	20000058 	.word	0x20000058

0800c658 <__malloc_lock>:
 800c658:	4801      	ldr	r0, [pc, #4]	; (800c660 <__malloc_lock+0x8>)
 800c65a:	f7fe b8d8 	b.w	800a80e <__retarget_lock_acquire_recursive>
 800c65e:	bf00      	nop
 800c660:	20004488 	.word	0x20004488

0800c664 <__malloc_unlock>:
 800c664:	4801      	ldr	r0, [pc, #4]	; (800c66c <__malloc_unlock+0x8>)
 800c666:	f7fe b8d3 	b.w	800a810 <__retarget_lock_release_recursive>
 800c66a:	bf00      	nop
 800c66c:	20004488 	.word	0x20004488

0800c670 <_Balloc>:
 800c670:	b570      	push	{r4, r5, r6, lr}
 800c672:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c674:	4604      	mov	r4, r0
 800c676:	460d      	mov	r5, r1
 800c678:	b976      	cbnz	r6, 800c698 <_Balloc+0x28>
 800c67a:	2010      	movs	r0, #16
 800c67c:	f7ff ffe4 	bl	800c648 <malloc>
 800c680:	4602      	mov	r2, r0
 800c682:	6260      	str	r0, [r4, #36]	; 0x24
 800c684:	b920      	cbnz	r0, 800c690 <_Balloc+0x20>
 800c686:	4b18      	ldr	r3, [pc, #96]	; (800c6e8 <_Balloc+0x78>)
 800c688:	4818      	ldr	r0, [pc, #96]	; (800c6ec <_Balloc+0x7c>)
 800c68a:	2166      	movs	r1, #102	; 0x66
 800c68c:	f000 fe9e 	bl	800d3cc <__assert_func>
 800c690:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c694:	6006      	str	r6, [r0, #0]
 800c696:	60c6      	str	r6, [r0, #12]
 800c698:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c69a:	68f3      	ldr	r3, [r6, #12]
 800c69c:	b183      	cbz	r3, 800c6c0 <_Balloc+0x50>
 800c69e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6a0:	68db      	ldr	r3, [r3, #12]
 800c6a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c6a6:	b9b8      	cbnz	r0, 800c6d8 <_Balloc+0x68>
 800c6a8:	2101      	movs	r1, #1
 800c6aa:	fa01 f605 	lsl.w	r6, r1, r5
 800c6ae:	1d72      	adds	r2, r6, #5
 800c6b0:	0092      	lsls	r2, r2, #2
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	f000 fb60 	bl	800cd78 <_calloc_r>
 800c6b8:	b160      	cbz	r0, 800c6d4 <_Balloc+0x64>
 800c6ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c6be:	e00e      	b.n	800c6de <_Balloc+0x6e>
 800c6c0:	2221      	movs	r2, #33	; 0x21
 800c6c2:	2104      	movs	r1, #4
 800c6c4:	4620      	mov	r0, r4
 800c6c6:	f000 fb57 	bl	800cd78 <_calloc_r>
 800c6ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6cc:	60f0      	str	r0, [r6, #12]
 800c6ce:	68db      	ldr	r3, [r3, #12]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d1e4      	bne.n	800c69e <_Balloc+0x2e>
 800c6d4:	2000      	movs	r0, #0
 800c6d6:	bd70      	pop	{r4, r5, r6, pc}
 800c6d8:	6802      	ldr	r2, [r0, #0]
 800c6da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c6de:	2300      	movs	r3, #0
 800c6e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c6e4:	e7f7      	b.n	800c6d6 <_Balloc+0x66>
 800c6e6:	bf00      	nop
 800c6e8:	0800f035 	.word	0x0800f035
 800c6ec:	0800f0b8 	.word	0x0800f0b8

0800c6f0 <_Bfree>:
 800c6f0:	b570      	push	{r4, r5, r6, lr}
 800c6f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c6f4:	4605      	mov	r5, r0
 800c6f6:	460c      	mov	r4, r1
 800c6f8:	b976      	cbnz	r6, 800c718 <_Bfree+0x28>
 800c6fa:	2010      	movs	r0, #16
 800c6fc:	f7ff ffa4 	bl	800c648 <malloc>
 800c700:	4602      	mov	r2, r0
 800c702:	6268      	str	r0, [r5, #36]	; 0x24
 800c704:	b920      	cbnz	r0, 800c710 <_Bfree+0x20>
 800c706:	4b09      	ldr	r3, [pc, #36]	; (800c72c <_Bfree+0x3c>)
 800c708:	4809      	ldr	r0, [pc, #36]	; (800c730 <_Bfree+0x40>)
 800c70a:	218a      	movs	r1, #138	; 0x8a
 800c70c:	f000 fe5e 	bl	800d3cc <__assert_func>
 800c710:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c714:	6006      	str	r6, [r0, #0]
 800c716:	60c6      	str	r6, [r0, #12]
 800c718:	b13c      	cbz	r4, 800c72a <_Bfree+0x3a>
 800c71a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c71c:	6862      	ldr	r2, [r4, #4]
 800c71e:	68db      	ldr	r3, [r3, #12]
 800c720:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c724:	6021      	str	r1, [r4, #0]
 800c726:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c72a:	bd70      	pop	{r4, r5, r6, pc}
 800c72c:	0800f035 	.word	0x0800f035
 800c730:	0800f0b8 	.word	0x0800f0b8

0800c734 <__multadd>:
 800c734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c738:	690d      	ldr	r5, [r1, #16]
 800c73a:	4607      	mov	r7, r0
 800c73c:	460c      	mov	r4, r1
 800c73e:	461e      	mov	r6, r3
 800c740:	f101 0c14 	add.w	ip, r1, #20
 800c744:	2000      	movs	r0, #0
 800c746:	f8dc 3000 	ldr.w	r3, [ip]
 800c74a:	b299      	uxth	r1, r3
 800c74c:	fb02 6101 	mla	r1, r2, r1, r6
 800c750:	0c1e      	lsrs	r6, r3, #16
 800c752:	0c0b      	lsrs	r3, r1, #16
 800c754:	fb02 3306 	mla	r3, r2, r6, r3
 800c758:	b289      	uxth	r1, r1
 800c75a:	3001      	adds	r0, #1
 800c75c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c760:	4285      	cmp	r5, r0
 800c762:	f84c 1b04 	str.w	r1, [ip], #4
 800c766:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c76a:	dcec      	bgt.n	800c746 <__multadd+0x12>
 800c76c:	b30e      	cbz	r6, 800c7b2 <__multadd+0x7e>
 800c76e:	68a3      	ldr	r3, [r4, #8]
 800c770:	42ab      	cmp	r3, r5
 800c772:	dc19      	bgt.n	800c7a8 <__multadd+0x74>
 800c774:	6861      	ldr	r1, [r4, #4]
 800c776:	4638      	mov	r0, r7
 800c778:	3101      	adds	r1, #1
 800c77a:	f7ff ff79 	bl	800c670 <_Balloc>
 800c77e:	4680      	mov	r8, r0
 800c780:	b928      	cbnz	r0, 800c78e <__multadd+0x5a>
 800c782:	4602      	mov	r2, r0
 800c784:	4b0c      	ldr	r3, [pc, #48]	; (800c7b8 <__multadd+0x84>)
 800c786:	480d      	ldr	r0, [pc, #52]	; (800c7bc <__multadd+0x88>)
 800c788:	21b5      	movs	r1, #181	; 0xb5
 800c78a:	f000 fe1f 	bl	800d3cc <__assert_func>
 800c78e:	6922      	ldr	r2, [r4, #16]
 800c790:	3202      	adds	r2, #2
 800c792:	f104 010c 	add.w	r1, r4, #12
 800c796:	0092      	lsls	r2, r2, #2
 800c798:	300c      	adds	r0, #12
 800c79a:	f7fe f83a 	bl	800a812 <memcpy>
 800c79e:	4621      	mov	r1, r4
 800c7a0:	4638      	mov	r0, r7
 800c7a2:	f7ff ffa5 	bl	800c6f0 <_Bfree>
 800c7a6:	4644      	mov	r4, r8
 800c7a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c7ac:	3501      	adds	r5, #1
 800c7ae:	615e      	str	r6, [r3, #20]
 800c7b0:	6125      	str	r5, [r4, #16]
 800c7b2:	4620      	mov	r0, r4
 800c7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7b8:	0800f0a7 	.word	0x0800f0a7
 800c7bc:	0800f0b8 	.word	0x0800f0b8

0800c7c0 <__hi0bits>:
 800c7c0:	0c03      	lsrs	r3, r0, #16
 800c7c2:	041b      	lsls	r3, r3, #16
 800c7c4:	b9d3      	cbnz	r3, 800c7fc <__hi0bits+0x3c>
 800c7c6:	0400      	lsls	r0, r0, #16
 800c7c8:	2310      	movs	r3, #16
 800c7ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c7ce:	bf04      	itt	eq
 800c7d0:	0200      	lsleq	r0, r0, #8
 800c7d2:	3308      	addeq	r3, #8
 800c7d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c7d8:	bf04      	itt	eq
 800c7da:	0100      	lsleq	r0, r0, #4
 800c7dc:	3304      	addeq	r3, #4
 800c7de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c7e2:	bf04      	itt	eq
 800c7e4:	0080      	lsleq	r0, r0, #2
 800c7e6:	3302      	addeq	r3, #2
 800c7e8:	2800      	cmp	r0, #0
 800c7ea:	db05      	blt.n	800c7f8 <__hi0bits+0x38>
 800c7ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c7f0:	f103 0301 	add.w	r3, r3, #1
 800c7f4:	bf08      	it	eq
 800c7f6:	2320      	moveq	r3, #32
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	4770      	bx	lr
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	e7e4      	b.n	800c7ca <__hi0bits+0xa>

0800c800 <__lo0bits>:
 800c800:	6803      	ldr	r3, [r0, #0]
 800c802:	f013 0207 	ands.w	r2, r3, #7
 800c806:	4601      	mov	r1, r0
 800c808:	d00b      	beq.n	800c822 <__lo0bits+0x22>
 800c80a:	07da      	lsls	r2, r3, #31
 800c80c:	d423      	bmi.n	800c856 <__lo0bits+0x56>
 800c80e:	0798      	lsls	r0, r3, #30
 800c810:	bf49      	itett	mi
 800c812:	085b      	lsrmi	r3, r3, #1
 800c814:	089b      	lsrpl	r3, r3, #2
 800c816:	2001      	movmi	r0, #1
 800c818:	600b      	strmi	r3, [r1, #0]
 800c81a:	bf5c      	itt	pl
 800c81c:	600b      	strpl	r3, [r1, #0]
 800c81e:	2002      	movpl	r0, #2
 800c820:	4770      	bx	lr
 800c822:	b298      	uxth	r0, r3
 800c824:	b9a8      	cbnz	r0, 800c852 <__lo0bits+0x52>
 800c826:	0c1b      	lsrs	r3, r3, #16
 800c828:	2010      	movs	r0, #16
 800c82a:	b2da      	uxtb	r2, r3
 800c82c:	b90a      	cbnz	r2, 800c832 <__lo0bits+0x32>
 800c82e:	3008      	adds	r0, #8
 800c830:	0a1b      	lsrs	r3, r3, #8
 800c832:	071a      	lsls	r2, r3, #28
 800c834:	bf04      	itt	eq
 800c836:	091b      	lsreq	r3, r3, #4
 800c838:	3004      	addeq	r0, #4
 800c83a:	079a      	lsls	r2, r3, #30
 800c83c:	bf04      	itt	eq
 800c83e:	089b      	lsreq	r3, r3, #2
 800c840:	3002      	addeq	r0, #2
 800c842:	07da      	lsls	r2, r3, #31
 800c844:	d403      	bmi.n	800c84e <__lo0bits+0x4e>
 800c846:	085b      	lsrs	r3, r3, #1
 800c848:	f100 0001 	add.w	r0, r0, #1
 800c84c:	d005      	beq.n	800c85a <__lo0bits+0x5a>
 800c84e:	600b      	str	r3, [r1, #0]
 800c850:	4770      	bx	lr
 800c852:	4610      	mov	r0, r2
 800c854:	e7e9      	b.n	800c82a <__lo0bits+0x2a>
 800c856:	2000      	movs	r0, #0
 800c858:	4770      	bx	lr
 800c85a:	2020      	movs	r0, #32
 800c85c:	4770      	bx	lr
	...

0800c860 <__i2b>:
 800c860:	b510      	push	{r4, lr}
 800c862:	460c      	mov	r4, r1
 800c864:	2101      	movs	r1, #1
 800c866:	f7ff ff03 	bl	800c670 <_Balloc>
 800c86a:	4602      	mov	r2, r0
 800c86c:	b928      	cbnz	r0, 800c87a <__i2b+0x1a>
 800c86e:	4b05      	ldr	r3, [pc, #20]	; (800c884 <__i2b+0x24>)
 800c870:	4805      	ldr	r0, [pc, #20]	; (800c888 <__i2b+0x28>)
 800c872:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c876:	f000 fda9 	bl	800d3cc <__assert_func>
 800c87a:	2301      	movs	r3, #1
 800c87c:	6144      	str	r4, [r0, #20]
 800c87e:	6103      	str	r3, [r0, #16]
 800c880:	bd10      	pop	{r4, pc}
 800c882:	bf00      	nop
 800c884:	0800f0a7 	.word	0x0800f0a7
 800c888:	0800f0b8 	.word	0x0800f0b8

0800c88c <__multiply>:
 800c88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c890:	4691      	mov	r9, r2
 800c892:	690a      	ldr	r2, [r1, #16]
 800c894:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c898:	429a      	cmp	r2, r3
 800c89a:	bfb8      	it	lt
 800c89c:	460b      	movlt	r3, r1
 800c89e:	460c      	mov	r4, r1
 800c8a0:	bfbc      	itt	lt
 800c8a2:	464c      	movlt	r4, r9
 800c8a4:	4699      	movlt	r9, r3
 800c8a6:	6927      	ldr	r7, [r4, #16]
 800c8a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c8ac:	68a3      	ldr	r3, [r4, #8]
 800c8ae:	6861      	ldr	r1, [r4, #4]
 800c8b0:	eb07 060a 	add.w	r6, r7, sl
 800c8b4:	42b3      	cmp	r3, r6
 800c8b6:	b085      	sub	sp, #20
 800c8b8:	bfb8      	it	lt
 800c8ba:	3101      	addlt	r1, #1
 800c8bc:	f7ff fed8 	bl	800c670 <_Balloc>
 800c8c0:	b930      	cbnz	r0, 800c8d0 <__multiply+0x44>
 800c8c2:	4602      	mov	r2, r0
 800c8c4:	4b44      	ldr	r3, [pc, #272]	; (800c9d8 <__multiply+0x14c>)
 800c8c6:	4845      	ldr	r0, [pc, #276]	; (800c9dc <__multiply+0x150>)
 800c8c8:	f240 115d 	movw	r1, #349	; 0x15d
 800c8cc:	f000 fd7e 	bl	800d3cc <__assert_func>
 800c8d0:	f100 0514 	add.w	r5, r0, #20
 800c8d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c8d8:	462b      	mov	r3, r5
 800c8da:	2200      	movs	r2, #0
 800c8dc:	4543      	cmp	r3, r8
 800c8de:	d321      	bcc.n	800c924 <__multiply+0x98>
 800c8e0:	f104 0314 	add.w	r3, r4, #20
 800c8e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c8e8:	f109 0314 	add.w	r3, r9, #20
 800c8ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c8f0:	9202      	str	r2, [sp, #8]
 800c8f2:	1b3a      	subs	r2, r7, r4
 800c8f4:	3a15      	subs	r2, #21
 800c8f6:	f022 0203 	bic.w	r2, r2, #3
 800c8fa:	3204      	adds	r2, #4
 800c8fc:	f104 0115 	add.w	r1, r4, #21
 800c900:	428f      	cmp	r7, r1
 800c902:	bf38      	it	cc
 800c904:	2204      	movcc	r2, #4
 800c906:	9201      	str	r2, [sp, #4]
 800c908:	9a02      	ldr	r2, [sp, #8]
 800c90a:	9303      	str	r3, [sp, #12]
 800c90c:	429a      	cmp	r2, r3
 800c90e:	d80c      	bhi.n	800c92a <__multiply+0x9e>
 800c910:	2e00      	cmp	r6, #0
 800c912:	dd03      	ble.n	800c91c <__multiply+0x90>
 800c914:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d05a      	beq.n	800c9d2 <__multiply+0x146>
 800c91c:	6106      	str	r6, [r0, #16]
 800c91e:	b005      	add	sp, #20
 800c920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c924:	f843 2b04 	str.w	r2, [r3], #4
 800c928:	e7d8      	b.n	800c8dc <__multiply+0x50>
 800c92a:	f8b3 a000 	ldrh.w	sl, [r3]
 800c92e:	f1ba 0f00 	cmp.w	sl, #0
 800c932:	d024      	beq.n	800c97e <__multiply+0xf2>
 800c934:	f104 0e14 	add.w	lr, r4, #20
 800c938:	46a9      	mov	r9, r5
 800c93a:	f04f 0c00 	mov.w	ip, #0
 800c93e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c942:	f8d9 1000 	ldr.w	r1, [r9]
 800c946:	fa1f fb82 	uxth.w	fp, r2
 800c94a:	b289      	uxth	r1, r1
 800c94c:	fb0a 110b 	mla	r1, sl, fp, r1
 800c950:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c954:	f8d9 2000 	ldr.w	r2, [r9]
 800c958:	4461      	add	r1, ip
 800c95a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c95e:	fb0a c20b 	mla	r2, sl, fp, ip
 800c962:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c966:	b289      	uxth	r1, r1
 800c968:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c96c:	4577      	cmp	r7, lr
 800c96e:	f849 1b04 	str.w	r1, [r9], #4
 800c972:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c976:	d8e2      	bhi.n	800c93e <__multiply+0xb2>
 800c978:	9a01      	ldr	r2, [sp, #4]
 800c97a:	f845 c002 	str.w	ip, [r5, r2]
 800c97e:	9a03      	ldr	r2, [sp, #12]
 800c980:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c984:	3304      	adds	r3, #4
 800c986:	f1b9 0f00 	cmp.w	r9, #0
 800c98a:	d020      	beq.n	800c9ce <__multiply+0x142>
 800c98c:	6829      	ldr	r1, [r5, #0]
 800c98e:	f104 0c14 	add.w	ip, r4, #20
 800c992:	46ae      	mov	lr, r5
 800c994:	f04f 0a00 	mov.w	sl, #0
 800c998:	f8bc b000 	ldrh.w	fp, [ip]
 800c99c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c9a0:	fb09 220b 	mla	r2, r9, fp, r2
 800c9a4:	4492      	add	sl, r2
 800c9a6:	b289      	uxth	r1, r1
 800c9a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c9ac:	f84e 1b04 	str.w	r1, [lr], #4
 800c9b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c9b4:	f8be 1000 	ldrh.w	r1, [lr]
 800c9b8:	0c12      	lsrs	r2, r2, #16
 800c9ba:	fb09 1102 	mla	r1, r9, r2, r1
 800c9be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c9c2:	4567      	cmp	r7, ip
 800c9c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c9c8:	d8e6      	bhi.n	800c998 <__multiply+0x10c>
 800c9ca:	9a01      	ldr	r2, [sp, #4]
 800c9cc:	50a9      	str	r1, [r5, r2]
 800c9ce:	3504      	adds	r5, #4
 800c9d0:	e79a      	b.n	800c908 <__multiply+0x7c>
 800c9d2:	3e01      	subs	r6, #1
 800c9d4:	e79c      	b.n	800c910 <__multiply+0x84>
 800c9d6:	bf00      	nop
 800c9d8:	0800f0a7 	.word	0x0800f0a7
 800c9dc:	0800f0b8 	.word	0x0800f0b8

0800c9e0 <__pow5mult>:
 800c9e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9e4:	4615      	mov	r5, r2
 800c9e6:	f012 0203 	ands.w	r2, r2, #3
 800c9ea:	4606      	mov	r6, r0
 800c9ec:	460f      	mov	r7, r1
 800c9ee:	d007      	beq.n	800ca00 <__pow5mult+0x20>
 800c9f0:	4c25      	ldr	r4, [pc, #148]	; (800ca88 <__pow5mult+0xa8>)
 800c9f2:	3a01      	subs	r2, #1
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c9fa:	f7ff fe9b 	bl	800c734 <__multadd>
 800c9fe:	4607      	mov	r7, r0
 800ca00:	10ad      	asrs	r5, r5, #2
 800ca02:	d03d      	beq.n	800ca80 <__pow5mult+0xa0>
 800ca04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ca06:	b97c      	cbnz	r4, 800ca28 <__pow5mult+0x48>
 800ca08:	2010      	movs	r0, #16
 800ca0a:	f7ff fe1d 	bl	800c648 <malloc>
 800ca0e:	4602      	mov	r2, r0
 800ca10:	6270      	str	r0, [r6, #36]	; 0x24
 800ca12:	b928      	cbnz	r0, 800ca20 <__pow5mult+0x40>
 800ca14:	4b1d      	ldr	r3, [pc, #116]	; (800ca8c <__pow5mult+0xac>)
 800ca16:	481e      	ldr	r0, [pc, #120]	; (800ca90 <__pow5mult+0xb0>)
 800ca18:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ca1c:	f000 fcd6 	bl	800d3cc <__assert_func>
 800ca20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ca24:	6004      	str	r4, [r0, #0]
 800ca26:	60c4      	str	r4, [r0, #12]
 800ca28:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ca2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ca30:	b94c      	cbnz	r4, 800ca46 <__pow5mult+0x66>
 800ca32:	f240 2171 	movw	r1, #625	; 0x271
 800ca36:	4630      	mov	r0, r6
 800ca38:	f7ff ff12 	bl	800c860 <__i2b>
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ca42:	4604      	mov	r4, r0
 800ca44:	6003      	str	r3, [r0, #0]
 800ca46:	f04f 0900 	mov.w	r9, #0
 800ca4a:	07eb      	lsls	r3, r5, #31
 800ca4c:	d50a      	bpl.n	800ca64 <__pow5mult+0x84>
 800ca4e:	4639      	mov	r1, r7
 800ca50:	4622      	mov	r2, r4
 800ca52:	4630      	mov	r0, r6
 800ca54:	f7ff ff1a 	bl	800c88c <__multiply>
 800ca58:	4639      	mov	r1, r7
 800ca5a:	4680      	mov	r8, r0
 800ca5c:	4630      	mov	r0, r6
 800ca5e:	f7ff fe47 	bl	800c6f0 <_Bfree>
 800ca62:	4647      	mov	r7, r8
 800ca64:	106d      	asrs	r5, r5, #1
 800ca66:	d00b      	beq.n	800ca80 <__pow5mult+0xa0>
 800ca68:	6820      	ldr	r0, [r4, #0]
 800ca6a:	b938      	cbnz	r0, 800ca7c <__pow5mult+0x9c>
 800ca6c:	4622      	mov	r2, r4
 800ca6e:	4621      	mov	r1, r4
 800ca70:	4630      	mov	r0, r6
 800ca72:	f7ff ff0b 	bl	800c88c <__multiply>
 800ca76:	6020      	str	r0, [r4, #0]
 800ca78:	f8c0 9000 	str.w	r9, [r0]
 800ca7c:	4604      	mov	r4, r0
 800ca7e:	e7e4      	b.n	800ca4a <__pow5mult+0x6a>
 800ca80:	4638      	mov	r0, r7
 800ca82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca86:	bf00      	nop
 800ca88:	0800f208 	.word	0x0800f208
 800ca8c:	0800f035 	.word	0x0800f035
 800ca90:	0800f0b8 	.word	0x0800f0b8

0800ca94 <__lshift>:
 800ca94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca98:	460c      	mov	r4, r1
 800ca9a:	6849      	ldr	r1, [r1, #4]
 800ca9c:	6923      	ldr	r3, [r4, #16]
 800ca9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800caa2:	68a3      	ldr	r3, [r4, #8]
 800caa4:	4607      	mov	r7, r0
 800caa6:	4691      	mov	r9, r2
 800caa8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800caac:	f108 0601 	add.w	r6, r8, #1
 800cab0:	42b3      	cmp	r3, r6
 800cab2:	db0b      	blt.n	800cacc <__lshift+0x38>
 800cab4:	4638      	mov	r0, r7
 800cab6:	f7ff fddb 	bl	800c670 <_Balloc>
 800caba:	4605      	mov	r5, r0
 800cabc:	b948      	cbnz	r0, 800cad2 <__lshift+0x3e>
 800cabe:	4602      	mov	r2, r0
 800cac0:	4b2a      	ldr	r3, [pc, #168]	; (800cb6c <__lshift+0xd8>)
 800cac2:	482b      	ldr	r0, [pc, #172]	; (800cb70 <__lshift+0xdc>)
 800cac4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cac8:	f000 fc80 	bl	800d3cc <__assert_func>
 800cacc:	3101      	adds	r1, #1
 800cace:	005b      	lsls	r3, r3, #1
 800cad0:	e7ee      	b.n	800cab0 <__lshift+0x1c>
 800cad2:	2300      	movs	r3, #0
 800cad4:	f100 0114 	add.w	r1, r0, #20
 800cad8:	f100 0210 	add.w	r2, r0, #16
 800cadc:	4618      	mov	r0, r3
 800cade:	4553      	cmp	r3, sl
 800cae0:	db37      	blt.n	800cb52 <__lshift+0xbe>
 800cae2:	6920      	ldr	r0, [r4, #16]
 800cae4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cae8:	f104 0314 	add.w	r3, r4, #20
 800caec:	f019 091f 	ands.w	r9, r9, #31
 800caf0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800caf4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800caf8:	d02f      	beq.n	800cb5a <__lshift+0xc6>
 800cafa:	f1c9 0e20 	rsb	lr, r9, #32
 800cafe:	468a      	mov	sl, r1
 800cb00:	f04f 0c00 	mov.w	ip, #0
 800cb04:	681a      	ldr	r2, [r3, #0]
 800cb06:	fa02 f209 	lsl.w	r2, r2, r9
 800cb0a:	ea42 020c 	orr.w	r2, r2, ip
 800cb0e:	f84a 2b04 	str.w	r2, [sl], #4
 800cb12:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb16:	4298      	cmp	r0, r3
 800cb18:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cb1c:	d8f2      	bhi.n	800cb04 <__lshift+0x70>
 800cb1e:	1b03      	subs	r3, r0, r4
 800cb20:	3b15      	subs	r3, #21
 800cb22:	f023 0303 	bic.w	r3, r3, #3
 800cb26:	3304      	adds	r3, #4
 800cb28:	f104 0215 	add.w	r2, r4, #21
 800cb2c:	4290      	cmp	r0, r2
 800cb2e:	bf38      	it	cc
 800cb30:	2304      	movcc	r3, #4
 800cb32:	f841 c003 	str.w	ip, [r1, r3]
 800cb36:	f1bc 0f00 	cmp.w	ip, #0
 800cb3a:	d001      	beq.n	800cb40 <__lshift+0xac>
 800cb3c:	f108 0602 	add.w	r6, r8, #2
 800cb40:	3e01      	subs	r6, #1
 800cb42:	4638      	mov	r0, r7
 800cb44:	612e      	str	r6, [r5, #16]
 800cb46:	4621      	mov	r1, r4
 800cb48:	f7ff fdd2 	bl	800c6f0 <_Bfree>
 800cb4c:	4628      	mov	r0, r5
 800cb4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb52:	f842 0f04 	str.w	r0, [r2, #4]!
 800cb56:	3301      	adds	r3, #1
 800cb58:	e7c1      	b.n	800cade <__lshift+0x4a>
 800cb5a:	3904      	subs	r1, #4
 800cb5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb60:	f841 2f04 	str.w	r2, [r1, #4]!
 800cb64:	4298      	cmp	r0, r3
 800cb66:	d8f9      	bhi.n	800cb5c <__lshift+0xc8>
 800cb68:	e7ea      	b.n	800cb40 <__lshift+0xac>
 800cb6a:	bf00      	nop
 800cb6c:	0800f0a7 	.word	0x0800f0a7
 800cb70:	0800f0b8 	.word	0x0800f0b8

0800cb74 <__mcmp>:
 800cb74:	b530      	push	{r4, r5, lr}
 800cb76:	6902      	ldr	r2, [r0, #16]
 800cb78:	690c      	ldr	r4, [r1, #16]
 800cb7a:	1b12      	subs	r2, r2, r4
 800cb7c:	d10e      	bne.n	800cb9c <__mcmp+0x28>
 800cb7e:	f100 0314 	add.w	r3, r0, #20
 800cb82:	3114      	adds	r1, #20
 800cb84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cb88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cb8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cb90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cb94:	42a5      	cmp	r5, r4
 800cb96:	d003      	beq.n	800cba0 <__mcmp+0x2c>
 800cb98:	d305      	bcc.n	800cba6 <__mcmp+0x32>
 800cb9a:	2201      	movs	r2, #1
 800cb9c:	4610      	mov	r0, r2
 800cb9e:	bd30      	pop	{r4, r5, pc}
 800cba0:	4283      	cmp	r3, r0
 800cba2:	d3f3      	bcc.n	800cb8c <__mcmp+0x18>
 800cba4:	e7fa      	b.n	800cb9c <__mcmp+0x28>
 800cba6:	f04f 32ff 	mov.w	r2, #4294967295
 800cbaa:	e7f7      	b.n	800cb9c <__mcmp+0x28>

0800cbac <__mdiff>:
 800cbac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbb0:	460c      	mov	r4, r1
 800cbb2:	4606      	mov	r6, r0
 800cbb4:	4611      	mov	r1, r2
 800cbb6:	4620      	mov	r0, r4
 800cbb8:	4690      	mov	r8, r2
 800cbba:	f7ff ffdb 	bl	800cb74 <__mcmp>
 800cbbe:	1e05      	subs	r5, r0, #0
 800cbc0:	d110      	bne.n	800cbe4 <__mdiff+0x38>
 800cbc2:	4629      	mov	r1, r5
 800cbc4:	4630      	mov	r0, r6
 800cbc6:	f7ff fd53 	bl	800c670 <_Balloc>
 800cbca:	b930      	cbnz	r0, 800cbda <__mdiff+0x2e>
 800cbcc:	4b3a      	ldr	r3, [pc, #232]	; (800ccb8 <__mdiff+0x10c>)
 800cbce:	4602      	mov	r2, r0
 800cbd0:	f240 2132 	movw	r1, #562	; 0x232
 800cbd4:	4839      	ldr	r0, [pc, #228]	; (800ccbc <__mdiff+0x110>)
 800cbd6:	f000 fbf9 	bl	800d3cc <__assert_func>
 800cbda:	2301      	movs	r3, #1
 800cbdc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cbe0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbe4:	bfa4      	itt	ge
 800cbe6:	4643      	movge	r3, r8
 800cbe8:	46a0      	movge	r8, r4
 800cbea:	4630      	mov	r0, r6
 800cbec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cbf0:	bfa6      	itte	ge
 800cbf2:	461c      	movge	r4, r3
 800cbf4:	2500      	movge	r5, #0
 800cbf6:	2501      	movlt	r5, #1
 800cbf8:	f7ff fd3a 	bl	800c670 <_Balloc>
 800cbfc:	b920      	cbnz	r0, 800cc08 <__mdiff+0x5c>
 800cbfe:	4b2e      	ldr	r3, [pc, #184]	; (800ccb8 <__mdiff+0x10c>)
 800cc00:	4602      	mov	r2, r0
 800cc02:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cc06:	e7e5      	b.n	800cbd4 <__mdiff+0x28>
 800cc08:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cc0c:	6926      	ldr	r6, [r4, #16]
 800cc0e:	60c5      	str	r5, [r0, #12]
 800cc10:	f104 0914 	add.w	r9, r4, #20
 800cc14:	f108 0514 	add.w	r5, r8, #20
 800cc18:	f100 0e14 	add.w	lr, r0, #20
 800cc1c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cc20:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cc24:	f108 0210 	add.w	r2, r8, #16
 800cc28:	46f2      	mov	sl, lr
 800cc2a:	2100      	movs	r1, #0
 800cc2c:	f859 3b04 	ldr.w	r3, [r9], #4
 800cc30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cc34:	fa1f f883 	uxth.w	r8, r3
 800cc38:	fa11 f18b 	uxtah	r1, r1, fp
 800cc3c:	0c1b      	lsrs	r3, r3, #16
 800cc3e:	eba1 0808 	sub.w	r8, r1, r8
 800cc42:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cc46:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cc4a:	fa1f f888 	uxth.w	r8, r8
 800cc4e:	1419      	asrs	r1, r3, #16
 800cc50:	454e      	cmp	r6, r9
 800cc52:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cc56:	f84a 3b04 	str.w	r3, [sl], #4
 800cc5a:	d8e7      	bhi.n	800cc2c <__mdiff+0x80>
 800cc5c:	1b33      	subs	r3, r6, r4
 800cc5e:	3b15      	subs	r3, #21
 800cc60:	f023 0303 	bic.w	r3, r3, #3
 800cc64:	3304      	adds	r3, #4
 800cc66:	3415      	adds	r4, #21
 800cc68:	42a6      	cmp	r6, r4
 800cc6a:	bf38      	it	cc
 800cc6c:	2304      	movcc	r3, #4
 800cc6e:	441d      	add	r5, r3
 800cc70:	4473      	add	r3, lr
 800cc72:	469e      	mov	lr, r3
 800cc74:	462e      	mov	r6, r5
 800cc76:	4566      	cmp	r6, ip
 800cc78:	d30e      	bcc.n	800cc98 <__mdiff+0xec>
 800cc7a:	f10c 0203 	add.w	r2, ip, #3
 800cc7e:	1b52      	subs	r2, r2, r5
 800cc80:	f022 0203 	bic.w	r2, r2, #3
 800cc84:	3d03      	subs	r5, #3
 800cc86:	45ac      	cmp	ip, r5
 800cc88:	bf38      	it	cc
 800cc8a:	2200      	movcc	r2, #0
 800cc8c:	441a      	add	r2, r3
 800cc8e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cc92:	b17b      	cbz	r3, 800ccb4 <__mdiff+0x108>
 800cc94:	6107      	str	r7, [r0, #16]
 800cc96:	e7a3      	b.n	800cbe0 <__mdiff+0x34>
 800cc98:	f856 8b04 	ldr.w	r8, [r6], #4
 800cc9c:	fa11 f288 	uxtah	r2, r1, r8
 800cca0:	1414      	asrs	r4, r2, #16
 800cca2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cca6:	b292      	uxth	r2, r2
 800cca8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ccac:	f84e 2b04 	str.w	r2, [lr], #4
 800ccb0:	1421      	asrs	r1, r4, #16
 800ccb2:	e7e0      	b.n	800cc76 <__mdiff+0xca>
 800ccb4:	3f01      	subs	r7, #1
 800ccb6:	e7ea      	b.n	800cc8e <__mdiff+0xe2>
 800ccb8:	0800f0a7 	.word	0x0800f0a7
 800ccbc:	0800f0b8 	.word	0x0800f0b8

0800ccc0 <__d2b>:
 800ccc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ccc4:	4689      	mov	r9, r1
 800ccc6:	2101      	movs	r1, #1
 800ccc8:	ec57 6b10 	vmov	r6, r7, d0
 800cccc:	4690      	mov	r8, r2
 800ccce:	f7ff fccf 	bl	800c670 <_Balloc>
 800ccd2:	4604      	mov	r4, r0
 800ccd4:	b930      	cbnz	r0, 800cce4 <__d2b+0x24>
 800ccd6:	4602      	mov	r2, r0
 800ccd8:	4b25      	ldr	r3, [pc, #148]	; (800cd70 <__d2b+0xb0>)
 800ccda:	4826      	ldr	r0, [pc, #152]	; (800cd74 <__d2b+0xb4>)
 800ccdc:	f240 310a 	movw	r1, #778	; 0x30a
 800cce0:	f000 fb74 	bl	800d3cc <__assert_func>
 800cce4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cce8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ccec:	bb35      	cbnz	r5, 800cd3c <__d2b+0x7c>
 800ccee:	2e00      	cmp	r6, #0
 800ccf0:	9301      	str	r3, [sp, #4]
 800ccf2:	d028      	beq.n	800cd46 <__d2b+0x86>
 800ccf4:	4668      	mov	r0, sp
 800ccf6:	9600      	str	r6, [sp, #0]
 800ccf8:	f7ff fd82 	bl	800c800 <__lo0bits>
 800ccfc:	9900      	ldr	r1, [sp, #0]
 800ccfe:	b300      	cbz	r0, 800cd42 <__d2b+0x82>
 800cd00:	9a01      	ldr	r2, [sp, #4]
 800cd02:	f1c0 0320 	rsb	r3, r0, #32
 800cd06:	fa02 f303 	lsl.w	r3, r2, r3
 800cd0a:	430b      	orrs	r3, r1
 800cd0c:	40c2      	lsrs	r2, r0
 800cd0e:	6163      	str	r3, [r4, #20]
 800cd10:	9201      	str	r2, [sp, #4]
 800cd12:	9b01      	ldr	r3, [sp, #4]
 800cd14:	61a3      	str	r3, [r4, #24]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	bf14      	ite	ne
 800cd1a:	2202      	movne	r2, #2
 800cd1c:	2201      	moveq	r2, #1
 800cd1e:	6122      	str	r2, [r4, #16]
 800cd20:	b1d5      	cbz	r5, 800cd58 <__d2b+0x98>
 800cd22:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cd26:	4405      	add	r5, r0
 800cd28:	f8c9 5000 	str.w	r5, [r9]
 800cd2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cd30:	f8c8 0000 	str.w	r0, [r8]
 800cd34:	4620      	mov	r0, r4
 800cd36:	b003      	add	sp, #12
 800cd38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cd40:	e7d5      	b.n	800ccee <__d2b+0x2e>
 800cd42:	6161      	str	r1, [r4, #20]
 800cd44:	e7e5      	b.n	800cd12 <__d2b+0x52>
 800cd46:	a801      	add	r0, sp, #4
 800cd48:	f7ff fd5a 	bl	800c800 <__lo0bits>
 800cd4c:	9b01      	ldr	r3, [sp, #4]
 800cd4e:	6163      	str	r3, [r4, #20]
 800cd50:	2201      	movs	r2, #1
 800cd52:	6122      	str	r2, [r4, #16]
 800cd54:	3020      	adds	r0, #32
 800cd56:	e7e3      	b.n	800cd20 <__d2b+0x60>
 800cd58:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cd5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cd60:	f8c9 0000 	str.w	r0, [r9]
 800cd64:	6918      	ldr	r0, [r3, #16]
 800cd66:	f7ff fd2b 	bl	800c7c0 <__hi0bits>
 800cd6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cd6e:	e7df      	b.n	800cd30 <__d2b+0x70>
 800cd70:	0800f0a7 	.word	0x0800f0a7
 800cd74:	0800f0b8 	.word	0x0800f0b8

0800cd78 <_calloc_r>:
 800cd78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd7a:	fba1 2402 	umull	r2, r4, r1, r2
 800cd7e:	b94c      	cbnz	r4, 800cd94 <_calloc_r+0x1c>
 800cd80:	4611      	mov	r1, r2
 800cd82:	9201      	str	r2, [sp, #4]
 800cd84:	f7fd fd7c 	bl	800a880 <_malloc_r>
 800cd88:	9a01      	ldr	r2, [sp, #4]
 800cd8a:	4605      	mov	r5, r0
 800cd8c:	b930      	cbnz	r0, 800cd9c <_calloc_r+0x24>
 800cd8e:	4628      	mov	r0, r5
 800cd90:	b003      	add	sp, #12
 800cd92:	bd30      	pop	{r4, r5, pc}
 800cd94:	220c      	movs	r2, #12
 800cd96:	6002      	str	r2, [r0, #0]
 800cd98:	2500      	movs	r5, #0
 800cd9a:	e7f8      	b.n	800cd8e <_calloc_r+0x16>
 800cd9c:	4621      	mov	r1, r4
 800cd9e:	f7fd fd46 	bl	800a82e <memset>
 800cda2:	e7f4      	b.n	800cd8e <_calloc_r+0x16>

0800cda4 <_free_r>:
 800cda4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cda6:	2900      	cmp	r1, #0
 800cda8:	d044      	beq.n	800ce34 <_free_r+0x90>
 800cdaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdae:	9001      	str	r0, [sp, #4]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	f1a1 0404 	sub.w	r4, r1, #4
 800cdb6:	bfb8      	it	lt
 800cdb8:	18e4      	addlt	r4, r4, r3
 800cdba:	f7ff fc4d 	bl	800c658 <__malloc_lock>
 800cdbe:	4a1e      	ldr	r2, [pc, #120]	; (800ce38 <_free_r+0x94>)
 800cdc0:	9801      	ldr	r0, [sp, #4]
 800cdc2:	6813      	ldr	r3, [r2, #0]
 800cdc4:	b933      	cbnz	r3, 800cdd4 <_free_r+0x30>
 800cdc6:	6063      	str	r3, [r4, #4]
 800cdc8:	6014      	str	r4, [r2, #0]
 800cdca:	b003      	add	sp, #12
 800cdcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cdd0:	f7ff bc48 	b.w	800c664 <__malloc_unlock>
 800cdd4:	42a3      	cmp	r3, r4
 800cdd6:	d908      	bls.n	800cdea <_free_r+0x46>
 800cdd8:	6825      	ldr	r5, [r4, #0]
 800cdda:	1961      	adds	r1, r4, r5
 800cddc:	428b      	cmp	r3, r1
 800cdde:	bf01      	itttt	eq
 800cde0:	6819      	ldreq	r1, [r3, #0]
 800cde2:	685b      	ldreq	r3, [r3, #4]
 800cde4:	1949      	addeq	r1, r1, r5
 800cde6:	6021      	streq	r1, [r4, #0]
 800cde8:	e7ed      	b.n	800cdc6 <_free_r+0x22>
 800cdea:	461a      	mov	r2, r3
 800cdec:	685b      	ldr	r3, [r3, #4]
 800cdee:	b10b      	cbz	r3, 800cdf4 <_free_r+0x50>
 800cdf0:	42a3      	cmp	r3, r4
 800cdf2:	d9fa      	bls.n	800cdea <_free_r+0x46>
 800cdf4:	6811      	ldr	r1, [r2, #0]
 800cdf6:	1855      	adds	r5, r2, r1
 800cdf8:	42a5      	cmp	r5, r4
 800cdfa:	d10b      	bne.n	800ce14 <_free_r+0x70>
 800cdfc:	6824      	ldr	r4, [r4, #0]
 800cdfe:	4421      	add	r1, r4
 800ce00:	1854      	adds	r4, r2, r1
 800ce02:	42a3      	cmp	r3, r4
 800ce04:	6011      	str	r1, [r2, #0]
 800ce06:	d1e0      	bne.n	800cdca <_free_r+0x26>
 800ce08:	681c      	ldr	r4, [r3, #0]
 800ce0a:	685b      	ldr	r3, [r3, #4]
 800ce0c:	6053      	str	r3, [r2, #4]
 800ce0e:	4421      	add	r1, r4
 800ce10:	6011      	str	r1, [r2, #0]
 800ce12:	e7da      	b.n	800cdca <_free_r+0x26>
 800ce14:	d902      	bls.n	800ce1c <_free_r+0x78>
 800ce16:	230c      	movs	r3, #12
 800ce18:	6003      	str	r3, [r0, #0]
 800ce1a:	e7d6      	b.n	800cdca <_free_r+0x26>
 800ce1c:	6825      	ldr	r5, [r4, #0]
 800ce1e:	1961      	adds	r1, r4, r5
 800ce20:	428b      	cmp	r3, r1
 800ce22:	bf04      	itt	eq
 800ce24:	6819      	ldreq	r1, [r3, #0]
 800ce26:	685b      	ldreq	r3, [r3, #4]
 800ce28:	6063      	str	r3, [r4, #4]
 800ce2a:	bf04      	itt	eq
 800ce2c:	1949      	addeq	r1, r1, r5
 800ce2e:	6021      	streq	r1, [r4, #0]
 800ce30:	6054      	str	r4, [r2, #4]
 800ce32:	e7ca      	b.n	800cdca <_free_r+0x26>
 800ce34:	b003      	add	sp, #12
 800ce36:	bd30      	pop	{r4, r5, pc}
 800ce38:	2000448c 	.word	0x2000448c

0800ce3c <__ssputs_r>:
 800ce3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce40:	688e      	ldr	r6, [r1, #8]
 800ce42:	429e      	cmp	r6, r3
 800ce44:	4682      	mov	sl, r0
 800ce46:	460c      	mov	r4, r1
 800ce48:	4690      	mov	r8, r2
 800ce4a:	461f      	mov	r7, r3
 800ce4c:	d838      	bhi.n	800cec0 <__ssputs_r+0x84>
 800ce4e:	898a      	ldrh	r2, [r1, #12]
 800ce50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ce54:	d032      	beq.n	800cebc <__ssputs_r+0x80>
 800ce56:	6825      	ldr	r5, [r4, #0]
 800ce58:	6909      	ldr	r1, [r1, #16]
 800ce5a:	eba5 0901 	sub.w	r9, r5, r1
 800ce5e:	6965      	ldr	r5, [r4, #20]
 800ce60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce68:	3301      	adds	r3, #1
 800ce6a:	444b      	add	r3, r9
 800ce6c:	106d      	asrs	r5, r5, #1
 800ce6e:	429d      	cmp	r5, r3
 800ce70:	bf38      	it	cc
 800ce72:	461d      	movcc	r5, r3
 800ce74:	0553      	lsls	r3, r2, #21
 800ce76:	d531      	bpl.n	800cedc <__ssputs_r+0xa0>
 800ce78:	4629      	mov	r1, r5
 800ce7a:	f7fd fd01 	bl	800a880 <_malloc_r>
 800ce7e:	4606      	mov	r6, r0
 800ce80:	b950      	cbnz	r0, 800ce98 <__ssputs_r+0x5c>
 800ce82:	230c      	movs	r3, #12
 800ce84:	f8ca 3000 	str.w	r3, [sl]
 800ce88:	89a3      	ldrh	r3, [r4, #12]
 800ce8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce8e:	81a3      	strh	r3, [r4, #12]
 800ce90:	f04f 30ff 	mov.w	r0, #4294967295
 800ce94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce98:	6921      	ldr	r1, [r4, #16]
 800ce9a:	464a      	mov	r2, r9
 800ce9c:	f7fd fcb9 	bl	800a812 <memcpy>
 800cea0:	89a3      	ldrh	r3, [r4, #12]
 800cea2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ceaa:	81a3      	strh	r3, [r4, #12]
 800ceac:	6126      	str	r6, [r4, #16]
 800ceae:	6165      	str	r5, [r4, #20]
 800ceb0:	444e      	add	r6, r9
 800ceb2:	eba5 0509 	sub.w	r5, r5, r9
 800ceb6:	6026      	str	r6, [r4, #0]
 800ceb8:	60a5      	str	r5, [r4, #8]
 800ceba:	463e      	mov	r6, r7
 800cebc:	42be      	cmp	r6, r7
 800cebe:	d900      	bls.n	800cec2 <__ssputs_r+0x86>
 800cec0:	463e      	mov	r6, r7
 800cec2:	6820      	ldr	r0, [r4, #0]
 800cec4:	4632      	mov	r2, r6
 800cec6:	4641      	mov	r1, r8
 800cec8:	f000 fae4 	bl	800d494 <memmove>
 800cecc:	68a3      	ldr	r3, [r4, #8]
 800cece:	1b9b      	subs	r3, r3, r6
 800ced0:	60a3      	str	r3, [r4, #8]
 800ced2:	6823      	ldr	r3, [r4, #0]
 800ced4:	4433      	add	r3, r6
 800ced6:	6023      	str	r3, [r4, #0]
 800ced8:	2000      	movs	r0, #0
 800ceda:	e7db      	b.n	800ce94 <__ssputs_r+0x58>
 800cedc:	462a      	mov	r2, r5
 800cede:	f000 faf3 	bl	800d4c8 <_realloc_r>
 800cee2:	4606      	mov	r6, r0
 800cee4:	2800      	cmp	r0, #0
 800cee6:	d1e1      	bne.n	800ceac <__ssputs_r+0x70>
 800cee8:	6921      	ldr	r1, [r4, #16]
 800ceea:	4650      	mov	r0, sl
 800ceec:	f7ff ff5a 	bl	800cda4 <_free_r>
 800cef0:	e7c7      	b.n	800ce82 <__ssputs_r+0x46>
	...

0800cef4 <_svfiprintf_r>:
 800cef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cef8:	4698      	mov	r8, r3
 800cefa:	898b      	ldrh	r3, [r1, #12]
 800cefc:	061b      	lsls	r3, r3, #24
 800cefe:	b09d      	sub	sp, #116	; 0x74
 800cf00:	4607      	mov	r7, r0
 800cf02:	460d      	mov	r5, r1
 800cf04:	4614      	mov	r4, r2
 800cf06:	d50e      	bpl.n	800cf26 <_svfiprintf_r+0x32>
 800cf08:	690b      	ldr	r3, [r1, #16]
 800cf0a:	b963      	cbnz	r3, 800cf26 <_svfiprintf_r+0x32>
 800cf0c:	2140      	movs	r1, #64	; 0x40
 800cf0e:	f7fd fcb7 	bl	800a880 <_malloc_r>
 800cf12:	6028      	str	r0, [r5, #0]
 800cf14:	6128      	str	r0, [r5, #16]
 800cf16:	b920      	cbnz	r0, 800cf22 <_svfiprintf_r+0x2e>
 800cf18:	230c      	movs	r3, #12
 800cf1a:	603b      	str	r3, [r7, #0]
 800cf1c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf20:	e0d1      	b.n	800d0c6 <_svfiprintf_r+0x1d2>
 800cf22:	2340      	movs	r3, #64	; 0x40
 800cf24:	616b      	str	r3, [r5, #20]
 800cf26:	2300      	movs	r3, #0
 800cf28:	9309      	str	r3, [sp, #36]	; 0x24
 800cf2a:	2320      	movs	r3, #32
 800cf2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf30:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf34:	2330      	movs	r3, #48	; 0x30
 800cf36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d0e0 <_svfiprintf_r+0x1ec>
 800cf3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf3e:	f04f 0901 	mov.w	r9, #1
 800cf42:	4623      	mov	r3, r4
 800cf44:	469a      	mov	sl, r3
 800cf46:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf4a:	b10a      	cbz	r2, 800cf50 <_svfiprintf_r+0x5c>
 800cf4c:	2a25      	cmp	r2, #37	; 0x25
 800cf4e:	d1f9      	bne.n	800cf44 <_svfiprintf_r+0x50>
 800cf50:	ebba 0b04 	subs.w	fp, sl, r4
 800cf54:	d00b      	beq.n	800cf6e <_svfiprintf_r+0x7a>
 800cf56:	465b      	mov	r3, fp
 800cf58:	4622      	mov	r2, r4
 800cf5a:	4629      	mov	r1, r5
 800cf5c:	4638      	mov	r0, r7
 800cf5e:	f7ff ff6d 	bl	800ce3c <__ssputs_r>
 800cf62:	3001      	adds	r0, #1
 800cf64:	f000 80aa 	beq.w	800d0bc <_svfiprintf_r+0x1c8>
 800cf68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf6a:	445a      	add	r2, fp
 800cf6c:	9209      	str	r2, [sp, #36]	; 0x24
 800cf6e:	f89a 3000 	ldrb.w	r3, [sl]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	f000 80a2 	beq.w	800d0bc <_svfiprintf_r+0x1c8>
 800cf78:	2300      	movs	r3, #0
 800cf7a:	f04f 32ff 	mov.w	r2, #4294967295
 800cf7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf82:	f10a 0a01 	add.w	sl, sl, #1
 800cf86:	9304      	str	r3, [sp, #16]
 800cf88:	9307      	str	r3, [sp, #28]
 800cf8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf8e:	931a      	str	r3, [sp, #104]	; 0x68
 800cf90:	4654      	mov	r4, sl
 800cf92:	2205      	movs	r2, #5
 800cf94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf98:	4851      	ldr	r0, [pc, #324]	; (800d0e0 <_svfiprintf_r+0x1ec>)
 800cf9a:	f7f3 f931 	bl	8000200 <memchr>
 800cf9e:	9a04      	ldr	r2, [sp, #16]
 800cfa0:	b9d8      	cbnz	r0, 800cfda <_svfiprintf_r+0xe6>
 800cfa2:	06d0      	lsls	r0, r2, #27
 800cfa4:	bf44      	itt	mi
 800cfa6:	2320      	movmi	r3, #32
 800cfa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfac:	0711      	lsls	r1, r2, #28
 800cfae:	bf44      	itt	mi
 800cfb0:	232b      	movmi	r3, #43	; 0x2b
 800cfb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfb6:	f89a 3000 	ldrb.w	r3, [sl]
 800cfba:	2b2a      	cmp	r3, #42	; 0x2a
 800cfbc:	d015      	beq.n	800cfea <_svfiprintf_r+0xf6>
 800cfbe:	9a07      	ldr	r2, [sp, #28]
 800cfc0:	4654      	mov	r4, sl
 800cfc2:	2000      	movs	r0, #0
 800cfc4:	f04f 0c0a 	mov.w	ip, #10
 800cfc8:	4621      	mov	r1, r4
 800cfca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cfce:	3b30      	subs	r3, #48	; 0x30
 800cfd0:	2b09      	cmp	r3, #9
 800cfd2:	d94e      	bls.n	800d072 <_svfiprintf_r+0x17e>
 800cfd4:	b1b0      	cbz	r0, 800d004 <_svfiprintf_r+0x110>
 800cfd6:	9207      	str	r2, [sp, #28]
 800cfd8:	e014      	b.n	800d004 <_svfiprintf_r+0x110>
 800cfda:	eba0 0308 	sub.w	r3, r0, r8
 800cfde:	fa09 f303 	lsl.w	r3, r9, r3
 800cfe2:	4313      	orrs	r3, r2
 800cfe4:	9304      	str	r3, [sp, #16]
 800cfe6:	46a2      	mov	sl, r4
 800cfe8:	e7d2      	b.n	800cf90 <_svfiprintf_r+0x9c>
 800cfea:	9b03      	ldr	r3, [sp, #12]
 800cfec:	1d19      	adds	r1, r3, #4
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	9103      	str	r1, [sp, #12]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	bfbb      	ittet	lt
 800cff6:	425b      	neglt	r3, r3
 800cff8:	f042 0202 	orrlt.w	r2, r2, #2
 800cffc:	9307      	strge	r3, [sp, #28]
 800cffe:	9307      	strlt	r3, [sp, #28]
 800d000:	bfb8      	it	lt
 800d002:	9204      	strlt	r2, [sp, #16]
 800d004:	7823      	ldrb	r3, [r4, #0]
 800d006:	2b2e      	cmp	r3, #46	; 0x2e
 800d008:	d10c      	bne.n	800d024 <_svfiprintf_r+0x130>
 800d00a:	7863      	ldrb	r3, [r4, #1]
 800d00c:	2b2a      	cmp	r3, #42	; 0x2a
 800d00e:	d135      	bne.n	800d07c <_svfiprintf_r+0x188>
 800d010:	9b03      	ldr	r3, [sp, #12]
 800d012:	1d1a      	adds	r2, r3, #4
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	9203      	str	r2, [sp, #12]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	bfb8      	it	lt
 800d01c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d020:	3402      	adds	r4, #2
 800d022:	9305      	str	r3, [sp, #20]
 800d024:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d0f0 <_svfiprintf_r+0x1fc>
 800d028:	7821      	ldrb	r1, [r4, #0]
 800d02a:	2203      	movs	r2, #3
 800d02c:	4650      	mov	r0, sl
 800d02e:	f7f3 f8e7 	bl	8000200 <memchr>
 800d032:	b140      	cbz	r0, 800d046 <_svfiprintf_r+0x152>
 800d034:	2340      	movs	r3, #64	; 0x40
 800d036:	eba0 000a 	sub.w	r0, r0, sl
 800d03a:	fa03 f000 	lsl.w	r0, r3, r0
 800d03e:	9b04      	ldr	r3, [sp, #16]
 800d040:	4303      	orrs	r3, r0
 800d042:	3401      	adds	r4, #1
 800d044:	9304      	str	r3, [sp, #16]
 800d046:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d04a:	4826      	ldr	r0, [pc, #152]	; (800d0e4 <_svfiprintf_r+0x1f0>)
 800d04c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d050:	2206      	movs	r2, #6
 800d052:	f7f3 f8d5 	bl	8000200 <memchr>
 800d056:	2800      	cmp	r0, #0
 800d058:	d038      	beq.n	800d0cc <_svfiprintf_r+0x1d8>
 800d05a:	4b23      	ldr	r3, [pc, #140]	; (800d0e8 <_svfiprintf_r+0x1f4>)
 800d05c:	bb1b      	cbnz	r3, 800d0a6 <_svfiprintf_r+0x1b2>
 800d05e:	9b03      	ldr	r3, [sp, #12]
 800d060:	3307      	adds	r3, #7
 800d062:	f023 0307 	bic.w	r3, r3, #7
 800d066:	3308      	adds	r3, #8
 800d068:	9303      	str	r3, [sp, #12]
 800d06a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d06c:	4433      	add	r3, r6
 800d06e:	9309      	str	r3, [sp, #36]	; 0x24
 800d070:	e767      	b.n	800cf42 <_svfiprintf_r+0x4e>
 800d072:	fb0c 3202 	mla	r2, ip, r2, r3
 800d076:	460c      	mov	r4, r1
 800d078:	2001      	movs	r0, #1
 800d07a:	e7a5      	b.n	800cfc8 <_svfiprintf_r+0xd4>
 800d07c:	2300      	movs	r3, #0
 800d07e:	3401      	adds	r4, #1
 800d080:	9305      	str	r3, [sp, #20]
 800d082:	4619      	mov	r1, r3
 800d084:	f04f 0c0a 	mov.w	ip, #10
 800d088:	4620      	mov	r0, r4
 800d08a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d08e:	3a30      	subs	r2, #48	; 0x30
 800d090:	2a09      	cmp	r2, #9
 800d092:	d903      	bls.n	800d09c <_svfiprintf_r+0x1a8>
 800d094:	2b00      	cmp	r3, #0
 800d096:	d0c5      	beq.n	800d024 <_svfiprintf_r+0x130>
 800d098:	9105      	str	r1, [sp, #20]
 800d09a:	e7c3      	b.n	800d024 <_svfiprintf_r+0x130>
 800d09c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d0a0:	4604      	mov	r4, r0
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	e7f0      	b.n	800d088 <_svfiprintf_r+0x194>
 800d0a6:	ab03      	add	r3, sp, #12
 800d0a8:	9300      	str	r3, [sp, #0]
 800d0aa:	462a      	mov	r2, r5
 800d0ac:	4b0f      	ldr	r3, [pc, #60]	; (800d0ec <_svfiprintf_r+0x1f8>)
 800d0ae:	a904      	add	r1, sp, #16
 800d0b0:	4638      	mov	r0, r7
 800d0b2:	f7fd fcf9 	bl	800aaa8 <_printf_float>
 800d0b6:	1c42      	adds	r2, r0, #1
 800d0b8:	4606      	mov	r6, r0
 800d0ba:	d1d6      	bne.n	800d06a <_svfiprintf_r+0x176>
 800d0bc:	89ab      	ldrh	r3, [r5, #12]
 800d0be:	065b      	lsls	r3, r3, #25
 800d0c0:	f53f af2c 	bmi.w	800cf1c <_svfiprintf_r+0x28>
 800d0c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d0c6:	b01d      	add	sp, #116	; 0x74
 800d0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0cc:	ab03      	add	r3, sp, #12
 800d0ce:	9300      	str	r3, [sp, #0]
 800d0d0:	462a      	mov	r2, r5
 800d0d2:	4b06      	ldr	r3, [pc, #24]	; (800d0ec <_svfiprintf_r+0x1f8>)
 800d0d4:	a904      	add	r1, sp, #16
 800d0d6:	4638      	mov	r0, r7
 800d0d8:	f7fd ff8a 	bl	800aff0 <_printf_i>
 800d0dc:	e7eb      	b.n	800d0b6 <_svfiprintf_r+0x1c2>
 800d0de:	bf00      	nop
 800d0e0:	0800f214 	.word	0x0800f214
 800d0e4:	0800f21e 	.word	0x0800f21e
 800d0e8:	0800aaa9 	.word	0x0800aaa9
 800d0ec:	0800ce3d 	.word	0x0800ce3d
 800d0f0:	0800f21a 	.word	0x0800f21a

0800d0f4 <__sfputc_r>:
 800d0f4:	6893      	ldr	r3, [r2, #8]
 800d0f6:	3b01      	subs	r3, #1
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	b410      	push	{r4}
 800d0fc:	6093      	str	r3, [r2, #8]
 800d0fe:	da08      	bge.n	800d112 <__sfputc_r+0x1e>
 800d100:	6994      	ldr	r4, [r2, #24]
 800d102:	42a3      	cmp	r3, r4
 800d104:	db01      	blt.n	800d10a <__sfputc_r+0x16>
 800d106:	290a      	cmp	r1, #10
 800d108:	d103      	bne.n	800d112 <__sfputc_r+0x1e>
 800d10a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d10e:	f7fe ba01 	b.w	800b514 <__swbuf_r>
 800d112:	6813      	ldr	r3, [r2, #0]
 800d114:	1c58      	adds	r0, r3, #1
 800d116:	6010      	str	r0, [r2, #0]
 800d118:	7019      	strb	r1, [r3, #0]
 800d11a:	4608      	mov	r0, r1
 800d11c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d120:	4770      	bx	lr

0800d122 <__sfputs_r>:
 800d122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d124:	4606      	mov	r6, r0
 800d126:	460f      	mov	r7, r1
 800d128:	4614      	mov	r4, r2
 800d12a:	18d5      	adds	r5, r2, r3
 800d12c:	42ac      	cmp	r4, r5
 800d12e:	d101      	bne.n	800d134 <__sfputs_r+0x12>
 800d130:	2000      	movs	r0, #0
 800d132:	e007      	b.n	800d144 <__sfputs_r+0x22>
 800d134:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d138:	463a      	mov	r2, r7
 800d13a:	4630      	mov	r0, r6
 800d13c:	f7ff ffda 	bl	800d0f4 <__sfputc_r>
 800d140:	1c43      	adds	r3, r0, #1
 800d142:	d1f3      	bne.n	800d12c <__sfputs_r+0xa>
 800d144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d148 <_vfiprintf_r>:
 800d148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d14c:	460d      	mov	r5, r1
 800d14e:	b09d      	sub	sp, #116	; 0x74
 800d150:	4614      	mov	r4, r2
 800d152:	4698      	mov	r8, r3
 800d154:	4606      	mov	r6, r0
 800d156:	b118      	cbz	r0, 800d160 <_vfiprintf_r+0x18>
 800d158:	6983      	ldr	r3, [r0, #24]
 800d15a:	b90b      	cbnz	r3, 800d160 <_vfiprintf_r+0x18>
 800d15c:	f7fd fa94 	bl	800a688 <__sinit>
 800d160:	4b89      	ldr	r3, [pc, #548]	; (800d388 <_vfiprintf_r+0x240>)
 800d162:	429d      	cmp	r5, r3
 800d164:	d11b      	bne.n	800d19e <_vfiprintf_r+0x56>
 800d166:	6875      	ldr	r5, [r6, #4]
 800d168:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d16a:	07d9      	lsls	r1, r3, #31
 800d16c:	d405      	bmi.n	800d17a <_vfiprintf_r+0x32>
 800d16e:	89ab      	ldrh	r3, [r5, #12]
 800d170:	059a      	lsls	r2, r3, #22
 800d172:	d402      	bmi.n	800d17a <_vfiprintf_r+0x32>
 800d174:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d176:	f7fd fb4a 	bl	800a80e <__retarget_lock_acquire_recursive>
 800d17a:	89ab      	ldrh	r3, [r5, #12]
 800d17c:	071b      	lsls	r3, r3, #28
 800d17e:	d501      	bpl.n	800d184 <_vfiprintf_r+0x3c>
 800d180:	692b      	ldr	r3, [r5, #16]
 800d182:	b9eb      	cbnz	r3, 800d1c0 <_vfiprintf_r+0x78>
 800d184:	4629      	mov	r1, r5
 800d186:	4630      	mov	r0, r6
 800d188:	f7fe fa28 	bl	800b5dc <__swsetup_r>
 800d18c:	b1c0      	cbz	r0, 800d1c0 <_vfiprintf_r+0x78>
 800d18e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d190:	07dc      	lsls	r4, r3, #31
 800d192:	d50e      	bpl.n	800d1b2 <_vfiprintf_r+0x6a>
 800d194:	f04f 30ff 	mov.w	r0, #4294967295
 800d198:	b01d      	add	sp, #116	; 0x74
 800d19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d19e:	4b7b      	ldr	r3, [pc, #492]	; (800d38c <_vfiprintf_r+0x244>)
 800d1a0:	429d      	cmp	r5, r3
 800d1a2:	d101      	bne.n	800d1a8 <_vfiprintf_r+0x60>
 800d1a4:	68b5      	ldr	r5, [r6, #8]
 800d1a6:	e7df      	b.n	800d168 <_vfiprintf_r+0x20>
 800d1a8:	4b79      	ldr	r3, [pc, #484]	; (800d390 <_vfiprintf_r+0x248>)
 800d1aa:	429d      	cmp	r5, r3
 800d1ac:	bf08      	it	eq
 800d1ae:	68f5      	ldreq	r5, [r6, #12]
 800d1b0:	e7da      	b.n	800d168 <_vfiprintf_r+0x20>
 800d1b2:	89ab      	ldrh	r3, [r5, #12]
 800d1b4:	0598      	lsls	r0, r3, #22
 800d1b6:	d4ed      	bmi.n	800d194 <_vfiprintf_r+0x4c>
 800d1b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1ba:	f7fd fb29 	bl	800a810 <__retarget_lock_release_recursive>
 800d1be:	e7e9      	b.n	800d194 <_vfiprintf_r+0x4c>
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	9309      	str	r3, [sp, #36]	; 0x24
 800d1c4:	2320      	movs	r3, #32
 800d1c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d1ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1ce:	2330      	movs	r3, #48	; 0x30
 800d1d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d394 <_vfiprintf_r+0x24c>
 800d1d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d1d8:	f04f 0901 	mov.w	r9, #1
 800d1dc:	4623      	mov	r3, r4
 800d1de:	469a      	mov	sl, r3
 800d1e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1e4:	b10a      	cbz	r2, 800d1ea <_vfiprintf_r+0xa2>
 800d1e6:	2a25      	cmp	r2, #37	; 0x25
 800d1e8:	d1f9      	bne.n	800d1de <_vfiprintf_r+0x96>
 800d1ea:	ebba 0b04 	subs.w	fp, sl, r4
 800d1ee:	d00b      	beq.n	800d208 <_vfiprintf_r+0xc0>
 800d1f0:	465b      	mov	r3, fp
 800d1f2:	4622      	mov	r2, r4
 800d1f4:	4629      	mov	r1, r5
 800d1f6:	4630      	mov	r0, r6
 800d1f8:	f7ff ff93 	bl	800d122 <__sfputs_r>
 800d1fc:	3001      	adds	r0, #1
 800d1fe:	f000 80aa 	beq.w	800d356 <_vfiprintf_r+0x20e>
 800d202:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d204:	445a      	add	r2, fp
 800d206:	9209      	str	r2, [sp, #36]	; 0x24
 800d208:	f89a 3000 	ldrb.w	r3, [sl]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	f000 80a2 	beq.w	800d356 <_vfiprintf_r+0x20e>
 800d212:	2300      	movs	r3, #0
 800d214:	f04f 32ff 	mov.w	r2, #4294967295
 800d218:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d21c:	f10a 0a01 	add.w	sl, sl, #1
 800d220:	9304      	str	r3, [sp, #16]
 800d222:	9307      	str	r3, [sp, #28]
 800d224:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d228:	931a      	str	r3, [sp, #104]	; 0x68
 800d22a:	4654      	mov	r4, sl
 800d22c:	2205      	movs	r2, #5
 800d22e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d232:	4858      	ldr	r0, [pc, #352]	; (800d394 <_vfiprintf_r+0x24c>)
 800d234:	f7f2 ffe4 	bl	8000200 <memchr>
 800d238:	9a04      	ldr	r2, [sp, #16]
 800d23a:	b9d8      	cbnz	r0, 800d274 <_vfiprintf_r+0x12c>
 800d23c:	06d1      	lsls	r1, r2, #27
 800d23e:	bf44      	itt	mi
 800d240:	2320      	movmi	r3, #32
 800d242:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d246:	0713      	lsls	r3, r2, #28
 800d248:	bf44      	itt	mi
 800d24a:	232b      	movmi	r3, #43	; 0x2b
 800d24c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d250:	f89a 3000 	ldrb.w	r3, [sl]
 800d254:	2b2a      	cmp	r3, #42	; 0x2a
 800d256:	d015      	beq.n	800d284 <_vfiprintf_r+0x13c>
 800d258:	9a07      	ldr	r2, [sp, #28]
 800d25a:	4654      	mov	r4, sl
 800d25c:	2000      	movs	r0, #0
 800d25e:	f04f 0c0a 	mov.w	ip, #10
 800d262:	4621      	mov	r1, r4
 800d264:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d268:	3b30      	subs	r3, #48	; 0x30
 800d26a:	2b09      	cmp	r3, #9
 800d26c:	d94e      	bls.n	800d30c <_vfiprintf_r+0x1c4>
 800d26e:	b1b0      	cbz	r0, 800d29e <_vfiprintf_r+0x156>
 800d270:	9207      	str	r2, [sp, #28]
 800d272:	e014      	b.n	800d29e <_vfiprintf_r+0x156>
 800d274:	eba0 0308 	sub.w	r3, r0, r8
 800d278:	fa09 f303 	lsl.w	r3, r9, r3
 800d27c:	4313      	orrs	r3, r2
 800d27e:	9304      	str	r3, [sp, #16]
 800d280:	46a2      	mov	sl, r4
 800d282:	e7d2      	b.n	800d22a <_vfiprintf_r+0xe2>
 800d284:	9b03      	ldr	r3, [sp, #12]
 800d286:	1d19      	adds	r1, r3, #4
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	9103      	str	r1, [sp, #12]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	bfbb      	ittet	lt
 800d290:	425b      	neglt	r3, r3
 800d292:	f042 0202 	orrlt.w	r2, r2, #2
 800d296:	9307      	strge	r3, [sp, #28]
 800d298:	9307      	strlt	r3, [sp, #28]
 800d29a:	bfb8      	it	lt
 800d29c:	9204      	strlt	r2, [sp, #16]
 800d29e:	7823      	ldrb	r3, [r4, #0]
 800d2a0:	2b2e      	cmp	r3, #46	; 0x2e
 800d2a2:	d10c      	bne.n	800d2be <_vfiprintf_r+0x176>
 800d2a4:	7863      	ldrb	r3, [r4, #1]
 800d2a6:	2b2a      	cmp	r3, #42	; 0x2a
 800d2a8:	d135      	bne.n	800d316 <_vfiprintf_r+0x1ce>
 800d2aa:	9b03      	ldr	r3, [sp, #12]
 800d2ac:	1d1a      	adds	r2, r3, #4
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	9203      	str	r2, [sp, #12]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	bfb8      	it	lt
 800d2b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800d2ba:	3402      	adds	r4, #2
 800d2bc:	9305      	str	r3, [sp, #20]
 800d2be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d3a4 <_vfiprintf_r+0x25c>
 800d2c2:	7821      	ldrb	r1, [r4, #0]
 800d2c4:	2203      	movs	r2, #3
 800d2c6:	4650      	mov	r0, sl
 800d2c8:	f7f2 ff9a 	bl	8000200 <memchr>
 800d2cc:	b140      	cbz	r0, 800d2e0 <_vfiprintf_r+0x198>
 800d2ce:	2340      	movs	r3, #64	; 0x40
 800d2d0:	eba0 000a 	sub.w	r0, r0, sl
 800d2d4:	fa03 f000 	lsl.w	r0, r3, r0
 800d2d8:	9b04      	ldr	r3, [sp, #16]
 800d2da:	4303      	orrs	r3, r0
 800d2dc:	3401      	adds	r4, #1
 800d2de:	9304      	str	r3, [sp, #16]
 800d2e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2e4:	482c      	ldr	r0, [pc, #176]	; (800d398 <_vfiprintf_r+0x250>)
 800d2e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d2ea:	2206      	movs	r2, #6
 800d2ec:	f7f2 ff88 	bl	8000200 <memchr>
 800d2f0:	2800      	cmp	r0, #0
 800d2f2:	d03f      	beq.n	800d374 <_vfiprintf_r+0x22c>
 800d2f4:	4b29      	ldr	r3, [pc, #164]	; (800d39c <_vfiprintf_r+0x254>)
 800d2f6:	bb1b      	cbnz	r3, 800d340 <_vfiprintf_r+0x1f8>
 800d2f8:	9b03      	ldr	r3, [sp, #12]
 800d2fa:	3307      	adds	r3, #7
 800d2fc:	f023 0307 	bic.w	r3, r3, #7
 800d300:	3308      	adds	r3, #8
 800d302:	9303      	str	r3, [sp, #12]
 800d304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d306:	443b      	add	r3, r7
 800d308:	9309      	str	r3, [sp, #36]	; 0x24
 800d30a:	e767      	b.n	800d1dc <_vfiprintf_r+0x94>
 800d30c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d310:	460c      	mov	r4, r1
 800d312:	2001      	movs	r0, #1
 800d314:	e7a5      	b.n	800d262 <_vfiprintf_r+0x11a>
 800d316:	2300      	movs	r3, #0
 800d318:	3401      	adds	r4, #1
 800d31a:	9305      	str	r3, [sp, #20]
 800d31c:	4619      	mov	r1, r3
 800d31e:	f04f 0c0a 	mov.w	ip, #10
 800d322:	4620      	mov	r0, r4
 800d324:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d328:	3a30      	subs	r2, #48	; 0x30
 800d32a:	2a09      	cmp	r2, #9
 800d32c:	d903      	bls.n	800d336 <_vfiprintf_r+0x1ee>
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d0c5      	beq.n	800d2be <_vfiprintf_r+0x176>
 800d332:	9105      	str	r1, [sp, #20]
 800d334:	e7c3      	b.n	800d2be <_vfiprintf_r+0x176>
 800d336:	fb0c 2101 	mla	r1, ip, r1, r2
 800d33a:	4604      	mov	r4, r0
 800d33c:	2301      	movs	r3, #1
 800d33e:	e7f0      	b.n	800d322 <_vfiprintf_r+0x1da>
 800d340:	ab03      	add	r3, sp, #12
 800d342:	9300      	str	r3, [sp, #0]
 800d344:	462a      	mov	r2, r5
 800d346:	4b16      	ldr	r3, [pc, #88]	; (800d3a0 <_vfiprintf_r+0x258>)
 800d348:	a904      	add	r1, sp, #16
 800d34a:	4630      	mov	r0, r6
 800d34c:	f7fd fbac 	bl	800aaa8 <_printf_float>
 800d350:	4607      	mov	r7, r0
 800d352:	1c78      	adds	r0, r7, #1
 800d354:	d1d6      	bne.n	800d304 <_vfiprintf_r+0x1bc>
 800d356:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d358:	07d9      	lsls	r1, r3, #31
 800d35a:	d405      	bmi.n	800d368 <_vfiprintf_r+0x220>
 800d35c:	89ab      	ldrh	r3, [r5, #12]
 800d35e:	059a      	lsls	r2, r3, #22
 800d360:	d402      	bmi.n	800d368 <_vfiprintf_r+0x220>
 800d362:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d364:	f7fd fa54 	bl	800a810 <__retarget_lock_release_recursive>
 800d368:	89ab      	ldrh	r3, [r5, #12]
 800d36a:	065b      	lsls	r3, r3, #25
 800d36c:	f53f af12 	bmi.w	800d194 <_vfiprintf_r+0x4c>
 800d370:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d372:	e711      	b.n	800d198 <_vfiprintf_r+0x50>
 800d374:	ab03      	add	r3, sp, #12
 800d376:	9300      	str	r3, [sp, #0]
 800d378:	462a      	mov	r2, r5
 800d37a:	4b09      	ldr	r3, [pc, #36]	; (800d3a0 <_vfiprintf_r+0x258>)
 800d37c:	a904      	add	r1, sp, #16
 800d37e:	4630      	mov	r0, r6
 800d380:	f7fd fe36 	bl	800aff0 <_printf_i>
 800d384:	e7e4      	b.n	800d350 <_vfiprintf_r+0x208>
 800d386:	bf00      	nop
 800d388:	0800efb0 	.word	0x0800efb0
 800d38c:	0800efd0 	.word	0x0800efd0
 800d390:	0800ef90 	.word	0x0800ef90
 800d394:	0800f214 	.word	0x0800f214
 800d398:	0800f21e 	.word	0x0800f21e
 800d39c:	0800aaa9 	.word	0x0800aaa9
 800d3a0:	0800d123 	.word	0x0800d123
 800d3a4:	0800f21a 	.word	0x0800f21a

0800d3a8 <_read_r>:
 800d3a8:	b538      	push	{r3, r4, r5, lr}
 800d3aa:	4d07      	ldr	r5, [pc, #28]	; (800d3c8 <_read_r+0x20>)
 800d3ac:	4604      	mov	r4, r0
 800d3ae:	4608      	mov	r0, r1
 800d3b0:	4611      	mov	r1, r2
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	602a      	str	r2, [r5, #0]
 800d3b6:	461a      	mov	r2, r3
 800d3b8:	f7f6 fb00 	bl	80039bc <_read>
 800d3bc:	1c43      	adds	r3, r0, #1
 800d3be:	d102      	bne.n	800d3c6 <_read_r+0x1e>
 800d3c0:	682b      	ldr	r3, [r5, #0]
 800d3c2:	b103      	cbz	r3, 800d3c6 <_read_r+0x1e>
 800d3c4:	6023      	str	r3, [r4, #0]
 800d3c6:	bd38      	pop	{r3, r4, r5, pc}
 800d3c8:	20004494 	.word	0x20004494

0800d3cc <__assert_func>:
 800d3cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d3ce:	4614      	mov	r4, r2
 800d3d0:	461a      	mov	r2, r3
 800d3d2:	4b09      	ldr	r3, [pc, #36]	; (800d3f8 <__assert_func+0x2c>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	4605      	mov	r5, r0
 800d3d8:	68d8      	ldr	r0, [r3, #12]
 800d3da:	b14c      	cbz	r4, 800d3f0 <__assert_func+0x24>
 800d3dc:	4b07      	ldr	r3, [pc, #28]	; (800d3fc <__assert_func+0x30>)
 800d3de:	9100      	str	r1, [sp, #0]
 800d3e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d3e4:	4906      	ldr	r1, [pc, #24]	; (800d400 <__assert_func+0x34>)
 800d3e6:	462b      	mov	r3, r5
 800d3e8:	f000 f80e 	bl	800d408 <fiprintf>
 800d3ec:	f000 f8a8 	bl	800d540 <abort>
 800d3f0:	4b04      	ldr	r3, [pc, #16]	; (800d404 <__assert_func+0x38>)
 800d3f2:	461c      	mov	r4, r3
 800d3f4:	e7f3      	b.n	800d3de <__assert_func+0x12>
 800d3f6:	bf00      	nop
 800d3f8:	20000058 	.word	0x20000058
 800d3fc:	0800f225 	.word	0x0800f225
 800d400:	0800f232 	.word	0x0800f232
 800d404:	0800f260 	.word	0x0800f260

0800d408 <fiprintf>:
 800d408:	b40e      	push	{r1, r2, r3}
 800d40a:	b503      	push	{r0, r1, lr}
 800d40c:	4601      	mov	r1, r0
 800d40e:	ab03      	add	r3, sp, #12
 800d410:	4805      	ldr	r0, [pc, #20]	; (800d428 <fiprintf+0x20>)
 800d412:	f853 2b04 	ldr.w	r2, [r3], #4
 800d416:	6800      	ldr	r0, [r0, #0]
 800d418:	9301      	str	r3, [sp, #4]
 800d41a:	f7ff fe95 	bl	800d148 <_vfiprintf_r>
 800d41e:	b002      	add	sp, #8
 800d420:	f85d eb04 	ldr.w	lr, [sp], #4
 800d424:	b003      	add	sp, #12
 800d426:	4770      	bx	lr
 800d428:	20000058 	.word	0x20000058

0800d42c <_fstat_r>:
 800d42c:	b538      	push	{r3, r4, r5, lr}
 800d42e:	4d07      	ldr	r5, [pc, #28]	; (800d44c <_fstat_r+0x20>)
 800d430:	2300      	movs	r3, #0
 800d432:	4604      	mov	r4, r0
 800d434:	4608      	mov	r0, r1
 800d436:	4611      	mov	r1, r2
 800d438:	602b      	str	r3, [r5, #0]
 800d43a:	f7f6 fae8 	bl	8003a0e <_fstat>
 800d43e:	1c43      	adds	r3, r0, #1
 800d440:	d102      	bne.n	800d448 <_fstat_r+0x1c>
 800d442:	682b      	ldr	r3, [r5, #0]
 800d444:	b103      	cbz	r3, 800d448 <_fstat_r+0x1c>
 800d446:	6023      	str	r3, [r4, #0]
 800d448:	bd38      	pop	{r3, r4, r5, pc}
 800d44a:	bf00      	nop
 800d44c:	20004494 	.word	0x20004494

0800d450 <_isatty_r>:
 800d450:	b538      	push	{r3, r4, r5, lr}
 800d452:	4d06      	ldr	r5, [pc, #24]	; (800d46c <_isatty_r+0x1c>)
 800d454:	2300      	movs	r3, #0
 800d456:	4604      	mov	r4, r0
 800d458:	4608      	mov	r0, r1
 800d45a:	602b      	str	r3, [r5, #0]
 800d45c:	f7f6 fae7 	bl	8003a2e <_isatty>
 800d460:	1c43      	adds	r3, r0, #1
 800d462:	d102      	bne.n	800d46a <_isatty_r+0x1a>
 800d464:	682b      	ldr	r3, [r5, #0]
 800d466:	b103      	cbz	r3, 800d46a <_isatty_r+0x1a>
 800d468:	6023      	str	r3, [r4, #0]
 800d46a:	bd38      	pop	{r3, r4, r5, pc}
 800d46c:	20004494 	.word	0x20004494

0800d470 <__ascii_mbtowc>:
 800d470:	b082      	sub	sp, #8
 800d472:	b901      	cbnz	r1, 800d476 <__ascii_mbtowc+0x6>
 800d474:	a901      	add	r1, sp, #4
 800d476:	b142      	cbz	r2, 800d48a <__ascii_mbtowc+0x1a>
 800d478:	b14b      	cbz	r3, 800d48e <__ascii_mbtowc+0x1e>
 800d47a:	7813      	ldrb	r3, [r2, #0]
 800d47c:	600b      	str	r3, [r1, #0]
 800d47e:	7812      	ldrb	r2, [r2, #0]
 800d480:	1e10      	subs	r0, r2, #0
 800d482:	bf18      	it	ne
 800d484:	2001      	movne	r0, #1
 800d486:	b002      	add	sp, #8
 800d488:	4770      	bx	lr
 800d48a:	4610      	mov	r0, r2
 800d48c:	e7fb      	b.n	800d486 <__ascii_mbtowc+0x16>
 800d48e:	f06f 0001 	mvn.w	r0, #1
 800d492:	e7f8      	b.n	800d486 <__ascii_mbtowc+0x16>

0800d494 <memmove>:
 800d494:	4288      	cmp	r0, r1
 800d496:	b510      	push	{r4, lr}
 800d498:	eb01 0402 	add.w	r4, r1, r2
 800d49c:	d902      	bls.n	800d4a4 <memmove+0x10>
 800d49e:	4284      	cmp	r4, r0
 800d4a0:	4623      	mov	r3, r4
 800d4a2:	d807      	bhi.n	800d4b4 <memmove+0x20>
 800d4a4:	1e43      	subs	r3, r0, #1
 800d4a6:	42a1      	cmp	r1, r4
 800d4a8:	d008      	beq.n	800d4bc <memmove+0x28>
 800d4aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d4ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d4b2:	e7f8      	b.n	800d4a6 <memmove+0x12>
 800d4b4:	4402      	add	r2, r0
 800d4b6:	4601      	mov	r1, r0
 800d4b8:	428a      	cmp	r2, r1
 800d4ba:	d100      	bne.n	800d4be <memmove+0x2a>
 800d4bc:	bd10      	pop	{r4, pc}
 800d4be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d4c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d4c6:	e7f7      	b.n	800d4b8 <memmove+0x24>

0800d4c8 <_realloc_r>:
 800d4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4cc:	4680      	mov	r8, r0
 800d4ce:	4614      	mov	r4, r2
 800d4d0:	460e      	mov	r6, r1
 800d4d2:	b921      	cbnz	r1, 800d4de <_realloc_r+0x16>
 800d4d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4d8:	4611      	mov	r1, r2
 800d4da:	f7fd b9d1 	b.w	800a880 <_malloc_r>
 800d4de:	b92a      	cbnz	r2, 800d4ec <_realloc_r+0x24>
 800d4e0:	f7ff fc60 	bl	800cda4 <_free_r>
 800d4e4:	4625      	mov	r5, r4
 800d4e6:	4628      	mov	r0, r5
 800d4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4ec:	f000 f82f 	bl	800d54e <_malloc_usable_size_r>
 800d4f0:	4284      	cmp	r4, r0
 800d4f2:	4607      	mov	r7, r0
 800d4f4:	d802      	bhi.n	800d4fc <_realloc_r+0x34>
 800d4f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d4fa:	d812      	bhi.n	800d522 <_realloc_r+0x5a>
 800d4fc:	4621      	mov	r1, r4
 800d4fe:	4640      	mov	r0, r8
 800d500:	f7fd f9be 	bl	800a880 <_malloc_r>
 800d504:	4605      	mov	r5, r0
 800d506:	2800      	cmp	r0, #0
 800d508:	d0ed      	beq.n	800d4e6 <_realloc_r+0x1e>
 800d50a:	42bc      	cmp	r4, r7
 800d50c:	4622      	mov	r2, r4
 800d50e:	4631      	mov	r1, r6
 800d510:	bf28      	it	cs
 800d512:	463a      	movcs	r2, r7
 800d514:	f7fd f97d 	bl	800a812 <memcpy>
 800d518:	4631      	mov	r1, r6
 800d51a:	4640      	mov	r0, r8
 800d51c:	f7ff fc42 	bl	800cda4 <_free_r>
 800d520:	e7e1      	b.n	800d4e6 <_realloc_r+0x1e>
 800d522:	4635      	mov	r5, r6
 800d524:	e7df      	b.n	800d4e6 <_realloc_r+0x1e>

0800d526 <__ascii_wctomb>:
 800d526:	b149      	cbz	r1, 800d53c <__ascii_wctomb+0x16>
 800d528:	2aff      	cmp	r2, #255	; 0xff
 800d52a:	bf85      	ittet	hi
 800d52c:	238a      	movhi	r3, #138	; 0x8a
 800d52e:	6003      	strhi	r3, [r0, #0]
 800d530:	700a      	strbls	r2, [r1, #0]
 800d532:	f04f 30ff 	movhi.w	r0, #4294967295
 800d536:	bf98      	it	ls
 800d538:	2001      	movls	r0, #1
 800d53a:	4770      	bx	lr
 800d53c:	4608      	mov	r0, r1
 800d53e:	4770      	bx	lr

0800d540 <abort>:
 800d540:	b508      	push	{r3, lr}
 800d542:	2006      	movs	r0, #6
 800d544:	f000 f834 	bl	800d5b0 <raise>
 800d548:	2001      	movs	r0, #1
 800d54a:	f7f6 fa2d 	bl	80039a8 <_exit>

0800d54e <_malloc_usable_size_r>:
 800d54e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d552:	1f18      	subs	r0, r3, #4
 800d554:	2b00      	cmp	r3, #0
 800d556:	bfbc      	itt	lt
 800d558:	580b      	ldrlt	r3, [r1, r0]
 800d55a:	18c0      	addlt	r0, r0, r3
 800d55c:	4770      	bx	lr

0800d55e <_raise_r>:
 800d55e:	291f      	cmp	r1, #31
 800d560:	b538      	push	{r3, r4, r5, lr}
 800d562:	4604      	mov	r4, r0
 800d564:	460d      	mov	r5, r1
 800d566:	d904      	bls.n	800d572 <_raise_r+0x14>
 800d568:	2316      	movs	r3, #22
 800d56a:	6003      	str	r3, [r0, #0]
 800d56c:	f04f 30ff 	mov.w	r0, #4294967295
 800d570:	bd38      	pop	{r3, r4, r5, pc}
 800d572:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d574:	b112      	cbz	r2, 800d57c <_raise_r+0x1e>
 800d576:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d57a:	b94b      	cbnz	r3, 800d590 <_raise_r+0x32>
 800d57c:	4620      	mov	r0, r4
 800d57e:	f000 f831 	bl	800d5e4 <_getpid_r>
 800d582:	462a      	mov	r2, r5
 800d584:	4601      	mov	r1, r0
 800d586:	4620      	mov	r0, r4
 800d588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d58c:	f000 b818 	b.w	800d5c0 <_kill_r>
 800d590:	2b01      	cmp	r3, #1
 800d592:	d00a      	beq.n	800d5aa <_raise_r+0x4c>
 800d594:	1c59      	adds	r1, r3, #1
 800d596:	d103      	bne.n	800d5a0 <_raise_r+0x42>
 800d598:	2316      	movs	r3, #22
 800d59a:	6003      	str	r3, [r0, #0]
 800d59c:	2001      	movs	r0, #1
 800d59e:	e7e7      	b.n	800d570 <_raise_r+0x12>
 800d5a0:	2400      	movs	r4, #0
 800d5a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d5a6:	4628      	mov	r0, r5
 800d5a8:	4798      	blx	r3
 800d5aa:	2000      	movs	r0, #0
 800d5ac:	e7e0      	b.n	800d570 <_raise_r+0x12>
	...

0800d5b0 <raise>:
 800d5b0:	4b02      	ldr	r3, [pc, #8]	; (800d5bc <raise+0xc>)
 800d5b2:	4601      	mov	r1, r0
 800d5b4:	6818      	ldr	r0, [r3, #0]
 800d5b6:	f7ff bfd2 	b.w	800d55e <_raise_r>
 800d5ba:	bf00      	nop
 800d5bc:	20000058 	.word	0x20000058

0800d5c0 <_kill_r>:
 800d5c0:	b538      	push	{r3, r4, r5, lr}
 800d5c2:	4d07      	ldr	r5, [pc, #28]	; (800d5e0 <_kill_r+0x20>)
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	4604      	mov	r4, r0
 800d5c8:	4608      	mov	r0, r1
 800d5ca:	4611      	mov	r1, r2
 800d5cc:	602b      	str	r3, [r5, #0]
 800d5ce:	f7f6 f9db 	bl	8003988 <_kill>
 800d5d2:	1c43      	adds	r3, r0, #1
 800d5d4:	d102      	bne.n	800d5dc <_kill_r+0x1c>
 800d5d6:	682b      	ldr	r3, [r5, #0]
 800d5d8:	b103      	cbz	r3, 800d5dc <_kill_r+0x1c>
 800d5da:	6023      	str	r3, [r4, #0]
 800d5dc:	bd38      	pop	{r3, r4, r5, pc}
 800d5de:	bf00      	nop
 800d5e0:	20004494 	.word	0x20004494

0800d5e4 <_getpid_r>:
 800d5e4:	f7f6 b9c8 	b.w	8003978 <_getpid>

0800d5e8 <cos>:
 800d5e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d5ea:	ec53 2b10 	vmov	r2, r3, d0
 800d5ee:	4826      	ldr	r0, [pc, #152]	; (800d688 <cos+0xa0>)
 800d5f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d5f4:	4281      	cmp	r1, r0
 800d5f6:	dc06      	bgt.n	800d606 <cos+0x1e>
 800d5f8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d680 <cos+0x98>
 800d5fc:	b005      	add	sp, #20
 800d5fe:	f85d eb04 	ldr.w	lr, [sp], #4
 800d602:	f000 bc59 	b.w	800deb8 <__kernel_cos>
 800d606:	4821      	ldr	r0, [pc, #132]	; (800d68c <cos+0xa4>)
 800d608:	4281      	cmp	r1, r0
 800d60a:	dd09      	ble.n	800d620 <cos+0x38>
 800d60c:	ee10 0a10 	vmov	r0, s0
 800d610:	4619      	mov	r1, r3
 800d612:	f7f2 fe49 	bl	80002a8 <__aeabi_dsub>
 800d616:	ec41 0b10 	vmov	d0, r0, r1
 800d61a:	b005      	add	sp, #20
 800d61c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d620:	4668      	mov	r0, sp
 800d622:	f000 f989 	bl	800d938 <__ieee754_rem_pio2>
 800d626:	f000 0003 	and.w	r0, r0, #3
 800d62a:	2801      	cmp	r0, #1
 800d62c:	d00b      	beq.n	800d646 <cos+0x5e>
 800d62e:	2802      	cmp	r0, #2
 800d630:	d016      	beq.n	800d660 <cos+0x78>
 800d632:	b9e0      	cbnz	r0, 800d66e <cos+0x86>
 800d634:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d638:	ed9d 0b00 	vldr	d0, [sp]
 800d63c:	f000 fc3c 	bl	800deb8 <__kernel_cos>
 800d640:	ec51 0b10 	vmov	r0, r1, d0
 800d644:	e7e7      	b.n	800d616 <cos+0x2e>
 800d646:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d64a:	ed9d 0b00 	vldr	d0, [sp]
 800d64e:	f001 f84b 	bl	800e6e8 <__kernel_sin>
 800d652:	ec53 2b10 	vmov	r2, r3, d0
 800d656:	ee10 0a10 	vmov	r0, s0
 800d65a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d65e:	e7da      	b.n	800d616 <cos+0x2e>
 800d660:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d664:	ed9d 0b00 	vldr	d0, [sp]
 800d668:	f000 fc26 	bl	800deb8 <__kernel_cos>
 800d66c:	e7f1      	b.n	800d652 <cos+0x6a>
 800d66e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d672:	ed9d 0b00 	vldr	d0, [sp]
 800d676:	2001      	movs	r0, #1
 800d678:	f001 f836 	bl	800e6e8 <__kernel_sin>
 800d67c:	e7e0      	b.n	800d640 <cos+0x58>
 800d67e:	bf00      	nop
	...
 800d688:	3fe921fb 	.word	0x3fe921fb
 800d68c:	7fefffff 	.word	0x7fefffff

0800d690 <sin>:
 800d690:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d692:	ec53 2b10 	vmov	r2, r3, d0
 800d696:	4828      	ldr	r0, [pc, #160]	; (800d738 <sin+0xa8>)
 800d698:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d69c:	4281      	cmp	r1, r0
 800d69e:	dc07      	bgt.n	800d6b0 <sin+0x20>
 800d6a0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800d730 <sin+0xa0>
 800d6a4:	2000      	movs	r0, #0
 800d6a6:	b005      	add	sp, #20
 800d6a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d6ac:	f001 b81c 	b.w	800e6e8 <__kernel_sin>
 800d6b0:	4822      	ldr	r0, [pc, #136]	; (800d73c <sin+0xac>)
 800d6b2:	4281      	cmp	r1, r0
 800d6b4:	dd09      	ble.n	800d6ca <sin+0x3a>
 800d6b6:	ee10 0a10 	vmov	r0, s0
 800d6ba:	4619      	mov	r1, r3
 800d6bc:	f7f2 fdf4 	bl	80002a8 <__aeabi_dsub>
 800d6c0:	ec41 0b10 	vmov	d0, r0, r1
 800d6c4:	b005      	add	sp, #20
 800d6c6:	f85d fb04 	ldr.w	pc, [sp], #4
 800d6ca:	4668      	mov	r0, sp
 800d6cc:	f000 f934 	bl	800d938 <__ieee754_rem_pio2>
 800d6d0:	f000 0003 	and.w	r0, r0, #3
 800d6d4:	2801      	cmp	r0, #1
 800d6d6:	d00c      	beq.n	800d6f2 <sin+0x62>
 800d6d8:	2802      	cmp	r0, #2
 800d6da:	d011      	beq.n	800d700 <sin+0x70>
 800d6dc:	b9f0      	cbnz	r0, 800d71c <sin+0x8c>
 800d6de:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6e2:	ed9d 0b00 	vldr	d0, [sp]
 800d6e6:	2001      	movs	r0, #1
 800d6e8:	f000 fffe 	bl	800e6e8 <__kernel_sin>
 800d6ec:	ec51 0b10 	vmov	r0, r1, d0
 800d6f0:	e7e6      	b.n	800d6c0 <sin+0x30>
 800d6f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6f6:	ed9d 0b00 	vldr	d0, [sp]
 800d6fa:	f000 fbdd 	bl	800deb8 <__kernel_cos>
 800d6fe:	e7f5      	b.n	800d6ec <sin+0x5c>
 800d700:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d704:	ed9d 0b00 	vldr	d0, [sp]
 800d708:	2001      	movs	r0, #1
 800d70a:	f000 ffed 	bl	800e6e8 <__kernel_sin>
 800d70e:	ec53 2b10 	vmov	r2, r3, d0
 800d712:	ee10 0a10 	vmov	r0, s0
 800d716:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d71a:	e7d1      	b.n	800d6c0 <sin+0x30>
 800d71c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d720:	ed9d 0b00 	vldr	d0, [sp]
 800d724:	f000 fbc8 	bl	800deb8 <__kernel_cos>
 800d728:	e7f1      	b.n	800d70e <sin+0x7e>
 800d72a:	bf00      	nop
 800d72c:	f3af 8000 	nop.w
	...
 800d738:	3fe921fb 	.word	0x3fe921fb
 800d73c:	7fefffff 	.word	0x7fefffff

0800d740 <atan2>:
 800d740:	f000 b82e 	b.w	800d7a0 <__ieee754_atan2>

0800d744 <sqrt>:
 800d744:	b538      	push	{r3, r4, r5, lr}
 800d746:	ed2d 8b02 	vpush	{d8}
 800d74a:	ec55 4b10 	vmov	r4, r5, d0
 800d74e:	f000 faff 	bl	800dd50 <__ieee754_sqrt>
 800d752:	4622      	mov	r2, r4
 800d754:	462b      	mov	r3, r5
 800d756:	4620      	mov	r0, r4
 800d758:	4629      	mov	r1, r5
 800d75a:	eeb0 8a40 	vmov.f32	s16, s0
 800d75e:	eef0 8a60 	vmov.f32	s17, s1
 800d762:	f7f3 f9f3 	bl	8000b4c <__aeabi_dcmpun>
 800d766:	b990      	cbnz	r0, 800d78e <sqrt+0x4a>
 800d768:	2200      	movs	r2, #0
 800d76a:	2300      	movs	r3, #0
 800d76c:	4620      	mov	r0, r4
 800d76e:	4629      	mov	r1, r5
 800d770:	f7f3 f9c4 	bl	8000afc <__aeabi_dcmplt>
 800d774:	b158      	cbz	r0, 800d78e <sqrt+0x4a>
 800d776:	f7fc ff29 	bl	800a5cc <__errno>
 800d77a:	2321      	movs	r3, #33	; 0x21
 800d77c:	6003      	str	r3, [r0, #0]
 800d77e:	2200      	movs	r2, #0
 800d780:	2300      	movs	r3, #0
 800d782:	4610      	mov	r0, r2
 800d784:	4619      	mov	r1, r3
 800d786:	f7f3 f871 	bl	800086c <__aeabi_ddiv>
 800d78a:	ec41 0b18 	vmov	d8, r0, r1
 800d78e:	eeb0 0a48 	vmov.f32	s0, s16
 800d792:	eef0 0a68 	vmov.f32	s1, s17
 800d796:	ecbd 8b02 	vpop	{d8}
 800d79a:	bd38      	pop	{r3, r4, r5, pc}
 800d79c:	0000      	movs	r0, r0
	...

0800d7a0 <__ieee754_atan2>:
 800d7a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7a4:	ec57 6b11 	vmov	r6, r7, d1
 800d7a8:	4273      	negs	r3, r6
 800d7aa:	f8df e184 	ldr.w	lr, [pc, #388]	; 800d930 <__ieee754_atan2+0x190>
 800d7ae:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800d7b2:	4333      	orrs	r3, r6
 800d7b4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d7b8:	4573      	cmp	r3, lr
 800d7ba:	ec51 0b10 	vmov	r0, r1, d0
 800d7be:	ee11 8a10 	vmov	r8, s2
 800d7c2:	d80a      	bhi.n	800d7da <__ieee754_atan2+0x3a>
 800d7c4:	4244      	negs	r4, r0
 800d7c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d7ca:	4304      	orrs	r4, r0
 800d7cc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800d7d0:	4574      	cmp	r4, lr
 800d7d2:	ee10 9a10 	vmov	r9, s0
 800d7d6:	468c      	mov	ip, r1
 800d7d8:	d907      	bls.n	800d7ea <__ieee754_atan2+0x4a>
 800d7da:	4632      	mov	r2, r6
 800d7dc:	463b      	mov	r3, r7
 800d7de:	f7f2 fd65 	bl	80002ac <__adddf3>
 800d7e2:	ec41 0b10 	vmov	d0, r0, r1
 800d7e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7ea:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800d7ee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d7f2:	4334      	orrs	r4, r6
 800d7f4:	d103      	bne.n	800d7fe <__ieee754_atan2+0x5e>
 800d7f6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7fa:	f001 b835 	b.w	800e868 <atan>
 800d7fe:	17bc      	asrs	r4, r7, #30
 800d800:	f004 0402 	and.w	r4, r4, #2
 800d804:	ea53 0909 	orrs.w	r9, r3, r9
 800d808:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800d80c:	d107      	bne.n	800d81e <__ieee754_atan2+0x7e>
 800d80e:	2c02      	cmp	r4, #2
 800d810:	d060      	beq.n	800d8d4 <__ieee754_atan2+0x134>
 800d812:	2c03      	cmp	r4, #3
 800d814:	d1e5      	bne.n	800d7e2 <__ieee754_atan2+0x42>
 800d816:	a142      	add	r1, pc, #264	; (adr r1, 800d920 <__ieee754_atan2+0x180>)
 800d818:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d81c:	e7e1      	b.n	800d7e2 <__ieee754_atan2+0x42>
 800d81e:	ea52 0808 	orrs.w	r8, r2, r8
 800d822:	d106      	bne.n	800d832 <__ieee754_atan2+0x92>
 800d824:	f1bc 0f00 	cmp.w	ip, #0
 800d828:	da5f      	bge.n	800d8ea <__ieee754_atan2+0x14a>
 800d82a:	a13f      	add	r1, pc, #252	; (adr r1, 800d928 <__ieee754_atan2+0x188>)
 800d82c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d830:	e7d7      	b.n	800d7e2 <__ieee754_atan2+0x42>
 800d832:	4572      	cmp	r2, lr
 800d834:	d10f      	bne.n	800d856 <__ieee754_atan2+0xb6>
 800d836:	4293      	cmp	r3, r2
 800d838:	f104 34ff 	add.w	r4, r4, #4294967295
 800d83c:	d107      	bne.n	800d84e <__ieee754_atan2+0xae>
 800d83e:	2c02      	cmp	r4, #2
 800d840:	d84c      	bhi.n	800d8dc <__ieee754_atan2+0x13c>
 800d842:	4b35      	ldr	r3, [pc, #212]	; (800d918 <__ieee754_atan2+0x178>)
 800d844:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800d848:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d84c:	e7c9      	b.n	800d7e2 <__ieee754_atan2+0x42>
 800d84e:	2c02      	cmp	r4, #2
 800d850:	d848      	bhi.n	800d8e4 <__ieee754_atan2+0x144>
 800d852:	4b32      	ldr	r3, [pc, #200]	; (800d91c <__ieee754_atan2+0x17c>)
 800d854:	e7f6      	b.n	800d844 <__ieee754_atan2+0xa4>
 800d856:	4573      	cmp	r3, lr
 800d858:	d0e4      	beq.n	800d824 <__ieee754_atan2+0x84>
 800d85a:	1a9b      	subs	r3, r3, r2
 800d85c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800d860:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d864:	da1e      	bge.n	800d8a4 <__ieee754_atan2+0x104>
 800d866:	2f00      	cmp	r7, #0
 800d868:	da01      	bge.n	800d86e <__ieee754_atan2+0xce>
 800d86a:	323c      	adds	r2, #60	; 0x3c
 800d86c:	db1e      	blt.n	800d8ac <__ieee754_atan2+0x10c>
 800d86e:	4632      	mov	r2, r6
 800d870:	463b      	mov	r3, r7
 800d872:	f7f2 fffb 	bl	800086c <__aeabi_ddiv>
 800d876:	ec41 0b10 	vmov	d0, r0, r1
 800d87a:	f001 f995 	bl	800eba8 <fabs>
 800d87e:	f000 fff3 	bl	800e868 <atan>
 800d882:	ec51 0b10 	vmov	r0, r1, d0
 800d886:	2c01      	cmp	r4, #1
 800d888:	d013      	beq.n	800d8b2 <__ieee754_atan2+0x112>
 800d88a:	2c02      	cmp	r4, #2
 800d88c:	d015      	beq.n	800d8ba <__ieee754_atan2+0x11a>
 800d88e:	2c00      	cmp	r4, #0
 800d890:	d0a7      	beq.n	800d7e2 <__ieee754_atan2+0x42>
 800d892:	a319      	add	r3, pc, #100	; (adr r3, 800d8f8 <__ieee754_atan2+0x158>)
 800d894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d898:	f7f2 fd06 	bl	80002a8 <__aeabi_dsub>
 800d89c:	a318      	add	r3, pc, #96	; (adr r3, 800d900 <__ieee754_atan2+0x160>)
 800d89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a2:	e014      	b.n	800d8ce <__ieee754_atan2+0x12e>
 800d8a4:	a118      	add	r1, pc, #96	; (adr r1, 800d908 <__ieee754_atan2+0x168>)
 800d8a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8aa:	e7ec      	b.n	800d886 <__ieee754_atan2+0xe6>
 800d8ac:	2000      	movs	r0, #0
 800d8ae:	2100      	movs	r1, #0
 800d8b0:	e7e9      	b.n	800d886 <__ieee754_atan2+0xe6>
 800d8b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	e793      	b.n	800d7e2 <__ieee754_atan2+0x42>
 800d8ba:	a30f      	add	r3, pc, #60	; (adr r3, 800d8f8 <__ieee754_atan2+0x158>)
 800d8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c0:	f7f2 fcf2 	bl	80002a8 <__aeabi_dsub>
 800d8c4:	4602      	mov	r2, r0
 800d8c6:	460b      	mov	r3, r1
 800d8c8:	a10d      	add	r1, pc, #52	; (adr r1, 800d900 <__ieee754_atan2+0x160>)
 800d8ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8ce:	f7f2 fceb 	bl	80002a8 <__aeabi_dsub>
 800d8d2:	e786      	b.n	800d7e2 <__ieee754_atan2+0x42>
 800d8d4:	a10a      	add	r1, pc, #40	; (adr r1, 800d900 <__ieee754_atan2+0x160>)
 800d8d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8da:	e782      	b.n	800d7e2 <__ieee754_atan2+0x42>
 800d8dc:	a10c      	add	r1, pc, #48	; (adr r1, 800d910 <__ieee754_atan2+0x170>)
 800d8de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8e2:	e77e      	b.n	800d7e2 <__ieee754_atan2+0x42>
 800d8e4:	2000      	movs	r0, #0
 800d8e6:	2100      	movs	r1, #0
 800d8e8:	e77b      	b.n	800d7e2 <__ieee754_atan2+0x42>
 800d8ea:	a107      	add	r1, pc, #28	; (adr r1, 800d908 <__ieee754_atan2+0x168>)
 800d8ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8f0:	e777      	b.n	800d7e2 <__ieee754_atan2+0x42>
 800d8f2:	bf00      	nop
 800d8f4:	f3af 8000 	nop.w
 800d8f8:	33145c07 	.word	0x33145c07
 800d8fc:	3ca1a626 	.word	0x3ca1a626
 800d900:	54442d18 	.word	0x54442d18
 800d904:	400921fb 	.word	0x400921fb
 800d908:	54442d18 	.word	0x54442d18
 800d90c:	3ff921fb 	.word	0x3ff921fb
 800d910:	54442d18 	.word	0x54442d18
 800d914:	3fe921fb 	.word	0x3fe921fb
 800d918:	0800f370 	.word	0x0800f370
 800d91c:	0800f388 	.word	0x0800f388
 800d920:	54442d18 	.word	0x54442d18
 800d924:	c00921fb 	.word	0xc00921fb
 800d928:	54442d18 	.word	0x54442d18
 800d92c:	bff921fb 	.word	0xbff921fb
 800d930:	7ff00000 	.word	0x7ff00000
 800d934:	00000000 	.word	0x00000000

0800d938 <__ieee754_rem_pio2>:
 800d938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d93c:	ed2d 8b02 	vpush	{d8}
 800d940:	ec55 4b10 	vmov	r4, r5, d0
 800d944:	4bca      	ldr	r3, [pc, #808]	; (800dc70 <__ieee754_rem_pio2+0x338>)
 800d946:	b08b      	sub	sp, #44	; 0x2c
 800d948:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800d94c:	4598      	cmp	r8, r3
 800d94e:	4682      	mov	sl, r0
 800d950:	9502      	str	r5, [sp, #8]
 800d952:	dc08      	bgt.n	800d966 <__ieee754_rem_pio2+0x2e>
 800d954:	2200      	movs	r2, #0
 800d956:	2300      	movs	r3, #0
 800d958:	ed80 0b00 	vstr	d0, [r0]
 800d95c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d960:	f04f 0b00 	mov.w	fp, #0
 800d964:	e028      	b.n	800d9b8 <__ieee754_rem_pio2+0x80>
 800d966:	4bc3      	ldr	r3, [pc, #780]	; (800dc74 <__ieee754_rem_pio2+0x33c>)
 800d968:	4598      	cmp	r8, r3
 800d96a:	dc78      	bgt.n	800da5e <__ieee754_rem_pio2+0x126>
 800d96c:	9b02      	ldr	r3, [sp, #8]
 800d96e:	4ec2      	ldr	r6, [pc, #776]	; (800dc78 <__ieee754_rem_pio2+0x340>)
 800d970:	2b00      	cmp	r3, #0
 800d972:	ee10 0a10 	vmov	r0, s0
 800d976:	a3b0      	add	r3, pc, #704	; (adr r3, 800dc38 <__ieee754_rem_pio2+0x300>)
 800d978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d97c:	4629      	mov	r1, r5
 800d97e:	dd39      	ble.n	800d9f4 <__ieee754_rem_pio2+0xbc>
 800d980:	f7f2 fc92 	bl	80002a8 <__aeabi_dsub>
 800d984:	45b0      	cmp	r8, r6
 800d986:	4604      	mov	r4, r0
 800d988:	460d      	mov	r5, r1
 800d98a:	d01b      	beq.n	800d9c4 <__ieee754_rem_pio2+0x8c>
 800d98c:	a3ac      	add	r3, pc, #688	; (adr r3, 800dc40 <__ieee754_rem_pio2+0x308>)
 800d98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d992:	f7f2 fc89 	bl	80002a8 <__aeabi_dsub>
 800d996:	4602      	mov	r2, r0
 800d998:	460b      	mov	r3, r1
 800d99a:	e9ca 2300 	strd	r2, r3, [sl]
 800d99e:	4620      	mov	r0, r4
 800d9a0:	4629      	mov	r1, r5
 800d9a2:	f7f2 fc81 	bl	80002a8 <__aeabi_dsub>
 800d9a6:	a3a6      	add	r3, pc, #664	; (adr r3, 800dc40 <__ieee754_rem_pio2+0x308>)
 800d9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ac:	f7f2 fc7c 	bl	80002a8 <__aeabi_dsub>
 800d9b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d9b4:	f04f 0b01 	mov.w	fp, #1
 800d9b8:	4658      	mov	r0, fp
 800d9ba:	b00b      	add	sp, #44	; 0x2c
 800d9bc:	ecbd 8b02 	vpop	{d8}
 800d9c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9c4:	a3a0      	add	r3, pc, #640	; (adr r3, 800dc48 <__ieee754_rem_pio2+0x310>)
 800d9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ca:	f7f2 fc6d 	bl	80002a8 <__aeabi_dsub>
 800d9ce:	a3a0      	add	r3, pc, #640	; (adr r3, 800dc50 <__ieee754_rem_pio2+0x318>)
 800d9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9d4:	4604      	mov	r4, r0
 800d9d6:	460d      	mov	r5, r1
 800d9d8:	f7f2 fc66 	bl	80002a8 <__aeabi_dsub>
 800d9dc:	4602      	mov	r2, r0
 800d9de:	460b      	mov	r3, r1
 800d9e0:	e9ca 2300 	strd	r2, r3, [sl]
 800d9e4:	4620      	mov	r0, r4
 800d9e6:	4629      	mov	r1, r5
 800d9e8:	f7f2 fc5e 	bl	80002a8 <__aeabi_dsub>
 800d9ec:	a398      	add	r3, pc, #608	; (adr r3, 800dc50 <__ieee754_rem_pio2+0x318>)
 800d9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f2:	e7db      	b.n	800d9ac <__ieee754_rem_pio2+0x74>
 800d9f4:	f7f2 fc5a 	bl	80002ac <__adddf3>
 800d9f8:	45b0      	cmp	r8, r6
 800d9fa:	4604      	mov	r4, r0
 800d9fc:	460d      	mov	r5, r1
 800d9fe:	d016      	beq.n	800da2e <__ieee754_rem_pio2+0xf6>
 800da00:	a38f      	add	r3, pc, #572	; (adr r3, 800dc40 <__ieee754_rem_pio2+0x308>)
 800da02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da06:	f7f2 fc51 	bl	80002ac <__adddf3>
 800da0a:	4602      	mov	r2, r0
 800da0c:	460b      	mov	r3, r1
 800da0e:	e9ca 2300 	strd	r2, r3, [sl]
 800da12:	4620      	mov	r0, r4
 800da14:	4629      	mov	r1, r5
 800da16:	f7f2 fc47 	bl	80002a8 <__aeabi_dsub>
 800da1a:	a389      	add	r3, pc, #548	; (adr r3, 800dc40 <__ieee754_rem_pio2+0x308>)
 800da1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da20:	f7f2 fc44 	bl	80002ac <__adddf3>
 800da24:	f04f 3bff 	mov.w	fp, #4294967295
 800da28:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800da2c:	e7c4      	b.n	800d9b8 <__ieee754_rem_pio2+0x80>
 800da2e:	a386      	add	r3, pc, #536	; (adr r3, 800dc48 <__ieee754_rem_pio2+0x310>)
 800da30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da34:	f7f2 fc3a 	bl	80002ac <__adddf3>
 800da38:	a385      	add	r3, pc, #532	; (adr r3, 800dc50 <__ieee754_rem_pio2+0x318>)
 800da3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da3e:	4604      	mov	r4, r0
 800da40:	460d      	mov	r5, r1
 800da42:	f7f2 fc33 	bl	80002ac <__adddf3>
 800da46:	4602      	mov	r2, r0
 800da48:	460b      	mov	r3, r1
 800da4a:	e9ca 2300 	strd	r2, r3, [sl]
 800da4e:	4620      	mov	r0, r4
 800da50:	4629      	mov	r1, r5
 800da52:	f7f2 fc29 	bl	80002a8 <__aeabi_dsub>
 800da56:	a37e      	add	r3, pc, #504	; (adr r3, 800dc50 <__ieee754_rem_pio2+0x318>)
 800da58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da5c:	e7e0      	b.n	800da20 <__ieee754_rem_pio2+0xe8>
 800da5e:	4b87      	ldr	r3, [pc, #540]	; (800dc7c <__ieee754_rem_pio2+0x344>)
 800da60:	4598      	cmp	r8, r3
 800da62:	f300 80d9 	bgt.w	800dc18 <__ieee754_rem_pio2+0x2e0>
 800da66:	f001 f89f 	bl	800eba8 <fabs>
 800da6a:	ec55 4b10 	vmov	r4, r5, d0
 800da6e:	ee10 0a10 	vmov	r0, s0
 800da72:	a379      	add	r3, pc, #484	; (adr r3, 800dc58 <__ieee754_rem_pio2+0x320>)
 800da74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da78:	4629      	mov	r1, r5
 800da7a:	f7f2 fdcd 	bl	8000618 <__aeabi_dmul>
 800da7e:	4b80      	ldr	r3, [pc, #512]	; (800dc80 <__ieee754_rem_pio2+0x348>)
 800da80:	2200      	movs	r2, #0
 800da82:	f7f2 fc13 	bl	80002ac <__adddf3>
 800da86:	f7f3 f877 	bl	8000b78 <__aeabi_d2iz>
 800da8a:	4683      	mov	fp, r0
 800da8c:	f7f2 fd5a 	bl	8000544 <__aeabi_i2d>
 800da90:	4602      	mov	r2, r0
 800da92:	460b      	mov	r3, r1
 800da94:	ec43 2b18 	vmov	d8, r2, r3
 800da98:	a367      	add	r3, pc, #412	; (adr r3, 800dc38 <__ieee754_rem_pio2+0x300>)
 800da9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da9e:	f7f2 fdbb 	bl	8000618 <__aeabi_dmul>
 800daa2:	4602      	mov	r2, r0
 800daa4:	460b      	mov	r3, r1
 800daa6:	4620      	mov	r0, r4
 800daa8:	4629      	mov	r1, r5
 800daaa:	f7f2 fbfd 	bl	80002a8 <__aeabi_dsub>
 800daae:	a364      	add	r3, pc, #400	; (adr r3, 800dc40 <__ieee754_rem_pio2+0x308>)
 800dab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dab4:	4606      	mov	r6, r0
 800dab6:	460f      	mov	r7, r1
 800dab8:	ec51 0b18 	vmov	r0, r1, d8
 800dabc:	f7f2 fdac 	bl	8000618 <__aeabi_dmul>
 800dac0:	f1bb 0f1f 	cmp.w	fp, #31
 800dac4:	4604      	mov	r4, r0
 800dac6:	460d      	mov	r5, r1
 800dac8:	dc0d      	bgt.n	800dae6 <__ieee754_rem_pio2+0x1ae>
 800daca:	4b6e      	ldr	r3, [pc, #440]	; (800dc84 <__ieee754_rem_pio2+0x34c>)
 800dacc:	f10b 32ff 	add.w	r2, fp, #4294967295
 800dad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dad4:	4543      	cmp	r3, r8
 800dad6:	d006      	beq.n	800dae6 <__ieee754_rem_pio2+0x1ae>
 800dad8:	4622      	mov	r2, r4
 800dada:	462b      	mov	r3, r5
 800dadc:	4630      	mov	r0, r6
 800dade:	4639      	mov	r1, r7
 800dae0:	f7f2 fbe2 	bl	80002a8 <__aeabi_dsub>
 800dae4:	e00f      	b.n	800db06 <__ieee754_rem_pio2+0x1ce>
 800dae6:	462b      	mov	r3, r5
 800dae8:	4622      	mov	r2, r4
 800daea:	4630      	mov	r0, r6
 800daec:	4639      	mov	r1, r7
 800daee:	f7f2 fbdb 	bl	80002a8 <__aeabi_dsub>
 800daf2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800daf6:	9303      	str	r3, [sp, #12]
 800daf8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dafc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800db00:	f1b8 0f10 	cmp.w	r8, #16
 800db04:	dc02      	bgt.n	800db0c <__ieee754_rem_pio2+0x1d4>
 800db06:	e9ca 0100 	strd	r0, r1, [sl]
 800db0a:	e039      	b.n	800db80 <__ieee754_rem_pio2+0x248>
 800db0c:	a34e      	add	r3, pc, #312	; (adr r3, 800dc48 <__ieee754_rem_pio2+0x310>)
 800db0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db12:	ec51 0b18 	vmov	r0, r1, d8
 800db16:	f7f2 fd7f 	bl	8000618 <__aeabi_dmul>
 800db1a:	4604      	mov	r4, r0
 800db1c:	460d      	mov	r5, r1
 800db1e:	4602      	mov	r2, r0
 800db20:	460b      	mov	r3, r1
 800db22:	4630      	mov	r0, r6
 800db24:	4639      	mov	r1, r7
 800db26:	f7f2 fbbf 	bl	80002a8 <__aeabi_dsub>
 800db2a:	4602      	mov	r2, r0
 800db2c:	460b      	mov	r3, r1
 800db2e:	4680      	mov	r8, r0
 800db30:	4689      	mov	r9, r1
 800db32:	4630      	mov	r0, r6
 800db34:	4639      	mov	r1, r7
 800db36:	f7f2 fbb7 	bl	80002a8 <__aeabi_dsub>
 800db3a:	4622      	mov	r2, r4
 800db3c:	462b      	mov	r3, r5
 800db3e:	f7f2 fbb3 	bl	80002a8 <__aeabi_dsub>
 800db42:	a343      	add	r3, pc, #268	; (adr r3, 800dc50 <__ieee754_rem_pio2+0x318>)
 800db44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db48:	4604      	mov	r4, r0
 800db4a:	460d      	mov	r5, r1
 800db4c:	ec51 0b18 	vmov	r0, r1, d8
 800db50:	f7f2 fd62 	bl	8000618 <__aeabi_dmul>
 800db54:	4622      	mov	r2, r4
 800db56:	462b      	mov	r3, r5
 800db58:	f7f2 fba6 	bl	80002a8 <__aeabi_dsub>
 800db5c:	4602      	mov	r2, r0
 800db5e:	460b      	mov	r3, r1
 800db60:	4604      	mov	r4, r0
 800db62:	460d      	mov	r5, r1
 800db64:	4640      	mov	r0, r8
 800db66:	4649      	mov	r1, r9
 800db68:	f7f2 fb9e 	bl	80002a8 <__aeabi_dsub>
 800db6c:	9a03      	ldr	r2, [sp, #12]
 800db6e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800db72:	1ad3      	subs	r3, r2, r3
 800db74:	2b31      	cmp	r3, #49	; 0x31
 800db76:	dc24      	bgt.n	800dbc2 <__ieee754_rem_pio2+0x28a>
 800db78:	e9ca 0100 	strd	r0, r1, [sl]
 800db7c:	4646      	mov	r6, r8
 800db7e:	464f      	mov	r7, r9
 800db80:	e9da 8900 	ldrd	r8, r9, [sl]
 800db84:	4630      	mov	r0, r6
 800db86:	4642      	mov	r2, r8
 800db88:	464b      	mov	r3, r9
 800db8a:	4639      	mov	r1, r7
 800db8c:	f7f2 fb8c 	bl	80002a8 <__aeabi_dsub>
 800db90:	462b      	mov	r3, r5
 800db92:	4622      	mov	r2, r4
 800db94:	f7f2 fb88 	bl	80002a8 <__aeabi_dsub>
 800db98:	9b02      	ldr	r3, [sp, #8]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dba0:	f6bf af0a 	bge.w	800d9b8 <__ieee754_rem_pio2+0x80>
 800dba4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dba8:	f8ca 3004 	str.w	r3, [sl, #4]
 800dbac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dbb0:	f8ca 8000 	str.w	r8, [sl]
 800dbb4:	f8ca 0008 	str.w	r0, [sl, #8]
 800dbb8:	f8ca 300c 	str.w	r3, [sl, #12]
 800dbbc:	f1cb 0b00 	rsb	fp, fp, #0
 800dbc0:	e6fa      	b.n	800d9b8 <__ieee754_rem_pio2+0x80>
 800dbc2:	a327      	add	r3, pc, #156	; (adr r3, 800dc60 <__ieee754_rem_pio2+0x328>)
 800dbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc8:	ec51 0b18 	vmov	r0, r1, d8
 800dbcc:	f7f2 fd24 	bl	8000618 <__aeabi_dmul>
 800dbd0:	4604      	mov	r4, r0
 800dbd2:	460d      	mov	r5, r1
 800dbd4:	4602      	mov	r2, r0
 800dbd6:	460b      	mov	r3, r1
 800dbd8:	4640      	mov	r0, r8
 800dbda:	4649      	mov	r1, r9
 800dbdc:	f7f2 fb64 	bl	80002a8 <__aeabi_dsub>
 800dbe0:	4602      	mov	r2, r0
 800dbe2:	460b      	mov	r3, r1
 800dbe4:	4606      	mov	r6, r0
 800dbe6:	460f      	mov	r7, r1
 800dbe8:	4640      	mov	r0, r8
 800dbea:	4649      	mov	r1, r9
 800dbec:	f7f2 fb5c 	bl	80002a8 <__aeabi_dsub>
 800dbf0:	4622      	mov	r2, r4
 800dbf2:	462b      	mov	r3, r5
 800dbf4:	f7f2 fb58 	bl	80002a8 <__aeabi_dsub>
 800dbf8:	a31b      	add	r3, pc, #108	; (adr r3, 800dc68 <__ieee754_rem_pio2+0x330>)
 800dbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbfe:	4604      	mov	r4, r0
 800dc00:	460d      	mov	r5, r1
 800dc02:	ec51 0b18 	vmov	r0, r1, d8
 800dc06:	f7f2 fd07 	bl	8000618 <__aeabi_dmul>
 800dc0a:	4622      	mov	r2, r4
 800dc0c:	462b      	mov	r3, r5
 800dc0e:	f7f2 fb4b 	bl	80002a8 <__aeabi_dsub>
 800dc12:	4604      	mov	r4, r0
 800dc14:	460d      	mov	r5, r1
 800dc16:	e75f      	b.n	800dad8 <__ieee754_rem_pio2+0x1a0>
 800dc18:	4b1b      	ldr	r3, [pc, #108]	; (800dc88 <__ieee754_rem_pio2+0x350>)
 800dc1a:	4598      	cmp	r8, r3
 800dc1c:	dd36      	ble.n	800dc8c <__ieee754_rem_pio2+0x354>
 800dc1e:	ee10 2a10 	vmov	r2, s0
 800dc22:	462b      	mov	r3, r5
 800dc24:	4620      	mov	r0, r4
 800dc26:	4629      	mov	r1, r5
 800dc28:	f7f2 fb3e 	bl	80002a8 <__aeabi_dsub>
 800dc2c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dc30:	e9ca 0100 	strd	r0, r1, [sl]
 800dc34:	e694      	b.n	800d960 <__ieee754_rem_pio2+0x28>
 800dc36:	bf00      	nop
 800dc38:	54400000 	.word	0x54400000
 800dc3c:	3ff921fb 	.word	0x3ff921fb
 800dc40:	1a626331 	.word	0x1a626331
 800dc44:	3dd0b461 	.word	0x3dd0b461
 800dc48:	1a600000 	.word	0x1a600000
 800dc4c:	3dd0b461 	.word	0x3dd0b461
 800dc50:	2e037073 	.word	0x2e037073
 800dc54:	3ba3198a 	.word	0x3ba3198a
 800dc58:	6dc9c883 	.word	0x6dc9c883
 800dc5c:	3fe45f30 	.word	0x3fe45f30
 800dc60:	2e000000 	.word	0x2e000000
 800dc64:	3ba3198a 	.word	0x3ba3198a
 800dc68:	252049c1 	.word	0x252049c1
 800dc6c:	397b839a 	.word	0x397b839a
 800dc70:	3fe921fb 	.word	0x3fe921fb
 800dc74:	4002d97b 	.word	0x4002d97b
 800dc78:	3ff921fb 	.word	0x3ff921fb
 800dc7c:	413921fb 	.word	0x413921fb
 800dc80:	3fe00000 	.word	0x3fe00000
 800dc84:	0800f3a0 	.word	0x0800f3a0
 800dc88:	7fefffff 	.word	0x7fefffff
 800dc8c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800dc90:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800dc94:	ee10 0a10 	vmov	r0, s0
 800dc98:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800dc9c:	ee10 6a10 	vmov	r6, s0
 800dca0:	460f      	mov	r7, r1
 800dca2:	f7f2 ff69 	bl	8000b78 <__aeabi_d2iz>
 800dca6:	f7f2 fc4d 	bl	8000544 <__aeabi_i2d>
 800dcaa:	4602      	mov	r2, r0
 800dcac:	460b      	mov	r3, r1
 800dcae:	4630      	mov	r0, r6
 800dcb0:	4639      	mov	r1, r7
 800dcb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dcb6:	f7f2 faf7 	bl	80002a8 <__aeabi_dsub>
 800dcba:	4b23      	ldr	r3, [pc, #140]	; (800dd48 <__ieee754_rem_pio2+0x410>)
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	f7f2 fcab 	bl	8000618 <__aeabi_dmul>
 800dcc2:	460f      	mov	r7, r1
 800dcc4:	4606      	mov	r6, r0
 800dcc6:	f7f2 ff57 	bl	8000b78 <__aeabi_d2iz>
 800dcca:	f7f2 fc3b 	bl	8000544 <__aeabi_i2d>
 800dcce:	4602      	mov	r2, r0
 800dcd0:	460b      	mov	r3, r1
 800dcd2:	4630      	mov	r0, r6
 800dcd4:	4639      	mov	r1, r7
 800dcd6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800dcda:	f7f2 fae5 	bl	80002a8 <__aeabi_dsub>
 800dcde:	4b1a      	ldr	r3, [pc, #104]	; (800dd48 <__ieee754_rem_pio2+0x410>)
 800dce0:	2200      	movs	r2, #0
 800dce2:	f7f2 fc99 	bl	8000618 <__aeabi_dmul>
 800dce6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dcea:	ad04      	add	r5, sp, #16
 800dcec:	f04f 0803 	mov.w	r8, #3
 800dcf0:	46a9      	mov	r9, r5
 800dcf2:	2600      	movs	r6, #0
 800dcf4:	2700      	movs	r7, #0
 800dcf6:	4632      	mov	r2, r6
 800dcf8:	463b      	mov	r3, r7
 800dcfa:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800dcfe:	46c3      	mov	fp, r8
 800dd00:	3d08      	subs	r5, #8
 800dd02:	f108 38ff 	add.w	r8, r8, #4294967295
 800dd06:	f7f2 feef 	bl	8000ae8 <__aeabi_dcmpeq>
 800dd0a:	2800      	cmp	r0, #0
 800dd0c:	d1f3      	bne.n	800dcf6 <__ieee754_rem_pio2+0x3be>
 800dd0e:	4b0f      	ldr	r3, [pc, #60]	; (800dd4c <__ieee754_rem_pio2+0x414>)
 800dd10:	9301      	str	r3, [sp, #4]
 800dd12:	2302      	movs	r3, #2
 800dd14:	9300      	str	r3, [sp, #0]
 800dd16:	4622      	mov	r2, r4
 800dd18:	465b      	mov	r3, fp
 800dd1a:	4651      	mov	r1, sl
 800dd1c:	4648      	mov	r0, r9
 800dd1e:	f000 f993 	bl	800e048 <__kernel_rem_pio2>
 800dd22:	9b02      	ldr	r3, [sp, #8]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	4683      	mov	fp, r0
 800dd28:	f6bf ae46 	bge.w	800d9b8 <__ieee754_rem_pio2+0x80>
 800dd2c:	e9da 2100 	ldrd	r2, r1, [sl]
 800dd30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd34:	e9ca 2300 	strd	r2, r3, [sl]
 800dd38:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800dd3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd40:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800dd44:	e73a      	b.n	800dbbc <__ieee754_rem_pio2+0x284>
 800dd46:	bf00      	nop
 800dd48:	41700000 	.word	0x41700000
 800dd4c:	0800f420 	.word	0x0800f420

0800dd50 <__ieee754_sqrt>:
 800dd50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd54:	ec55 4b10 	vmov	r4, r5, d0
 800dd58:	4e55      	ldr	r6, [pc, #340]	; (800deb0 <__ieee754_sqrt+0x160>)
 800dd5a:	43ae      	bics	r6, r5
 800dd5c:	ee10 0a10 	vmov	r0, s0
 800dd60:	ee10 3a10 	vmov	r3, s0
 800dd64:	462a      	mov	r2, r5
 800dd66:	4629      	mov	r1, r5
 800dd68:	d110      	bne.n	800dd8c <__ieee754_sqrt+0x3c>
 800dd6a:	ee10 2a10 	vmov	r2, s0
 800dd6e:	462b      	mov	r3, r5
 800dd70:	f7f2 fc52 	bl	8000618 <__aeabi_dmul>
 800dd74:	4602      	mov	r2, r0
 800dd76:	460b      	mov	r3, r1
 800dd78:	4620      	mov	r0, r4
 800dd7a:	4629      	mov	r1, r5
 800dd7c:	f7f2 fa96 	bl	80002ac <__adddf3>
 800dd80:	4604      	mov	r4, r0
 800dd82:	460d      	mov	r5, r1
 800dd84:	ec45 4b10 	vmov	d0, r4, r5
 800dd88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd8c:	2d00      	cmp	r5, #0
 800dd8e:	dc10      	bgt.n	800ddb2 <__ieee754_sqrt+0x62>
 800dd90:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800dd94:	4330      	orrs	r0, r6
 800dd96:	d0f5      	beq.n	800dd84 <__ieee754_sqrt+0x34>
 800dd98:	b15d      	cbz	r5, 800ddb2 <__ieee754_sqrt+0x62>
 800dd9a:	ee10 2a10 	vmov	r2, s0
 800dd9e:	462b      	mov	r3, r5
 800dda0:	ee10 0a10 	vmov	r0, s0
 800dda4:	f7f2 fa80 	bl	80002a8 <__aeabi_dsub>
 800dda8:	4602      	mov	r2, r0
 800ddaa:	460b      	mov	r3, r1
 800ddac:	f7f2 fd5e 	bl	800086c <__aeabi_ddiv>
 800ddb0:	e7e6      	b.n	800dd80 <__ieee754_sqrt+0x30>
 800ddb2:	1512      	asrs	r2, r2, #20
 800ddb4:	d074      	beq.n	800dea0 <__ieee754_sqrt+0x150>
 800ddb6:	07d4      	lsls	r4, r2, #31
 800ddb8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800ddbc:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800ddc0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ddc4:	bf5e      	ittt	pl
 800ddc6:	0fda      	lsrpl	r2, r3, #31
 800ddc8:	005b      	lslpl	r3, r3, #1
 800ddca:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800ddce:	2400      	movs	r4, #0
 800ddd0:	0fda      	lsrs	r2, r3, #31
 800ddd2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800ddd6:	107f      	asrs	r7, r7, #1
 800ddd8:	005b      	lsls	r3, r3, #1
 800ddda:	2516      	movs	r5, #22
 800dddc:	4620      	mov	r0, r4
 800ddde:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800dde2:	1886      	adds	r6, r0, r2
 800dde4:	428e      	cmp	r6, r1
 800dde6:	bfde      	ittt	le
 800dde8:	1b89      	suble	r1, r1, r6
 800ddea:	18b0      	addle	r0, r6, r2
 800ddec:	18a4      	addle	r4, r4, r2
 800ddee:	0049      	lsls	r1, r1, #1
 800ddf0:	3d01      	subs	r5, #1
 800ddf2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800ddf6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ddfa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ddfe:	d1f0      	bne.n	800dde2 <__ieee754_sqrt+0x92>
 800de00:	462a      	mov	r2, r5
 800de02:	f04f 0e20 	mov.w	lr, #32
 800de06:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800de0a:	4281      	cmp	r1, r0
 800de0c:	eb06 0c05 	add.w	ip, r6, r5
 800de10:	dc02      	bgt.n	800de18 <__ieee754_sqrt+0xc8>
 800de12:	d113      	bne.n	800de3c <__ieee754_sqrt+0xec>
 800de14:	459c      	cmp	ip, r3
 800de16:	d811      	bhi.n	800de3c <__ieee754_sqrt+0xec>
 800de18:	f1bc 0f00 	cmp.w	ip, #0
 800de1c:	eb0c 0506 	add.w	r5, ip, r6
 800de20:	da43      	bge.n	800deaa <__ieee754_sqrt+0x15a>
 800de22:	2d00      	cmp	r5, #0
 800de24:	db41      	blt.n	800deaa <__ieee754_sqrt+0x15a>
 800de26:	f100 0801 	add.w	r8, r0, #1
 800de2a:	1a09      	subs	r1, r1, r0
 800de2c:	459c      	cmp	ip, r3
 800de2e:	bf88      	it	hi
 800de30:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800de34:	eba3 030c 	sub.w	r3, r3, ip
 800de38:	4432      	add	r2, r6
 800de3a:	4640      	mov	r0, r8
 800de3c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800de40:	f1be 0e01 	subs.w	lr, lr, #1
 800de44:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800de48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800de4c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800de50:	d1db      	bne.n	800de0a <__ieee754_sqrt+0xba>
 800de52:	430b      	orrs	r3, r1
 800de54:	d006      	beq.n	800de64 <__ieee754_sqrt+0x114>
 800de56:	1c50      	adds	r0, r2, #1
 800de58:	bf13      	iteet	ne
 800de5a:	3201      	addne	r2, #1
 800de5c:	3401      	addeq	r4, #1
 800de5e:	4672      	moveq	r2, lr
 800de60:	f022 0201 	bicne.w	r2, r2, #1
 800de64:	1063      	asrs	r3, r4, #1
 800de66:	0852      	lsrs	r2, r2, #1
 800de68:	07e1      	lsls	r1, r4, #31
 800de6a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800de6e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800de72:	bf48      	it	mi
 800de74:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800de78:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800de7c:	4614      	mov	r4, r2
 800de7e:	e781      	b.n	800dd84 <__ieee754_sqrt+0x34>
 800de80:	0ad9      	lsrs	r1, r3, #11
 800de82:	3815      	subs	r0, #21
 800de84:	055b      	lsls	r3, r3, #21
 800de86:	2900      	cmp	r1, #0
 800de88:	d0fa      	beq.n	800de80 <__ieee754_sqrt+0x130>
 800de8a:	02cd      	lsls	r5, r1, #11
 800de8c:	d50a      	bpl.n	800dea4 <__ieee754_sqrt+0x154>
 800de8e:	f1c2 0420 	rsb	r4, r2, #32
 800de92:	fa23 f404 	lsr.w	r4, r3, r4
 800de96:	1e55      	subs	r5, r2, #1
 800de98:	4093      	lsls	r3, r2
 800de9a:	4321      	orrs	r1, r4
 800de9c:	1b42      	subs	r2, r0, r5
 800de9e:	e78a      	b.n	800ddb6 <__ieee754_sqrt+0x66>
 800dea0:	4610      	mov	r0, r2
 800dea2:	e7f0      	b.n	800de86 <__ieee754_sqrt+0x136>
 800dea4:	0049      	lsls	r1, r1, #1
 800dea6:	3201      	adds	r2, #1
 800dea8:	e7ef      	b.n	800de8a <__ieee754_sqrt+0x13a>
 800deaa:	4680      	mov	r8, r0
 800deac:	e7bd      	b.n	800de2a <__ieee754_sqrt+0xda>
 800deae:	bf00      	nop
 800deb0:	7ff00000 	.word	0x7ff00000
 800deb4:	00000000 	.word	0x00000000

0800deb8 <__kernel_cos>:
 800deb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800debc:	ec57 6b10 	vmov	r6, r7, d0
 800dec0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800dec4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800dec8:	ed8d 1b00 	vstr	d1, [sp]
 800decc:	da07      	bge.n	800dede <__kernel_cos+0x26>
 800dece:	ee10 0a10 	vmov	r0, s0
 800ded2:	4639      	mov	r1, r7
 800ded4:	f7f2 fe50 	bl	8000b78 <__aeabi_d2iz>
 800ded8:	2800      	cmp	r0, #0
 800deda:	f000 8088 	beq.w	800dfee <__kernel_cos+0x136>
 800dede:	4632      	mov	r2, r6
 800dee0:	463b      	mov	r3, r7
 800dee2:	4630      	mov	r0, r6
 800dee4:	4639      	mov	r1, r7
 800dee6:	f7f2 fb97 	bl	8000618 <__aeabi_dmul>
 800deea:	4b51      	ldr	r3, [pc, #324]	; (800e030 <__kernel_cos+0x178>)
 800deec:	2200      	movs	r2, #0
 800deee:	4604      	mov	r4, r0
 800def0:	460d      	mov	r5, r1
 800def2:	f7f2 fb91 	bl	8000618 <__aeabi_dmul>
 800def6:	a340      	add	r3, pc, #256	; (adr r3, 800dff8 <__kernel_cos+0x140>)
 800def8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800defc:	4682      	mov	sl, r0
 800defe:	468b      	mov	fp, r1
 800df00:	4620      	mov	r0, r4
 800df02:	4629      	mov	r1, r5
 800df04:	f7f2 fb88 	bl	8000618 <__aeabi_dmul>
 800df08:	a33d      	add	r3, pc, #244	; (adr r3, 800e000 <__kernel_cos+0x148>)
 800df0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df0e:	f7f2 f9cd 	bl	80002ac <__adddf3>
 800df12:	4622      	mov	r2, r4
 800df14:	462b      	mov	r3, r5
 800df16:	f7f2 fb7f 	bl	8000618 <__aeabi_dmul>
 800df1a:	a33b      	add	r3, pc, #236	; (adr r3, 800e008 <__kernel_cos+0x150>)
 800df1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df20:	f7f2 f9c2 	bl	80002a8 <__aeabi_dsub>
 800df24:	4622      	mov	r2, r4
 800df26:	462b      	mov	r3, r5
 800df28:	f7f2 fb76 	bl	8000618 <__aeabi_dmul>
 800df2c:	a338      	add	r3, pc, #224	; (adr r3, 800e010 <__kernel_cos+0x158>)
 800df2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df32:	f7f2 f9bb 	bl	80002ac <__adddf3>
 800df36:	4622      	mov	r2, r4
 800df38:	462b      	mov	r3, r5
 800df3a:	f7f2 fb6d 	bl	8000618 <__aeabi_dmul>
 800df3e:	a336      	add	r3, pc, #216	; (adr r3, 800e018 <__kernel_cos+0x160>)
 800df40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df44:	f7f2 f9b0 	bl	80002a8 <__aeabi_dsub>
 800df48:	4622      	mov	r2, r4
 800df4a:	462b      	mov	r3, r5
 800df4c:	f7f2 fb64 	bl	8000618 <__aeabi_dmul>
 800df50:	a333      	add	r3, pc, #204	; (adr r3, 800e020 <__kernel_cos+0x168>)
 800df52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df56:	f7f2 f9a9 	bl	80002ac <__adddf3>
 800df5a:	4622      	mov	r2, r4
 800df5c:	462b      	mov	r3, r5
 800df5e:	f7f2 fb5b 	bl	8000618 <__aeabi_dmul>
 800df62:	4622      	mov	r2, r4
 800df64:	462b      	mov	r3, r5
 800df66:	f7f2 fb57 	bl	8000618 <__aeabi_dmul>
 800df6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df6e:	4604      	mov	r4, r0
 800df70:	460d      	mov	r5, r1
 800df72:	4630      	mov	r0, r6
 800df74:	4639      	mov	r1, r7
 800df76:	f7f2 fb4f 	bl	8000618 <__aeabi_dmul>
 800df7a:	460b      	mov	r3, r1
 800df7c:	4602      	mov	r2, r0
 800df7e:	4629      	mov	r1, r5
 800df80:	4620      	mov	r0, r4
 800df82:	f7f2 f991 	bl	80002a8 <__aeabi_dsub>
 800df86:	4b2b      	ldr	r3, [pc, #172]	; (800e034 <__kernel_cos+0x17c>)
 800df88:	4598      	cmp	r8, r3
 800df8a:	4606      	mov	r6, r0
 800df8c:	460f      	mov	r7, r1
 800df8e:	dc10      	bgt.n	800dfb2 <__kernel_cos+0xfa>
 800df90:	4602      	mov	r2, r0
 800df92:	460b      	mov	r3, r1
 800df94:	4650      	mov	r0, sl
 800df96:	4659      	mov	r1, fp
 800df98:	f7f2 f986 	bl	80002a8 <__aeabi_dsub>
 800df9c:	460b      	mov	r3, r1
 800df9e:	4926      	ldr	r1, [pc, #152]	; (800e038 <__kernel_cos+0x180>)
 800dfa0:	4602      	mov	r2, r0
 800dfa2:	2000      	movs	r0, #0
 800dfa4:	f7f2 f980 	bl	80002a8 <__aeabi_dsub>
 800dfa8:	ec41 0b10 	vmov	d0, r0, r1
 800dfac:	b003      	add	sp, #12
 800dfae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfb2:	4b22      	ldr	r3, [pc, #136]	; (800e03c <__kernel_cos+0x184>)
 800dfb4:	4920      	ldr	r1, [pc, #128]	; (800e038 <__kernel_cos+0x180>)
 800dfb6:	4598      	cmp	r8, r3
 800dfb8:	bfcc      	ite	gt
 800dfba:	4d21      	ldrgt	r5, [pc, #132]	; (800e040 <__kernel_cos+0x188>)
 800dfbc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800dfc0:	2400      	movs	r4, #0
 800dfc2:	4622      	mov	r2, r4
 800dfc4:	462b      	mov	r3, r5
 800dfc6:	2000      	movs	r0, #0
 800dfc8:	f7f2 f96e 	bl	80002a8 <__aeabi_dsub>
 800dfcc:	4622      	mov	r2, r4
 800dfce:	4680      	mov	r8, r0
 800dfd0:	4689      	mov	r9, r1
 800dfd2:	462b      	mov	r3, r5
 800dfd4:	4650      	mov	r0, sl
 800dfd6:	4659      	mov	r1, fp
 800dfd8:	f7f2 f966 	bl	80002a8 <__aeabi_dsub>
 800dfdc:	4632      	mov	r2, r6
 800dfde:	463b      	mov	r3, r7
 800dfe0:	f7f2 f962 	bl	80002a8 <__aeabi_dsub>
 800dfe4:	4602      	mov	r2, r0
 800dfe6:	460b      	mov	r3, r1
 800dfe8:	4640      	mov	r0, r8
 800dfea:	4649      	mov	r1, r9
 800dfec:	e7da      	b.n	800dfa4 <__kernel_cos+0xec>
 800dfee:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800e028 <__kernel_cos+0x170>
 800dff2:	e7db      	b.n	800dfac <__kernel_cos+0xf4>
 800dff4:	f3af 8000 	nop.w
 800dff8:	be8838d4 	.word	0xbe8838d4
 800dffc:	bda8fae9 	.word	0xbda8fae9
 800e000:	bdb4b1c4 	.word	0xbdb4b1c4
 800e004:	3e21ee9e 	.word	0x3e21ee9e
 800e008:	809c52ad 	.word	0x809c52ad
 800e00c:	3e927e4f 	.word	0x3e927e4f
 800e010:	19cb1590 	.word	0x19cb1590
 800e014:	3efa01a0 	.word	0x3efa01a0
 800e018:	16c15177 	.word	0x16c15177
 800e01c:	3f56c16c 	.word	0x3f56c16c
 800e020:	5555554c 	.word	0x5555554c
 800e024:	3fa55555 	.word	0x3fa55555
 800e028:	00000000 	.word	0x00000000
 800e02c:	3ff00000 	.word	0x3ff00000
 800e030:	3fe00000 	.word	0x3fe00000
 800e034:	3fd33332 	.word	0x3fd33332
 800e038:	3ff00000 	.word	0x3ff00000
 800e03c:	3fe90000 	.word	0x3fe90000
 800e040:	3fd20000 	.word	0x3fd20000
 800e044:	00000000 	.word	0x00000000

0800e048 <__kernel_rem_pio2>:
 800e048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e04c:	ed2d 8b02 	vpush	{d8}
 800e050:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800e054:	f112 0f14 	cmn.w	r2, #20
 800e058:	9308      	str	r3, [sp, #32]
 800e05a:	9101      	str	r1, [sp, #4]
 800e05c:	4bc4      	ldr	r3, [pc, #784]	; (800e370 <__kernel_rem_pio2+0x328>)
 800e05e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800e060:	900b      	str	r0, [sp, #44]	; 0x2c
 800e062:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e066:	9302      	str	r3, [sp, #8]
 800e068:	9b08      	ldr	r3, [sp, #32]
 800e06a:	f103 33ff 	add.w	r3, r3, #4294967295
 800e06e:	bfa8      	it	ge
 800e070:	1ed4      	subge	r4, r2, #3
 800e072:	9306      	str	r3, [sp, #24]
 800e074:	bfb2      	itee	lt
 800e076:	2400      	movlt	r4, #0
 800e078:	2318      	movge	r3, #24
 800e07a:	fb94 f4f3 	sdivge	r4, r4, r3
 800e07e:	f06f 0317 	mvn.w	r3, #23
 800e082:	fb04 3303 	mla	r3, r4, r3, r3
 800e086:	eb03 0a02 	add.w	sl, r3, r2
 800e08a:	9b02      	ldr	r3, [sp, #8]
 800e08c:	9a06      	ldr	r2, [sp, #24]
 800e08e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800e360 <__kernel_rem_pio2+0x318>
 800e092:	eb03 0802 	add.w	r8, r3, r2
 800e096:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e098:	1aa7      	subs	r7, r4, r2
 800e09a:	ae22      	add	r6, sp, #136	; 0x88
 800e09c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e0a0:	2500      	movs	r5, #0
 800e0a2:	4545      	cmp	r5, r8
 800e0a4:	dd13      	ble.n	800e0ce <__kernel_rem_pio2+0x86>
 800e0a6:	9b08      	ldr	r3, [sp, #32]
 800e0a8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800e360 <__kernel_rem_pio2+0x318>
 800e0ac:	aa22      	add	r2, sp, #136	; 0x88
 800e0ae:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e0b2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800e0b6:	f04f 0800 	mov.w	r8, #0
 800e0ba:	9b02      	ldr	r3, [sp, #8]
 800e0bc:	4598      	cmp	r8, r3
 800e0be:	dc2f      	bgt.n	800e120 <__kernel_rem_pio2+0xd8>
 800e0c0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e0c4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800e0c8:	462f      	mov	r7, r5
 800e0ca:	2600      	movs	r6, #0
 800e0cc:	e01b      	b.n	800e106 <__kernel_rem_pio2+0xbe>
 800e0ce:	42ef      	cmn	r7, r5
 800e0d0:	d407      	bmi.n	800e0e2 <__kernel_rem_pio2+0x9a>
 800e0d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e0d6:	f7f2 fa35 	bl	8000544 <__aeabi_i2d>
 800e0da:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e0de:	3501      	adds	r5, #1
 800e0e0:	e7df      	b.n	800e0a2 <__kernel_rem_pio2+0x5a>
 800e0e2:	ec51 0b18 	vmov	r0, r1, d8
 800e0e6:	e7f8      	b.n	800e0da <__kernel_rem_pio2+0x92>
 800e0e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e0ec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e0f0:	f7f2 fa92 	bl	8000618 <__aeabi_dmul>
 800e0f4:	4602      	mov	r2, r0
 800e0f6:	460b      	mov	r3, r1
 800e0f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e0fc:	f7f2 f8d6 	bl	80002ac <__adddf3>
 800e100:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e104:	3601      	adds	r6, #1
 800e106:	9b06      	ldr	r3, [sp, #24]
 800e108:	429e      	cmp	r6, r3
 800e10a:	f1a7 0708 	sub.w	r7, r7, #8
 800e10e:	ddeb      	ble.n	800e0e8 <__kernel_rem_pio2+0xa0>
 800e110:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e114:	f108 0801 	add.w	r8, r8, #1
 800e118:	ecab 7b02 	vstmia	fp!, {d7}
 800e11c:	3508      	adds	r5, #8
 800e11e:	e7cc      	b.n	800e0ba <__kernel_rem_pio2+0x72>
 800e120:	9b02      	ldr	r3, [sp, #8]
 800e122:	aa0e      	add	r2, sp, #56	; 0x38
 800e124:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e128:	930d      	str	r3, [sp, #52]	; 0x34
 800e12a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e12c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e130:	9c02      	ldr	r4, [sp, #8]
 800e132:	930c      	str	r3, [sp, #48]	; 0x30
 800e134:	00e3      	lsls	r3, r4, #3
 800e136:	930a      	str	r3, [sp, #40]	; 0x28
 800e138:	ab9a      	add	r3, sp, #616	; 0x268
 800e13a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e13e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e142:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800e146:	ab72      	add	r3, sp, #456	; 0x1c8
 800e148:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e14c:	46c3      	mov	fp, r8
 800e14e:	46a1      	mov	r9, r4
 800e150:	f1b9 0f00 	cmp.w	r9, #0
 800e154:	f1a5 0508 	sub.w	r5, r5, #8
 800e158:	dc77      	bgt.n	800e24a <__kernel_rem_pio2+0x202>
 800e15a:	ec47 6b10 	vmov	d0, r6, r7
 800e15e:	4650      	mov	r0, sl
 800e160:	f000 fdae 	bl	800ecc0 <scalbn>
 800e164:	ec57 6b10 	vmov	r6, r7, d0
 800e168:	2200      	movs	r2, #0
 800e16a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e16e:	ee10 0a10 	vmov	r0, s0
 800e172:	4639      	mov	r1, r7
 800e174:	f7f2 fa50 	bl	8000618 <__aeabi_dmul>
 800e178:	ec41 0b10 	vmov	d0, r0, r1
 800e17c:	f000 fd20 	bl	800ebc0 <floor>
 800e180:	4b7c      	ldr	r3, [pc, #496]	; (800e374 <__kernel_rem_pio2+0x32c>)
 800e182:	ec51 0b10 	vmov	r0, r1, d0
 800e186:	2200      	movs	r2, #0
 800e188:	f7f2 fa46 	bl	8000618 <__aeabi_dmul>
 800e18c:	4602      	mov	r2, r0
 800e18e:	460b      	mov	r3, r1
 800e190:	4630      	mov	r0, r6
 800e192:	4639      	mov	r1, r7
 800e194:	f7f2 f888 	bl	80002a8 <__aeabi_dsub>
 800e198:	460f      	mov	r7, r1
 800e19a:	4606      	mov	r6, r0
 800e19c:	f7f2 fcec 	bl	8000b78 <__aeabi_d2iz>
 800e1a0:	9004      	str	r0, [sp, #16]
 800e1a2:	f7f2 f9cf 	bl	8000544 <__aeabi_i2d>
 800e1a6:	4602      	mov	r2, r0
 800e1a8:	460b      	mov	r3, r1
 800e1aa:	4630      	mov	r0, r6
 800e1ac:	4639      	mov	r1, r7
 800e1ae:	f7f2 f87b 	bl	80002a8 <__aeabi_dsub>
 800e1b2:	f1ba 0f00 	cmp.w	sl, #0
 800e1b6:	4606      	mov	r6, r0
 800e1b8:	460f      	mov	r7, r1
 800e1ba:	dd6d      	ble.n	800e298 <__kernel_rem_pio2+0x250>
 800e1bc:	1e62      	subs	r2, r4, #1
 800e1be:	ab0e      	add	r3, sp, #56	; 0x38
 800e1c0:	9d04      	ldr	r5, [sp, #16]
 800e1c2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e1c6:	f1ca 0118 	rsb	r1, sl, #24
 800e1ca:	fa40 f301 	asr.w	r3, r0, r1
 800e1ce:	441d      	add	r5, r3
 800e1d0:	408b      	lsls	r3, r1
 800e1d2:	1ac0      	subs	r0, r0, r3
 800e1d4:	ab0e      	add	r3, sp, #56	; 0x38
 800e1d6:	9504      	str	r5, [sp, #16]
 800e1d8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e1dc:	f1ca 0317 	rsb	r3, sl, #23
 800e1e0:	fa40 fb03 	asr.w	fp, r0, r3
 800e1e4:	f1bb 0f00 	cmp.w	fp, #0
 800e1e8:	dd65      	ble.n	800e2b6 <__kernel_rem_pio2+0x26e>
 800e1ea:	9b04      	ldr	r3, [sp, #16]
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	3301      	adds	r3, #1
 800e1f0:	9304      	str	r3, [sp, #16]
 800e1f2:	4615      	mov	r5, r2
 800e1f4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e1f8:	4294      	cmp	r4, r2
 800e1fa:	f300 809c 	bgt.w	800e336 <__kernel_rem_pio2+0x2ee>
 800e1fe:	f1ba 0f00 	cmp.w	sl, #0
 800e202:	dd07      	ble.n	800e214 <__kernel_rem_pio2+0x1cc>
 800e204:	f1ba 0f01 	cmp.w	sl, #1
 800e208:	f000 80c0 	beq.w	800e38c <__kernel_rem_pio2+0x344>
 800e20c:	f1ba 0f02 	cmp.w	sl, #2
 800e210:	f000 80c6 	beq.w	800e3a0 <__kernel_rem_pio2+0x358>
 800e214:	f1bb 0f02 	cmp.w	fp, #2
 800e218:	d14d      	bne.n	800e2b6 <__kernel_rem_pio2+0x26e>
 800e21a:	4632      	mov	r2, r6
 800e21c:	463b      	mov	r3, r7
 800e21e:	4956      	ldr	r1, [pc, #344]	; (800e378 <__kernel_rem_pio2+0x330>)
 800e220:	2000      	movs	r0, #0
 800e222:	f7f2 f841 	bl	80002a8 <__aeabi_dsub>
 800e226:	4606      	mov	r6, r0
 800e228:	460f      	mov	r7, r1
 800e22a:	2d00      	cmp	r5, #0
 800e22c:	d043      	beq.n	800e2b6 <__kernel_rem_pio2+0x26e>
 800e22e:	4650      	mov	r0, sl
 800e230:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800e368 <__kernel_rem_pio2+0x320>
 800e234:	f000 fd44 	bl	800ecc0 <scalbn>
 800e238:	4630      	mov	r0, r6
 800e23a:	4639      	mov	r1, r7
 800e23c:	ec53 2b10 	vmov	r2, r3, d0
 800e240:	f7f2 f832 	bl	80002a8 <__aeabi_dsub>
 800e244:	4606      	mov	r6, r0
 800e246:	460f      	mov	r7, r1
 800e248:	e035      	b.n	800e2b6 <__kernel_rem_pio2+0x26e>
 800e24a:	4b4c      	ldr	r3, [pc, #304]	; (800e37c <__kernel_rem_pio2+0x334>)
 800e24c:	2200      	movs	r2, #0
 800e24e:	4630      	mov	r0, r6
 800e250:	4639      	mov	r1, r7
 800e252:	f7f2 f9e1 	bl	8000618 <__aeabi_dmul>
 800e256:	f7f2 fc8f 	bl	8000b78 <__aeabi_d2iz>
 800e25a:	f7f2 f973 	bl	8000544 <__aeabi_i2d>
 800e25e:	4602      	mov	r2, r0
 800e260:	460b      	mov	r3, r1
 800e262:	ec43 2b18 	vmov	d8, r2, r3
 800e266:	4b46      	ldr	r3, [pc, #280]	; (800e380 <__kernel_rem_pio2+0x338>)
 800e268:	2200      	movs	r2, #0
 800e26a:	f7f2 f9d5 	bl	8000618 <__aeabi_dmul>
 800e26e:	4602      	mov	r2, r0
 800e270:	460b      	mov	r3, r1
 800e272:	4630      	mov	r0, r6
 800e274:	4639      	mov	r1, r7
 800e276:	f7f2 f817 	bl	80002a8 <__aeabi_dsub>
 800e27a:	f7f2 fc7d 	bl	8000b78 <__aeabi_d2iz>
 800e27e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e282:	f84b 0b04 	str.w	r0, [fp], #4
 800e286:	ec51 0b18 	vmov	r0, r1, d8
 800e28a:	f7f2 f80f 	bl	80002ac <__adddf3>
 800e28e:	f109 39ff 	add.w	r9, r9, #4294967295
 800e292:	4606      	mov	r6, r0
 800e294:	460f      	mov	r7, r1
 800e296:	e75b      	b.n	800e150 <__kernel_rem_pio2+0x108>
 800e298:	d106      	bne.n	800e2a8 <__kernel_rem_pio2+0x260>
 800e29a:	1e63      	subs	r3, r4, #1
 800e29c:	aa0e      	add	r2, sp, #56	; 0x38
 800e29e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e2a2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800e2a6:	e79d      	b.n	800e1e4 <__kernel_rem_pio2+0x19c>
 800e2a8:	4b36      	ldr	r3, [pc, #216]	; (800e384 <__kernel_rem_pio2+0x33c>)
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	f7f2 fc3a 	bl	8000b24 <__aeabi_dcmpge>
 800e2b0:	2800      	cmp	r0, #0
 800e2b2:	d13d      	bne.n	800e330 <__kernel_rem_pio2+0x2e8>
 800e2b4:	4683      	mov	fp, r0
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	4630      	mov	r0, r6
 800e2bc:	4639      	mov	r1, r7
 800e2be:	f7f2 fc13 	bl	8000ae8 <__aeabi_dcmpeq>
 800e2c2:	2800      	cmp	r0, #0
 800e2c4:	f000 80c0 	beq.w	800e448 <__kernel_rem_pio2+0x400>
 800e2c8:	1e65      	subs	r5, r4, #1
 800e2ca:	462b      	mov	r3, r5
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	9902      	ldr	r1, [sp, #8]
 800e2d0:	428b      	cmp	r3, r1
 800e2d2:	da6c      	bge.n	800e3ae <__kernel_rem_pio2+0x366>
 800e2d4:	2a00      	cmp	r2, #0
 800e2d6:	f000 8089 	beq.w	800e3ec <__kernel_rem_pio2+0x3a4>
 800e2da:	ab0e      	add	r3, sp, #56	; 0x38
 800e2dc:	f1aa 0a18 	sub.w	sl, sl, #24
 800e2e0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	f000 80ad 	beq.w	800e444 <__kernel_rem_pio2+0x3fc>
 800e2ea:	4650      	mov	r0, sl
 800e2ec:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800e368 <__kernel_rem_pio2+0x320>
 800e2f0:	f000 fce6 	bl	800ecc0 <scalbn>
 800e2f4:	ab9a      	add	r3, sp, #616	; 0x268
 800e2f6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e2fa:	ec57 6b10 	vmov	r6, r7, d0
 800e2fe:	00ec      	lsls	r4, r5, #3
 800e300:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800e304:	46aa      	mov	sl, r5
 800e306:	f1ba 0f00 	cmp.w	sl, #0
 800e30a:	f280 80d6 	bge.w	800e4ba <__kernel_rem_pio2+0x472>
 800e30e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800e360 <__kernel_rem_pio2+0x318>
 800e312:	462e      	mov	r6, r5
 800e314:	2e00      	cmp	r6, #0
 800e316:	f2c0 8104 	blt.w	800e522 <__kernel_rem_pio2+0x4da>
 800e31a:	ab72      	add	r3, sp, #456	; 0x1c8
 800e31c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800e320:	f8df a064 	ldr.w	sl, [pc, #100]	; 800e388 <__kernel_rem_pio2+0x340>
 800e324:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800e328:	f04f 0800 	mov.w	r8, #0
 800e32c:	1baf      	subs	r7, r5, r6
 800e32e:	e0ea      	b.n	800e506 <__kernel_rem_pio2+0x4be>
 800e330:	f04f 0b02 	mov.w	fp, #2
 800e334:	e759      	b.n	800e1ea <__kernel_rem_pio2+0x1a2>
 800e336:	f8d8 3000 	ldr.w	r3, [r8]
 800e33a:	b955      	cbnz	r5, 800e352 <__kernel_rem_pio2+0x30a>
 800e33c:	b123      	cbz	r3, 800e348 <__kernel_rem_pio2+0x300>
 800e33e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e342:	f8c8 3000 	str.w	r3, [r8]
 800e346:	2301      	movs	r3, #1
 800e348:	3201      	adds	r2, #1
 800e34a:	f108 0804 	add.w	r8, r8, #4
 800e34e:	461d      	mov	r5, r3
 800e350:	e752      	b.n	800e1f8 <__kernel_rem_pio2+0x1b0>
 800e352:	1acb      	subs	r3, r1, r3
 800e354:	f8c8 3000 	str.w	r3, [r8]
 800e358:	462b      	mov	r3, r5
 800e35a:	e7f5      	b.n	800e348 <__kernel_rem_pio2+0x300>
 800e35c:	f3af 8000 	nop.w
	...
 800e36c:	3ff00000 	.word	0x3ff00000
 800e370:	0800f568 	.word	0x0800f568
 800e374:	40200000 	.word	0x40200000
 800e378:	3ff00000 	.word	0x3ff00000
 800e37c:	3e700000 	.word	0x3e700000
 800e380:	41700000 	.word	0x41700000
 800e384:	3fe00000 	.word	0x3fe00000
 800e388:	0800f528 	.word	0x0800f528
 800e38c:	1e62      	subs	r2, r4, #1
 800e38e:	ab0e      	add	r3, sp, #56	; 0x38
 800e390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e394:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e398:	a90e      	add	r1, sp, #56	; 0x38
 800e39a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e39e:	e739      	b.n	800e214 <__kernel_rem_pio2+0x1cc>
 800e3a0:	1e62      	subs	r2, r4, #1
 800e3a2:	ab0e      	add	r3, sp, #56	; 0x38
 800e3a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3a8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e3ac:	e7f4      	b.n	800e398 <__kernel_rem_pio2+0x350>
 800e3ae:	a90e      	add	r1, sp, #56	; 0x38
 800e3b0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e3b4:	3b01      	subs	r3, #1
 800e3b6:	430a      	orrs	r2, r1
 800e3b8:	e789      	b.n	800e2ce <__kernel_rem_pio2+0x286>
 800e3ba:	3301      	adds	r3, #1
 800e3bc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e3c0:	2900      	cmp	r1, #0
 800e3c2:	d0fa      	beq.n	800e3ba <__kernel_rem_pio2+0x372>
 800e3c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e3c6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800e3ca:	446a      	add	r2, sp
 800e3cc:	3a98      	subs	r2, #152	; 0x98
 800e3ce:	920a      	str	r2, [sp, #40]	; 0x28
 800e3d0:	9a08      	ldr	r2, [sp, #32]
 800e3d2:	18e3      	adds	r3, r4, r3
 800e3d4:	18a5      	adds	r5, r4, r2
 800e3d6:	aa22      	add	r2, sp, #136	; 0x88
 800e3d8:	f104 0801 	add.w	r8, r4, #1
 800e3dc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800e3e0:	9304      	str	r3, [sp, #16]
 800e3e2:	9b04      	ldr	r3, [sp, #16]
 800e3e4:	4543      	cmp	r3, r8
 800e3e6:	da04      	bge.n	800e3f2 <__kernel_rem_pio2+0x3aa>
 800e3e8:	461c      	mov	r4, r3
 800e3ea:	e6a3      	b.n	800e134 <__kernel_rem_pio2+0xec>
 800e3ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	e7e4      	b.n	800e3bc <__kernel_rem_pio2+0x374>
 800e3f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e3f4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e3f8:	f7f2 f8a4 	bl	8000544 <__aeabi_i2d>
 800e3fc:	e8e5 0102 	strd	r0, r1, [r5], #8
 800e400:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e402:	46ab      	mov	fp, r5
 800e404:	461c      	mov	r4, r3
 800e406:	f04f 0900 	mov.w	r9, #0
 800e40a:	2600      	movs	r6, #0
 800e40c:	2700      	movs	r7, #0
 800e40e:	9b06      	ldr	r3, [sp, #24]
 800e410:	4599      	cmp	r9, r3
 800e412:	dd06      	ble.n	800e422 <__kernel_rem_pio2+0x3da>
 800e414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e416:	e8e3 6702 	strd	r6, r7, [r3], #8
 800e41a:	f108 0801 	add.w	r8, r8, #1
 800e41e:	930a      	str	r3, [sp, #40]	; 0x28
 800e420:	e7df      	b.n	800e3e2 <__kernel_rem_pio2+0x39a>
 800e422:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e426:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e42a:	f7f2 f8f5 	bl	8000618 <__aeabi_dmul>
 800e42e:	4602      	mov	r2, r0
 800e430:	460b      	mov	r3, r1
 800e432:	4630      	mov	r0, r6
 800e434:	4639      	mov	r1, r7
 800e436:	f7f1 ff39 	bl	80002ac <__adddf3>
 800e43a:	f109 0901 	add.w	r9, r9, #1
 800e43e:	4606      	mov	r6, r0
 800e440:	460f      	mov	r7, r1
 800e442:	e7e4      	b.n	800e40e <__kernel_rem_pio2+0x3c6>
 800e444:	3d01      	subs	r5, #1
 800e446:	e748      	b.n	800e2da <__kernel_rem_pio2+0x292>
 800e448:	ec47 6b10 	vmov	d0, r6, r7
 800e44c:	f1ca 0000 	rsb	r0, sl, #0
 800e450:	f000 fc36 	bl	800ecc0 <scalbn>
 800e454:	ec57 6b10 	vmov	r6, r7, d0
 800e458:	4ba0      	ldr	r3, [pc, #640]	; (800e6dc <__kernel_rem_pio2+0x694>)
 800e45a:	ee10 0a10 	vmov	r0, s0
 800e45e:	2200      	movs	r2, #0
 800e460:	4639      	mov	r1, r7
 800e462:	f7f2 fb5f 	bl	8000b24 <__aeabi_dcmpge>
 800e466:	b1f8      	cbz	r0, 800e4a8 <__kernel_rem_pio2+0x460>
 800e468:	4b9d      	ldr	r3, [pc, #628]	; (800e6e0 <__kernel_rem_pio2+0x698>)
 800e46a:	2200      	movs	r2, #0
 800e46c:	4630      	mov	r0, r6
 800e46e:	4639      	mov	r1, r7
 800e470:	f7f2 f8d2 	bl	8000618 <__aeabi_dmul>
 800e474:	f7f2 fb80 	bl	8000b78 <__aeabi_d2iz>
 800e478:	4680      	mov	r8, r0
 800e47a:	f7f2 f863 	bl	8000544 <__aeabi_i2d>
 800e47e:	4b97      	ldr	r3, [pc, #604]	; (800e6dc <__kernel_rem_pio2+0x694>)
 800e480:	2200      	movs	r2, #0
 800e482:	f7f2 f8c9 	bl	8000618 <__aeabi_dmul>
 800e486:	460b      	mov	r3, r1
 800e488:	4602      	mov	r2, r0
 800e48a:	4639      	mov	r1, r7
 800e48c:	4630      	mov	r0, r6
 800e48e:	f7f1 ff0b 	bl	80002a8 <__aeabi_dsub>
 800e492:	f7f2 fb71 	bl	8000b78 <__aeabi_d2iz>
 800e496:	1c65      	adds	r5, r4, #1
 800e498:	ab0e      	add	r3, sp, #56	; 0x38
 800e49a:	f10a 0a18 	add.w	sl, sl, #24
 800e49e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e4a2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800e4a6:	e720      	b.n	800e2ea <__kernel_rem_pio2+0x2a2>
 800e4a8:	4630      	mov	r0, r6
 800e4aa:	4639      	mov	r1, r7
 800e4ac:	f7f2 fb64 	bl	8000b78 <__aeabi_d2iz>
 800e4b0:	ab0e      	add	r3, sp, #56	; 0x38
 800e4b2:	4625      	mov	r5, r4
 800e4b4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e4b8:	e717      	b.n	800e2ea <__kernel_rem_pio2+0x2a2>
 800e4ba:	ab0e      	add	r3, sp, #56	; 0x38
 800e4bc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800e4c0:	f7f2 f840 	bl	8000544 <__aeabi_i2d>
 800e4c4:	4632      	mov	r2, r6
 800e4c6:	463b      	mov	r3, r7
 800e4c8:	f7f2 f8a6 	bl	8000618 <__aeabi_dmul>
 800e4cc:	4b84      	ldr	r3, [pc, #528]	; (800e6e0 <__kernel_rem_pio2+0x698>)
 800e4ce:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	4630      	mov	r0, r6
 800e4d6:	4639      	mov	r1, r7
 800e4d8:	f7f2 f89e 	bl	8000618 <__aeabi_dmul>
 800e4dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e4e0:	4606      	mov	r6, r0
 800e4e2:	460f      	mov	r7, r1
 800e4e4:	e70f      	b.n	800e306 <__kernel_rem_pio2+0x2be>
 800e4e6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800e4ea:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800e4ee:	f7f2 f893 	bl	8000618 <__aeabi_dmul>
 800e4f2:	4602      	mov	r2, r0
 800e4f4:	460b      	mov	r3, r1
 800e4f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e4fa:	f7f1 fed7 	bl	80002ac <__adddf3>
 800e4fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e502:	f108 0801 	add.w	r8, r8, #1
 800e506:	9b02      	ldr	r3, [sp, #8]
 800e508:	4598      	cmp	r8, r3
 800e50a:	dc01      	bgt.n	800e510 <__kernel_rem_pio2+0x4c8>
 800e50c:	45b8      	cmp	r8, r7
 800e50e:	ddea      	ble.n	800e4e6 <__kernel_rem_pio2+0x49e>
 800e510:	ed9d 7b06 	vldr	d7, [sp, #24]
 800e514:	ab4a      	add	r3, sp, #296	; 0x128
 800e516:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e51a:	ed87 7b00 	vstr	d7, [r7]
 800e51e:	3e01      	subs	r6, #1
 800e520:	e6f8      	b.n	800e314 <__kernel_rem_pio2+0x2cc>
 800e522:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800e524:	2b02      	cmp	r3, #2
 800e526:	dc0b      	bgt.n	800e540 <__kernel_rem_pio2+0x4f8>
 800e528:	2b00      	cmp	r3, #0
 800e52a:	dc35      	bgt.n	800e598 <__kernel_rem_pio2+0x550>
 800e52c:	d059      	beq.n	800e5e2 <__kernel_rem_pio2+0x59a>
 800e52e:	9b04      	ldr	r3, [sp, #16]
 800e530:	f003 0007 	and.w	r0, r3, #7
 800e534:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800e538:	ecbd 8b02 	vpop	{d8}
 800e53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e540:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800e542:	2b03      	cmp	r3, #3
 800e544:	d1f3      	bne.n	800e52e <__kernel_rem_pio2+0x4e6>
 800e546:	ab4a      	add	r3, sp, #296	; 0x128
 800e548:	4423      	add	r3, r4
 800e54a:	9306      	str	r3, [sp, #24]
 800e54c:	461c      	mov	r4, r3
 800e54e:	469a      	mov	sl, r3
 800e550:	9502      	str	r5, [sp, #8]
 800e552:	9b02      	ldr	r3, [sp, #8]
 800e554:	2b00      	cmp	r3, #0
 800e556:	f1aa 0a08 	sub.w	sl, sl, #8
 800e55a:	dc6b      	bgt.n	800e634 <__kernel_rem_pio2+0x5ec>
 800e55c:	46aa      	mov	sl, r5
 800e55e:	f1ba 0f01 	cmp.w	sl, #1
 800e562:	f1a4 0408 	sub.w	r4, r4, #8
 800e566:	f300 8085 	bgt.w	800e674 <__kernel_rem_pio2+0x62c>
 800e56a:	9c06      	ldr	r4, [sp, #24]
 800e56c:	2000      	movs	r0, #0
 800e56e:	3408      	adds	r4, #8
 800e570:	2100      	movs	r1, #0
 800e572:	2d01      	cmp	r5, #1
 800e574:	f300 809d 	bgt.w	800e6b2 <__kernel_rem_pio2+0x66a>
 800e578:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800e57c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800e580:	f1bb 0f00 	cmp.w	fp, #0
 800e584:	f040 809b 	bne.w	800e6be <__kernel_rem_pio2+0x676>
 800e588:	9b01      	ldr	r3, [sp, #4]
 800e58a:	e9c3 5600 	strd	r5, r6, [r3]
 800e58e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800e592:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e596:	e7ca      	b.n	800e52e <__kernel_rem_pio2+0x4e6>
 800e598:	3408      	adds	r4, #8
 800e59a:	ab4a      	add	r3, sp, #296	; 0x128
 800e59c:	441c      	add	r4, r3
 800e59e:	462e      	mov	r6, r5
 800e5a0:	2000      	movs	r0, #0
 800e5a2:	2100      	movs	r1, #0
 800e5a4:	2e00      	cmp	r6, #0
 800e5a6:	da36      	bge.n	800e616 <__kernel_rem_pio2+0x5ce>
 800e5a8:	f1bb 0f00 	cmp.w	fp, #0
 800e5ac:	d039      	beq.n	800e622 <__kernel_rem_pio2+0x5da>
 800e5ae:	4602      	mov	r2, r0
 800e5b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e5b4:	9c01      	ldr	r4, [sp, #4]
 800e5b6:	e9c4 2300 	strd	r2, r3, [r4]
 800e5ba:	4602      	mov	r2, r0
 800e5bc:	460b      	mov	r3, r1
 800e5be:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800e5c2:	f7f1 fe71 	bl	80002a8 <__aeabi_dsub>
 800e5c6:	ae4c      	add	r6, sp, #304	; 0x130
 800e5c8:	2401      	movs	r4, #1
 800e5ca:	42a5      	cmp	r5, r4
 800e5cc:	da2c      	bge.n	800e628 <__kernel_rem_pio2+0x5e0>
 800e5ce:	f1bb 0f00 	cmp.w	fp, #0
 800e5d2:	d002      	beq.n	800e5da <__kernel_rem_pio2+0x592>
 800e5d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e5d8:	4619      	mov	r1, r3
 800e5da:	9b01      	ldr	r3, [sp, #4]
 800e5dc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e5e0:	e7a5      	b.n	800e52e <__kernel_rem_pio2+0x4e6>
 800e5e2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800e5e6:	eb0d 0403 	add.w	r4, sp, r3
 800e5ea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800e5ee:	2000      	movs	r0, #0
 800e5f0:	2100      	movs	r1, #0
 800e5f2:	2d00      	cmp	r5, #0
 800e5f4:	da09      	bge.n	800e60a <__kernel_rem_pio2+0x5c2>
 800e5f6:	f1bb 0f00 	cmp.w	fp, #0
 800e5fa:	d002      	beq.n	800e602 <__kernel_rem_pio2+0x5ba>
 800e5fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e600:	4619      	mov	r1, r3
 800e602:	9b01      	ldr	r3, [sp, #4]
 800e604:	e9c3 0100 	strd	r0, r1, [r3]
 800e608:	e791      	b.n	800e52e <__kernel_rem_pio2+0x4e6>
 800e60a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e60e:	f7f1 fe4d 	bl	80002ac <__adddf3>
 800e612:	3d01      	subs	r5, #1
 800e614:	e7ed      	b.n	800e5f2 <__kernel_rem_pio2+0x5aa>
 800e616:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e61a:	f7f1 fe47 	bl	80002ac <__adddf3>
 800e61e:	3e01      	subs	r6, #1
 800e620:	e7c0      	b.n	800e5a4 <__kernel_rem_pio2+0x55c>
 800e622:	4602      	mov	r2, r0
 800e624:	460b      	mov	r3, r1
 800e626:	e7c5      	b.n	800e5b4 <__kernel_rem_pio2+0x56c>
 800e628:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800e62c:	f7f1 fe3e 	bl	80002ac <__adddf3>
 800e630:	3401      	adds	r4, #1
 800e632:	e7ca      	b.n	800e5ca <__kernel_rem_pio2+0x582>
 800e634:	e9da 8900 	ldrd	r8, r9, [sl]
 800e638:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800e63c:	9b02      	ldr	r3, [sp, #8]
 800e63e:	3b01      	subs	r3, #1
 800e640:	9302      	str	r3, [sp, #8]
 800e642:	4632      	mov	r2, r6
 800e644:	463b      	mov	r3, r7
 800e646:	4640      	mov	r0, r8
 800e648:	4649      	mov	r1, r9
 800e64a:	f7f1 fe2f 	bl	80002ac <__adddf3>
 800e64e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e652:	4602      	mov	r2, r0
 800e654:	460b      	mov	r3, r1
 800e656:	4640      	mov	r0, r8
 800e658:	4649      	mov	r1, r9
 800e65a:	f7f1 fe25 	bl	80002a8 <__aeabi_dsub>
 800e65e:	4632      	mov	r2, r6
 800e660:	463b      	mov	r3, r7
 800e662:	f7f1 fe23 	bl	80002ac <__adddf3>
 800e666:	ed9d 7b08 	vldr	d7, [sp, #32]
 800e66a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e66e:	ed8a 7b00 	vstr	d7, [sl]
 800e672:	e76e      	b.n	800e552 <__kernel_rem_pio2+0x50a>
 800e674:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e678:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800e67c:	4640      	mov	r0, r8
 800e67e:	4632      	mov	r2, r6
 800e680:	463b      	mov	r3, r7
 800e682:	4649      	mov	r1, r9
 800e684:	f7f1 fe12 	bl	80002ac <__adddf3>
 800e688:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e68c:	4602      	mov	r2, r0
 800e68e:	460b      	mov	r3, r1
 800e690:	4640      	mov	r0, r8
 800e692:	4649      	mov	r1, r9
 800e694:	f7f1 fe08 	bl	80002a8 <__aeabi_dsub>
 800e698:	4632      	mov	r2, r6
 800e69a:	463b      	mov	r3, r7
 800e69c:	f7f1 fe06 	bl	80002ac <__adddf3>
 800e6a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e6a4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e6a8:	ed84 7b00 	vstr	d7, [r4]
 800e6ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e6b0:	e755      	b.n	800e55e <__kernel_rem_pio2+0x516>
 800e6b2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e6b6:	f7f1 fdf9 	bl	80002ac <__adddf3>
 800e6ba:	3d01      	subs	r5, #1
 800e6bc:	e759      	b.n	800e572 <__kernel_rem_pio2+0x52a>
 800e6be:	9b01      	ldr	r3, [sp, #4]
 800e6c0:	9a01      	ldr	r2, [sp, #4]
 800e6c2:	601d      	str	r5, [r3, #0]
 800e6c4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800e6c8:	605c      	str	r4, [r3, #4]
 800e6ca:	609f      	str	r7, [r3, #8]
 800e6cc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800e6d0:	60d3      	str	r3, [r2, #12]
 800e6d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e6d6:	6110      	str	r0, [r2, #16]
 800e6d8:	6153      	str	r3, [r2, #20]
 800e6da:	e728      	b.n	800e52e <__kernel_rem_pio2+0x4e6>
 800e6dc:	41700000 	.word	0x41700000
 800e6e0:	3e700000 	.word	0x3e700000
 800e6e4:	00000000 	.word	0x00000000

0800e6e8 <__kernel_sin>:
 800e6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6ec:	ed2d 8b04 	vpush	{d8-d9}
 800e6f0:	eeb0 8a41 	vmov.f32	s16, s2
 800e6f4:	eef0 8a61 	vmov.f32	s17, s3
 800e6f8:	ec55 4b10 	vmov	r4, r5, d0
 800e6fc:	b083      	sub	sp, #12
 800e6fe:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e702:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e706:	9001      	str	r0, [sp, #4]
 800e708:	da06      	bge.n	800e718 <__kernel_sin+0x30>
 800e70a:	ee10 0a10 	vmov	r0, s0
 800e70e:	4629      	mov	r1, r5
 800e710:	f7f2 fa32 	bl	8000b78 <__aeabi_d2iz>
 800e714:	2800      	cmp	r0, #0
 800e716:	d051      	beq.n	800e7bc <__kernel_sin+0xd4>
 800e718:	4622      	mov	r2, r4
 800e71a:	462b      	mov	r3, r5
 800e71c:	4620      	mov	r0, r4
 800e71e:	4629      	mov	r1, r5
 800e720:	f7f1 ff7a 	bl	8000618 <__aeabi_dmul>
 800e724:	4682      	mov	sl, r0
 800e726:	468b      	mov	fp, r1
 800e728:	4602      	mov	r2, r0
 800e72a:	460b      	mov	r3, r1
 800e72c:	4620      	mov	r0, r4
 800e72e:	4629      	mov	r1, r5
 800e730:	f7f1 ff72 	bl	8000618 <__aeabi_dmul>
 800e734:	a341      	add	r3, pc, #260	; (adr r3, 800e83c <__kernel_sin+0x154>)
 800e736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e73a:	4680      	mov	r8, r0
 800e73c:	4689      	mov	r9, r1
 800e73e:	4650      	mov	r0, sl
 800e740:	4659      	mov	r1, fp
 800e742:	f7f1 ff69 	bl	8000618 <__aeabi_dmul>
 800e746:	a33f      	add	r3, pc, #252	; (adr r3, 800e844 <__kernel_sin+0x15c>)
 800e748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e74c:	f7f1 fdac 	bl	80002a8 <__aeabi_dsub>
 800e750:	4652      	mov	r2, sl
 800e752:	465b      	mov	r3, fp
 800e754:	f7f1 ff60 	bl	8000618 <__aeabi_dmul>
 800e758:	a33c      	add	r3, pc, #240	; (adr r3, 800e84c <__kernel_sin+0x164>)
 800e75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e75e:	f7f1 fda5 	bl	80002ac <__adddf3>
 800e762:	4652      	mov	r2, sl
 800e764:	465b      	mov	r3, fp
 800e766:	f7f1 ff57 	bl	8000618 <__aeabi_dmul>
 800e76a:	a33a      	add	r3, pc, #232	; (adr r3, 800e854 <__kernel_sin+0x16c>)
 800e76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e770:	f7f1 fd9a 	bl	80002a8 <__aeabi_dsub>
 800e774:	4652      	mov	r2, sl
 800e776:	465b      	mov	r3, fp
 800e778:	f7f1 ff4e 	bl	8000618 <__aeabi_dmul>
 800e77c:	a337      	add	r3, pc, #220	; (adr r3, 800e85c <__kernel_sin+0x174>)
 800e77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e782:	f7f1 fd93 	bl	80002ac <__adddf3>
 800e786:	9b01      	ldr	r3, [sp, #4]
 800e788:	4606      	mov	r6, r0
 800e78a:	460f      	mov	r7, r1
 800e78c:	b9eb      	cbnz	r3, 800e7ca <__kernel_sin+0xe2>
 800e78e:	4602      	mov	r2, r0
 800e790:	460b      	mov	r3, r1
 800e792:	4650      	mov	r0, sl
 800e794:	4659      	mov	r1, fp
 800e796:	f7f1 ff3f 	bl	8000618 <__aeabi_dmul>
 800e79a:	a325      	add	r3, pc, #148	; (adr r3, 800e830 <__kernel_sin+0x148>)
 800e79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7a0:	f7f1 fd82 	bl	80002a8 <__aeabi_dsub>
 800e7a4:	4642      	mov	r2, r8
 800e7a6:	464b      	mov	r3, r9
 800e7a8:	f7f1 ff36 	bl	8000618 <__aeabi_dmul>
 800e7ac:	4602      	mov	r2, r0
 800e7ae:	460b      	mov	r3, r1
 800e7b0:	4620      	mov	r0, r4
 800e7b2:	4629      	mov	r1, r5
 800e7b4:	f7f1 fd7a 	bl	80002ac <__adddf3>
 800e7b8:	4604      	mov	r4, r0
 800e7ba:	460d      	mov	r5, r1
 800e7bc:	ec45 4b10 	vmov	d0, r4, r5
 800e7c0:	b003      	add	sp, #12
 800e7c2:	ecbd 8b04 	vpop	{d8-d9}
 800e7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7ca:	4b1b      	ldr	r3, [pc, #108]	; (800e838 <__kernel_sin+0x150>)
 800e7cc:	ec51 0b18 	vmov	r0, r1, d8
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	f7f1 ff21 	bl	8000618 <__aeabi_dmul>
 800e7d6:	4632      	mov	r2, r6
 800e7d8:	ec41 0b19 	vmov	d9, r0, r1
 800e7dc:	463b      	mov	r3, r7
 800e7de:	4640      	mov	r0, r8
 800e7e0:	4649      	mov	r1, r9
 800e7e2:	f7f1 ff19 	bl	8000618 <__aeabi_dmul>
 800e7e6:	4602      	mov	r2, r0
 800e7e8:	460b      	mov	r3, r1
 800e7ea:	ec51 0b19 	vmov	r0, r1, d9
 800e7ee:	f7f1 fd5b 	bl	80002a8 <__aeabi_dsub>
 800e7f2:	4652      	mov	r2, sl
 800e7f4:	465b      	mov	r3, fp
 800e7f6:	f7f1 ff0f 	bl	8000618 <__aeabi_dmul>
 800e7fa:	ec53 2b18 	vmov	r2, r3, d8
 800e7fe:	f7f1 fd53 	bl	80002a8 <__aeabi_dsub>
 800e802:	a30b      	add	r3, pc, #44	; (adr r3, 800e830 <__kernel_sin+0x148>)
 800e804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e808:	4606      	mov	r6, r0
 800e80a:	460f      	mov	r7, r1
 800e80c:	4640      	mov	r0, r8
 800e80e:	4649      	mov	r1, r9
 800e810:	f7f1 ff02 	bl	8000618 <__aeabi_dmul>
 800e814:	4602      	mov	r2, r0
 800e816:	460b      	mov	r3, r1
 800e818:	4630      	mov	r0, r6
 800e81a:	4639      	mov	r1, r7
 800e81c:	f7f1 fd46 	bl	80002ac <__adddf3>
 800e820:	4602      	mov	r2, r0
 800e822:	460b      	mov	r3, r1
 800e824:	4620      	mov	r0, r4
 800e826:	4629      	mov	r1, r5
 800e828:	f7f1 fd3e 	bl	80002a8 <__aeabi_dsub>
 800e82c:	e7c4      	b.n	800e7b8 <__kernel_sin+0xd0>
 800e82e:	bf00      	nop
 800e830:	55555549 	.word	0x55555549
 800e834:	3fc55555 	.word	0x3fc55555
 800e838:	3fe00000 	.word	0x3fe00000
 800e83c:	5acfd57c 	.word	0x5acfd57c
 800e840:	3de5d93a 	.word	0x3de5d93a
 800e844:	8a2b9ceb 	.word	0x8a2b9ceb
 800e848:	3e5ae5e6 	.word	0x3e5ae5e6
 800e84c:	57b1fe7d 	.word	0x57b1fe7d
 800e850:	3ec71de3 	.word	0x3ec71de3
 800e854:	19c161d5 	.word	0x19c161d5
 800e858:	3f2a01a0 	.word	0x3f2a01a0
 800e85c:	1110f8a6 	.word	0x1110f8a6
 800e860:	3f811111 	.word	0x3f811111
 800e864:	00000000 	.word	0x00000000

0800e868 <atan>:
 800e868:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e86c:	ec55 4b10 	vmov	r4, r5, d0
 800e870:	4bc3      	ldr	r3, [pc, #780]	; (800eb80 <atan+0x318>)
 800e872:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e876:	429e      	cmp	r6, r3
 800e878:	46ab      	mov	fp, r5
 800e87a:	dd18      	ble.n	800e8ae <atan+0x46>
 800e87c:	4bc1      	ldr	r3, [pc, #772]	; (800eb84 <atan+0x31c>)
 800e87e:	429e      	cmp	r6, r3
 800e880:	dc01      	bgt.n	800e886 <atan+0x1e>
 800e882:	d109      	bne.n	800e898 <atan+0x30>
 800e884:	b144      	cbz	r4, 800e898 <atan+0x30>
 800e886:	4622      	mov	r2, r4
 800e888:	462b      	mov	r3, r5
 800e88a:	4620      	mov	r0, r4
 800e88c:	4629      	mov	r1, r5
 800e88e:	f7f1 fd0d 	bl	80002ac <__adddf3>
 800e892:	4604      	mov	r4, r0
 800e894:	460d      	mov	r5, r1
 800e896:	e006      	b.n	800e8a6 <atan+0x3e>
 800e898:	f1bb 0f00 	cmp.w	fp, #0
 800e89c:	f300 8131 	bgt.w	800eb02 <atan+0x29a>
 800e8a0:	a59b      	add	r5, pc, #620	; (adr r5, 800eb10 <atan+0x2a8>)
 800e8a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e8a6:	ec45 4b10 	vmov	d0, r4, r5
 800e8aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8ae:	4bb6      	ldr	r3, [pc, #728]	; (800eb88 <atan+0x320>)
 800e8b0:	429e      	cmp	r6, r3
 800e8b2:	dc14      	bgt.n	800e8de <atan+0x76>
 800e8b4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800e8b8:	429e      	cmp	r6, r3
 800e8ba:	dc0d      	bgt.n	800e8d8 <atan+0x70>
 800e8bc:	a396      	add	r3, pc, #600	; (adr r3, 800eb18 <atan+0x2b0>)
 800e8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8c2:	ee10 0a10 	vmov	r0, s0
 800e8c6:	4629      	mov	r1, r5
 800e8c8:	f7f1 fcf0 	bl	80002ac <__adddf3>
 800e8cc:	4baf      	ldr	r3, [pc, #700]	; (800eb8c <atan+0x324>)
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	f7f2 f932 	bl	8000b38 <__aeabi_dcmpgt>
 800e8d4:	2800      	cmp	r0, #0
 800e8d6:	d1e6      	bne.n	800e8a6 <atan+0x3e>
 800e8d8:	f04f 3aff 	mov.w	sl, #4294967295
 800e8dc:	e02b      	b.n	800e936 <atan+0xce>
 800e8de:	f000 f963 	bl	800eba8 <fabs>
 800e8e2:	4bab      	ldr	r3, [pc, #684]	; (800eb90 <atan+0x328>)
 800e8e4:	429e      	cmp	r6, r3
 800e8e6:	ec55 4b10 	vmov	r4, r5, d0
 800e8ea:	f300 80bf 	bgt.w	800ea6c <atan+0x204>
 800e8ee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800e8f2:	429e      	cmp	r6, r3
 800e8f4:	f300 80a0 	bgt.w	800ea38 <atan+0x1d0>
 800e8f8:	ee10 2a10 	vmov	r2, s0
 800e8fc:	ee10 0a10 	vmov	r0, s0
 800e900:	462b      	mov	r3, r5
 800e902:	4629      	mov	r1, r5
 800e904:	f7f1 fcd2 	bl	80002ac <__adddf3>
 800e908:	4ba0      	ldr	r3, [pc, #640]	; (800eb8c <atan+0x324>)
 800e90a:	2200      	movs	r2, #0
 800e90c:	f7f1 fccc 	bl	80002a8 <__aeabi_dsub>
 800e910:	2200      	movs	r2, #0
 800e912:	4606      	mov	r6, r0
 800e914:	460f      	mov	r7, r1
 800e916:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e91a:	4620      	mov	r0, r4
 800e91c:	4629      	mov	r1, r5
 800e91e:	f7f1 fcc5 	bl	80002ac <__adddf3>
 800e922:	4602      	mov	r2, r0
 800e924:	460b      	mov	r3, r1
 800e926:	4630      	mov	r0, r6
 800e928:	4639      	mov	r1, r7
 800e92a:	f7f1 ff9f 	bl	800086c <__aeabi_ddiv>
 800e92e:	f04f 0a00 	mov.w	sl, #0
 800e932:	4604      	mov	r4, r0
 800e934:	460d      	mov	r5, r1
 800e936:	4622      	mov	r2, r4
 800e938:	462b      	mov	r3, r5
 800e93a:	4620      	mov	r0, r4
 800e93c:	4629      	mov	r1, r5
 800e93e:	f7f1 fe6b 	bl	8000618 <__aeabi_dmul>
 800e942:	4602      	mov	r2, r0
 800e944:	460b      	mov	r3, r1
 800e946:	4680      	mov	r8, r0
 800e948:	4689      	mov	r9, r1
 800e94a:	f7f1 fe65 	bl	8000618 <__aeabi_dmul>
 800e94e:	a374      	add	r3, pc, #464	; (adr r3, 800eb20 <atan+0x2b8>)
 800e950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e954:	4606      	mov	r6, r0
 800e956:	460f      	mov	r7, r1
 800e958:	f7f1 fe5e 	bl	8000618 <__aeabi_dmul>
 800e95c:	a372      	add	r3, pc, #456	; (adr r3, 800eb28 <atan+0x2c0>)
 800e95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e962:	f7f1 fca3 	bl	80002ac <__adddf3>
 800e966:	4632      	mov	r2, r6
 800e968:	463b      	mov	r3, r7
 800e96a:	f7f1 fe55 	bl	8000618 <__aeabi_dmul>
 800e96e:	a370      	add	r3, pc, #448	; (adr r3, 800eb30 <atan+0x2c8>)
 800e970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e974:	f7f1 fc9a 	bl	80002ac <__adddf3>
 800e978:	4632      	mov	r2, r6
 800e97a:	463b      	mov	r3, r7
 800e97c:	f7f1 fe4c 	bl	8000618 <__aeabi_dmul>
 800e980:	a36d      	add	r3, pc, #436	; (adr r3, 800eb38 <atan+0x2d0>)
 800e982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e986:	f7f1 fc91 	bl	80002ac <__adddf3>
 800e98a:	4632      	mov	r2, r6
 800e98c:	463b      	mov	r3, r7
 800e98e:	f7f1 fe43 	bl	8000618 <__aeabi_dmul>
 800e992:	a36b      	add	r3, pc, #428	; (adr r3, 800eb40 <atan+0x2d8>)
 800e994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e998:	f7f1 fc88 	bl	80002ac <__adddf3>
 800e99c:	4632      	mov	r2, r6
 800e99e:	463b      	mov	r3, r7
 800e9a0:	f7f1 fe3a 	bl	8000618 <__aeabi_dmul>
 800e9a4:	a368      	add	r3, pc, #416	; (adr r3, 800eb48 <atan+0x2e0>)
 800e9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9aa:	f7f1 fc7f 	bl	80002ac <__adddf3>
 800e9ae:	4642      	mov	r2, r8
 800e9b0:	464b      	mov	r3, r9
 800e9b2:	f7f1 fe31 	bl	8000618 <__aeabi_dmul>
 800e9b6:	a366      	add	r3, pc, #408	; (adr r3, 800eb50 <atan+0x2e8>)
 800e9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9bc:	4680      	mov	r8, r0
 800e9be:	4689      	mov	r9, r1
 800e9c0:	4630      	mov	r0, r6
 800e9c2:	4639      	mov	r1, r7
 800e9c4:	f7f1 fe28 	bl	8000618 <__aeabi_dmul>
 800e9c8:	a363      	add	r3, pc, #396	; (adr r3, 800eb58 <atan+0x2f0>)
 800e9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ce:	f7f1 fc6b 	bl	80002a8 <__aeabi_dsub>
 800e9d2:	4632      	mov	r2, r6
 800e9d4:	463b      	mov	r3, r7
 800e9d6:	f7f1 fe1f 	bl	8000618 <__aeabi_dmul>
 800e9da:	a361      	add	r3, pc, #388	; (adr r3, 800eb60 <atan+0x2f8>)
 800e9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e0:	f7f1 fc62 	bl	80002a8 <__aeabi_dsub>
 800e9e4:	4632      	mov	r2, r6
 800e9e6:	463b      	mov	r3, r7
 800e9e8:	f7f1 fe16 	bl	8000618 <__aeabi_dmul>
 800e9ec:	a35e      	add	r3, pc, #376	; (adr r3, 800eb68 <atan+0x300>)
 800e9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9f2:	f7f1 fc59 	bl	80002a8 <__aeabi_dsub>
 800e9f6:	4632      	mov	r2, r6
 800e9f8:	463b      	mov	r3, r7
 800e9fa:	f7f1 fe0d 	bl	8000618 <__aeabi_dmul>
 800e9fe:	a35c      	add	r3, pc, #368	; (adr r3, 800eb70 <atan+0x308>)
 800ea00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea04:	f7f1 fc50 	bl	80002a8 <__aeabi_dsub>
 800ea08:	4632      	mov	r2, r6
 800ea0a:	463b      	mov	r3, r7
 800ea0c:	f7f1 fe04 	bl	8000618 <__aeabi_dmul>
 800ea10:	4602      	mov	r2, r0
 800ea12:	460b      	mov	r3, r1
 800ea14:	4640      	mov	r0, r8
 800ea16:	4649      	mov	r1, r9
 800ea18:	f7f1 fc48 	bl	80002ac <__adddf3>
 800ea1c:	4622      	mov	r2, r4
 800ea1e:	462b      	mov	r3, r5
 800ea20:	f7f1 fdfa 	bl	8000618 <__aeabi_dmul>
 800ea24:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ea28:	4602      	mov	r2, r0
 800ea2a:	460b      	mov	r3, r1
 800ea2c:	d14b      	bne.n	800eac6 <atan+0x25e>
 800ea2e:	4620      	mov	r0, r4
 800ea30:	4629      	mov	r1, r5
 800ea32:	f7f1 fc39 	bl	80002a8 <__aeabi_dsub>
 800ea36:	e72c      	b.n	800e892 <atan+0x2a>
 800ea38:	ee10 0a10 	vmov	r0, s0
 800ea3c:	4b53      	ldr	r3, [pc, #332]	; (800eb8c <atan+0x324>)
 800ea3e:	2200      	movs	r2, #0
 800ea40:	4629      	mov	r1, r5
 800ea42:	f7f1 fc31 	bl	80002a8 <__aeabi_dsub>
 800ea46:	4b51      	ldr	r3, [pc, #324]	; (800eb8c <atan+0x324>)
 800ea48:	4606      	mov	r6, r0
 800ea4a:	460f      	mov	r7, r1
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	4620      	mov	r0, r4
 800ea50:	4629      	mov	r1, r5
 800ea52:	f7f1 fc2b 	bl	80002ac <__adddf3>
 800ea56:	4602      	mov	r2, r0
 800ea58:	460b      	mov	r3, r1
 800ea5a:	4630      	mov	r0, r6
 800ea5c:	4639      	mov	r1, r7
 800ea5e:	f7f1 ff05 	bl	800086c <__aeabi_ddiv>
 800ea62:	f04f 0a01 	mov.w	sl, #1
 800ea66:	4604      	mov	r4, r0
 800ea68:	460d      	mov	r5, r1
 800ea6a:	e764      	b.n	800e936 <atan+0xce>
 800ea6c:	4b49      	ldr	r3, [pc, #292]	; (800eb94 <atan+0x32c>)
 800ea6e:	429e      	cmp	r6, r3
 800ea70:	da1d      	bge.n	800eaae <atan+0x246>
 800ea72:	ee10 0a10 	vmov	r0, s0
 800ea76:	4b48      	ldr	r3, [pc, #288]	; (800eb98 <atan+0x330>)
 800ea78:	2200      	movs	r2, #0
 800ea7a:	4629      	mov	r1, r5
 800ea7c:	f7f1 fc14 	bl	80002a8 <__aeabi_dsub>
 800ea80:	4b45      	ldr	r3, [pc, #276]	; (800eb98 <atan+0x330>)
 800ea82:	4606      	mov	r6, r0
 800ea84:	460f      	mov	r7, r1
 800ea86:	2200      	movs	r2, #0
 800ea88:	4620      	mov	r0, r4
 800ea8a:	4629      	mov	r1, r5
 800ea8c:	f7f1 fdc4 	bl	8000618 <__aeabi_dmul>
 800ea90:	4b3e      	ldr	r3, [pc, #248]	; (800eb8c <atan+0x324>)
 800ea92:	2200      	movs	r2, #0
 800ea94:	f7f1 fc0a 	bl	80002ac <__adddf3>
 800ea98:	4602      	mov	r2, r0
 800ea9a:	460b      	mov	r3, r1
 800ea9c:	4630      	mov	r0, r6
 800ea9e:	4639      	mov	r1, r7
 800eaa0:	f7f1 fee4 	bl	800086c <__aeabi_ddiv>
 800eaa4:	f04f 0a02 	mov.w	sl, #2
 800eaa8:	4604      	mov	r4, r0
 800eaaa:	460d      	mov	r5, r1
 800eaac:	e743      	b.n	800e936 <atan+0xce>
 800eaae:	462b      	mov	r3, r5
 800eab0:	ee10 2a10 	vmov	r2, s0
 800eab4:	4939      	ldr	r1, [pc, #228]	; (800eb9c <atan+0x334>)
 800eab6:	2000      	movs	r0, #0
 800eab8:	f7f1 fed8 	bl	800086c <__aeabi_ddiv>
 800eabc:	f04f 0a03 	mov.w	sl, #3
 800eac0:	4604      	mov	r4, r0
 800eac2:	460d      	mov	r5, r1
 800eac4:	e737      	b.n	800e936 <atan+0xce>
 800eac6:	4b36      	ldr	r3, [pc, #216]	; (800eba0 <atan+0x338>)
 800eac8:	4e36      	ldr	r6, [pc, #216]	; (800eba4 <atan+0x33c>)
 800eaca:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800eace:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800ead2:	e9da 2300 	ldrd	r2, r3, [sl]
 800ead6:	f7f1 fbe7 	bl	80002a8 <__aeabi_dsub>
 800eada:	4622      	mov	r2, r4
 800eadc:	462b      	mov	r3, r5
 800eade:	f7f1 fbe3 	bl	80002a8 <__aeabi_dsub>
 800eae2:	4602      	mov	r2, r0
 800eae4:	460b      	mov	r3, r1
 800eae6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800eaea:	f7f1 fbdd 	bl	80002a8 <__aeabi_dsub>
 800eaee:	f1bb 0f00 	cmp.w	fp, #0
 800eaf2:	4604      	mov	r4, r0
 800eaf4:	460d      	mov	r5, r1
 800eaf6:	f6bf aed6 	bge.w	800e8a6 <atan+0x3e>
 800eafa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eafe:	461d      	mov	r5, r3
 800eb00:	e6d1      	b.n	800e8a6 <atan+0x3e>
 800eb02:	a51d      	add	r5, pc, #116	; (adr r5, 800eb78 <atan+0x310>)
 800eb04:	e9d5 4500 	ldrd	r4, r5, [r5]
 800eb08:	e6cd      	b.n	800e8a6 <atan+0x3e>
 800eb0a:	bf00      	nop
 800eb0c:	f3af 8000 	nop.w
 800eb10:	54442d18 	.word	0x54442d18
 800eb14:	bff921fb 	.word	0xbff921fb
 800eb18:	8800759c 	.word	0x8800759c
 800eb1c:	7e37e43c 	.word	0x7e37e43c
 800eb20:	e322da11 	.word	0xe322da11
 800eb24:	3f90ad3a 	.word	0x3f90ad3a
 800eb28:	24760deb 	.word	0x24760deb
 800eb2c:	3fa97b4b 	.word	0x3fa97b4b
 800eb30:	a0d03d51 	.word	0xa0d03d51
 800eb34:	3fb10d66 	.word	0x3fb10d66
 800eb38:	c54c206e 	.word	0xc54c206e
 800eb3c:	3fb745cd 	.word	0x3fb745cd
 800eb40:	920083ff 	.word	0x920083ff
 800eb44:	3fc24924 	.word	0x3fc24924
 800eb48:	5555550d 	.word	0x5555550d
 800eb4c:	3fd55555 	.word	0x3fd55555
 800eb50:	2c6a6c2f 	.word	0x2c6a6c2f
 800eb54:	bfa2b444 	.word	0xbfa2b444
 800eb58:	52defd9a 	.word	0x52defd9a
 800eb5c:	3fadde2d 	.word	0x3fadde2d
 800eb60:	af749a6d 	.word	0xaf749a6d
 800eb64:	3fb3b0f2 	.word	0x3fb3b0f2
 800eb68:	fe231671 	.word	0xfe231671
 800eb6c:	3fbc71c6 	.word	0x3fbc71c6
 800eb70:	9998ebc4 	.word	0x9998ebc4
 800eb74:	3fc99999 	.word	0x3fc99999
 800eb78:	54442d18 	.word	0x54442d18
 800eb7c:	3ff921fb 	.word	0x3ff921fb
 800eb80:	440fffff 	.word	0x440fffff
 800eb84:	7ff00000 	.word	0x7ff00000
 800eb88:	3fdbffff 	.word	0x3fdbffff
 800eb8c:	3ff00000 	.word	0x3ff00000
 800eb90:	3ff2ffff 	.word	0x3ff2ffff
 800eb94:	40038000 	.word	0x40038000
 800eb98:	3ff80000 	.word	0x3ff80000
 800eb9c:	bff00000 	.word	0xbff00000
 800eba0:	0800f598 	.word	0x0800f598
 800eba4:	0800f578 	.word	0x0800f578

0800eba8 <fabs>:
 800eba8:	ec51 0b10 	vmov	r0, r1, d0
 800ebac:	ee10 2a10 	vmov	r2, s0
 800ebb0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ebb4:	ec43 2b10 	vmov	d0, r2, r3
 800ebb8:	4770      	bx	lr
 800ebba:	0000      	movs	r0, r0
 800ebbc:	0000      	movs	r0, r0
	...

0800ebc0 <floor>:
 800ebc0:	ec51 0b10 	vmov	r0, r1, d0
 800ebc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebc8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ebcc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ebd0:	2e13      	cmp	r6, #19
 800ebd2:	ee10 5a10 	vmov	r5, s0
 800ebd6:	ee10 8a10 	vmov	r8, s0
 800ebda:	460c      	mov	r4, r1
 800ebdc:	dc32      	bgt.n	800ec44 <floor+0x84>
 800ebde:	2e00      	cmp	r6, #0
 800ebe0:	da14      	bge.n	800ec0c <floor+0x4c>
 800ebe2:	a333      	add	r3, pc, #204	; (adr r3, 800ecb0 <floor+0xf0>)
 800ebe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebe8:	f7f1 fb60 	bl	80002ac <__adddf3>
 800ebec:	2200      	movs	r2, #0
 800ebee:	2300      	movs	r3, #0
 800ebf0:	f7f1 ffa2 	bl	8000b38 <__aeabi_dcmpgt>
 800ebf4:	b138      	cbz	r0, 800ec06 <floor+0x46>
 800ebf6:	2c00      	cmp	r4, #0
 800ebf8:	da57      	bge.n	800ecaa <floor+0xea>
 800ebfa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ebfe:	431d      	orrs	r5, r3
 800ec00:	d001      	beq.n	800ec06 <floor+0x46>
 800ec02:	4c2d      	ldr	r4, [pc, #180]	; (800ecb8 <floor+0xf8>)
 800ec04:	2500      	movs	r5, #0
 800ec06:	4621      	mov	r1, r4
 800ec08:	4628      	mov	r0, r5
 800ec0a:	e025      	b.n	800ec58 <floor+0x98>
 800ec0c:	4f2b      	ldr	r7, [pc, #172]	; (800ecbc <floor+0xfc>)
 800ec0e:	4137      	asrs	r7, r6
 800ec10:	ea01 0307 	and.w	r3, r1, r7
 800ec14:	4303      	orrs	r3, r0
 800ec16:	d01f      	beq.n	800ec58 <floor+0x98>
 800ec18:	a325      	add	r3, pc, #148	; (adr r3, 800ecb0 <floor+0xf0>)
 800ec1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec1e:	f7f1 fb45 	bl	80002ac <__adddf3>
 800ec22:	2200      	movs	r2, #0
 800ec24:	2300      	movs	r3, #0
 800ec26:	f7f1 ff87 	bl	8000b38 <__aeabi_dcmpgt>
 800ec2a:	2800      	cmp	r0, #0
 800ec2c:	d0eb      	beq.n	800ec06 <floor+0x46>
 800ec2e:	2c00      	cmp	r4, #0
 800ec30:	bfbe      	ittt	lt
 800ec32:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ec36:	fa43 f606 	asrlt.w	r6, r3, r6
 800ec3a:	19a4      	addlt	r4, r4, r6
 800ec3c:	ea24 0407 	bic.w	r4, r4, r7
 800ec40:	2500      	movs	r5, #0
 800ec42:	e7e0      	b.n	800ec06 <floor+0x46>
 800ec44:	2e33      	cmp	r6, #51	; 0x33
 800ec46:	dd0b      	ble.n	800ec60 <floor+0xa0>
 800ec48:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ec4c:	d104      	bne.n	800ec58 <floor+0x98>
 800ec4e:	ee10 2a10 	vmov	r2, s0
 800ec52:	460b      	mov	r3, r1
 800ec54:	f7f1 fb2a 	bl	80002ac <__adddf3>
 800ec58:	ec41 0b10 	vmov	d0, r0, r1
 800ec5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec60:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ec64:	f04f 33ff 	mov.w	r3, #4294967295
 800ec68:	fa23 f707 	lsr.w	r7, r3, r7
 800ec6c:	4207      	tst	r7, r0
 800ec6e:	d0f3      	beq.n	800ec58 <floor+0x98>
 800ec70:	a30f      	add	r3, pc, #60	; (adr r3, 800ecb0 <floor+0xf0>)
 800ec72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec76:	f7f1 fb19 	bl	80002ac <__adddf3>
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	f7f1 ff5b 	bl	8000b38 <__aeabi_dcmpgt>
 800ec82:	2800      	cmp	r0, #0
 800ec84:	d0bf      	beq.n	800ec06 <floor+0x46>
 800ec86:	2c00      	cmp	r4, #0
 800ec88:	da02      	bge.n	800ec90 <floor+0xd0>
 800ec8a:	2e14      	cmp	r6, #20
 800ec8c:	d103      	bne.n	800ec96 <floor+0xd6>
 800ec8e:	3401      	adds	r4, #1
 800ec90:	ea25 0507 	bic.w	r5, r5, r7
 800ec94:	e7b7      	b.n	800ec06 <floor+0x46>
 800ec96:	2301      	movs	r3, #1
 800ec98:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ec9c:	fa03 f606 	lsl.w	r6, r3, r6
 800eca0:	4435      	add	r5, r6
 800eca2:	4545      	cmp	r5, r8
 800eca4:	bf38      	it	cc
 800eca6:	18e4      	addcc	r4, r4, r3
 800eca8:	e7f2      	b.n	800ec90 <floor+0xd0>
 800ecaa:	2500      	movs	r5, #0
 800ecac:	462c      	mov	r4, r5
 800ecae:	e7aa      	b.n	800ec06 <floor+0x46>
 800ecb0:	8800759c 	.word	0x8800759c
 800ecb4:	7e37e43c 	.word	0x7e37e43c
 800ecb8:	bff00000 	.word	0xbff00000
 800ecbc:	000fffff 	.word	0x000fffff

0800ecc0 <scalbn>:
 800ecc0:	b570      	push	{r4, r5, r6, lr}
 800ecc2:	ec55 4b10 	vmov	r4, r5, d0
 800ecc6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ecca:	4606      	mov	r6, r0
 800eccc:	462b      	mov	r3, r5
 800ecce:	b99a      	cbnz	r2, 800ecf8 <scalbn+0x38>
 800ecd0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ecd4:	4323      	orrs	r3, r4
 800ecd6:	d036      	beq.n	800ed46 <scalbn+0x86>
 800ecd8:	4b39      	ldr	r3, [pc, #228]	; (800edc0 <scalbn+0x100>)
 800ecda:	4629      	mov	r1, r5
 800ecdc:	ee10 0a10 	vmov	r0, s0
 800ece0:	2200      	movs	r2, #0
 800ece2:	f7f1 fc99 	bl	8000618 <__aeabi_dmul>
 800ece6:	4b37      	ldr	r3, [pc, #220]	; (800edc4 <scalbn+0x104>)
 800ece8:	429e      	cmp	r6, r3
 800ecea:	4604      	mov	r4, r0
 800ecec:	460d      	mov	r5, r1
 800ecee:	da10      	bge.n	800ed12 <scalbn+0x52>
 800ecf0:	a32b      	add	r3, pc, #172	; (adr r3, 800eda0 <scalbn+0xe0>)
 800ecf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecf6:	e03a      	b.n	800ed6e <scalbn+0xae>
 800ecf8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ecfc:	428a      	cmp	r2, r1
 800ecfe:	d10c      	bne.n	800ed1a <scalbn+0x5a>
 800ed00:	ee10 2a10 	vmov	r2, s0
 800ed04:	4620      	mov	r0, r4
 800ed06:	4629      	mov	r1, r5
 800ed08:	f7f1 fad0 	bl	80002ac <__adddf3>
 800ed0c:	4604      	mov	r4, r0
 800ed0e:	460d      	mov	r5, r1
 800ed10:	e019      	b.n	800ed46 <scalbn+0x86>
 800ed12:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ed16:	460b      	mov	r3, r1
 800ed18:	3a36      	subs	r2, #54	; 0x36
 800ed1a:	4432      	add	r2, r6
 800ed1c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ed20:	428a      	cmp	r2, r1
 800ed22:	dd08      	ble.n	800ed36 <scalbn+0x76>
 800ed24:	2d00      	cmp	r5, #0
 800ed26:	a120      	add	r1, pc, #128	; (adr r1, 800eda8 <scalbn+0xe8>)
 800ed28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed2c:	da1c      	bge.n	800ed68 <scalbn+0xa8>
 800ed2e:	a120      	add	r1, pc, #128	; (adr r1, 800edb0 <scalbn+0xf0>)
 800ed30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed34:	e018      	b.n	800ed68 <scalbn+0xa8>
 800ed36:	2a00      	cmp	r2, #0
 800ed38:	dd08      	ble.n	800ed4c <scalbn+0x8c>
 800ed3a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ed3e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ed42:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ed46:	ec45 4b10 	vmov	d0, r4, r5
 800ed4a:	bd70      	pop	{r4, r5, r6, pc}
 800ed4c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ed50:	da19      	bge.n	800ed86 <scalbn+0xc6>
 800ed52:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ed56:	429e      	cmp	r6, r3
 800ed58:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ed5c:	dd0a      	ble.n	800ed74 <scalbn+0xb4>
 800ed5e:	a112      	add	r1, pc, #72	; (adr r1, 800eda8 <scalbn+0xe8>)
 800ed60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d1e2      	bne.n	800ed2e <scalbn+0x6e>
 800ed68:	a30f      	add	r3, pc, #60	; (adr r3, 800eda8 <scalbn+0xe8>)
 800ed6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed6e:	f7f1 fc53 	bl	8000618 <__aeabi_dmul>
 800ed72:	e7cb      	b.n	800ed0c <scalbn+0x4c>
 800ed74:	a10a      	add	r1, pc, #40	; (adr r1, 800eda0 <scalbn+0xe0>)
 800ed76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d0b8      	beq.n	800ecf0 <scalbn+0x30>
 800ed7e:	a10e      	add	r1, pc, #56	; (adr r1, 800edb8 <scalbn+0xf8>)
 800ed80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed84:	e7b4      	b.n	800ecf0 <scalbn+0x30>
 800ed86:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ed8a:	3236      	adds	r2, #54	; 0x36
 800ed8c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ed90:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ed94:	4620      	mov	r0, r4
 800ed96:	4b0c      	ldr	r3, [pc, #48]	; (800edc8 <scalbn+0x108>)
 800ed98:	2200      	movs	r2, #0
 800ed9a:	e7e8      	b.n	800ed6e <scalbn+0xae>
 800ed9c:	f3af 8000 	nop.w
 800eda0:	c2f8f359 	.word	0xc2f8f359
 800eda4:	01a56e1f 	.word	0x01a56e1f
 800eda8:	8800759c 	.word	0x8800759c
 800edac:	7e37e43c 	.word	0x7e37e43c
 800edb0:	8800759c 	.word	0x8800759c
 800edb4:	fe37e43c 	.word	0xfe37e43c
 800edb8:	c2f8f359 	.word	0xc2f8f359
 800edbc:	81a56e1f 	.word	0x81a56e1f
 800edc0:	43500000 	.word	0x43500000
 800edc4:	ffff3cb0 	.word	0xffff3cb0
 800edc8:	3c900000 	.word	0x3c900000

0800edcc <_init>:
 800edcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edce:	bf00      	nop
 800edd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edd2:	bc08      	pop	{r3}
 800edd4:	469e      	mov	lr, r3
 800edd6:	4770      	bx	lr

0800edd8 <_fini>:
 800edd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edda:	bf00      	nop
 800eddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edde:	bc08      	pop	{r3}
 800ede0:	469e      	mov	lr, r3
 800ede2:	4770      	bx	lr
