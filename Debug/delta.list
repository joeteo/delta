
delta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed64  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000780  0800ef18  0800ef18  0001ef18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f698  0800f698  00020228  2**0
                  CONTENTS
  4 .ARM          00000008  0800f698  0800f698  0001f698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f6a0  0800f6a0  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f6a0  0800f6a0  0001f6a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f6a4  0800f6a4  0001f6a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0800f6a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020228  2**0
                  CONTENTS
 10 .bss          00004270  20000228  20000228  00020228  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20004498  20004498  00020228  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c6ad  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000458c  00000000  00000000  0003c905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b0  00000000  00000000  00040e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014c8  00000000  00000000  00042548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000290ba  00000000  00000000  00043a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cc5a  00000000  00000000  0006caca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ebdd8  00000000  00000000  00089724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001754fc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007218  00000000  00000000  0017554c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000228 	.word	0x20000228
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800eefc 	.word	0x0800eefc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000022c 	.word	0x2000022c
 80001ec:	0800eefc 	.word	0x0800eefc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b974 	b.w	8000f08 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468e      	mov	lr, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d14d      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c46:	428a      	cmp	r2, r1
 8000c48:	4694      	mov	ip, r2
 8000c4a:	d969      	bls.n	8000d20 <__udivmoddi4+0xe8>
 8000c4c:	fab2 f282 	clz	r2, r2
 8000c50:	b152      	cbz	r2, 8000c68 <__udivmoddi4+0x30>
 8000c52:	fa01 f302 	lsl.w	r3, r1, r2
 8000c56:	f1c2 0120 	rsb	r1, r2, #32
 8000c5a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c5e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c62:	ea41 0e03 	orr.w	lr, r1, r3
 8000c66:	4094      	lsls	r4, r2
 8000c68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c6c:	0c21      	lsrs	r1, r4, #16
 8000c6e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c72:	fa1f f78c 	uxth.w	r7, ip
 8000c76:	fb08 e316 	mls	r3, r8, r6, lr
 8000c7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c7e:	fb06 f107 	mul.w	r1, r6, r7
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8e:	f080 811f 	bcs.w	8000ed0 <__udivmoddi4+0x298>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 811c 	bls.w	8000ed0 <__udivmoddi4+0x298>
 8000c98:	3e02      	subs	r6, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a5b      	subs	r3, r3, r1
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cac:	fb00 f707 	mul.w	r7, r0, r7
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	d90a      	bls.n	8000cca <__udivmoddi4+0x92>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cbc:	f080 810a 	bcs.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	f240 8107 	bls.w	8000ed4 <__udivmoddi4+0x29c>
 8000cc6:	4464      	add	r4, ip
 8000cc8:	3802      	subs	r0, #2
 8000cca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cce:	1be4      	subs	r4, r4, r7
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	b11d      	cbz	r5, 8000cdc <__udivmoddi4+0xa4>
 8000cd4:	40d4      	lsrs	r4, r2
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cdc:	4631      	mov	r1, r6
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0xc2>
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	f000 80ef 	beq.w	8000eca <__udivmoddi4+0x292>
 8000cec:	2600      	movs	r6, #0
 8000cee:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf2:	4630      	mov	r0, r6
 8000cf4:	4631      	mov	r1, r6
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	fab3 f683 	clz	r6, r3
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	d14a      	bne.n	8000d98 <__udivmoddi4+0x160>
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0xd4>
 8000d06:	4282      	cmp	r2, r0
 8000d08:	f200 80f9 	bhi.w	8000efe <__udivmoddi4+0x2c6>
 8000d0c:	1a84      	subs	r4, r0, r2
 8000d0e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	469e      	mov	lr, r3
 8000d16:	2d00      	cmp	r5, #0
 8000d18:	d0e0      	beq.n	8000cdc <__udivmoddi4+0xa4>
 8000d1a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d1e:	e7dd      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000d20:	b902      	cbnz	r2, 8000d24 <__udivmoddi4+0xec>
 8000d22:	deff      	udf	#255	; 0xff
 8000d24:	fab2 f282 	clz	r2, r2
 8000d28:	2a00      	cmp	r2, #0
 8000d2a:	f040 8092 	bne.w	8000e52 <__udivmoddi4+0x21a>
 8000d2e:	eba1 010c 	sub.w	r1, r1, ip
 8000d32:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d36:	fa1f fe8c 	uxth.w	lr, ip
 8000d3a:	2601      	movs	r6, #1
 8000d3c:	0c20      	lsrs	r0, r4, #16
 8000d3e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d42:	fb07 1113 	mls	r1, r7, r3, r1
 8000d46:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d4a:	fb0e f003 	mul.w	r0, lr, r3
 8000d4e:	4288      	cmp	r0, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x12c>
 8000d52:	eb1c 0101 	adds.w	r1, ip, r1
 8000d56:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x12a>
 8000d5c:	4288      	cmp	r0, r1
 8000d5e:	f200 80cb 	bhi.w	8000ef8 <__udivmoddi4+0x2c0>
 8000d62:	4643      	mov	r3, r8
 8000d64:	1a09      	subs	r1, r1, r0
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d6c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d70:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d74:	fb0e fe00 	mul.w	lr, lr, r0
 8000d78:	45a6      	cmp	lr, r4
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x156>
 8000d7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d84:	d202      	bcs.n	8000d8c <__udivmoddi4+0x154>
 8000d86:	45a6      	cmp	lr, r4
 8000d88:	f200 80bb 	bhi.w	8000f02 <__udivmoddi4+0x2ca>
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	eba4 040e 	sub.w	r4, r4, lr
 8000d92:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d96:	e79c      	b.n	8000cd2 <__udivmoddi4+0x9a>
 8000d98:	f1c6 0720 	rsb	r7, r6, #32
 8000d9c:	40b3      	lsls	r3, r6
 8000d9e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000da2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000da6:	fa20 f407 	lsr.w	r4, r0, r7
 8000daa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dae:	431c      	orrs	r4, r3
 8000db0:	40f9      	lsrs	r1, r7
 8000db2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000db6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dba:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dbe:	0c20      	lsrs	r0, r4, #16
 8000dc0:	fa1f fe8c 	uxth.w	lr, ip
 8000dc4:	fb09 1118 	mls	r1, r9, r8, r1
 8000dc8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dcc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dd0:	4288      	cmp	r0, r1
 8000dd2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd6:	d90b      	bls.n	8000df0 <__udivmoddi4+0x1b8>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de0:	f080 8088 	bcs.w	8000ef4 <__udivmoddi4+0x2bc>
 8000de4:	4288      	cmp	r0, r1
 8000de6:	f240 8085 	bls.w	8000ef4 <__udivmoddi4+0x2bc>
 8000dea:	f1a8 0802 	sub.w	r8, r8, #2
 8000dee:	4461      	add	r1, ip
 8000df0:	1a09      	subs	r1, r1, r0
 8000df2:	b2a4      	uxth	r4, r4
 8000df4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000df8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dfc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e00:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e04:	458e      	cmp	lr, r1
 8000e06:	d908      	bls.n	8000e1a <__udivmoddi4+0x1e2>
 8000e08:	eb1c 0101 	adds.w	r1, ip, r1
 8000e0c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e10:	d26c      	bcs.n	8000eec <__udivmoddi4+0x2b4>
 8000e12:	458e      	cmp	lr, r1
 8000e14:	d96a      	bls.n	8000eec <__udivmoddi4+0x2b4>
 8000e16:	3802      	subs	r0, #2
 8000e18:	4461      	add	r1, ip
 8000e1a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e1e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e22:	eba1 010e 	sub.w	r1, r1, lr
 8000e26:	42a1      	cmp	r1, r4
 8000e28:	46c8      	mov	r8, r9
 8000e2a:	46a6      	mov	lr, r4
 8000e2c:	d356      	bcc.n	8000edc <__udivmoddi4+0x2a4>
 8000e2e:	d053      	beq.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e30:	b15d      	cbz	r5, 8000e4a <__udivmoddi4+0x212>
 8000e32:	ebb3 0208 	subs.w	r2, r3, r8
 8000e36:	eb61 010e 	sbc.w	r1, r1, lr
 8000e3a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e3e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e42:	40f1      	lsrs	r1, r6
 8000e44:	431f      	orrs	r7, r3
 8000e46:	e9c5 7100 	strd	r7, r1, [r5]
 8000e4a:	2600      	movs	r6, #0
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	f1c2 0320 	rsb	r3, r2, #32
 8000e56:	40d8      	lsrs	r0, r3
 8000e58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e5c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e60:	4091      	lsls	r1, r2
 8000e62:	4301      	orrs	r1, r0
 8000e64:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e68:	fa1f fe8c 	uxth.w	lr, ip
 8000e6c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e70:	fb07 3610 	mls	r6, r7, r0, r3
 8000e74:	0c0b      	lsrs	r3, r1, #16
 8000e76:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e7a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e7e:	429e      	cmp	r6, r3
 8000e80:	fa04 f402 	lsl.w	r4, r4, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x260>
 8000e86:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e8e:	d22f      	bcs.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e90:	429e      	cmp	r6, r3
 8000e92:	d92d      	bls.n	8000ef0 <__udivmoddi4+0x2b8>
 8000e94:	3802      	subs	r0, #2
 8000e96:	4463      	add	r3, ip
 8000e98:	1b9b      	subs	r3, r3, r6
 8000e9a:	b289      	uxth	r1, r1
 8000e9c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ea0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ea4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ea8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eac:	428b      	cmp	r3, r1
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x28a>
 8000eb0:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000eb8:	d216      	bcs.n	8000ee8 <__udivmoddi4+0x2b0>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d914      	bls.n	8000ee8 <__udivmoddi4+0x2b0>
 8000ebe:	3e02      	subs	r6, #2
 8000ec0:	4461      	add	r1, ip
 8000ec2:	1ac9      	subs	r1, r1, r3
 8000ec4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ec8:	e738      	b.n	8000d3c <__udivmoddi4+0x104>
 8000eca:	462e      	mov	r6, r5
 8000ecc:	4628      	mov	r0, r5
 8000ece:	e705      	b.n	8000cdc <__udivmoddi4+0xa4>
 8000ed0:	4606      	mov	r6, r0
 8000ed2:	e6e3      	b.n	8000c9c <__udivmoddi4+0x64>
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	e6f8      	b.n	8000cca <__udivmoddi4+0x92>
 8000ed8:	454b      	cmp	r3, r9
 8000eda:	d2a9      	bcs.n	8000e30 <__udivmoddi4+0x1f8>
 8000edc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ee4:	3801      	subs	r0, #1
 8000ee6:	e7a3      	b.n	8000e30 <__udivmoddi4+0x1f8>
 8000ee8:	4646      	mov	r6, r8
 8000eea:	e7ea      	b.n	8000ec2 <__udivmoddi4+0x28a>
 8000eec:	4620      	mov	r0, r4
 8000eee:	e794      	b.n	8000e1a <__udivmoddi4+0x1e2>
 8000ef0:	4640      	mov	r0, r8
 8000ef2:	e7d1      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ef4:	46d0      	mov	r8, sl
 8000ef6:	e77b      	b.n	8000df0 <__udivmoddi4+0x1b8>
 8000ef8:	3b02      	subs	r3, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	e732      	b.n	8000d64 <__udivmoddi4+0x12c>
 8000efe:	4630      	mov	r0, r6
 8000f00:	e709      	b.n	8000d16 <__udivmoddi4+0xde>
 8000f02:	4464      	add	r4, ip
 8000f04:	3802      	subs	r0, #2
 8000f06:	e742      	b.n	8000d8e <__udivmoddi4+0x156>

08000f08 <__aeabi_idiv0>:
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	0000      	movs	r0, r0
	...

08000f10 <ServoConversion>:

uint16_t GP[3];

double coord[3];

void ServoConversion() {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
    GP[0] = (uint16_t)(((ThetaA + 147.9) / 0.29)+0.5);
 8000f14:	4b3a      	ldr	r3, [pc, #232]	; (8001000 <ServoConversion+0xf0>)
 8000f16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f1a:	a335      	add	r3, pc, #212	; (adr r3, 8000ff0 <ServoConversion+0xe0>)
 8000f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f20:	f7ff f9c4 	bl	80002ac <__adddf3>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4610      	mov	r0, r2
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	a332      	add	r3, pc, #200	; (adr r3, 8000ff8 <ServoConversion+0xe8>)
 8000f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f32:	f7ff fc9b 	bl	800086c <__aeabi_ddiv>
 8000f36:	4602      	mov	r2, r0
 8000f38:	460b      	mov	r3, r1
 8000f3a:	4610      	mov	r0, r2
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f04f 0200 	mov.w	r2, #0
 8000f42:	4b30      	ldr	r3, [pc, #192]	; (8001004 <ServoConversion+0xf4>)
 8000f44:	f7ff f9b2 	bl	80002ac <__adddf3>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f7ff fe3a 	bl	8000bc8 <__aeabi_d2uiz>
 8000f54:	4603      	mov	r3, r0
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	4b2b      	ldr	r3, [pc, #172]	; (8001008 <ServoConversion+0xf8>)
 8000f5a:	801a      	strh	r2, [r3, #0]
    GP[1] = (uint16_t)(((ThetaB + 147.9) / 0.29)+0.5);
 8000f5c:	4b2b      	ldr	r3, [pc, #172]	; (800100c <ServoConversion+0xfc>)
 8000f5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f62:	a323      	add	r3, pc, #140	; (adr r3, 8000ff0 <ServoConversion+0xe0>)
 8000f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f68:	f7ff f9a0 	bl	80002ac <__adddf3>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	4610      	mov	r0, r2
 8000f72:	4619      	mov	r1, r3
 8000f74:	a320      	add	r3, pc, #128	; (adr r3, 8000ff8 <ServoConversion+0xe8>)
 8000f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7a:	f7ff fc77 	bl	800086c <__aeabi_ddiv>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	460b      	mov	r3, r1
 8000f82:	4610      	mov	r0, r2
 8000f84:	4619      	mov	r1, r3
 8000f86:	f04f 0200 	mov.w	r2, #0
 8000f8a:	4b1e      	ldr	r3, [pc, #120]	; (8001004 <ServoConversion+0xf4>)
 8000f8c:	f7ff f98e 	bl	80002ac <__adddf3>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	4610      	mov	r0, r2
 8000f96:	4619      	mov	r1, r3
 8000f98:	f7ff fe16 	bl	8000bc8 <__aeabi_d2uiz>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	4b19      	ldr	r3, [pc, #100]	; (8001008 <ServoConversion+0xf8>)
 8000fa2:	805a      	strh	r2, [r3, #2]
    GP[2] = (uint16_t)(((ThetaC + 147.9) / 0.29)+0.5);
 8000fa4:	4b1a      	ldr	r3, [pc, #104]	; (8001010 <ServoConversion+0x100>)
 8000fa6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000faa:	a311      	add	r3, pc, #68	; (adr r3, 8000ff0 <ServoConversion+0xe0>)
 8000fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb0:	f7ff f97c 	bl	80002ac <__adddf3>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	4610      	mov	r0, r2
 8000fba:	4619      	mov	r1, r3
 8000fbc:	a30e      	add	r3, pc, #56	; (adr r3, 8000ff8 <ServoConversion+0xe8>)
 8000fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc2:	f7ff fc53 	bl	800086c <__aeabi_ddiv>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	4610      	mov	r0, r2
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <ServoConversion+0xf4>)
 8000fd4:	f7ff f96a 	bl	80002ac <__adddf3>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	4610      	mov	r0, r2
 8000fde:	4619      	mov	r1, r3
 8000fe0:	f7ff fdf2 	bl	8000bc8 <__aeabi_d2uiz>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	4b07      	ldr	r3, [pc, #28]	; (8001008 <ServoConversion+0xf8>)
 8000fea:	809a      	strh	r2, [r3, #4]
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	cccccccd 	.word	0xcccccccd
 8000ff4:	40627ccc 	.word	0x40627ccc
 8000ff8:	28f5c28f 	.word	0x28f5c28f
 8000ffc:	3fd28f5c 	.word	0x3fd28f5c
 8001000:	20000260 	.word	0x20000260
 8001004:	3fe00000 	.word	0x3fe00000
 8001008:	20000278 	.word	0x20000278
 800100c:	20000268 	.word	0x20000268
 8001010:	20000270 	.word	0x20000270
 8001014:	00000000 	.word	0x00000000

08001018 <ConversionFromServo>:

double* ConversionFromServo(uint16_t PP0, uint16_t PP1, uint16_t PP2) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	80fb      	strh	r3, [r7, #6]
 8001022:	460b      	mov	r3, r1
 8001024:	80bb      	strh	r3, [r7, #4]
 8001026:	4613      	mov	r3, r2
 8001028:	807b      	strh	r3, [r7, #2]
	static double theta[3];

	theta[0]=0.0;
 800102a:	4933      	ldr	r1, [pc, #204]	; (80010f8 <ConversionFromServo+0xe0>)
 800102c:	f04f 0200 	mov.w	r2, #0
 8001030:	f04f 0300 	mov.w	r3, #0
 8001034:	e9c1 2300 	strd	r2, r3, [r1]
	theta[1]=0.0;
 8001038:	492f      	ldr	r1, [pc, #188]	; (80010f8 <ConversionFromServo+0xe0>)
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	f04f 0300 	mov.w	r3, #0
 8001042:	e9c1 2302 	strd	r2, r3, [r1, #8]
	theta[2]=0.0;
 8001046:	492c      	ldr	r1, [pc, #176]	; (80010f8 <ConversionFromServo+0xe0>)
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	e9c1 2304 	strd	r2, r3, [r1, #16]

	theta[0]=(PP0*0.29)-147.9;
 8001054:	88fb      	ldrh	r3, [r7, #6]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fa74 	bl	8000544 <__aeabi_i2d>
 800105c:	a322      	add	r3, pc, #136	; (adr r3, 80010e8 <ConversionFromServo+0xd0>)
 800105e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001062:	f7ff fad9 	bl	8000618 <__aeabi_dmul>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4610      	mov	r0, r2
 800106c:	4619      	mov	r1, r3
 800106e:	a320      	add	r3, pc, #128	; (adr r3, 80010f0 <ConversionFromServo+0xd8>)
 8001070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001074:	f7ff f918 	bl	80002a8 <__aeabi_dsub>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	491e      	ldr	r1, [pc, #120]	; (80010f8 <ConversionFromServo+0xe0>)
 800107e:	e9c1 2300 	strd	r2, r3, [r1]
	theta[1]=(PP1*0.29)-147.9;
 8001082:	88bb      	ldrh	r3, [r7, #4]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fa5d 	bl	8000544 <__aeabi_i2d>
 800108a:	a317      	add	r3, pc, #92	; (adr r3, 80010e8 <ConversionFromServo+0xd0>)
 800108c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001090:	f7ff fac2 	bl	8000618 <__aeabi_dmul>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	4610      	mov	r0, r2
 800109a:	4619      	mov	r1, r3
 800109c:	a314      	add	r3, pc, #80	; (adr r3, 80010f0 <ConversionFromServo+0xd8>)
 800109e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a2:	f7ff f901 	bl	80002a8 <__aeabi_dsub>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	4913      	ldr	r1, [pc, #76]	; (80010f8 <ConversionFromServo+0xe0>)
 80010ac:	e9c1 2302 	strd	r2, r3, [r1, #8]
	theta[2]=(PP2*0.29)-147.9;
 80010b0:	887b      	ldrh	r3, [r7, #2]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fa46 	bl	8000544 <__aeabi_i2d>
 80010b8:	a30b      	add	r3, pc, #44	; (adr r3, 80010e8 <ConversionFromServo+0xd0>)
 80010ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010be:	f7ff faab 	bl	8000618 <__aeabi_dmul>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	4610      	mov	r0, r2
 80010c8:	4619      	mov	r1, r3
 80010ca:	a309      	add	r3, pc, #36	; (adr r3, 80010f0 <ConversionFromServo+0xd8>)
 80010cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d0:	f7ff f8ea 	bl	80002a8 <__aeabi_dsub>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4907      	ldr	r1, [pc, #28]	; (80010f8 <ConversionFromServo+0xe0>)
 80010da:	e9c1 2304 	strd	r2, r3, [r1, #16]

	return theta;
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <ConversionFromServo+0xe0>)

}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	28f5c28f 	.word	0x28f5c28f
 80010ec:	3fd28f5c 	.word	0x3fd28f5c
 80010f0:	cccccccd 	.word	0xcccccccd
 80010f4:	40627ccc 	.word	0x40627ccc
 80010f8:	20000298 	.word	0x20000298

080010fc <setCoordinates>:

void setCoordinates(double x, double y, double z) {
 80010fc:	b480      	push	{r7}
 80010fe:	b087      	sub	sp, #28
 8001100:	af00      	add	r7, sp, #0
 8001102:	ed87 0b04 	vstr	d0, [r7, #16]
 8001106:	ed87 1b02 	vstr	d1, [r7, #8]
 800110a:	ed87 2b00 	vstr	d2, [r7]
    C.x = x;
 800110e:	490a      	ldr	r1, [pc, #40]	; (8001138 <setCoordinates+0x3c>)
 8001110:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001114:	e9c1 2300 	strd	r2, r3, [r1]
    C.y = y;
 8001118:	4907      	ldr	r1, [pc, #28]	; (8001138 <setCoordinates+0x3c>)
 800111a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800111e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    C.z = z;
 8001122:	4905      	ldr	r1, [pc, #20]	; (8001138 <setCoordinates+0x3c>)
 8001124:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001128:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 800112c:	bf00      	nop
 800112e:	371c      	adds	r7, #28
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	20000248 	.word	0x20000248
 800113c:	00000000 	.word	0x00000000

08001140 <delta_calcAngleYZ>:


// inverse kinematics
// helper functions, calculates angle thetaA (for YZ-pane)
int delta_calcAngleYZ(double* Angle, double x0, double y0, double z0)
{
 8001140:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001144:	b096      	sub	sp, #88	; 0x58
 8001146:	af00      	add	r7, sp, #0
 8001148:	6278      	str	r0, [r7, #36]	; 0x24
 800114a:	ed87 0b06 	vstr	d0, [r7, #24]
 800114e:	ed87 1b04 	vstr	d1, [r7, #16]
 8001152:	ed87 2b02 	vstr	d2, [r7, #8]
    double y1 = -0.5 * 0.57735 * BaseRadius;  // f/2 * tan(30 deg)
 8001156:	a1d2      	add	r1, pc, #840	; (adr r1, 80014a0 <delta_calcAngleYZ+0x360>)
 8001158:	e9d1 0100 	ldrd	r0, r1, [r1]
 800115c:	a3d2      	add	r3, pc, #840	; (adr r3, 80014a8 <delta_calcAngleYZ+0x368>)
 800115e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001162:	f7ff fa59 	bl	8000618 <__aeabi_dmul>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    y0 -= 0.5 * 0.57735 * EndEffectorRadius;  // shift center to edge
 800116e:	f04f 0000 	mov.w	r0, #0
 8001172:	49c7      	ldr	r1, [pc, #796]	; (8001490 <delta_calcAngleYZ+0x350>)
 8001174:	a3c2      	add	r3, pc, #776	; (adr r3, 8001480 <delta_calcAngleYZ+0x340>)
 8001176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117a:	f7ff fa4d 	bl	8000618 <__aeabi_dmul>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001186:	f7ff f88f 	bl	80002a8 <__aeabi_dsub>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	e9c7 2304 	strd	r2, r3, [r7, #16]

// z = a + b*y
    double aV = (x0 * x0 + y0 * y0 + z0 * z0 + BicepLength * BicepLength - ForearmLength * ForearmLength - y1 * y1) / (2.0 * z0);
 8001192:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001196:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800119a:	f7ff fa3d 	bl	8000618 <__aeabi_dmul>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4690      	mov	r8, r2
 80011a4:	4699      	mov	r9, r3
 80011a6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80011ae:	f7ff fa33 	bl	8000618 <__aeabi_dmul>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	4640      	mov	r0, r8
 80011b8:	4649      	mov	r1, r9
 80011ba:	f7ff f877 	bl	80002ac <__adddf3>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4690      	mov	r8, r2
 80011c4:	4699      	mov	r9, r3
 80011c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011ce:	f7ff fa23 	bl	8000618 <__aeabi_dmul>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4640      	mov	r0, r8
 80011d8:	4649      	mov	r1, r9
 80011da:	f7ff f867 	bl	80002ac <__adddf3>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4690      	mov	r8, r2
 80011e4:	4699      	mov	r9, r3
 80011e6:	f04f 0000 	mov.w	r0, #0
 80011ea:	49aa      	ldr	r1, [pc, #680]	; (8001494 <delta_calcAngleYZ+0x354>)
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	4ba8      	ldr	r3, [pc, #672]	; (8001494 <delta_calcAngleYZ+0x354>)
 80011f2:	f7ff fa11 	bl	8000618 <__aeabi_dmul>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4640      	mov	r0, r8
 80011fc:	4649      	mov	r1, r9
 80011fe:	f7ff f855 	bl	80002ac <__adddf3>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4690      	mov	r8, r2
 8001208:	4699      	mov	r9, r3
 800120a:	f04f 0000 	mov.w	r0, #0
 800120e:	49a2      	ldr	r1, [pc, #648]	; (8001498 <delta_calcAngleYZ+0x358>)
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	4ba0      	ldr	r3, [pc, #640]	; (8001498 <delta_calcAngleYZ+0x358>)
 8001216:	f7ff f9ff 	bl	8000618 <__aeabi_dmul>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4640      	mov	r0, r8
 8001220:	4649      	mov	r1, r9
 8001222:	f7ff f841 	bl	80002a8 <__aeabi_dsub>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4690      	mov	r8, r2
 800122c:	4699      	mov	r9, r3
 800122e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001232:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001236:	f7ff f9ef 	bl	8000618 <__aeabi_dmul>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	4640      	mov	r0, r8
 8001240:	4649      	mov	r1, r9
 8001242:	f7ff f831 	bl	80002a8 <__aeabi_dsub>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4690      	mov	r8, r2
 800124c:	4699      	mov	r9, r3
 800124e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	f7ff f829 	bl	80002ac <__adddf3>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4640      	mov	r0, r8
 8001260:	4649      	mov	r1, r9
 8001262:	f7ff fb03 	bl	800086c <__aeabi_ddiv>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double bV = (y1 - y0) / z0;
 800126e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001272:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001276:	f7ff f817 	bl	80002a8 <__aeabi_dsub>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4610      	mov	r0, r2
 8001280:	4619      	mov	r1, r3
 8001282:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001286:	f7ff faf1 	bl	800086c <__aeabi_ddiv>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

    // discriminant
    double dV = -(aV + bV * y1) * (aV + bV * y1) + BicepLength * (bV * bV * BicepLength + BicepLength);
 8001292:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001296:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800129a:	f7ff f9bd 	bl	8000618 <__aeabi_dmul>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80012aa:	f7fe ffff 	bl	80002ac <__adddf3>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4614      	mov	r4, r2
 80012b4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80012b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80012bc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80012c0:	f7ff f9aa 	bl	8000618 <__aeabi_dmul>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80012d0:	f7fe ffec 	bl	80002ac <__adddf3>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4620      	mov	r0, r4
 80012da:	4629      	mov	r1, r5
 80012dc:	f7ff f99c 	bl	8000618 <__aeabi_dmul>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4614      	mov	r4, r2
 80012e6:	461d      	mov	r5, r3
 80012e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80012ec:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80012f0:	f7ff f992 	bl	8000618 <__aeabi_dmul>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4610      	mov	r0, r2
 80012fa:	4619      	mov	r1, r3
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	4b64      	ldr	r3, [pc, #400]	; (8001494 <delta_calcAngleYZ+0x354>)
 8001302:	f7ff f989 	bl	8000618 <__aeabi_dmul>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4610      	mov	r0, r2
 800130c:	4619      	mov	r1, r3
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	4b60      	ldr	r3, [pc, #384]	; (8001494 <delta_calcAngleYZ+0x354>)
 8001314:	f7fe ffca 	bl	80002ac <__adddf3>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4610      	mov	r0, r2
 800131e:	4619      	mov	r1, r3
 8001320:	f04f 0200 	mov.w	r2, #0
 8001324:	4b5b      	ldr	r3, [pc, #364]	; (8001494 <delta_calcAngleYZ+0x354>)
 8001326:	f7ff f977 	bl	8000618 <__aeabi_dmul>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4620      	mov	r0, r4
 8001330:	4629      	mov	r1, r5
 8001332:	f7fe ffbb 	bl	80002ac <__adddf3>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    if (dV < 0)
 800133e:	f04f 0200 	mov.w	r2, #0
 8001342:	f04f 0300 	mov.w	r3, #0
 8001346:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800134a:	f7ff fbd7 	bl	8000afc <__aeabi_dcmplt>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <delta_calcAngleYZ+0x21a>
    {
        return non_existing_povar_error; // non-existing povar.  return error, theta
 8001354:	f06f 0301 	mvn.w	r3, #1
 8001358:	e08d      	b.n	8001476 <delta_calcAngleYZ+0x336>
    }

    double yj = (y1 - aV * bV - sqrt(dV)) / (bV * bV + 1); // choosing outer povar
 800135a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800135e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001362:	f7ff f959 	bl	8000618 <__aeabi_dmul>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800136e:	f7fe ff9b 	bl	80002a8 <__aeabi_dsub>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4614      	mov	r4, r2
 8001378:	461d      	mov	r5, r3
 800137a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800137e:	f00c fa79 	bl	800d874 <sqrt>
 8001382:	ec53 2b10 	vmov	r2, r3, d0
 8001386:	4620      	mov	r0, r4
 8001388:	4629      	mov	r1, r5
 800138a:	f7fe ff8d 	bl	80002a8 <__aeabi_dsub>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4614      	mov	r4, r2
 8001394:	461d      	mov	r5, r3
 8001396:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800139a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800139e:	f7ff f93b 	bl	8000618 <__aeabi_dmul>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	4610      	mov	r0, r2
 80013a8:	4619      	mov	r1, r3
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	4b3b      	ldr	r3, [pc, #236]	; (800149c <delta_calcAngleYZ+0x35c>)
 80013b0:	f7fe ff7c 	bl	80002ac <__adddf3>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	4620      	mov	r0, r4
 80013ba:	4629      	mov	r1, r5
 80013bc:	f7ff fa56 	bl	800086c <__aeabi_ddiv>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    double zj = aV + bV * yj;
 80013c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80013cc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80013d0:	f7ff f922 	bl	8000618 <__aeabi_dmul>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80013dc:	f7fe ff66 	bl	80002ac <__adddf3>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    *Angle = atan2(-zj, (y1 - yj)) * 180.0 / pi + ((yj > y1) ? 180.0 : 0.0);
 80013e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ee:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80013f8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80013fc:	f7fe ff54 	bl	80002a8 <__aeabi_dsub>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	ec43 2b17 	vmov	d7, r2, r3
 8001408:	eeb0 1a47 	vmov.f32	s2, s14
 800140c:	eef0 1a67 	vmov.f32	s3, s15
 8001410:	ed97 0b00 	vldr	d0, [r7]
 8001414:	f00c fa2c 	bl	800d870 <atan2>
 8001418:	ec51 0b10 	vmov	r0, r1, d0
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <delta_calcAngleYZ+0x354>)
 8001422:	f7ff f8f9 	bl	8000618 <__aeabi_dmul>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4610      	mov	r0, r2
 800142c:	4619      	mov	r1, r3
 800142e:	a316      	add	r3, pc, #88	; (adr r3, 8001488 <delta_calcAngleYZ+0x348>)
 8001430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001434:	f7ff fa1a 	bl	800086c <__aeabi_ddiv>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4614      	mov	r4, r2
 800143e:	461d      	mov	r5, r3
 8001440:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001444:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001448:	f7ff fb76 	bl	8000b38 <__aeabi_dcmpgt>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <delta_calcAngleYZ+0x31a>
 8001452:	f04f 0000 	mov.w	r0, #0
 8001456:	490f      	ldr	r1, [pc, #60]	; (8001494 <delta_calcAngleYZ+0x354>)
 8001458:	e003      	b.n	8001462 <delta_calcAngleYZ+0x322>
 800145a:	f04f 0000 	mov.w	r0, #0
 800145e:	f04f 0100 	mov.w	r1, #0
 8001462:	4622      	mov	r2, r4
 8001464:	462b      	mov	r3, r5
 8001466:	f7fe ff21 	bl	80002ac <__adddf3>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001470:	e9c1 2300 	strd	r2, r3, [r1]

    return no_error;  // return error, theta
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3758      	adds	r7, #88	; 0x58
 800147a:	46bd      	mov	sp, r7
 800147c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001480:	b50b0f28 	.word	0xb50b0f28
 8001484:	3fd279a6 	.word	0x3fd279a6
 8001488:	54442d18 	.word	0x54442d18
 800148c:	400921fb 	.word	0x400921fb
 8001490:	403e0000 	.word	0x403e0000
 8001494:	40668000 	.word	0x40668000
 8001498:	40740000 	.word	0x40740000
 800149c:	3ff00000 	.word	0x3ff00000
 80014a0:	00000000 	.word	0x00000000
 80014a4:	4050c000 	.word	0x4050c000
 80014a8:	b50b0f28 	.word	0xb50b0f28
 80014ac:	bfd279a6 	.word	0xbfd279a6

080014b0 <inverse>:


// inverse kinematics: (x0, y0, z0) -> (thetaA, thetaB, thetaC)

int inverse()
{
 80014b0:	b5b0      	push	{r4, r5, r7, lr}
 80014b2:	ed2d 8b02 	vpush	{d8}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
    ThetaA = 0;
 80014ba:	4985      	ldr	r1, [pc, #532]	; (80016d0 <inverse+0x220>)
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	f04f 0300 	mov.w	r3, #0
 80014c4:	e9c1 2300 	strd	r2, r3, [r1]
    ThetaB = 0;
 80014c8:	4982      	ldr	r1, [pc, #520]	; (80016d4 <inverse+0x224>)
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	f04f 0300 	mov.w	r3, #0
 80014d2:	e9c1 2300 	strd	r2, r3, [r1]
    ThetaC = 0;
 80014d6:	4980      	ldr	r1, [pc, #512]	; (80016d8 <inverse+0x228>)
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	f04f 0300 	mov.w	r3, #0
 80014e0:	e9c1 2300 	strd	r2, r3, [r1]

    int error = delta_calcAngleYZ(&ThetaA, C.x, C.y, C.z);
 80014e4:	4b7d      	ldr	r3, [pc, #500]	; (80016dc <inverse+0x22c>)
 80014e6:	ed93 7b00 	vldr	d7, [r3]
 80014ea:	4b7c      	ldr	r3, [pc, #496]	; (80016dc <inverse+0x22c>)
 80014ec:	ed93 6b02 	vldr	d6, [r3, #8]
 80014f0:	4b7a      	ldr	r3, [pc, #488]	; (80016dc <inverse+0x22c>)
 80014f2:	ed93 5b04 	vldr	d5, [r3, #16]
 80014f6:	eeb0 2a45 	vmov.f32	s4, s10
 80014fa:	eef0 2a65 	vmov.f32	s5, s11
 80014fe:	eeb0 1a46 	vmov.f32	s2, s12
 8001502:	eef0 1a66 	vmov.f32	s3, s13
 8001506:	eeb0 0a47 	vmov.f32	s0, s14
 800150a:	eef0 0a67 	vmov.f32	s1, s15
 800150e:	4870      	ldr	r0, [pc, #448]	; (80016d0 <inverse+0x220>)
 8001510:	f7ff fe16 	bl	8001140 <delta_calcAngleYZ>
 8001514:	6078      	str	r0, [r7, #4]
    if (error != no_error)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <inverse+0x70>
        return no_error;
 800151c:	2300      	movs	r3, #0
 800151e:	e0cb      	b.n	80016b8 <inverse+0x208>
    error = delta_calcAngleYZ(&ThetaB, C.x * cos120 + C.y * sin120, C.y * cos120 - C.x * sin120, C.z);
 8001520:	4b6e      	ldr	r3, [pc, #440]	; (80016dc <inverse+0x22c>)
 8001522:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	4b6d      	ldr	r3, [pc, #436]	; (80016e0 <inverse+0x230>)
 800152c:	f7ff f874 	bl	8000618 <__aeabi_dmul>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4614      	mov	r4, r2
 8001536:	461d      	mov	r5, r3
 8001538:	4b68      	ldr	r3, [pc, #416]	; (80016dc <inverse+0x22c>)
 800153a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800153e:	a362      	add	r3, pc, #392	; (adr r3, 80016c8 <inverse+0x218>)
 8001540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001544:	f7ff f868 	bl	8000618 <__aeabi_dmul>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4610      	mov	r0, r2
 800154e:	4619      	mov	r1, r3
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001558:	f7ff f988 	bl	800086c <__aeabi_ddiv>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4620      	mov	r0, r4
 8001562:	4629      	mov	r1, r5
 8001564:	f7fe fea2 	bl	80002ac <__adddf3>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	ec43 2b18 	vmov	d8, r2, r3
 8001570:	4b5a      	ldr	r3, [pc, #360]	; (80016dc <inverse+0x22c>)
 8001572:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	4b59      	ldr	r3, [pc, #356]	; (80016e0 <inverse+0x230>)
 800157c:	f7ff f84c 	bl	8000618 <__aeabi_dmul>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4614      	mov	r4, r2
 8001586:	461d      	mov	r5, r3
 8001588:	4b54      	ldr	r3, [pc, #336]	; (80016dc <inverse+0x22c>)
 800158a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800158e:	a34e      	add	r3, pc, #312	; (adr r3, 80016c8 <inverse+0x218>)
 8001590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001594:	f7ff f840 	bl	8000618 <__aeabi_dmul>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4610      	mov	r0, r2
 800159e:	4619      	mov	r1, r3
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015a8:	f7ff f960 	bl	800086c <__aeabi_ddiv>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4620      	mov	r0, r4
 80015b2:	4629      	mov	r1, r5
 80015b4:	f7fe fe78 	bl	80002a8 <__aeabi_dsub>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	ec43 2b16 	vmov	d6, r2, r3
 80015c0:	4b46      	ldr	r3, [pc, #280]	; (80016dc <inverse+0x22c>)
 80015c2:	ed93 7b04 	vldr	d7, [r3, #16]
 80015c6:	eeb0 2a47 	vmov.f32	s4, s14
 80015ca:	eef0 2a67 	vmov.f32	s5, s15
 80015ce:	eeb0 1a46 	vmov.f32	s2, s12
 80015d2:	eef0 1a66 	vmov.f32	s3, s13
 80015d6:	eeb0 0a48 	vmov.f32	s0, s16
 80015da:	eef0 0a68 	vmov.f32	s1, s17
 80015de:	483d      	ldr	r0, [pc, #244]	; (80016d4 <inverse+0x224>)
 80015e0:	f7ff fdae 	bl	8001140 <delta_calcAngleYZ>
 80015e4:	6078      	str	r0, [r7, #4]
    if (error != no_error)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <inverse+0x140>
        return no_error;
 80015ec:	2300      	movs	r3, #0
 80015ee:	e063      	b.n	80016b8 <inverse+0x208>
    error = delta_calcAngleYZ(&ThetaC, C.x * cos120 - C.y * sin120, C.y * cos120 + C.x * sin120, C.z);
 80015f0:	4b3a      	ldr	r3, [pc, #232]	; (80016dc <inverse+0x22c>)
 80015f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	4b39      	ldr	r3, [pc, #228]	; (80016e0 <inverse+0x230>)
 80015fc:	f7ff f80c 	bl	8000618 <__aeabi_dmul>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4614      	mov	r4, r2
 8001606:	461d      	mov	r5, r3
 8001608:	4b34      	ldr	r3, [pc, #208]	; (80016dc <inverse+0x22c>)
 800160a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800160e:	a32e      	add	r3, pc, #184	; (adr r3, 80016c8 <inverse+0x218>)
 8001610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001614:	f7ff f800 	bl	8000618 <__aeabi_dmul>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4610      	mov	r0, r2
 800161e:	4619      	mov	r1, r3
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001628:	f7ff f920 	bl	800086c <__aeabi_ddiv>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4620      	mov	r0, r4
 8001632:	4629      	mov	r1, r5
 8001634:	f7fe fe38 	bl	80002a8 <__aeabi_dsub>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	ec43 2b18 	vmov	d8, r2, r3
 8001640:	4b26      	ldr	r3, [pc, #152]	; (80016dc <inverse+0x22c>)
 8001642:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	4b25      	ldr	r3, [pc, #148]	; (80016e0 <inverse+0x230>)
 800164c:	f7fe ffe4 	bl	8000618 <__aeabi_dmul>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4614      	mov	r4, r2
 8001656:	461d      	mov	r5, r3
 8001658:	4b20      	ldr	r3, [pc, #128]	; (80016dc <inverse+0x22c>)
 800165a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800165e:	a31a      	add	r3, pc, #104	; (adr r3, 80016c8 <inverse+0x218>)
 8001660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001664:	f7fe ffd8 	bl	8000618 <__aeabi_dmul>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4610      	mov	r0, r2
 800166e:	4619      	mov	r1, r3
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001678:	f7ff f8f8 	bl	800086c <__aeabi_ddiv>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4620      	mov	r0, r4
 8001682:	4629      	mov	r1, r5
 8001684:	f7fe fe12 	bl	80002ac <__adddf3>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	ec43 2b16 	vmov	d6, r2, r3
 8001690:	4b12      	ldr	r3, [pc, #72]	; (80016dc <inverse+0x22c>)
 8001692:	ed93 7b04 	vldr	d7, [r3, #16]
 8001696:	eeb0 2a47 	vmov.f32	s4, s14
 800169a:	eef0 2a67 	vmov.f32	s5, s15
 800169e:	eeb0 1a46 	vmov.f32	s2, s12
 80016a2:	eef0 1a66 	vmov.f32	s3, s13
 80016a6:	eeb0 0a48 	vmov.f32	s0, s16
 80016aa:	eef0 0a68 	vmov.f32	s1, s17
 80016ae:	480a      	ldr	r0, [pc, #40]	; (80016d8 <inverse+0x228>)
 80016b0:	f7ff fd46 	bl	8001140 <delta_calcAngleYZ>
 80016b4:	6078      	str	r0, [r7, #4]

    return no_error;
 80016b6:	2300      	movs	r3, #0


}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	ecbd 8b02 	vpop	{d8}
 80016c2:	bdb0      	pop	{r4, r5, r7, pc}
 80016c4:	f3af 8000 	nop.w
 80016c8:	e8584caa 	.word	0xe8584caa
 80016cc:	3ffbb67a 	.word	0x3ffbb67a
 80016d0:	20000260 	.word	0x20000260
 80016d4:	20000268 	.word	0x20000268
 80016d8:	20000270 	.word	0x20000270
 80016dc:	20000248 	.word	0x20000248
 80016e0:	bfe00000 	.word	0xbfe00000
 80016e4:	00000000 	.word	0x00000000

080016e8 <forward>:

//forward kinematics: (thetaA, thetaB, thetaC) -> (x0, y0, z0)
int forward(double theta1, double theta2, double theta3)
{
 80016e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016ec:	b0b8      	sub	sp, #224	; 0xe0
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
 80016f4:	ed87 1b08 	vstr	d1, [r7, #32]
 80016f8:	ed87 2b06 	vstr	d2, [r7, #24]

	  coord[0]=0.0;
 80016fc:	49c4      	ldr	r1, [pc, #784]	; (8001a10 <forward+0x328>)
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	f04f 0300 	mov.w	r3, #0
 8001706:	e9c1 2300 	strd	r2, r3, [r1]
	  coord[1]=0.0;
 800170a:	49c1      	ldr	r1, [pc, #772]	; (8001a10 <forward+0x328>)
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	f04f 0300 	mov.w	r3, #0
 8001714:	e9c1 2302 	strd	r2, r3, [r1, #8]
	  coord[2]=0.0;
 8001718:	49bd      	ldr	r1, [pc, #756]	; (8001a10 <forward+0x328>)
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	f04f 0300 	mov.w	r3, #0
 8001722:	e9c1 2304 	strd	r2, r3, [r1, #16]

	  double t = (BaseRadius-EndEffectorRadius)*tan30/2.0;
 8001726:	a1b4      	add	r1, pc, #720	; (adr r1, 80019f8 <forward+0x310>)
 8001728:	e9d1 0100 	ldrd	r0, r1, [r1]
 800172c:	f04f 0200 	mov.w	r2, #0
 8001730:	4bb8      	ldr	r3, [pc, #736]	; (8001a14 <forward+0x32c>)
 8001732:	f7fe fdb9 	bl	80002a8 <__aeabi_dsub>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4610      	mov	r0, r2
 800173c:	4619      	mov	r1, r3
 800173e:	a3b0      	add	r3, pc, #704	; (adr r3, 8001a00 <forward+0x318>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	f7ff f892 	bl	800086c <__aeabi_ddiv>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4610      	mov	r0, r2
 800174e:	4619      	mov	r1, r3
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001758:	f7ff f888 	bl	800086c <__aeabi_ddiv>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	  double dtr = pi/180.0;
 8001764:	a3a8      	add	r3, pc, #672	; (adr r3, 8001a08 <forward+0x320>)
 8001766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176a:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

	  theta1 *= dtr;
 800176e:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8001772:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001776:	f7fe ff4f 	bl	8000618 <__aeabi_dmul>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	  theta2 *= dtr;
 8001782:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8001786:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800178a:	f7fe ff45 	bl	8000618 <__aeabi_dmul>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	e9c7 2308 	strd	r2, r3, [r7, #32]
	  theta3 *= dtr;
 8001796:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800179a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800179e:	f7fe ff3b 	bl	8000618 <__aeabi_dmul>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	e9c7 2306 	strd	r2, r3, [r7, #24]

	  double y1 = -(t + BicepLength*cos(theta1));
 80017aa:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 80017ae:	f00b ffb3 	bl	800d718 <cos>
 80017b2:	ec51 0b10 	vmov	r0, r1, d0
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	4b97      	ldr	r3, [pc, #604]	; (8001a18 <forward+0x330>)
 80017bc:	f7fe ff2c 	bl	8000618 <__aeabi_dmul>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4610      	mov	r0, r2
 80017c6:	4619      	mov	r1, r3
 80017c8:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80017cc:	f7fe fd6e 	bl	80002ac <__adddf3>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4611      	mov	r1, r2
 80017d6:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80017da:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80017de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	  double z1 = -BicepLength*sin(theta1);
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	4b8c      	ldr	r3, [pc, #560]	; (8001a18 <forward+0x330>)
 80017e8:	4690      	mov	r8, r2
 80017ea:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80017ee:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 80017f2:	f00b ffe5 	bl	800d7c0 <sin>
 80017f6:	ec53 2b10 	vmov	r2, r3, d0
 80017fa:	4640      	mov	r0, r8
 80017fc:	4649      	mov	r1, r9
 80017fe:	f7fe ff0b 	bl	8000618 <__aeabi_dmul>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0

	  double y2 = (t + BicepLength*cos(theta2))*sin30;
 800180a:	ed97 0b08 	vldr	d0, [r7, #32]
 800180e:	f00b ff83 	bl	800d718 <cos>
 8001812:	ec51 0b10 	vmov	r0, r1, d0
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	4b7f      	ldr	r3, [pc, #508]	; (8001a18 <forward+0x330>)
 800181c:	f7fe fefc 	bl	8000618 <__aeabi_dmul>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800182c:	f7fe fd3e 	bl	80002ac <__adddf3>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	f04f 0200 	mov.w	r2, #0
 800183c:	4b77      	ldr	r3, [pc, #476]	; (8001a1c <forward+0x334>)
 800183e:	f7fe feeb 	bl	8000618 <__aeabi_dmul>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
	  double x2 = y2*tan60;
 800184a:	a36d      	add	r3, pc, #436	; (adr r3, 8001a00 <forward+0x318>)
 800184c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001850:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001854:	f7fe fee0 	bl	8000618 <__aeabi_dmul>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
	  double z2 = -BicepLength*sin(theta2);
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	4b6c      	ldr	r3, [pc, #432]	; (8001a18 <forward+0x330>)
 8001866:	4692      	mov	sl, r2
 8001868:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800186c:	ed97 0b08 	vldr	d0, [r7, #32]
 8001870:	f00b ffa6 	bl	800d7c0 <sin>
 8001874:	ec53 2b10 	vmov	r2, r3, d0
 8001878:	4650      	mov	r0, sl
 800187a:	4659      	mov	r1, fp
 800187c:	f7fe fecc 	bl	8000618 <__aeabi_dmul>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8

	  double y3 = (t + BicepLength*cos(theta3))*sin30;
 8001888:	ed97 0b06 	vldr	d0, [r7, #24]
 800188c:	f00b ff44 	bl	800d718 <cos>
 8001890:	ec51 0b10 	vmov	r0, r1, d0
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	4b5f      	ldr	r3, [pc, #380]	; (8001a18 <forward+0x330>)
 800189a:	f7fe febd 	bl	8000618 <__aeabi_dmul>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4610      	mov	r0, r2
 80018a4:	4619      	mov	r1, r3
 80018a6:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 80018aa:	f7fe fcff 	bl	80002ac <__adddf3>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4610      	mov	r0, r2
 80018b4:	4619      	mov	r1, r3
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	4b58      	ldr	r3, [pc, #352]	; (8001a1c <forward+0x334>)
 80018bc:	f7fe feac 	bl	8000618 <__aeabi_dmul>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	  double x3 = -y3*tan60;
 80018c8:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80018cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80018d0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80018d4:	a34a      	add	r3, pc, #296	; (adr r3, 8001a00 <forward+0x318>)
 80018d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018da:	4620      	mov	r0, r4
 80018dc:	4629      	mov	r1, r5
 80018de:	f7fe fe9b 	bl	8000618 <__aeabi_dmul>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	  double z3 = -BicepLength*sin(theta3);
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	4b4a      	ldr	r3, [pc, #296]	; (8001a18 <forward+0x330>)
 80018f0:	613a      	str	r2, [r7, #16]
 80018f2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	ed97 0b06 	vldr	d0, [r7, #24]
 80018fc:	f00b ff60 	bl	800d7c0 <sin>
 8001900:	ec53 2b10 	vmov	r2, r3, d0
 8001904:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001908:	f7fe fe86 	bl	8000618 <__aeabi_dmul>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

	  double dnm = (y2-y1)*x3-(y3-y1)*x2;
 8001914:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8001918:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800191c:	f7fe fcc4 	bl	80002a8 <__aeabi_dsub>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4610      	mov	r0, r2
 8001926:	4619      	mov	r1, r3
 8001928:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800192c:	f7fe fe74 	bl	8000618 <__aeabi_dmul>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4614      	mov	r4, r2
 8001936:	461d      	mov	r5, r3
 8001938:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800193c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001940:	f7fe fcb2 	bl	80002a8 <__aeabi_dsub>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8001950:	f7fe fe62 	bl	8000618 <__aeabi_dmul>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4620      	mov	r0, r4
 800195a:	4629      	mov	r1, r5
 800195c:	f7fe fca4 	bl	80002a8 <__aeabi_dsub>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88

	  double w1 = y1*y1 + z1*z1;
 8001968:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 800196c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001970:	f7fe fe52 	bl	8000618 <__aeabi_dmul>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4614      	mov	r4, r2
 800197a:	461d      	mov	r5, r3
 800197c:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001980:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8001984:	f7fe fe48 	bl	8000618 <__aeabi_dmul>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4620      	mov	r0, r4
 800198e:	4629      	mov	r1, r5
 8001990:	f7fe fc8c 	bl	80002ac <__adddf3>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	  double w2 = x2*x2 + y2*y2 + z2*z2;
 800199c:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80019a0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80019a4:	f7fe fe38 	bl	8000618 <__aeabi_dmul>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4614      	mov	r4, r2
 80019ae:	461d      	mov	r5, r3
 80019b0:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 80019b4:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80019b8:	f7fe fe2e 	bl	8000618 <__aeabi_dmul>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4620      	mov	r0, r4
 80019c2:	4629      	mov	r1, r5
 80019c4:	f7fe fc72 	bl	80002ac <__adddf3>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4614      	mov	r4, r2
 80019ce:	461d      	mov	r5, r3
 80019d0:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80019d4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80019d8:	f7fe fe1e 	bl	8000618 <__aeabi_dmul>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4620      	mov	r0, r4
 80019e2:	4629      	mov	r1, r5
 80019e4:	f7fe fc62 	bl	80002ac <__adddf3>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	  double w3 = x3*x3 + y3*y3 + z3*z3;
 80019f0:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80019f4:	e014      	b.n	8001a20 <forward+0x338>
 80019f6:	bf00      	nop
 80019f8:	00000000 	.word	0x00000000
 80019fc:	4050c000 	.word	0x4050c000
 8001a00:	e8584caa 	.word	0xe8584caa
 8001a04:	3ffbb67a 	.word	0x3ffbb67a
 8001a08:	a2529d39 	.word	0xa2529d39
 8001a0c:	3f91df46 	.word	0x3f91df46
 8001a10:	20000280 	.word	0x20000280
 8001a14:	403e0000 	.word	0x403e0000
 8001a18:	40668000 	.word	0x40668000
 8001a1c:	3fe00000 	.word	0x3fe00000
 8001a20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001a24:	f7fe fdf8 	bl	8000618 <__aeabi_dmul>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4614      	mov	r4, r2
 8001a2e:	461d      	mov	r5, r3
 8001a30:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8001a34:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001a38:	f7fe fdee 	bl	8000618 <__aeabi_dmul>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4620      	mov	r0, r4
 8001a42:	4629      	mov	r1, r5
 8001a44:	f7fe fc32 	bl	80002ac <__adddf3>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4614      	mov	r4, r2
 8001a4e:	461d      	mov	r5, r3
 8001a50:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8001a54:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001a58:	f7fe fdde 	bl	8000618 <__aeabi_dmul>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4620      	mov	r0, r4
 8001a62:	4629      	mov	r1, r5
 8001a64:	f7fe fc22 	bl	80002ac <__adddf3>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

	  // x = (a1*z + b1)/dnm
	  double a1 = (z2-z1)*(y3-y1)-(z3-z1)*(y2-y1);
 8001a70:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001a74:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001a78:	f7fe fc16 	bl	80002a8 <__aeabi_dsub>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4614      	mov	r4, r2
 8001a82:	461d      	mov	r5, r3
 8001a84:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8001a88:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001a8c:	f7fe fc0c 	bl	80002a8 <__aeabi_dsub>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4620      	mov	r0, r4
 8001a96:	4629      	mov	r1, r5
 8001a98:	f7fe fdbe 	bl	8000618 <__aeabi_dmul>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4614      	mov	r4, r2
 8001aa2:	461d      	mov	r5, r3
 8001aa4:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001aa8:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001aac:	f7fe fbfc 	bl	80002a8 <__aeabi_dsub>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4690      	mov	r8, r2
 8001ab6:	4699      	mov	r9, r3
 8001ab8:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8001abc:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001ac0:	f7fe fbf2 	bl	80002a8 <__aeabi_dsub>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4640      	mov	r0, r8
 8001aca:	4649      	mov	r1, r9
 8001acc:	f7fe fda4 	bl	8000618 <__aeabi_dmul>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	4629      	mov	r1, r5
 8001ad8:	f7fe fbe6 	bl	80002a8 <__aeabi_dsub>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	  double b1 = -((w2-w1)*(y3-y1)-(w3-w1)*(y2-y1))/2.0;
 8001ae4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001ae8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001aec:	f7fe fbdc 	bl	80002a8 <__aeabi_dsub>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4614      	mov	r4, r2
 8001af6:	461d      	mov	r5, r3
 8001af8:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8001afc:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8001b00:	f7fe fbd2 	bl	80002a8 <__aeabi_dsub>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4620      	mov	r0, r4
 8001b0a:	4629      	mov	r1, r5
 8001b0c:	f7fe fd84 	bl	8000618 <__aeabi_dmul>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4614      	mov	r4, r2
 8001b16:	461d      	mov	r5, r3
 8001b18:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001b1c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001b20:	f7fe fbc2 	bl	80002a8 <__aeabi_dsub>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4690      	mov	r8, r2
 8001b2a:	4699      	mov	r9, r3
 8001b2c:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8001b30:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001b34:	f7fe fbb8 	bl	80002a8 <__aeabi_dsub>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4640      	mov	r0, r8
 8001b3e:	4649      	mov	r1, r9
 8001b40:	f7fe fd6a 	bl	8000618 <__aeabi_dmul>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4620      	mov	r0, r4
 8001b4a:	4629      	mov	r1, r5
 8001b4c:	f7fe fbac 	bl	80002a8 <__aeabi_dsub>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	60ba      	str	r2, [r7, #8]
 8001b56:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b64:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b68:	f7fe fe80 	bl	800086c <__aeabi_ddiv>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	  // y = (a2*z + b2)/dnm;
	  double a2 = -(z2-z1)*x3+(z3-z1)*x2;
 8001b74:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001b78:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001b7c:	f7fe fb94 	bl	80002a8 <__aeabi_dsub>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	603a      	str	r2, [r7, #0]
 8001b86:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8001b90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b94:	f7fe fd40 	bl	8000618 <__aeabi_dmul>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4614      	mov	r4, r2
 8001b9e:	461d      	mov	r5, r3
 8001ba0:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001ba4:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8001ba8:	f7fe fb7e 	bl	80002a8 <__aeabi_dsub>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8001bb8:	f7fe fd2e 	bl	8000618 <__aeabi_dmul>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4620      	mov	r0, r4
 8001bc2:	4629      	mov	r1, r5
 8001bc4:	f7fe fb72 	bl	80002ac <__adddf3>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	  double b2 = ((w2-w1)*x3 - (w3-w1)*x2)/2.0;
 8001bd0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001bd4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001bd8:	f7fe fb66 	bl	80002a8 <__aeabi_dsub>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4610      	mov	r0, r2
 8001be2:	4619      	mov	r1, r3
 8001be4:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8001be8:	f7fe fd16 	bl	8000618 <__aeabi_dmul>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4614      	mov	r4, r2
 8001bf2:	461d      	mov	r5, r3
 8001bf4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8001bf8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001bfc:	f7fe fb54 	bl	80002a8 <__aeabi_dsub>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4610      	mov	r0, r2
 8001c06:	4619      	mov	r1, r3
 8001c08:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8001c0c:	f7fe fd04 	bl	8000618 <__aeabi_dmul>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4620      	mov	r0, r4
 8001c16:	4629      	mov	r1, r5
 8001c18:	f7fe fb46 	bl	80002a8 <__aeabi_dsub>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4610      	mov	r0, r2
 8001c22:	4619      	mov	r1, r3
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c2c:	f7fe fe1e 	bl	800086c <__aeabi_ddiv>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	  // a*z^2 + b*z + c = 0
	  double a = a1*a1 + a2*a2 + dnm*dnm;
 8001c38:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001c3c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001c40:	f7fe fcea 	bl	8000618 <__aeabi_dmul>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4614      	mov	r4, r2
 8001c4a:	461d      	mov	r5, r3
 8001c4c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c50:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001c54:	f7fe fce0 	bl	8000618 <__aeabi_dmul>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	4620      	mov	r0, r4
 8001c5e:	4629      	mov	r1, r5
 8001c60:	f7fe fb24 	bl	80002ac <__adddf3>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4614      	mov	r4, r2
 8001c6a:	461d      	mov	r5, r3
 8001c6c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001c70:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8001c74:	f7fe fcd0 	bl	8000618 <__aeabi_dmul>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4620      	mov	r0, r4
 8001c7e:	4629      	mov	r1, r5
 8001c80:	f7fe fb14 	bl	80002ac <__adddf3>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	  double b = 2.0*(a1*b1 + a2*(b2-y1*dnm) - z1*dnm*dnm);
 8001c8c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001c90:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001c94:	f7fe fcc0 	bl	8000618 <__aeabi_dmul>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4614      	mov	r4, r2
 8001c9e:	461d      	mov	r5, r3
 8001ca0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001ca4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001ca8:	f7fe fcb6 	bl	8000618 <__aeabi_dmul>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001cb4:	f7fe faf8 	bl	80002a8 <__aeabi_dsub>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001cc4:	f7fe fca8 	bl	8000618 <__aeabi_dmul>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4620      	mov	r0, r4
 8001cce:	4629      	mov	r1, r5
 8001cd0:	f7fe faec 	bl	80002ac <__adddf3>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4614      	mov	r4, r2
 8001cda:	461d      	mov	r5, r3
 8001cdc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001ce0:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8001ce4:	f7fe fc98 	bl	8000618 <__aeabi_dmul>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4610      	mov	r0, r2
 8001cee:	4619      	mov	r1, r3
 8001cf0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001cf4:	f7fe fc90 	bl	8000618 <__aeabi_dmul>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4620      	mov	r0, r4
 8001cfe:	4629      	mov	r1, r5
 8001d00:	f7fe fad2 	bl	80002a8 <__aeabi_dsub>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	4610      	mov	r0, r2
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	f7fe facc 	bl	80002ac <__adddf3>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	  double c = (b2-y1*dnm)*(b2-y1*dnm) + b1*b1 + dnm*dnm*(z1*z1 - ForearmLength*ForearmLength);
 8001d1c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001d20:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001d24:	f7fe fc78 	bl	8000618 <__aeabi_dmul>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001d30:	f7fe faba 	bl	80002a8 <__aeabi_dsub>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4614      	mov	r4, r2
 8001d3a:	461d      	mov	r5, r3
 8001d3c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001d40:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001d44:	f7fe fc68 	bl	8000618 <__aeabi_dmul>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001d50:	f7fe faaa 	bl	80002a8 <__aeabi_dsub>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4620      	mov	r0, r4
 8001d5a:	4629      	mov	r1, r5
 8001d5c:	f7fe fc5c 	bl	8000618 <__aeabi_dmul>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4614      	mov	r4, r2
 8001d66:	461d      	mov	r5, r3
 8001d68:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001d6c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001d70:	f7fe fc52 	bl	8000618 <__aeabi_dmul>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4620      	mov	r0, r4
 8001d7a:	4629      	mov	r1, r5
 8001d7c:	f7fe fa96 	bl	80002ac <__adddf3>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4614      	mov	r4, r2
 8001d86:	461d      	mov	r5, r3
 8001d88:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001d8c:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8001d90:	f7fe fc42 	bl	8000618 <__aeabi_dmul>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	4690      	mov	r8, r2
 8001d9a:	4699      	mov	r9, r3
 8001d9c:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001da0:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8001da4:	f7fe fc38 	bl	8000618 <__aeabi_dmul>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4692      	mov	sl, r2
 8001dae:	469b      	mov	fp, r3
 8001db0:	f04f 0000 	mov.w	r0, #0
 8001db4:	4955      	ldr	r1, [pc, #340]	; (8001f0c <forward+0x824>)
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	4b54      	ldr	r3, [pc, #336]	; (8001f0c <forward+0x824>)
 8001dbc:	f7fe fc2c 	bl	8000618 <__aeabi_dmul>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4650      	mov	r0, sl
 8001dc6:	4659      	mov	r1, fp
 8001dc8:	f7fe fa6e 	bl	80002a8 <__aeabi_dsub>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4640      	mov	r0, r8
 8001dd2:	4649      	mov	r1, r9
 8001dd4:	f7fe fc20 	bl	8000618 <__aeabi_dmul>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4620      	mov	r0, r4
 8001dde:	4629      	mov	r1, r5
 8001de0:	f7fe fa64 	bl	80002ac <__adddf3>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	  // discriminant
	  double d = b*b - 4.0*a*c;
 8001dec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001df0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001df4:	f7fe fc10 	bl	8000618 <__aeabi_dmul>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4614      	mov	r4, r2
 8001dfe:	461d      	mov	r5, r3
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	4b42      	ldr	r3, [pc, #264]	; (8001f10 <forward+0x828>)
 8001e06:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001e0a:	f7fe fc05 	bl	8000618 <__aeabi_dmul>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4610      	mov	r0, r2
 8001e14:	4619      	mov	r1, r3
 8001e16:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001e1a:	f7fe fbfd 	bl	8000618 <__aeabi_dmul>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	4620      	mov	r0, r4
 8001e24:	4629      	mov	r1, r5
 8001e26:	f7fe fa3f 	bl	80002a8 <__aeabi_dsub>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	  if (d < 0.0) return non_existing_povar_error; // non-existing povar. return error,x,y,z
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	f04f 0300 	mov.w	r3, #0
 8001e3a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001e3e:	f7fe fe5d 	bl	8000afc <__aeabi_dcmplt>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d002      	beq.n	8001e4e <forward+0x766>
 8001e48:	f06f 0301 	mvn.w	r3, #1
 8001e4c:	e058      	b.n	8001f00 <forward+0x818>



	  coord[2] = -0.5*(b+sqrt(d))/a;
 8001e4e:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8001e52:	f00b fd0f 	bl	800d874 <sqrt>
 8001e56:	ec51 0b10 	vmov	r0, r1, d0
 8001e5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001e5e:	f7fe fa25 	bl	80002ac <__adddf3>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4610      	mov	r0, r2
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f04f 0200 	mov.w	r2, #0
 8001e6e:	4b29      	ldr	r3, [pc, #164]	; (8001f14 <forward+0x82c>)
 8001e70:	f7fe fbd2 	bl	8000618 <__aeabi_dmul>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4610      	mov	r0, r2
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001e80:	f7fe fcf4 	bl	800086c <__aeabi_ddiv>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4923      	ldr	r1, [pc, #140]	; (8001f18 <forward+0x830>)
 8001e8a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	  coord[0] = (a1*coord[2] + b1)/dnm;
 8001e8e:	4b22      	ldr	r3, [pc, #136]	; (8001f18 <forward+0x830>)
 8001e90:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001e94:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001e98:	f7fe fbbe 	bl	8000618 <__aeabi_dmul>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001ea8:	f7fe fa00 	bl	80002ac <__adddf3>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001eb8:	f7fe fcd8 	bl	800086c <__aeabi_ddiv>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	4915      	ldr	r1, [pc, #84]	; (8001f18 <forward+0x830>)
 8001ec2:	e9c1 2300 	strd	r2, r3, [r1]
	  coord[1] = (a2*coord[2] + b2)/dnm;
 8001ec6:	4b14      	ldr	r3, [pc, #80]	; (8001f18 <forward+0x830>)
 8001ec8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001ecc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001ed0:	f7fe fba2 	bl	8000618 <__aeabi_dmul>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001ee0:	f7fe f9e4 	bl	80002ac <__adddf3>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4610      	mov	r0, r2
 8001eea:	4619      	mov	r1, r3
 8001eec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001ef0:	f7fe fcbc 	bl	800086c <__aeabi_ddiv>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4907      	ldr	r1, [pc, #28]	; (8001f18 <forward+0x830>)
 8001efa:	e9c1 2302 	strd	r2, r3, [r1, #8]

	  return no_error;
 8001efe:	2300      	movs	r3, #0
//    C.x = -0.5 * (bV + sqrt(dV)) / aV;
//    C.y = (a1 * C.z + b1) / dnm;
//
//
//    return no_error;
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	37e0      	adds	r7, #224	; 0xe0
 8001f04:	46bd      	mov	sp, r7
 8001f06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40740000 	.word	0x40740000
 8001f10:	40100000 	.word	0x40100000
 8001f14:	bfe00000 	.word	0xbfe00000
 8001f18:	20000280 	.word	0x20000280

08001f1c <_write>:

extern osMessageQId setQueueHandle;

extern uint16_t GP[3];

int _write(int file, char* p, int len){
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)p, len, 10);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	230a      	movs	r3, #10
 8001f2e:	68b9      	ldr	r1, [r7, #8]
 8001f30:	4803      	ldr	r0, [pc, #12]	; (8001f40 <_write+0x24>)
 8001f32:	f004 fa3e 	bl	80063b2 <HAL_UART_Transmit>
	return len;
 8001f36:	687b      	ldr	r3, [r7, #4]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	2000068c 	.word	0x2000068c

08001f44 <cmd_torque>:
};



int cmd_torque(int len, char* cmd, queueMessage* smsg)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]

	if(len == 1) {
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d10f      	bne.n	8001f76 <cmd_torque+0x32>
		if (*cmd=='1') {
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b31      	cmp	r3, #49	; 0x31
 8001f5c:	d103      	bne.n	8001f66 <cmd_torque+0x22>
			syncWriteTorqueOnOff(ON);
 8001f5e:	2001      	movs	r0, #1
 8001f60:	f000 fd9d 	bl	8002a9e <syncWriteTorqueOnOff>
 8001f64:	e00a      	b.n	8001f7c <cmd_torque+0x38>
		}
		else if (*cmd=='0') {
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b30      	cmp	r3, #48	; 0x30
 8001f6c:	d106      	bne.n	8001f7c <cmd_torque+0x38>
			syncWriteTorqueOnOff(OFF);
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f000 fd95 	bl	8002a9e <syncWriteTorqueOnOff>
 8001f74:	e002      	b.n	8001f7c <cmd_torque+0x38>
		}
	}else {
		printf("wrong command pattern!");
 8001f76:	4804      	ldr	r0, [pc, #16]	; (8001f88 <cmd_torque+0x44>)
 8001f78:	f009 f9e8 	bl	800b34c <iprintf>
	}

	return 0;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	0800ef18 	.word	0x0800ef18

08001f8c <cmd_pump>:

int cmd_pump(int len, char* cmd, queueMessage* smsg)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
	if(len == 1) {
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d10d      	bne.n	8001fba <cmd_pump+0x2e>
		if (*cmd=='1') {
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	2b31      	cmp	r3, #49	; 0x31
 8001fa4:	d102      	bne.n	8001fac <cmd_pump+0x20>
			pumpOn();
 8001fa6:	f000 f9b9 	bl	800231c <pumpOn>
 8001faa:	e009      	b.n	8001fc0 <cmd_pump+0x34>
		}
		else if (*cmd=='0') {
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b30      	cmp	r3, #48	; 0x30
 8001fb2:	d105      	bne.n	8001fc0 <cmd_pump+0x34>
			pumpOff();
 8001fb4:	f000 f9be 	bl	8002334 <pumpOff>
 8001fb8:	e002      	b.n	8001fc0 <cmd_pump+0x34>
		}
	}else {
		printf("wrong command pattern!");
 8001fba:	4804      	ldr	r0, [pc, #16]	; (8001fcc <cmd_pump+0x40>)
 8001fbc:	f009 f9c6 	bl	800b34c <iprintf>
	}

	return 0;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	0800ef18 	.word	0x0800ef18

08001fd0 <cmd_conveyorBelt>:

int cmd_conveyorBelt(int len, char* cmd, queueMessage* smsg)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
	if(len == 2) {
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d113      	bne.n	800200a <cmd_conveyorBelt+0x3a>
		if (*cmd=='1') {
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b31      	cmp	r3, #49	; 0x31
 8001fe8:	d11c      	bne.n	8002024 <cmd_conveyorBelt+0x54>
			if (cmd[1]=='R') {
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	3301      	adds	r3, #1
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b52      	cmp	r3, #82	; 0x52
 8001ff2:	d102      	bne.n	8001ffa <cmd_conveyorBelt+0x2a>
				cvbeltTurnRight();
 8001ff4:	f000 f9aa 	bl	800234c <cvbeltTurnRight>
 8001ff8:	e014      	b.n	8002024 <cmd_conveyorBelt+0x54>
			} else if (cmd[1]=='L'){
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b4c      	cmp	r3, #76	; 0x4c
 8002002:	d10f      	bne.n	8002024 <cmd_conveyorBelt+0x54>
				cvbeltTurnLeft();
 8002004:	f000 f9b0 	bl	8002368 <cvbeltTurnLeft>
 8002008:	e00c      	b.n	8002024 <cmd_conveyorBelt+0x54>
			}
		}
	}else if(len == 1){
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d106      	bne.n	800201e <cmd_conveyorBelt+0x4e>
		if (*cmd=='0') {
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b30      	cmp	r3, #48	; 0x30
 8002016:	d105      	bne.n	8002024 <cmd_conveyorBelt+0x54>
				cvbeltStop();
 8002018:	f000 f9b4 	bl	8002384 <cvbeltStop>
 800201c:	e002      	b.n	8002024 <cmd_conveyorBelt+0x54>
		}
	}else {
		printf("wrong command pattern!");
 800201e:	4804      	ldr	r0, [pc, #16]	; (8002030 <cmd_conveyorBelt+0x60>)
 8002020:	f009 f994 	bl	800b34c <iprintf>
	}

	return 0;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	0800ef18 	.word	0x0800ef18

08002034 <cmd_pick>:

int cmd_pick(int len, char* cmd, queueMessage* smsg)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
	downEndEffector(smsg);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 f949 	bl	80022d8 <downEndEffector>
	pumpOn();
 8002046:	f000 f969 	bl	800231c <pumpOn>
	servoDelay(1000);
 800204a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800204e:	f000 f9ed 	bl	800242c <servoDelay>
	upEndEffector(smsg);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f91e 	bl	8002294 <upEndEffector>
	return 0;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <cmd_throw>:

int cmd_throw(int len, char* cmd, queueMessage* smsg)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]

	smsg->mX=0;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
	smsg->mY=-140;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a0b      	ldr	r2, [pc, #44]	; (80020a8 <cmd_throw+0x44>)
 800207c:	605a      	str	r2, [r3, #4]
	smsg->mZ=-230;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a0a      	ldr	r2, [pc, #40]	; (80020ac <cmd_throw+0x48>)
 8002082:	609a      	str	r2, [r3, #8]
	smsg->maxSpeed=1000;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800208a:	60da      	str	r2, [r3, #12]

	osMessagePut(setQueueHandle, (uint32_t)smsg, 100);
 800208c:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <cmd_throw+0x4c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	2264      	movs	r2, #100	; 0x64
 8002094:	4618      	mov	r0, r3
 8002096:	f005 fd69 	bl	8007b6c <osMessagePut>
	pumpOff();
 800209a:	f000 f94b 	bl	8002334 <pumpOff>


	return 0;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	c30c0000 	.word	0xc30c0000
 80020ac:	c3660000 	.word	0xc3660000
 80020b0:	200002bc 	.word	0x200002bc

080020b4 <cmd_defaultPos>:

int cmd_defaultPos(int len, char* cmd, queueMessage* smsg)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
	upEndEffector(smsg);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 f8e7 	bl	8002294 <upEndEffector>
	return 0;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <cmd_moveTo>:

int cmd_moveTo(int len, char* cmd, queueMessage* smsg)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b088      	sub	sp, #32
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]

	if(len == 12){
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2b0c      	cmp	r3, #12
 80020e0:	f040 8087 	bne.w	80021f2 <cmd_moveTo+0x122>

		float tempX = (cmd[1]-'0')*100 + (cmd[2]-'0')*10 + (cmd[3]-'0')*1 ;
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	3301      	adds	r3, #1
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	3b30      	subs	r3, #48	; 0x30
 80020ec:	2264      	movs	r2, #100	; 0x64
 80020ee:	fb02 f103 	mul.w	r1, r2, r3
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	3302      	adds	r3, #2
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	18ca      	adds	r2, r1, r3
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	3303      	adds	r3, #3
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	3b30      	subs	r3, #48	; 0x30
 800210e:	4413      	add	r3, r2
 8002110:	ee07 3a90 	vmov	s15, r3
 8002114:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002118:	edc7 7a07 	vstr	s15, [r7, #28]
		if(cmd[0]=='-'){
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b2d      	cmp	r3, #45	; 0x2d
 8002122:	d105      	bne.n	8002130 <cmd_moveTo+0x60>
			tempX = -tempX;
 8002124:	edd7 7a07 	vldr	s15, [r7, #28]
 8002128:	eef1 7a67 	vneg.f32	s15, s15
 800212c:	edc7 7a07 	vstr	s15, [r7, #28]
		}
		float tempY = (cmd[5]-'0')*100 + (cmd[6]-'0')*10 + (cmd[7]-'0')*1 ;
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	3305      	adds	r3, #5
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	3b30      	subs	r3, #48	; 0x30
 8002138:	2264      	movs	r2, #100	; 0x64
 800213a:	fb02 f103 	mul.w	r1, r2, r3
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	3306      	adds	r3, #6
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	18ca      	adds	r2, r1, r3
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	3307      	adds	r3, #7
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	3b30      	subs	r3, #48	; 0x30
 800215a:	4413      	add	r3, r2
 800215c:	ee07 3a90 	vmov	s15, r3
 8002160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002164:	edc7 7a06 	vstr	s15, [r7, #24]
		if(cmd[4]=='-'){
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	3304      	adds	r3, #4
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b2d      	cmp	r3, #45	; 0x2d
 8002170:	d105      	bne.n	800217e <cmd_moveTo+0xae>
			tempY = -tempY;
 8002172:	edd7 7a06 	vldr	s15, [r7, #24]
 8002176:	eef1 7a67 	vneg.f32	s15, s15
 800217a:	edc7 7a06 	vstr	s15, [r7, #24]
		}
		float tempZ = (cmd[9]-'0')*100 + (cmd[10]-'0')*10 + (cmd[11]-'0')*1 ;
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	3309      	adds	r3, #9
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	3b30      	subs	r3, #48	; 0x30
 8002186:	2264      	movs	r2, #100	; 0x64
 8002188:	fb02 f103 	mul.w	r1, r2, r3
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	330a      	adds	r3, #10
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002196:	4613      	mov	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	18ca      	adds	r2, r1, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	330b      	adds	r3, #11
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	3b30      	subs	r3, #48	; 0x30
 80021a8:	4413      	add	r3, r2
 80021aa:	ee07 3a90 	vmov	s15, r3
 80021ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021b2:	edc7 7a05 	vstr	s15, [r7, #20]
		if(cmd[8]=='-'){
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	3308      	adds	r3, #8
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	2b2d      	cmp	r3, #45	; 0x2d
 80021be:	d105      	bne.n	80021cc <cmd_moveTo+0xfc>
			tempZ = -tempZ;
 80021c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80021c4:	eef1 7a67 	vneg.f32	s15, s15
 80021c8:	edc7 7a05 	vstr	s15, [r7, #20]
		}

		smsg->mX=tempX;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69fa      	ldr	r2, [r7, #28]
 80021d0:	601a      	str	r2, [r3, #0]
		smsg->mY=tempY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	605a      	str	r2, [r3, #4]
		smsg->mZ=tempZ;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	609a      	str	r2, [r3, #8]

		smsg->maxSpeed=100;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2264      	movs	r2, #100	; 0x64
 80021e2:	60da      	str	r2, [r3, #12]


		osMessagePut(setQueueHandle, (uint32_t)smsg, 100);
 80021e4:	4b05      	ldr	r3, [pc, #20]	; (80021fc <cmd_moveTo+0x12c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	2264      	movs	r2, #100	; 0x64
 80021ec:	4618      	mov	r0, r3
 80021ee:	f005 fcbd 	bl	8007b6c <osMessagePut>
	}

	return 0;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3720      	adds	r7, #32
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	200002bc 	.word	0x200002bc

08002200 <cmd_read>:

int cmd_read(int len, char* cmd, queueMessage* smsg)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
	return 1;
 800220c:	2301      	movs	r3, #1
}
 800220e:	4618      	mov	r0, r3
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
	...

0800221c <cmd_handler>:


int cmd_handler(char* cmd, queueMessage* smsg)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
	struct Command_List* pCmdList = CmdList;
 8002226:	4b19      	ldr	r3, [pc, #100]	; (800228c <cmd_handler+0x70>)
 8002228:	617b      	str	r3, [r7, #20]

	uint8_t command_found = 0;
 800222a:	2300      	movs	r3, #0
 800222c:	74fb      	strb	r3, [r7, #19]
	int read_command_found = 0;
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]

	int len = strlen(cmd)-1;
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7fd ffdc 	bl	80001f0 <strlen>
 8002238:	4603      	mov	r3, r0
 800223a:	3b01      	subs	r3, #1
 800223c:	60bb      	str	r3, [r7, #8]


	while (pCmdList->cmd)
 800223e:	e015      	b.n	800226c <cmd_handler+0x50>
	{
		if (pCmdList->cmd==cmd[0])
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	781a      	ldrb	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	429a      	cmp	r2, r3
 800224a:	d10c      	bne.n	8002266 <cmd_handler+0x4a>
		{
			command_found = 1;
 800224c:	2301      	movs	r3, #1
 800224e:	74fb      	strb	r3, [r7, #19]
			read_command_found = pCmdList->func(len, ++cmd, smsg);
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	3201      	adds	r2, #1
 8002258:	607a      	str	r2, [r7, #4]
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	68b8      	ldr	r0, [r7, #8]
 8002260:	4798      	blx	r3
 8002262:	60f8      	str	r0, [r7, #12]
			break;
 8002264:	e006      	b.n	8002274 <cmd_handler+0x58>
		}
		++pCmdList;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	3308      	adds	r3, #8
 800226a:	617b      	str	r3, [r7, #20]
	while (pCmdList->cmd)
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1e5      	bne.n	8002240 <cmd_handler+0x24>
	}

	if (command_found == 0) printf("command not found!\n");
 8002274:	7cfb      	ldrb	r3, [r7, #19]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d102      	bne.n	8002280 <cmd_handler+0x64>
 800227a:	4805      	ldr	r0, [pc, #20]	; (8002290 <cmd_handler+0x74>)
 800227c:	f009 f8ec 	bl	800b458 <puts>

	return read_command_found;
 8002280:	68fb      	ldr	r3, [r7, #12]
}
 8002282:	4618      	mov	r0, r3
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000000 	.word	0x20000000
 8002290:	0800ef30 	.word	0x0800ef30

08002294 <upEndEffector>:



void upEndEffector(queueMessage* smsg){
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]

	smsg->mX=0;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f04f 0200 	mov.w	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
	smsg->mY=0;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	605a      	str	r2, [r3, #4]
	smsg->mZ=-256.984;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a08      	ldr	r2, [pc, #32]	; (80022d0 <upEndEffector+0x3c>)
 80022b0:	609a      	str	r2, [r3, #8]

	smsg->maxSpeed=100;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2264      	movs	r2, #100	; 0x64
 80022b6:	60da      	str	r2, [r3, #12]

	osMessagePut(setQueueHandle, (uint32_t)smsg, 100);
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <upEndEffector+0x40>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	2264      	movs	r2, #100	; 0x64
 80022c0:	4618      	mov	r0, r3
 80022c2:	f005 fc53 	bl	8007b6c <osMessagePut>

//	setGoalPosition(AX_BROADCAST_ID, 510);
//	servoDelay(1000);
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	c3807df4 	.word	0xc3807df4
 80022d4:	200002bc 	.word	0x200002bc

080022d8 <downEndEffector>:

void downEndEffector(queueMessage* smsg){
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]


	smsg->mX=0;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f04f 0200 	mov.w	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
	smsg->mY=0;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f04f 0200 	mov.w	r2, #0
 80022ee:	605a      	str	r2, [r3, #4]
	smsg->mZ=-407.891;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a08      	ldr	r2, [pc, #32]	; (8002314 <downEndEffector+0x3c>)
 80022f4:	609a      	str	r2, [r3, #8]

	smsg->maxSpeed=100;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2264      	movs	r2, #100	; 0x64
 80022fa:	60da      	str	r2, [r3, #12]

	osMessagePut(setQueueHandle, (uint32_t)smsg, 100);
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <downEndEffector+0x40>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	2264      	movs	r2, #100	; 0x64
 8002304:	4618      	mov	r0, r3
 8002306:	f005 fc31 	bl	8007b6c <osMessagePut>
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	c3cbf20c 	.word	0xc3cbf20c
 8002318:	200002bc 	.word	0x200002bc

0800231c <pumpOn>:
}
void torqueOff(){
	syncWriteTorqueOnOff(OFF);
}

void pumpOn(){
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 0);
 8002320:	2200      	movs	r2, #0
 8002322:	2101      	movs	r1, #1
 8002324:	4802      	ldr	r0, [pc, #8]	; (8002330 <pumpOn+0x14>)
 8002326:	f002 fd9b 	bl	8004e60 <HAL_GPIO_WritePin>
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40021800 	.word	0x40021800

08002334 <pumpOff>:

void pumpOff(){
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 1);
 8002338:	2201      	movs	r2, #1
 800233a:	2101      	movs	r1, #1
 800233c:	4802      	ldr	r0, [pc, #8]	; (8002348 <pumpOff+0x14>)
 800233e:	f002 fd8f 	bl	8004e60 <HAL_GPIO_WritePin>
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40021800 	.word	0x40021800

0800234c <cvbeltTurnRight>:

void cvbeltTurnRight(){
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
	setEndless(AX_CONVEYOR_ID, ON);
 8002350:	2101      	movs	r1, #1
 8002352:	2003      	movs	r0, #3
 8002354:	f000 fc37 	bl	8002bc6 <setEndless>
	turn(AX_CONVEYOR_ID, RIGHT, 600);
 8002358:	f44f 7216 	mov.w	r2, #600	; 0x258
 800235c:	2101      	movs	r1, #1
 800235e:	2003      	movs	r0, #3
 8002360:	f000 fd24 	bl	8002dac <turn>
}
 8002364:	bf00      	nop
 8002366:	bd80      	pop	{r7, pc}

08002368 <cvbeltTurnLeft>:

void cvbeltTurnLeft(){
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
	setEndless(AX_CONVEYOR_ID, ON);
 800236c:	2101      	movs	r1, #1
 800236e:	2003      	movs	r0, #3
 8002370:	f000 fc29 	bl	8002bc6 <setEndless>
	turn(AX_CONVEYOR_ID, LEFT, 600);
 8002374:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002378:	2100      	movs	r1, #0
 800237a:	2003      	movs	r0, #3
 800237c:	f000 fd16 	bl	8002dac <turn>
}
 8002380:	bf00      	nop
 8002382:	bd80      	pop	{r7, pc}

08002384 <cvbeltStop>:

void cvbeltStop(){
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
	onOffTorque(AX_CONVEYOR_ID, OFF);
 8002388:	2100      	movs	r1, #0
 800238a:	2003      	movs	r0, #3
 800238c:	f000 fb1a 	bl	80029c4 <onOffTorque>
}
 8002390:	bf00      	nop
 8002392:	bd80      	pop	{r7, pc}
 8002394:	0000      	movs	r0, r0
	...

08002398 <deltaInit>:

void deltaInit(){
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
	setMovingSpeed(AX_BROADCAST_ID, 100);
 800239c:	2164      	movs	r1, #100	; 0x64
 800239e:	20fe      	movs	r0, #254	; 0xfe
 80023a0:	f000 f870 	bl	8002484 <setMovingSpeed>
	//upEndEffector();

	setCoordinates(0,0,-256.984);
 80023a4:	ed9f 2b0c 	vldr	d2, [pc, #48]	; 80023d8 <deltaInit+0x40>
 80023a8:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 80023e0 <deltaInit+0x48>
 80023ac:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 80023e0 <deltaInit+0x48>
 80023b0:	f7fe fea4 	bl	80010fc <setCoordinates>
	inverse();
 80023b4:	f7ff f87c 	bl	80014b0 <inverse>
	ServoConversion();
 80023b8:	f7fe fdaa 	bl	8000f10 <ServoConversion>

	setGoalPosition(AX_BROADCAST_ID, GP[0]);
 80023bc:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <deltaInit+0x50>)
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	4619      	mov	r1, r3
 80023c2:	20fe      	movs	r0, #254	; 0xfe
 80023c4:	f000 f8d8 	bl	8002578 <setGoalPosition>
	servoDelay(1000);
 80023c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023cc:	f000 f82e 	bl	800242c <servoDelay>

//	uint8_t str[] = "******* CONTROL MENU *******\r\n 1. UP\r\n 2. DOWN\r\n 3. Read Position\r\n 4. Torque Off\r\n 5. Torque On\r\n 6 : Throw(temp)\r\n****************************\r\n";
//	HAL_UART_Transmit(&huart3, str, sizeof(str), 1000);
}
 80023d0:	bf00      	nop
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	f3af 8000 	nop.w
 80023d8:	76c8b439 	.word	0x76c8b439
 80023dc:	c0700fbe 	.word	0xc0700fbe
	...
 80023e8:	20000278 	.word	0x20000278

080023ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	607b      	str	r3, [r7, #4]
 80023f6:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <MX_DMA_Init+0x3c>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	4a0b      	ldr	r2, [pc, #44]	; (8002428 <MX_DMA_Init+0x3c>)
 80023fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002400:	6313      	str	r3, [r2, #48]	; 0x30
 8002402:	4b09      	ldr	r3, [pc, #36]	; (8002428 <MX_DMA_Init+0x3c>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800240a:	607b      	str	r3, [r7, #4]
 800240c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800240e:	2200      	movs	r2, #0
 8002410:	2105      	movs	r1, #5
 8002412:	2010      	movs	r0, #16
 8002414:	f001 ff4c 	bl	80042b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002418:	2010      	movs	r0, #16
 800241a:	f001 ff65 	bl	80042e8 <HAL_NVIC_EnableIRQ>

}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40023800 	.word	0x40023800

0800242c <servoDelay>:
extern uint8_t rx2_Buf[RxBuf_SIZE];

char buffer[10]={0,};


void servoDelay(uint32_t millisec){
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	osDelay(millisec);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f005 fa99 	bl	800796c <osDelay>
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <sendInstPacket>:

void sendInstPacket(uint8_t* packet, uint8_t length)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(Direction_GPIO_Port, Direction_Pin, TX_MODE); // Switch to Transmission  Mode
 8002450:	2201      	movs	r2, #1
 8002452:	2180      	movs	r1, #128	; 0x80
 8002454:	4809      	ldr	r0, [pc, #36]	; (800247c <sendInstPacket+0x38>)
 8002456:	f002 fd03 	bl	8004e60 <HAL_GPIO_WritePin>

	HAL_UART_Transmit(&huart2, packet, length, 1000);
 800245a:	78fb      	ldrb	r3, [r7, #3]
 800245c:	b29a      	uxth	r2, r3
 800245e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4806      	ldr	r0, [pc, #24]	; (8002480 <sendInstPacket+0x3c>)
 8002466:	f003 ffa4 	bl	80063b2 <HAL_UART_Transmit>
	//servoDelay(25);

	HAL_GPIO_WritePin(Direction_GPIO_Port, Direction_Pin, RX_MODE); 	// Switch back to Reception Mode
 800246a:	2200      	movs	r2, #0
 800246c:	2180      	movs	r1, #128	; 0x80
 800246e:	4803      	ldr	r0, [pc, #12]	; (800247c <sendInstPacket+0x38>)
 8002470:	f002 fcf6 	bl	8004e60 <HAL_GPIO_WritePin>

}
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40020c00 	.word	0x40020c00
 8002480:	20000648 	.word	0x20000648

08002484 <setMovingSpeed>:

void setMovingSpeed(uint8_t ID, uint16_t Speed)
{
 8002484:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002488:	b087      	sub	sp, #28
 800248a:	af00      	add	r7, sp, #0
 800248c:	4603      	mov	r3, r0
 800248e:	460a      	mov	r2, r1
 8002490:	71fb      	strb	r3, [r7, #7]
 8002492:	4613      	mov	r3, r2
 8002494:	80bb      	strh	r3, [r7, #4]
 8002496:	466b      	mov	r3, sp
 8002498:	461e      	mov	r6, r3
    uint8_t Speed_L = Speed;
 800249a:	88bb      	ldrh	r3, [r7, #4]
 800249c:	75fb      	strb	r3, [r7, #23]
    uint8_t Speed_H = Speed >> 8;
 800249e:	88bb      	ldrh	r3, [r7, #4]
 80024a0:	0a1b      	lsrs	r3, r3, #8
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	75bb      	strb	r3, [r7, #22]
    // 16 bits -> 2 x 8 bits

    uint8_t length = 9;
 80024a6:	2309      	movs	r3, #9
 80024a8:	757b      	strb	r3, [r7, #21]
    uint8_t packet[length];
 80024aa:	7d79      	ldrb	r1, [r7, #21]
 80024ac:	460b      	mov	r3, r1
 80024ae:	3b01      	subs	r3, #1
 80024b0:	613b      	str	r3, [r7, #16]
 80024b2:	b2cb      	uxtb	r3, r1
 80024b4:	2200      	movs	r2, #0
 80024b6:	4698      	mov	r8, r3
 80024b8:	4691      	mov	r9, r2
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	f04f 0300 	mov.w	r3, #0
 80024c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024ce:	b2cb      	uxtb	r3, r1
 80024d0:	2200      	movs	r2, #0
 80024d2:	461c      	mov	r4, r3
 80024d4:	4615      	mov	r5, r2
 80024d6:	f04f 0200 	mov.w	r2, #0
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	00eb      	lsls	r3, r5, #3
 80024e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024e4:	00e2      	lsls	r2, r4, #3
 80024e6:	460b      	mov	r3, r1
 80024e8:	3307      	adds	r3, #7
 80024ea:	08db      	lsrs	r3, r3, #3
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	ebad 0d03 	sub.w	sp, sp, r3
 80024f2:	466b      	mov	r3, sp
 80024f4:	3300      	adds	r3, #0
 80024f6:	60fb      	str	r3, [r7, #12]

    packet[0] = AX_HEADER;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	22ff      	movs	r2, #255	; 0xff
 80024fc:	701a      	strb	r2, [r3, #0]
    packet[1] = AX_HEADER;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	22ff      	movs	r2, #255	; 0xff
 8002502:	705a      	strb	r2, [r3, #1]
    packet[2] = ID;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	79fa      	ldrb	r2, [r7, #7]
 8002508:	709a      	strb	r2, [r3, #2]
    packet[3] = length-4;
 800250a:	7d7b      	ldrb	r3, [r7, #21]
 800250c:	3b04      	subs	r3, #4
 800250e:	b2da      	uxtb	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	70da      	strb	r2, [r3, #3]
    packet[4] = AX_WRITE;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2203      	movs	r2, #3
 8002518:	711a      	strb	r2, [r3, #4]
    packet[5] = ADDR_GOAL_SPEED_L;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2220      	movs	r2, #32
 800251e:	715a      	strb	r2, [r3, #5]
    packet[6] = Speed_L;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	7dfa      	ldrb	r2, [r7, #23]
 8002524:	719a      	strb	r2, [r3, #6]
    packet[7] = Speed_H;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	7dba      	ldrb	r2, [r7, #22]
 800252a:	71da      	strb	r2, [r3, #7]
    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6] + packet[7])) & 0xFF;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	789a      	ldrb	r2, [r3, #2]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	78db      	ldrb	r3, [r3, #3]
 8002534:	4413      	add	r3, r2
 8002536:	b2da      	uxtb	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	791b      	ldrb	r3, [r3, #4]
 800253c:	4413      	add	r3, r2
 800253e:	b2da      	uxtb	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	795b      	ldrb	r3, [r3, #5]
 8002544:	4413      	add	r3, r2
 8002546:	b2da      	uxtb	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	799b      	ldrb	r3, [r3, #6]
 800254c:	4413      	add	r3, r2
 800254e:	b2da      	uxtb	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	79db      	ldrb	r3, [r3, #7]
 8002554:	4413      	add	r3, r2
 8002556:	b2db      	uxtb	r3, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	72fb      	strb	r3, [r7, #11]
    packet[8] = Checksum;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	7afa      	ldrb	r2, [r7, #11]
 8002560:	721a      	strb	r2, [r3, #8]

    sendInstPacket(packet, length);
 8002562:	7d7b      	ldrb	r3, [r7, #21]
 8002564:	4619      	mov	r1, r3
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f7ff ff6c 	bl	8002444 <sendInstPacket>
 800256c:	46b5      	mov	sp, r6

}
 800256e:	bf00      	nop
 8002570:	371c      	adds	r7, #28
 8002572:	46bd      	mov	sp, r7
 8002574:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002578 <setGoalPosition>:

void setGoalPosition(uint8_t ID, uint16_t Position)
{
 8002578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800257c:	b087      	sub	sp, #28
 800257e:	af00      	add	r7, sp, #0
 8002580:	4603      	mov	r3, r0
 8002582:	460a      	mov	r2, r1
 8002584:	71fb      	strb	r3, [r7, #7]
 8002586:	4613      	mov	r3, r2
 8002588:	80bb      	strh	r3, [r7, #4]
 800258a:	466b      	mov	r3, sp
 800258c:	461e      	mov	r6, r3
    uint8_t Position_L = Position;
 800258e:	88bb      	ldrh	r3, [r7, #4]
 8002590:	75fb      	strb	r3, [r7, #23]
    uint8_t Position_H = Position >> 8;
 8002592:	88bb      	ldrh	r3, [r7, #4]
 8002594:	0a1b      	lsrs	r3, r3, #8
 8002596:	b29b      	uxth	r3, r3
 8002598:	75bb      	strb	r3, [r7, #22]
    // 16 bits -> 2 x 8 bits

    uint8_t length = 9;
 800259a:	2309      	movs	r3, #9
 800259c:	757b      	strb	r3, [r7, #21]
    uint8_t packet[length];
 800259e:	7d79      	ldrb	r1, [r7, #21]
 80025a0:	460b      	mov	r3, r1
 80025a2:	3b01      	subs	r3, #1
 80025a4:	613b      	str	r3, [r7, #16]
 80025a6:	b2cb      	uxtb	r3, r1
 80025a8:	2200      	movs	r2, #0
 80025aa:	4698      	mov	r8, r3
 80025ac:	4691      	mov	r9, r2
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025c2:	b2cb      	uxtb	r3, r1
 80025c4:	2200      	movs	r2, #0
 80025c6:	461c      	mov	r4, r3
 80025c8:	4615      	mov	r5, r2
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	f04f 0300 	mov.w	r3, #0
 80025d2:	00eb      	lsls	r3, r5, #3
 80025d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025d8:	00e2      	lsls	r2, r4, #3
 80025da:	460b      	mov	r3, r1
 80025dc:	3307      	adds	r3, #7
 80025de:	08db      	lsrs	r3, r3, #3
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	ebad 0d03 	sub.w	sp, sp, r3
 80025e6:	466b      	mov	r3, sp
 80025e8:	3300      	adds	r3, #0
 80025ea:	60fb      	str	r3, [r7, #12]

    packet[0] = AX_HEADER;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	22ff      	movs	r2, #255	; 0xff
 80025f0:	701a      	strb	r2, [r3, #0]
    packet[1] = AX_HEADER;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	22ff      	movs	r2, #255	; 0xff
 80025f6:	705a      	strb	r2, [r3, #1]
    packet[2] = ID;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	79fa      	ldrb	r2, [r7, #7]
 80025fc:	709a      	strb	r2, [r3, #2]
    packet[3] = length-4;
 80025fe:	7d7b      	ldrb	r3, [r7, #21]
 8002600:	3b04      	subs	r3, #4
 8002602:	b2da      	uxtb	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	70da      	strb	r2, [r3, #3]
    packet[4] = AX_WRITE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2203      	movs	r2, #3
 800260c:	711a      	strb	r2, [r3, #4]
    packet[5] = ADDR_GOAL_POSITION_L;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	221e      	movs	r2, #30
 8002612:	715a      	strb	r2, [r3, #5]
    packet[6] = Position_L;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	7dfa      	ldrb	r2, [r7, #23]
 8002618:	719a      	strb	r2, [r3, #6]
    packet[7] = Position_H;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	7dba      	ldrb	r2, [r7, #22]
 800261e:	71da      	strb	r2, [r3, #7]
    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6] + packet[7])) & 0xFF;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	789a      	ldrb	r2, [r3, #2]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	78db      	ldrb	r3, [r3, #3]
 8002628:	4413      	add	r3, r2
 800262a:	b2da      	uxtb	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	791b      	ldrb	r3, [r3, #4]
 8002630:	4413      	add	r3, r2
 8002632:	b2da      	uxtb	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	795b      	ldrb	r3, [r3, #5]
 8002638:	4413      	add	r3, r2
 800263a:	b2da      	uxtb	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	799b      	ldrb	r3, [r3, #6]
 8002640:	4413      	add	r3, r2
 8002642:	b2da      	uxtb	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	79db      	ldrb	r3, [r3, #7]
 8002648:	4413      	add	r3, r2
 800264a:	b2db      	uxtb	r3, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	72fb      	strb	r3, [r7, #11]
    packet[8] = Checksum;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	7afa      	ldrb	r2, [r7, #11]
 8002654:	721a      	strb	r2, [r3, #8]

    sendInstPacket(packet, length);
 8002656:	7d7b      	ldrb	r3, [r7, #21]
 8002658:	4619      	mov	r1, r3
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f7ff fef2 	bl	8002444 <sendInstPacket>
 8002660:	46b5      	mov	sp, r6

}
 8002662:	bf00      	nop
 8002664:	371c      	adds	r7, #28
 8002666:	46bd      	mov	sp, r7
 8002668:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800266c <syncWriteGoalPosition>:

void syncWriteGoalPosition(uint16_t P0, uint16_t S0, uint16_t P1, uint16_t S1, uint16_t P2, uint16_t S2){
 800266c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002670:	b08b      	sub	sp, #44	; 0x2c
 8002672:	af00      	add	r7, sp, #0
 8002674:	4606      	mov	r6, r0
 8002676:	4608      	mov	r0, r1
 8002678:	4611      	mov	r1, r2
 800267a:	461a      	mov	r2, r3
 800267c:	4633      	mov	r3, r6
 800267e:	80fb      	strh	r3, [r7, #6]
 8002680:	4603      	mov	r3, r0
 8002682:	80bb      	strh	r3, [r7, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	807b      	strh	r3, [r7, #2]
 8002688:	4613      	mov	r3, r2
 800268a:	803b      	strh	r3, [r7, #0]
 800268c:	466b      	mov	r3, sp
 800268e:	461e      	mov	r6, r3

    uint8_t P0_L = P0;
 8002690:	88fb      	ldrh	r3, [r7, #6]
 8002692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t P0_H = P0 >> 8;
 8002696:	88fb      	ldrh	r3, [r7, #6]
 8002698:	0a1b      	lsrs	r3, r3, #8
 800269a:	b29b      	uxth	r3, r3
 800269c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    uint8_t P1_L = P1;
 80026a0:	887b      	ldrh	r3, [r7, #2]
 80026a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    uint8_t P1_H = P1 >> 8;
 80026a6:	887b      	ldrh	r3, [r7, #2]
 80026a8:	0a1b      	lsrs	r3, r3, #8
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    uint8_t P2_L = P2;
 80026b0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80026b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint8_t P2_H = P2 >> 8;
 80026b8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80026bc:	0a1b      	lsrs	r3, r3, #8
 80026be:	b29b      	uxth	r3, r3
 80026c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

    uint8_t S0_L = S0;
 80026c4:	88bb      	ldrh	r3, [r7, #4]
 80026c6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    uint8_t S0_H = S0 >> 8;
 80026ca:	88bb      	ldrh	r3, [r7, #4]
 80026cc:	0a1b      	lsrs	r3, r3, #8
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	f887 3020 	strb.w	r3, [r7, #32]

    uint8_t S1_L = S1;
 80026d4:	883b      	ldrh	r3, [r7, #0]
 80026d6:	77fb      	strb	r3, [r7, #31]
    uint8_t S1_H = S1 >> 8;
 80026d8:	883b      	ldrh	r3, [r7, #0]
 80026da:	0a1b      	lsrs	r3, r3, #8
 80026dc:	b29b      	uxth	r3, r3
 80026de:	77bb      	strb	r3, [r7, #30]

    uint8_t S2_L = S2;
 80026e0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80026e4:	777b      	strb	r3, [r7, #29]
    uint8_t S2_H = S2 >> 8;
 80026e6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80026ea:	0a1b      	lsrs	r3, r3, #8
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	773b      	strb	r3, [r7, #28]

    uint8_t length = 23;
 80026f0:	2317      	movs	r3, #23
 80026f2:	76fb      	strb	r3, [r7, #27]
    uint8_t packet[length];
 80026f4:	7ef9      	ldrb	r1, [r7, #27]
 80026f6:	460b      	mov	r3, r1
 80026f8:	3b01      	subs	r3, #1
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	b2cb      	uxtb	r3, r1
 80026fe:	2200      	movs	r2, #0
 8002700:	4698      	mov	r8, r3
 8002702:	4691      	mov	r9, r2
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	f04f 0300 	mov.w	r3, #0
 800270c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002710:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002714:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002718:	b2cb      	uxtb	r3, r1
 800271a:	2200      	movs	r2, #0
 800271c:	461c      	mov	r4, r3
 800271e:	4615      	mov	r5, r2
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	f04f 0300 	mov.w	r3, #0
 8002728:	00eb      	lsls	r3, r5, #3
 800272a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800272e:	00e2      	lsls	r2, r4, #3
 8002730:	460b      	mov	r3, r1
 8002732:	3307      	adds	r3, #7
 8002734:	08db      	lsrs	r3, r3, #3
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	ebad 0d03 	sub.w	sp, sp, r3
 800273c:	466b      	mov	r3, sp
 800273e:	3300      	adds	r3, #0
 8002740:	613b      	str	r3, [r7, #16]

    packet[0] = AX_HEADER;
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	22ff      	movs	r2, #255	; 0xff
 8002746:	701a      	strb	r2, [r3, #0]
    packet[1] = AX_HEADER;
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	22ff      	movs	r2, #255	; 0xff
 800274c:	705a      	strb	r2, [r3, #1]
    packet[2] = AX_BROADCAST_ID;
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	22fe      	movs	r2, #254	; 0xfe
 8002752:	709a      	strb	r2, [r3, #2]
    packet[3] = length-4;
 8002754:	7efb      	ldrb	r3, [r7, #27]
 8002756:	3b04      	subs	r3, #4
 8002758:	b2da      	uxtb	r2, r3
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	70da      	strb	r2, [r3, #3]
    packet[4] = AX_SYNC_WRITE;
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	2283      	movs	r2, #131	; 0x83
 8002762:	711a      	strb	r2, [r3, #4]
    packet[5] = ADDR_GOAL_POSITION_L;
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	221e      	movs	r2, #30
 8002768:	715a      	strb	r2, [r3, #5]
    packet[6] = 0x04;		// length of data to access
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	2204      	movs	r2, #4
 800276e:	719a      	strb	r2, [r3, #6]

    packet[7] = 0;			// ID 0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	2200      	movs	r2, #0
 8002774:	71da      	strb	r2, [r3, #7]
    packet[8] = P0_L;
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800277c:	721a      	strb	r2, [r3, #8]
    packet[9] = P0_H;
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002784:	725a      	strb	r2, [r3, #9]
    packet[10] = S0_L;
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800278c:	729a      	strb	r2, [r3, #10]
    packet[11] = S0_H;
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002794:	72da      	strb	r2, [r3, #11]

    packet[12] = 1;			// ID 1
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	2201      	movs	r2, #1
 800279a:	731a      	strb	r2, [r3, #12]
    packet[13] = P1_L;
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80027a2:	735a      	strb	r2, [r3, #13]
    packet[14] = P1_H;
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80027aa:	739a      	strb	r2, [r3, #14]
    packet[15] = S1_L;
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	7ffa      	ldrb	r2, [r7, #31]
 80027b0:	73da      	strb	r2, [r3, #15]
    packet[16] = S1_H;
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	7fba      	ldrb	r2, [r7, #30]
 80027b6:	741a      	strb	r2, [r3, #16]

    packet[17] = 2;			// ID 2
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	2202      	movs	r2, #2
 80027bc:	745a      	strb	r2, [r3, #17]
    packet[18] = P2_L;
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80027c4:	749a      	strb	r2, [r3, #18]
    packet[19] = P2_H;
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80027cc:	74da      	strb	r2, [r3, #19]
    packet[20] = S2_L;
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	7f7a      	ldrb	r2, [r7, #29]
 80027d2:	751a      	strb	r2, [r3, #20]
    packet[21] = S2_H;
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	7f3a      	ldrb	r2, [r7, #28]
 80027d8:	755a      	strb	r2, [r3, #21]
    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6] + packet[7]
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	789a      	ldrb	r2, [r3, #2]
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	78db      	ldrb	r3, [r3, #3]
 80027e2:	4413      	add	r3, r2
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	791b      	ldrb	r3, [r3, #4]
 80027ea:	4413      	add	r3, r2
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	795b      	ldrb	r3, [r3, #5]
 80027f2:	4413      	add	r3, r2
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	799b      	ldrb	r3, [r3, #6]
 80027fa:	4413      	add	r3, r2
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	79db      	ldrb	r3, [r3, #7]
 8002802:	4413      	add	r3, r2
 8002804:	b2da      	uxtb	r2, r3
						+ packet[8] + packet[9] + packet[10] + packet[11] + packet[12] + packet[13]
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	7a1b      	ldrb	r3, [r3, #8]
 800280a:	4413      	add	r3, r2
 800280c:	b2da      	uxtb	r2, r3
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	7a5b      	ldrb	r3, [r3, #9]
 8002812:	4413      	add	r3, r2
 8002814:	b2da      	uxtb	r2, r3
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	7a9b      	ldrb	r3, [r3, #10]
 800281a:	4413      	add	r3, r2
 800281c:	b2da      	uxtb	r2, r3
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	7adb      	ldrb	r3, [r3, #11]
 8002822:	4413      	add	r3, r2
 8002824:	b2da      	uxtb	r2, r3
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	7b1b      	ldrb	r3, [r3, #12]
 800282a:	4413      	add	r3, r2
 800282c:	b2da      	uxtb	r2, r3
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	7b5b      	ldrb	r3, [r3, #13]
 8002832:	4413      	add	r3, r2
 8002834:	b2da      	uxtb	r2, r3
						+ packet[14] + packet[15] + packet[16] + packet[17] + packet[18] + packet[19]
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	7b9b      	ldrb	r3, [r3, #14]
 800283a:	4413      	add	r3, r2
 800283c:	b2da      	uxtb	r2, r3
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	7bdb      	ldrb	r3, [r3, #15]
 8002842:	4413      	add	r3, r2
 8002844:	b2da      	uxtb	r2, r3
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	7c1b      	ldrb	r3, [r3, #16]
 800284a:	4413      	add	r3, r2
 800284c:	b2da      	uxtb	r2, r3
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	7c5b      	ldrb	r3, [r3, #17]
 8002852:	4413      	add	r3, r2
 8002854:	b2da      	uxtb	r2, r3
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	7c9b      	ldrb	r3, [r3, #18]
 800285a:	4413      	add	r3, r2
 800285c:	b2da      	uxtb	r2, r3
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	7cdb      	ldrb	r3, [r3, #19]
 8002862:	4413      	add	r3, r2
 8002864:	b2da      	uxtb	r2, r3
						+ packet[20] + packet[21])) & 0xFF;
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	7d1b      	ldrb	r3, [r3, #20]
 800286a:	4413      	add	r3, r2
 800286c:	b2da      	uxtb	r2, r3
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	7d5b      	ldrb	r3, [r3, #21]
 8002872:	4413      	add	r3, r2
 8002874:	b2db      	uxtb	r3, r3
    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6] + packet[7]
 8002876:	43db      	mvns	r3, r3
 8002878:	73fb      	strb	r3, [r7, #15]
    packet[22] = Checksum;
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	7bfa      	ldrb	r2, [r7, #15]
 800287e:	759a      	strb	r2, [r3, #22]

    sendInstPacket(packet, length);
 8002880:	7efb      	ldrb	r3, [r7, #27]
 8002882:	4619      	mov	r1, r3
 8002884:	6938      	ldr	r0, [r7, #16]
 8002886:	f7ff fddd 	bl	8002444 <sendInstPacket>
 800288a:	46b5      	mov	sp, r6
}
 800288c:	bf00      	nop
 800288e:	372c      	adds	r7, #44	; 0x2c
 8002890:	46bd      	mov	sp, r7
 8002892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08002898 <getPresentPosition>:

uint16_t getPresentPosition(uint8_t ID)
{
 8002898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800289c:	b087      	sub	sp, #28
 800289e:	af00      	add	r7, sp, #0
 80028a0:	4603      	mov	r3, r0
 80028a2:	71fb      	strb	r3, [r7, #7]
 80028a4:	466b      	mov	r3, sp
 80028a6:	461e      	mov	r6, r3

    uint8_t length = 8;
 80028a8:	2308      	movs	r3, #8
 80028aa:	75fb      	strb	r3, [r7, #23]
    uint8_t packet[length];
 80028ac:	7df9      	ldrb	r1, [r7, #23]
 80028ae:	460b      	mov	r3, r1
 80028b0:	3b01      	subs	r3, #1
 80028b2:	613b      	str	r3, [r7, #16]
 80028b4:	b2cb      	uxtb	r3, r1
 80028b6:	2200      	movs	r2, #0
 80028b8:	4698      	mov	r8, r3
 80028ba:	4691      	mov	r9, r2
 80028bc:	f04f 0200 	mov.w	r2, #0
 80028c0:	f04f 0300 	mov.w	r3, #0
 80028c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028d0:	b2cb      	uxtb	r3, r1
 80028d2:	2200      	movs	r2, #0
 80028d4:	461c      	mov	r4, r3
 80028d6:	4615      	mov	r5, r2
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	f04f 0300 	mov.w	r3, #0
 80028e0:	00eb      	lsls	r3, r5, #3
 80028e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028e6:	00e2      	lsls	r2, r4, #3
 80028e8:	460b      	mov	r3, r1
 80028ea:	3307      	adds	r3, #7
 80028ec:	08db      	lsrs	r3, r3, #3
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	ebad 0d03 	sub.w	sp, sp, r3
 80028f4:	466b      	mov	r3, sp
 80028f6:	3300      	adds	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]

    packet[0] = AX_HEADER;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	22ff      	movs	r2, #255	; 0xff
 80028fe:	701a      	strb	r2, [r3, #0]
    packet[1] = AX_HEADER;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	22ff      	movs	r2, #255	; 0xff
 8002904:	705a      	strb	r2, [r3, #1]
    packet[2] = ID;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	79fa      	ldrb	r2, [r7, #7]
 800290a:	709a      	strb	r2, [r3, #2]
    packet[3] = length-4;
 800290c:	7dfb      	ldrb	r3, [r7, #23]
 800290e:	3b04      	subs	r3, #4
 8002910:	b2da      	uxtb	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	70da      	strb	r2, [r3, #3]
    packet[4] = AX_READ;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2202      	movs	r2, #2
 800291a:	711a      	strb	r2, [r3, #4]
    packet[5] = ADDR_PRESENT_POSITION_L;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2224      	movs	r2, #36	; 0x24
 8002920:	715a      	strb	r2, [r3, #5]
    packet[6] = AX_READ_TWO_BYTE;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2202      	movs	r2, #2
 8002926:	719a      	strb	r2, [r3, #6]
    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6])) & 0xFF;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	789a      	ldrb	r2, [r3, #2]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	78db      	ldrb	r3, [r3, #3]
 8002930:	4413      	add	r3, r2
 8002932:	b2da      	uxtb	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	791b      	ldrb	r3, [r3, #4]
 8002938:	4413      	add	r3, r2
 800293a:	b2da      	uxtb	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	795b      	ldrb	r3, [r3, #5]
 8002940:	4413      	add	r3, r2
 8002942:	b2da      	uxtb	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	799b      	ldrb	r3, [r3, #6]
 8002948:	4413      	add	r3, r2
 800294a:	b2db      	uxtb	r3, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	72fb      	strb	r3, [r7, #11]
    packet[7] = Checksum;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	7afa      	ldrb	r2, [r7, #11]
 8002954:	71da      	strb	r2, [r3, #7]

    sendInstPacket(packet, length);
 8002956:	7dfb      	ldrb	r3, [r7, #23]
 8002958:	4619      	mov	r1, r3
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f7ff fd72 	bl	8002444 <sendInstPacket>

    servoDelay(10);
 8002960:	200a      	movs	r0, #10
 8002962:	f7ff fd63 	bl	800242c <servoDelay>
    Checksum = (~(rx2_Buf[2] + rx2_Buf[3] + rx2_Buf[4] + rx2_Buf[5] + rx2_Buf[6])) & 0xFF;
 8002966:	4b16      	ldr	r3, [pc, #88]	; (80029c0 <getPresentPosition+0x128>)
 8002968:	789a      	ldrb	r2, [r3, #2]
 800296a:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <getPresentPosition+0x128>)
 800296c:	78db      	ldrb	r3, [r3, #3]
 800296e:	4413      	add	r3, r2
 8002970:	b2da      	uxtb	r2, r3
 8002972:	4b13      	ldr	r3, [pc, #76]	; (80029c0 <getPresentPosition+0x128>)
 8002974:	791b      	ldrb	r3, [r3, #4]
 8002976:	4413      	add	r3, r2
 8002978:	b2da      	uxtb	r2, r3
 800297a:	4b11      	ldr	r3, [pc, #68]	; (80029c0 <getPresentPosition+0x128>)
 800297c:	795b      	ldrb	r3, [r3, #5]
 800297e:	4413      	add	r3, r2
 8002980:	b2da      	uxtb	r2, r3
 8002982:	4b0f      	ldr	r3, [pc, #60]	; (80029c0 <getPresentPosition+0x128>)
 8002984:	799b      	ldrb	r3, [r3, #6]
 8002986:	4413      	add	r3, r2
 8002988:	b2db      	uxtb	r3, r3
 800298a:	43db      	mvns	r3, r3
 800298c:	72fb      	strb	r3, [r7, #11]
    uint16_t presentPosition = rx2_Buf[5] + (rx2_Buf[6]<<8);
 800298e:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <getPresentPosition+0x128>)
 8002990:	795b      	ldrb	r3, [r3, #5]
 8002992:	b29a      	uxth	r2, r3
 8002994:	4b0a      	ldr	r3, [pc, #40]	; (80029c0 <getPresentPosition+0x128>)
 8002996:	799b      	ldrb	r3, [r3, #6]
 8002998:	b29b      	uxth	r3, r3
 800299a:	021b      	lsls	r3, r3, #8
 800299c:	b29b      	uxth	r3, r3
 800299e:	4413      	add	r3, r2
 80029a0:	813b      	strh	r3, [r7, #8]

    if(Checksum==rx2_Buf[7]){
 80029a2:	4b07      	ldr	r3, [pc, #28]	; (80029c0 <getPresentPosition+0x128>)
 80029a4:	79db      	ldrb	r3, [r3, #7]
 80029a6:	7afa      	ldrb	r2, [r7, #11]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d101      	bne.n	80029b0 <getPresentPosition+0x118>
    	return presentPosition;
 80029ac:	893b      	ldrh	r3, [r7, #8]
 80029ae:	e000      	b.n	80029b2 <getPresentPosition+0x11a>
    }else {
    	return 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	46b5      	mov	sp, r6
    }

}
 80029b4:	4618      	mov	r0, r3
 80029b6:	371c      	adds	r7, #28
 80029b8:	46bd      	mov	sp, r7
 80029ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80029be:	bf00      	nop
 80029c0:	20000604 	.word	0x20000604

080029c4 <onOffTorque>:


void onOffTorque(uint8_t ID, uint8_t State){
 80029c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80029c8:	b087      	sub	sp, #28
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	4603      	mov	r3, r0
 80029ce:	460a      	mov	r2, r1
 80029d0:	71fb      	strb	r3, [r7, #7]
 80029d2:	4613      	mov	r3, r2
 80029d4:	71bb      	strb	r3, [r7, #6]
 80029d6:	466b      	mov	r3, sp
 80029d8:	461e      	mov	r6, r3

    uint8_t length = 8;
 80029da:	2308      	movs	r3, #8
 80029dc:	75fb      	strb	r3, [r7, #23]
    uint8_t packet[length];
 80029de:	7df9      	ldrb	r1, [r7, #23]
 80029e0:	460b      	mov	r3, r1
 80029e2:	3b01      	subs	r3, #1
 80029e4:	613b      	str	r3, [r7, #16]
 80029e6:	b2cb      	uxtb	r3, r1
 80029e8:	2200      	movs	r2, #0
 80029ea:	4698      	mov	r8, r3
 80029ec:	4691      	mov	r9, r2
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	f04f 0300 	mov.w	r3, #0
 80029f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a02:	b2cb      	uxtb	r3, r1
 8002a04:	2200      	movs	r2, #0
 8002a06:	461c      	mov	r4, r3
 8002a08:	4615      	mov	r5, r2
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	00eb      	lsls	r3, r5, #3
 8002a14:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a18:	00e2      	lsls	r2, r4, #3
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	3307      	adds	r3, #7
 8002a1e:	08db      	lsrs	r3, r3, #3
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	ebad 0d03 	sub.w	sp, sp, r3
 8002a26:	466b      	mov	r3, sp
 8002a28:	3300      	adds	r3, #0
 8002a2a:	60fb      	str	r3, [r7, #12]

    packet[0] = AX_HEADER;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	22ff      	movs	r2, #255	; 0xff
 8002a30:	701a      	strb	r2, [r3, #0]
    packet[1] = AX_HEADER;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	22ff      	movs	r2, #255	; 0xff
 8002a36:	705a      	strb	r2, [r3, #1]
    packet[2] = ID;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	79fa      	ldrb	r2, [r7, #7]
 8002a3c:	709a      	strb	r2, [r3, #2]
    packet[3] = length-4;
 8002a3e:	7dfb      	ldrb	r3, [r7, #23]
 8002a40:	3b04      	subs	r3, #4
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	70da      	strb	r2, [r3, #3]
    packet[4] = AX_WRITE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2203      	movs	r2, #3
 8002a4c:	711a      	strb	r2, [r3, #4]
    packet[5] = ADDR_TORQUE_ENABLE;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2218      	movs	r2, #24
 8002a52:	715a      	strb	r2, [r3, #5]
    packet[6] = State;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	79ba      	ldrb	r2, [r7, #6]
 8002a58:	719a      	strb	r2, [r3, #6]
    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6])) & 0xFF;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	789a      	ldrb	r2, [r3, #2]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	78db      	ldrb	r3, [r3, #3]
 8002a62:	4413      	add	r3, r2
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	791b      	ldrb	r3, [r3, #4]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	795b      	ldrb	r3, [r3, #5]
 8002a72:	4413      	add	r3, r2
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	799b      	ldrb	r3, [r3, #6]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	72fb      	strb	r3, [r7, #11]
    packet[7] = Checksum;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	7afa      	ldrb	r2, [r7, #11]
 8002a86:	71da      	strb	r2, [r3, #7]

    sendInstPacket(packet, length);
 8002a88:	7dfb      	ldrb	r3, [r7, #23]
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f7ff fcd9 	bl	8002444 <sendInstPacket>
 8002a92:	46b5      	mov	sp, r6

}
 8002a94:	bf00      	nop
 8002a96:	371c      	adds	r7, #28
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002a9e <syncWriteTorqueOnOff>:

void syncWriteTorqueOnOff(uint8_t State){
 8002a9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	71fb      	strb	r3, [r7, #7]
 8002aaa:	466b      	mov	r3, sp
 8002aac:	461e      	mov	r6, r3

    uint8_t length = 14;
 8002aae:	230e      	movs	r3, #14
 8002ab0:	75fb      	strb	r3, [r7, #23]
    uint8_t packet[length];
 8002ab2:	7df9      	ldrb	r1, [r7, #23]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	613b      	str	r3, [r7, #16]
 8002aba:	b2cb      	uxtb	r3, r1
 8002abc:	2200      	movs	r2, #0
 8002abe:	4698      	mov	r8, r3
 8002ac0:	4691      	mov	r9, r2
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	f04f 0300 	mov.w	r3, #0
 8002aca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ace:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ad2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ad6:	b2cb      	uxtb	r3, r1
 8002ad8:	2200      	movs	r2, #0
 8002ada:	461c      	mov	r4, r3
 8002adc:	4615      	mov	r5, r2
 8002ade:	f04f 0200 	mov.w	r2, #0
 8002ae2:	f04f 0300 	mov.w	r3, #0
 8002ae6:	00eb      	lsls	r3, r5, #3
 8002ae8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002aec:	00e2      	lsls	r2, r4, #3
 8002aee:	460b      	mov	r3, r1
 8002af0:	3307      	adds	r3, #7
 8002af2:	08db      	lsrs	r3, r3, #3
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	ebad 0d03 	sub.w	sp, sp, r3
 8002afa:	466b      	mov	r3, sp
 8002afc:	3300      	adds	r3, #0
 8002afe:	60fb      	str	r3, [r7, #12]

    packet[0] = AX_HEADER;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	22ff      	movs	r2, #255	; 0xff
 8002b04:	701a      	strb	r2, [r3, #0]
    packet[1] = AX_HEADER;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	22ff      	movs	r2, #255	; 0xff
 8002b0a:	705a      	strb	r2, [r3, #1]
    packet[2] = AX_BROADCAST_ID;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	22fe      	movs	r2, #254	; 0xfe
 8002b10:	709a      	strb	r2, [r3, #2]
    packet[3] = length-4;
 8002b12:	7dfb      	ldrb	r3, [r7, #23]
 8002b14:	3b04      	subs	r3, #4
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	70da      	strb	r2, [r3, #3]
    packet[4] = AX_SYNC_WRITE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2283      	movs	r2, #131	; 0x83
 8002b20:	711a      	strb	r2, [r3, #4]
    packet[5] = ADDR_TORQUE_ENABLE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2218      	movs	r2, #24
 8002b26:	715a      	strb	r2, [r3, #5]
    packet[6] = 0x01;		// length of data to access
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	719a      	strb	r2, [r3, #6]

    packet[7] = 0;			// ID 0
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	71da      	strb	r2, [r3, #7]
    packet[8] = State;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	79fa      	ldrb	r2, [r7, #7]
 8002b38:	721a      	strb	r2, [r3, #8]

    packet[9] = 1;			// ID 1
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	725a      	strb	r2, [r3, #9]
    packet[10] = State;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	79fa      	ldrb	r2, [r7, #7]
 8002b44:	729a      	strb	r2, [r3, #10]

    packet[11] = 2;			// ID 2
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2202      	movs	r2, #2
 8002b4a:	72da      	strb	r2, [r3, #11]
    packet[12] = State;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	79fa      	ldrb	r2, [r7, #7]
 8002b50:	731a      	strb	r2, [r3, #12]
    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6] + packet[7]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	789a      	ldrb	r2, [r3, #2]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	78db      	ldrb	r3, [r3, #3]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	791b      	ldrb	r3, [r3, #4]
 8002b62:	4413      	add	r3, r2
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	795b      	ldrb	r3, [r3, #5]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	799b      	ldrb	r3, [r3, #6]
 8002b72:	4413      	add	r3, r2
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	79db      	ldrb	r3, [r3, #7]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	b2da      	uxtb	r2, r3
						+ packet[8] + packet[9] + packet[10] + packet[11] + packet[12])) & 0xFF;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	7a1b      	ldrb	r3, [r3, #8]
 8002b82:	4413      	add	r3, r2
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	7a5b      	ldrb	r3, [r3, #9]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	7a9b      	ldrb	r3, [r3, #10]
 8002b92:	4413      	add	r3, r2
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	7adb      	ldrb	r3, [r3, #11]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	7b1b      	ldrb	r3, [r3, #12]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	b2db      	uxtb	r3, r3
    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6] + packet[7]
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	72fb      	strb	r3, [r7, #11]
    packet[13] = Checksum;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	7afa      	ldrb	r2, [r7, #11]
 8002bae:	735a      	strb	r2, [r3, #13]

    sendInstPacket(packet, length);
 8002bb0:	7dfb      	ldrb	r3, [r7, #23]
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f7ff fc45 	bl	8002444 <sendInstPacket>
 8002bba:	46b5      	mov	sp, r6
}
 8002bbc:	bf00      	nop
 8002bbe:	371c      	adds	r7, #28
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002bc6 <setEndless>:


void setEndless(uint8_t ID, uint8_t State)
{
 8002bc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bca:	b08d      	sub	sp, #52	; 0x34
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	460a      	mov	r2, r1
 8002bd2:	73fb      	strb	r3, [r7, #15]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	73bb      	strb	r3, [r7, #14]
	if ( State )
 8002bd8:	7bbb      	ldrb	r3, [r7, #14]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d06f      	beq.n	8002cbe <setEndless+0xf8>
	{
 8002bde:	466b      	mov	r3, sp
 8002be0:	461c      	mov	r4, r3
		uint8_t length = 9;
 8002be2:	2309      	movs	r3, #9
 8002be4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		uint8_t packet[length];
 8002be8:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8002bec:	460b      	mov	r3, r1
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	61fb      	str	r3, [r7, #28]
 8002bf2:	b2cb      	uxtb	r3, r1
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	603b      	str	r3, [r7, #0]
 8002bf8:	607a      	str	r2, [r7, #4]
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	e9d7 5600 	ldrd	r5, r6, [r7]
 8002c06:	4630      	mov	r0, r6
 8002c08:	00c3      	lsls	r3, r0, #3
 8002c0a:	4628      	mov	r0, r5
 8002c0c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002c10:	4628      	mov	r0, r5
 8002c12:	00c2      	lsls	r2, r0, #3
 8002c14:	b2cb      	uxtb	r3, r1
 8002c16:	2200      	movs	r2, #0
 8002c18:	469a      	mov	sl, r3
 8002c1a:	4693      	mov	fp, r2
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	f04f 0300 	mov.w	r3, #0
 8002c24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c30:	460b      	mov	r3, r1
 8002c32:	3307      	adds	r3, #7
 8002c34:	08db      	lsrs	r3, r3, #3
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	ebad 0d03 	sub.w	sp, sp, r3
 8002c3c:	466b      	mov	r3, sp
 8002c3e:	3300      	adds	r3, #0
 8002c40:	61bb      	str	r3, [r7, #24]

	    packet[0] = AX_HEADER;
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	22ff      	movs	r2, #255	; 0xff
 8002c46:	701a      	strb	r2, [r3, #0]
	    packet[1] = AX_HEADER;
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	22ff      	movs	r2, #255	; 0xff
 8002c4c:	705a      	strb	r2, [r3, #1]
	    packet[2] = ID;
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	7bfa      	ldrb	r2, [r7, #15]
 8002c52:	709a      	strb	r2, [r3, #2]
	    packet[3] = length-4;
 8002c54:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002c58:	3b04      	subs	r3, #4
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	70da      	strb	r2, [r3, #3]
	    packet[4] = AX_WRITE;
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	2203      	movs	r2, #3
 8002c64:	711a      	strb	r2, [r3, #4]
	    packet[5] = ADDR_CCW_ANGLE_LIMIT_L;
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	2208      	movs	r2, #8
 8002c6a:	715a      	strb	r2, [r3, #5]
	    packet[6] = 0; 						// full rotation
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	719a      	strb	r2, [r3, #6]
	    packet[7] = 0;						// full rotation
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	2200      	movs	r2, #0
 8002c76:	71da      	strb	r2, [r3, #7]
	    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6] + packet[7])) & 0xFF;
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	789a      	ldrb	r2, [r3, #2]
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	78db      	ldrb	r3, [r3, #3]
 8002c80:	4413      	add	r3, r2
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	791b      	ldrb	r3, [r3, #4]
 8002c88:	4413      	add	r3, r2
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	795b      	ldrb	r3, [r3, #5]
 8002c90:	4413      	add	r3, r2
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	799b      	ldrb	r3, [r3, #6]
 8002c98:	4413      	add	r3, r2
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	79db      	ldrb	r3, [r3, #7]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	75fb      	strb	r3, [r7, #23]
	    packet[8] = Checksum;
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	7dfa      	ldrb	r2, [r7, #23]
 8002cac:	721a      	strb	r2, [r3, #8]

	    sendInstPacket(packet, length);
 8002cae:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	69b8      	ldr	r0, [r7, #24]
 8002cb6:	f7ff fbc5 	bl	8002444 <sendInstPacket>
 8002cba:	46a5      	mov	sp, r4
	    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6] + packet[7])) & 0xFF;
	    packet[8] = Checksum;

	    sendInstPacket(packet, length);
	}
}
 8002cbc:	e071      	b.n	8002da2 <setEndless+0x1dc>
	{
 8002cbe:	466b      	mov	r3, sp
 8002cc0:	461e      	mov	r6, r3
		turn(ID,0,0);
 8002cc2:	7bfb      	ldrb	r3, [r7, #15]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f000 f86f 	bl	8002dac <turn>
		uint8_t length = 9;
 8002cce:	2309      	movs	r3, #9
 8002cd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		uint8_t packet[length];
 8002cd4:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8002cd8:	460b      	mov	r3, r1
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cde:	b2cb      	uxtb	r3, r1
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	4698      	mov	r8, r3
 8002ce4:	4691      	mov	r9, r2
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	f04f 0300 	mov.w	r3, #0
 8002cee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002cfa:	b2cb      	uxtb	r3, r1
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	461c      	mov	r4, r3
 8002d00:	4615      	mov	r5, r2
 8002d02:	f04f 0200 	mov.w	r2, #0
 8002d06:	f04f 0300 	mov.w	r3, #0
 8002d0a:	00eb      	lsls	r3, r5, #3
 8002d0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d10:	00e2      	lsls	r2, r4, #3
 8002d12:	460b      	mov	r3, r1
 8002d14:	3307      	adds	r3, #7
 8002d16:	08db      	lsrs	r3, r3, #3
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	ebad 0d03 	sub.w	sp, sp, r3
 8002d1e:	466b      	mov	r3, sp
 8002d20:	3300      	adds	r3, #0
 8002d22:	627b      	str	r3, [r7, #36]	; 0x24
	    packet[0] = AX_HEADER;
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	22ff      	movs	r2, #255	; 0xff
 8002d28:	701a      	strb	r2, [r3, #0]
	    packet[1] = AX_HEADER;
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	22ff      	movs	r2, #255	; 0xff
 8002d2e:	705a      	strb	r2, [r3, #1]
	    packet[2] = ID;
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	7bfa      	ldrb	r2, [r7, #15]
 8002d34:	709a      	strb	r2, [r3, #2]
	    packet[3] = length-4;
 8002d36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d3a:	3b04      	subs	r3, #4
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	70da      	strb	r2, [r3, #3]
	    packet[4] = AX_WRITE;
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	2203      	movs	r2, #3
 8002d46:	711a      	strb	r2, [r3, #4]
	    packet[5] = ADDR_CCW_ANGLE_LIMIT_L;
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	2208      	movs	r2, #8
 8002d4c:	715a      	strb	r2, [r3, #5]
	    packet[6] = 255;					// 1023 low
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	22ff      	movs	r2, #255	; 0xff
 8002d52:	719a      	strb	r2, [r3, #6]
	    packet[7] = 3;						// 1023 high
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	2203      	movs	r2, #3
 8002d58:	71da      	strb	r2, [r3, #7]
	    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6] + packet[7])) & 0xFF;
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	789a      	ldrb	r2, [r3, #2]
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	78db      	ldrb	r3, [r3, #3]
 8002d62:	4413      	add	r3, r2
 8002d64:	b2da      	uxtb	r2, r3
 8002d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d68:	791b      	ldrb	r3, [r3, #4]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	795b      	ldrb	r3, [r3, #5]
 8002d72:	4413      	add	r3, r2
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	799b      	ldrb	r3, [r3, #6]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	79db      	ldrb	r3, [r3, #7]
 8002d82:	4413      	add	r3, r2
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	    packet[8] = Checksum;
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002d92:	721a      	strb	r2, [r3, #8]
	    sendInstPacket(packet, length);
 8002d94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d98:	4619      	mov	r1, r3
 8002d9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d9c:	f7ff fb52 	bl	8002444 <sendInstPacket>
 8002da0:	46b5      	mov	sp, r6
}
 8002da2:	bf00      	nop
 8002da4:	3734      	adds	r7, #52	; 0x34
 8002da6:	46bd      	mov	sp, r7
 8002da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002dac <turn>:

void turn(uint8_t ID, uint8_t SIDE, uint16_t Speed)
{
 8002dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002db0:	b08d      	sub	sp, #52	; 0x34
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	4603      	mov	r3, r0
 8002db6:	73fb      	strb	r3, [r7, #15]
 8002db8:	460b      	mov	r3, r1
 8002dba:	73bb      	strb	r3, [r7, #14]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	81bb      	strh	r3, [r7, #12]
		if (SIDE == LEFT)
 8002dc0:	7bbb      	ldrb	r3, [r7, #14]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d179      	bne.n	8002eba <turn+0x10e>
		{
 8002dc6:	466b      	mov	r3, sp
 8002dc8:	461c      	mov	r4, r3

		    uint8_t Speed_L = Speed;
 8002dca:	89bb      	ldrh	r3, [r7, #12]
 8002dcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		    uint8_t Speed_H = Speed >> 8;		// 16 bits - 2 x 8 bits variables
 8002dd0:	89bb      	ldrh	r3, [r7, #12]
 8002dd2:	0a1b      	lsrs	r3, r3, #8
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

			uint8_t length = 9;
 8002dda:	2309      	movs	r3, #9
 8002ddc:	f887 3020 	strb.w	r3, [r7, #32]
			uint8_t packet[length];
 8002de0:	f897 1020 	ldrb.w	r1, [r7, #32]
 8002de4:	460b      	mov	r3, r1
 8002de6:	3b01      	subs	r3, #1
 8002de8:	61fb      	str	r3, [r7, #28]
 8002dea:	b2cb      	uxtb	r3, r1
 8002dec:	2200      	movs	r2, #0
 8002dee:	603b      	str	r3, [r7, #0]
 8002df0:	607a      	str	r2, [r7, #4]
 8002df2:	f04f 0200 	mov.w	r2, #0
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	e9d7 5600 	ldrd	r5, r6, [r7]
 8002dfe:	4630      	mov	r0, r6
 8002e00:	00c3      	lsls	r3, r0, #3
 8002e02:	4628      	mov	r0, r5
 8002e04:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002e08:	4628      	mov	r0, r5
 8002e0a:	00c2      	lsls	r2, r0, #3
 8002e0c:	b2cb      	uxtb	r3, r1
 8002e0e:	2200      	movs	r2, #0
 8002e10:	469a      	mov	sl, r3
 8002e12:	4693      	mov	fp, r2
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e28:	460b      	mov	r3, r1
 8002e2a:	3307      	adds	r3, #7
 8002e2c:	08db      	lsrs	r3, r3, #3
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	ebad 0d03 	sub.w	sp, sp, r3
 8002e34:	466b      	mov	r3, sp
 8002e36:	3300      	adds	r3, #0
 8002e38:	61bb      	str	r3, [r7, #24]

		    packet[0] = AX_HEADER;
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	22ff      	movs	r2, #255	; 0xff
 8002e3e:	701a      	strb	r2, [r3, #0]
		    packet[1] = AX_HEADER;
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	22ff      	movs	r2, #255	; 0xff
 8002e44:	705a      	strb	r2, [r3, #1]
		    packet[2] = ID;
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	7bfa      	ldrb	r2, [r7, #15]
 8002e4a:	709a      	strb	r2, [r3, #2]
		    packet[3] = length-4;
 8002e4c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002e50:	3b04      	subs	r3, #4
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	70da      	strb	r2, [r3, #3]
		    packet[4] = AX_WRITE;
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	2203      	movs	r2, #3
 8002e5c:	711a      	strb	r2, [r3, #4]
		    packet[5] = ADDR_GOAL_SPEED_L;
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	2220      	movs	r2, #32
 8002e62:	715a      	strb	r2, [r3, #5]
		    packet[6] = Speed_L;
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8002e6a:	719a      	strb	r2, [r3, #6]
		    packet[7] = Speed_H;
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8002e72:	71da      	strb	r2, [r3, #7]
		    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6] + packet[7])) & 0xFF;
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	789a      	ldrb	r2, [r3, #2]
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	78db      	ldrb	r3, [r3, #3]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	b2da      	uxtb	r2, r3
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	791b      	ldrb	r3, [r3, #4]
 8002e84:	4413      	add	r3, r2
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	795b      	ldrb	r3, [r3, #5]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	799b      	ldrb	r3, [r3, #6]
 8002e94:	4413      	add	r3, r2
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	79db      	ldrb	r3, [r3, #7]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	75fb      	strb	r3, [r7, #23]
		    packet[8] = Checksum;
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	7dfa      	ldrb	r2, [r7, #23]
 8002ea8:	721a      	strb	r2, [r3, #8]

		    sendInstPacket(packet, length);
 8002eaa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002eae:	4619      	mov	r1, r3
 8002eb0:	69b8      	ldr	r0, [r7, #24]
 8002eb2:	f7ff fac7 	bl	8002444 <sendInstPacket>
 8002eb6:	46a5      	mov	sp, r4
		    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6] + packet[7])) & 0xFF;
		    packet[8] = Checksum;

		    sendInstPacket(packet, length);
		}
}
 8002eb8:	e077      	b.n	8002faa <turn+0x1fe>
		{
 8002eba:	466b      	mov	r3, sp
 8002ebc:	461e      	mov	r6, r3
		    uint8_t Speed_L = Speed;
 8002ebe:	89bb      	ldrh	r3, [r7, #12]
 8002ec0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		    uint8_t Speed_H = (Speed >> 8) + 4;		// 16 bits - 2 x 8 bits variables
 8002ec4:	89bb      	ldrh	r3, [r7, #12]
 8002ec6:	0a1b      	lsrs	r3, r3, #8
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	3304      	adds	r3, #4
 8002ece:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			uint8_t length = 9;
 8002ed2:	2309      	movs	r3, #9
 8002ed4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			uint8_t packet[length];
 8002ed8:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8002edc:	460b      	mov	r3, r1
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ee2:	b2cb      	uxtb	r3, r1
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	4698      	mov	r8, r3
 8002ee8:	4691      	mov	r9, r2
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ef6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002efa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002efe:	b2cb      	uxtb	r3, r1
 8002f00:	2200      	movs	r2, #0
 8002f02:	461c      	mov	r4, r3
 8002f04:	4615      	mov	r5, r2
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	f04f 0300 	mov.w	r3, #0
 8002f0e:	00eb      	lsls	r3, r5, #3
 8002f10:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f14:	00e2      	lsls	r2, r4, #3
 8002f16:	460b      	mov	r3, r1
 8002f18:	3307      	adds	r3, #7
 8002f1a:	08db      	lsrs	r3, r3, #3
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	ebad 0d03 	sub.w	sp, sp, r3
 8002f22:	466b      	mov	r3, sp
 8002f24:	3300      	adds	r3, #0
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
		    packet[0] = AX_HEADER;
 8002f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2a:	22ff      	movs	r2, #255	; 0xff
 8002f2c:	701a      	strb	r2, [r3, #0]
		    packet[1] = AX_HEADER;
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f30:	22ff      	movs	r2, #255	; 0xff
 8002f32:	705a      	strb	r2, [r3, #1]
		    packet[2] = ID;
 8002f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f36:	7bfa      	ldrb	r2, [r7, #15]
 8002f38:	709a      	strb	r2, [r3, #2]
		    packet[3] = length-4;
 8002f3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f3e:	3b04      	subs	r3, #4
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	70da      	strb	r2, [r3, #3]
		    packet[4] = AX_WRITE;
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	2203      	movs	r2, #3
 8002f4a:	711a      	strb	r2, [r3, #4]
		    packet[5] = ADDR_GOAL_SPEED_L;
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	2220      	movs	r2, #32
 8002f50:	715a      	strb	r2, [r3, #5]
		    packet[6] = Speed_L;
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002f58:	719a      	strb	r2, [r3, #6]
		    packet[7] = Speed_H;
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8002f60:	71da      	strb	r2, [r3, #7]
		    uint8_t Checksum = (~(packet[2] + packet[3] + packet[4] + packet[5] + packet[6] + packet[7])) & 0xFF;
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	789a      	ldrb	r2, [r3, #2]
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	78db      	ldrb	r3, [r3, #3]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f70:	791b      	ldrb	r3, [r3, #4]
 8002f72:	4413      	add	r3, r2
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	795b      	ldrb	r3, [r3, #5]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	799b      	ldrb	r3, [r3, #6]
 8002f82:	4413      	add	r3, r2
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	79db      	ldrb	r3, [r3, #7]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		    packet[8] = Checksum;
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002f9a:	721a      	strb	r2, [r3, #8]
		    sendInstPacket(packet, length);
 8002f9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002fa4:	f7ff fa4e 	bl	8002444 <sendInstPacket>
 8002fa8:	46b5      	mov	sp, r6
}
 8002faa:	bf00      	nop
 8002fac:	3734      	adds	r7, #52	; 0x34
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002fb4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4a07      	ldr	r2, [pc, #28]	; (8002fe0 <vApplicationGetIdleTaskMemory+0x2c>)
 8002fc4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	4a06      	ldr	r2, [pc, #24]	; (8002fe4 <vApplicationGetIdleTaskMemory+0x30>)
 8002fca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2280      	movs	r2, #128	; 0x80
 8002fd0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002fd2:	bf00      	nop
 8002fd4:	3714      	adds	r7, #20
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	200002c8 	.word	0x200002c8
 8002fe4:	2000037c 	.word	0x2000037c

08002fe8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002fe8:	b5b0      	push	{r4, r5, r7, lr}
 8002fea:	b0a0      	sub	sp, #128	; 0x80
 8002fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	deltaInit();
 8002fee:	f7ff f9d3 	bl	8002398 <deltaInit>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of ReadPosSem */
  osSemaphoreDef(ReadPosSem);
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	67fb      	str	r3, [r7, #124]	; 0x7c
  ReadPosSemHandle = osSemaphoreCreate(osSemaphore(ReadPosSem), 1);
 8002ffa:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002ffe:	2101      	movs	r1, #1
 8003000:	4618      	mov	r0, r3
 8003002:	f004 fcc7 	bl	8007994 <osSemaphoreCreate>
 8003006:	4603      	mov	r3, r0
 8003008:	4a30      	ldr	r2, [pc, #192]	; (80030cc <MX_FREERTOS_Init+0xe4>)
 800300a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */


	osSemaphoreWait(ReadPosSemHandle, 0);
 800300c:	4b2f      	ldr	r3, [pc, #188]	; (80030cc <MX_FREERTOS_Init+0xe4>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2100      	movs	r1, #0
 8003012:	4618      	mov	r0, r3
 8003014:	f004 fcfe 	bl	8007a14 <osSemaphoreWait>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of setQueue */
  osMessageQDef(setQueue, 10, queueMessage);
 8003018:	4b2d      	ldr	r3, [pc, #180]	; (80030d0 <MX_FREERTOS_Init+0xe8>)
 800301a:	f107 0468 	add.w	r4, r7, #104	; 0x68
 800301e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003020:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  setQueueHandle = osMessageCreate(osMessageQ(setQueue), NULL);
 8003024:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003028:	2100      	movs	r1, #0
 800302a:	4618      	mov	r0, r3
 800302c:	f004 fd76 	bl	8007b1c <osMessageCreate>
 8003030:	4603      	mov	r3, r0
 8003032:	4a28      	ldr	r2, [pc, #160]	; (80030d4 <MX_FREERTOS_Init+0xec>)
 8003034:	6013      	str	r3, [r2, #0]

  /* definition and creation of cmdQueue */
  osMessageQDef(cmdQueue, 10, 20);
 8003036:	4b28      	ldr	r3, [pc, #160]	; (80030d8 <MX_FREERTOS_Init+0xf0>)
 8003038:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800303c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800303e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  cmdQueueHandle = osMessageCreate(osMessageQ(cmdQueue), NULL);
 8003042:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003046:	2100      	movs	r1, #0
 8003048:	4618      	mov	r0, r3
 800304a:	f004 fd67 	bl	8007b1c <osMessageCreate>
 800304e:	4603      	mov	r3, r0
 8003050:	4a22      	ldr	r2, [pc, #136]	; (80030dc <MX_FREERTOS_Init+0xf4>)
 8003052:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 8003054:	4b22      	ldr	r3, [pc, #136]	; (80030e0 <MX_FREERTOS_Init+0xf8>)
 8003056:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800305a:	461d      	mov	r5, r3
 800305c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800305e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003060:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003064:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003068:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800306c:	2100      	movs	r1, #0
 800306e:	4618      	mov	r0, r3
 8003070:	f004 fc1b 	bl	80078aa <osThreadCreate>
 8003074:	4603      	mov	r3, r0
 8003076:	4a1b      	ldr	r2, [pc, #108]	; (80030e4 <MX_FREERTOS_Init+0xfc>)
 8003078:	6013      	str	r3, [r2, #0]

  /* definition and creation of calWritePosTask */
  osThreadDef(calWritePosTask, cal_Write_Pos_Task, osPriorityNormal, 0, 512);
 800307a:	4b1b      	ldr	r3, [pc, #108]	; (80030e8 <MX_FREERTOS_Init+0x100>)
 800307c:	f107 0420 	add.w	r4, r7, #32
 8003080:	461d      	mov	r5, r3
 8003082:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003084:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003086:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800308a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  calWritePosTaskHandle = osThreadCreate(osThread(calWritePosTask), NULL);
 800308e:	f107 0320 	add.w	r3, r7, #32
 8003092:	2100      	movs	r1, #0
 8003094:	4618      	mov	r0, r3
 8003096:	f004 fc08 	bl	80078aa <osThreadCreate>
 800309a:	4603      	mov	r3, r0
 800309c:	4a13      	ldr	r2, [pc, #76]	; (80030ec <MX_FREERTOS_Init+0x104>)
 800309e:	6013      	str	r3, [r2, #0]

  /* definition and creation of cmdHandleTask */
  osThreadDef(cmdHandleTask, cmd_Handle_Task, osPriorityNormal, 0, 512);
 80030a0:	4b13      	ldr	r3, [pc, #76]	; (80030f0 <MX_FREERTOS_Init+0x108>)
 80030a2:	1d3c      	adds	r4, r7, #4
 80030a4:	461d      	mov	r5, r3
 80030a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80030ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  cmdHandleTaskHandle = osThreadCreate(osThread(cmdHandleTask), NULL);
 80030b2:	1d3b      	adds	r3, r7, #4
 80030b4:	2100      	movs	r1, #0
 80030b6:	4618      	mov	r0, r3
 80030b8:	f004 fbf7 	bl	80078aa <osThreadCreate>
 80030bc:	4603      	mov	r3, r0
 80030be:	4a0d      	ldr	r2, [pc, #52]	; (80030f4 <MX_FREERTOS_Init+0x10c>)
 80030c0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80030c2:	bf00      	nop
 80030c4:	3780      	adds	r7, #128	; 0x80
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bdb0      	pop	{r4, r5, r7, pc}
 80030ca:	bf00      	nop
 80030cc:	200002c4 	.word	0x200002c4
 80030d0:	0800ef74 	.word	0x0800ef74
 80030d4:	200002bc 	.word	0x200002bc
 80030d8:	0800ef84 	.word	0x0800ef84
 80030dc:	200002c0 	.word	0x200002c0
 80030e0:	0800ef94 	.word	0x0800ef94
 80030e4:	200002b0 	.word	0x200002b0
 80030e8:	0800efb0 	.word	0x0800efb0
 80030ec:	200002b4 	.word	0x200002b4
 80030f0:	0800efcc 	.word	0x0800efcc
 80030f4:	200002b8 	.word	0x200002b8

080030f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b08c      	sub	sp, #48	; 0x30
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	  if(osSemaphoreWait(ReadPosSemHandle, osWaitForever) == osOK)
 8003100:	4b5c      	ldr	r3, [pc, #368]	; (8003274 <StartDefaultTask+0x17c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f04f 31ff 	mov.w	r1, #4294967295
 8003108:	4618      	mov	r0, r3
 800310a:	f004 fc83 	bl	8007a14 <osSemaphoreWait>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1f5      	bne.n	8003100 <StartDefaultTask+0x8>
	  {

		  //uint8_t buf[30];
		  uint16_t presentPos[3];
		  for(int i = 0; i < 3; i++){
 8003114:	2300      	movs	r3, #0
 8003116:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003118:	e00f      	b.n	800313a <StartDefaultTask+0x42>

			  presentPos[i]=getPresentPosition(i);
 800311a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311c:	b2db      	uxtb	r3, r3
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff fbba 	bl	8002898 <getPresentPosition>
 8003124:	4603      	mov	r3, r0
 8003126:	461a      	mov	r2, r3
 8003128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	3330      	adds	r3, #48	; 0x30
 800312e:	443b      	add	r3, r7
 8003130:	f823 2c14 	strh.w	r2, [r3, #-20]
		  for(int i = 0; i < 3; i++){
 8003134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003136:	3301      	adds	r3, #1
 8003138:	62fb      	str	r3, [r7, #44]	; 0x2c
 800313a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313c:	2b02      	cmp	r3, #2
 800313e:	ddec      	ble.n	800311a <StartDefaultTask+0x22>

		  }
		  double* tempTheta = ConversionFromServo(presentPos[0], presentPos[1], presentPos[2]);
 8003140:	8bbb      	ldrh	r3, [r7, #28]
 8003142:	8bf9      	ldrh	r1, [r7, #30]
 8003144:	8c3a      	ldrh	r2, [r7, #32]
 8003146:	4618      	mov	r0, r3
 8003148:	f7fd ff66 	bl	8001018 <ConversionFromServo>
 800314c:	6278      	str	r0, [r7, #36]	; 0x24
		  forward(tempTheta[0],tempTheta[1],tempTheta[2]);
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	ed93 7b00 	vldr	d7, [r3]
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	3308      	adds	r3, #8
 8003158:	ed93 6b00 	vldr	d6, [r3]
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315e:	3310      	adds	r3, #16
 8003160:	ed93 5b00 	vldr	d5, [r3]
 8003164:	eeb0 2a45 	vmov.f32	s4, s10
 8003168:	eef0 2a65 	vmov.f32	s5, s11
 800316c:	eeb0 1a46 	vmov.f32	s2, s12
 8003170:	eef0 1a66 	vmov.f32	s3, s13
 8003174:	eeb0 0a47 	vmov.f32	s0, s14
 8003178:	eef0 0a67 	vmov.f32	s1, s15
 800317c:	f7fe fab4 	bl	80016e8 <forward>

		  char buf[14]="Z\0";
 8003180:	235a      	movs	r3, #90	; 0x5a
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	f107 0310 	add.w	r3, r7, #16
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	605a      	str	r2, [r3, #4]
 800318e:	811a      	strh	r2, [r3, #8]
		  for(int i=0; i<3; i++){
 8003190:	2300      	movs	r3, #0
 8003192:	62bb      	str	r3, [r7, #40]	; 0x28
 8003194:	e04d      	b.n	8003232 <StartDefaultTask+0x13a>
			  if((int)coord[i] >= 0){
 8003196:	4a38      	ldr	r2, [pc, #224]	; (8003278 <StartDefaultTask+0x180>)
 8003198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	4413      	add	r3, r2
 800319e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a2:	4610      	mov	r0, r2
 80031a4:	4619      	mov	r1, r3
 80031a6:	f7fd fce7 	bl	8000b78 <__aeabi_d2iz>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	db0f      	blt.n	80031d0 <StartDefaultTask+0xd8>
				  strcat(buf, "+");
 80031b0:	f107 030c 	add.w	r3, r7, #12
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7fd f81b 	bl	80001f0 <strlen>
 80031ba:	4603      	mov	r3, r0
 80031bc:	461a      	mov	r2, r3
 80031be:	f107 030c 	add.w	r3, r7, #12
 80031c2:	4413      	add	r3, r2
 80031c4:	492d      	ldr	r1, [pc, #180]	; (800327c <StartDefaultTask+0x184>)
 80031c6:	461a      	mov	r2, r3
 80031c8:	460b      	mov	r3, r1
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	8013      	strh	r3, [r2, #0]
 80031ce:	e00e      	b.n	80031ee <StartDefaultTask+0xf6>
			  }else{
				  strcat(buf, "-");
 80031d0:	f107 030c 	add.w	r3, r7, #12
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fd f80b 	bl	80001f0 <strlen>
 80031da:	4603      	mov	r3, r0
 80031dc:	461a      	mov	r2, r3
 80031de:	f107 030c 	add.w	r3, r7, #12
 80031e2:	4413      	add	r3, r2
 80031e4:	4926      	ldr	r1, [pc, #152]	; (8003280 <StartDefaultTask+0x188>)
 80031e6:	461a      	mov	r2, r3
 80031e8:	460b      	mov	r3, r1
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	8013      	strh	r3, [r2, #0]
			  }
			  char temp[4]="\0";
 80031ee:	2300      	movs	r3, #0
 80031f0:	60bb      	str	r3, [r7, #8]
			  sprintf(temp, "%03d",(int)abs(coord[i]));
 80031f2:	4a21      	ldr	r2, [pc, #132]	; (8003278 <StartDefaultTask+0x180>)
 80031f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	4413      	add	r3, r2
 80031fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fe:	4610      	mov	r0, r2
 8003200:	4619      	mov	r1, r3
 8003202:	f7fd fcb9 	bl	8000b78 <__aeabi_d2iz>
 8003206:	4603      	mov	r3, r0
 8003208:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800320c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003210:	f107 0308 	add.w	r3, r7, #8
 8003214:	491b      	ldr	r1, [pc, #108]	; (8003284 <StartDefaultTask+0x18c>)
 8003216:	4618      	mov	r0, r3
 8003218:	f008 f9a0 	bl	800b55c <siprintf>
			  strcat(buf, temp);
 800321c:	f107 0208 	add.w	r2, r7, #8
 8003220:	f107 030c 	add.w	r3, r7, #12
 8003224:	4611      	mov	r1, r2
 8003226:	4618      	mov	r0, r3
 8003228:	f008 f9fb 	bl	800b622 <strcat>
		  for(int i=0; i<3; i++){
 800322c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322e:	3301      	adds	r3, #1
 8003230:	62bb      	str	r3, [r7, #40]	; 0x28
 8003232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003234:	2b02      	cmp	r3, #2
 8003236:	ddae      	ble.n	8003196 <StartDefaultTask+0x9e>
		  }
		  strcat(buf, "\n");
 8003238:	f107 030c 	add.w	r3, r7, #12
 800323c:	4618      	mov	r0, r3
 800323e:	f7fc ffd7 	bl	80001f0 <strlen>
 8003242:	4603      	mov	r3, r0
 8003244:	461a      	mov	r2, r3
 8003246:	f107 030c 	add.w	r3, r7, #12
 800324a:	4413      	add	r3, r2
 800324c:	490e      	ldr	r1, [pc, #56]	; (8003288 <StartDefaultTask+0x190>)
 800324e:	461a      	mov	r2, r3
 8003250:	460b      	mov	r3, r1
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	8013      	strh	r3, [r2, #0]

		  HAL_UART_Transmit(&huart3, (uint8_t*)buf, sizeof(buf), 1000);
 8003256:	f107 010c 	add.w	r1, r7, #12
 800325a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800325e:	220e      	movs	r2, #14
 8003260:	480a      	ldr	r0, [pc, #40]	; (800328c <StartDefaultTask+0x194>)
 8003262:	f003 f8a6 	bl	80063b2 <HAL_UART_Transmit>

		  osThreadSetPriority(defaultTaskHandle, osPriorityNormal);
 8003266:	4b0a      	ldr	r3, [pc, #40]	; (8003290 <StartDefaultTask+0x198>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2100      	movs	r1, #0
 800326c:	4618      	mov	r0, r3
 800326e:	f004 fb68 	bl	8007942 <osThreadSetPriority>
	  if(osSemaphoreWait(ReadPosSemHandle, osWaitForever) == osOK)
 8003272:	e745      	b.n	8003100 <StartDefaultTask+0x8>
 8003274:	200002c4 	.word	0x200002c4
 8003278:	20000280 	.word	0x20000280
 800327c:	0800efe8 	.word	0x0800efe8
 8003280:	0800efec 	.word	0x0800efec
 8003284:	0800eff0 	.word	0x0800eff0
 8003288:	0800eff8 	.word	0x0800eff8
 800328c:	2000068c 	.word	0x2000068c
 8003290:	200002b0 	.word	0x200002b0

08003294 <cal_Write_Pos_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_cal_Write_Pos_Task */
void cal_Write_Pos_Task(void const * argument)
{
 8003294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003298:	b099      	sub	sp, #100	; 0x64
 800329a:	af02      	add	r7, sp, #8
 800329c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN cal_Write_Pos_Task */
  /* Infinite loop */
  for(;;)
  {
	  osEvent setEvent;
	  setEvent = osMessageGet(setQueueHandle, osWaitForever);
 800329e:	4ba8      	ldr	r3, [pc, #672]	; (8003540 <cal_Write_Pos_Task+0x2ac>)
 80032a0:	6819      	ldr	r1, [r3, #0]
 80032a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80032a6:	f04f 32ff 	mov.w	r2, #4294967295
 80032aa:	4618      	mov	r0, r3
 80032ac:	f004 fc9e 	bl	8007bec <osMessageGet>
		if(setEvent.status == osEventMessage)
 80032b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032b2:	2b10      	cmp	r3, #16
 80032b4:	d1f3      	bne.n	800329e <cal_Write_Pos_Task+0xa>
		{
			queueMessage *msgp;
			msgp = setEvent.value.p;
 80032b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032b8:	653b      	str	r3, [r7, #80]	; 0x50
			queueMessage msg = *(msgp);
 80032ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032bc:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80032c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

			printf("X : %lf \r\n",msg.mX);
 80032c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fd f94d 	bl	8000568 <__aeabi_f2d>
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	489c      	ldr	r0, [pc, #624]	; (8003544 <cal_Write_Pos_Task+0x2b0>)
 80032d4:	f008 f83a 	bl	800b34c <iprintf>
			printf("Y : %lf \r\n",msg.mY);
 80032d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fd f944 	bl	8000568 <__aeabi_f2d>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4898      	ldr	r0, [pc, #608]	; (8003548 <cal_Write_Pos_Task+0x2b4>)
 80032e6:	f008 f831 	bl	800b34c <iprintf>
			printf("Z : %lf \r\n",msg.mZ);
 80032ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fd f93b 	bl	8000568 <__aeabi_f2d>
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	4895      	ldr	r0, [pc, #596]	; (800354c <cal_Write_Pos_Task+0x2b8>)
 80032f8:	f008 f828 	bl	800b34c <iprintf>
			printf("Speed : %d \r\n",msg.maxSpeed);
 80032fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032fe:	4619      	mov	r1, r3
 8003300:	4893      	ldr	r0, [pc, #588]	; (8003550 <cal_Write_Pos_Task+0x2bc>)
 8003302:	f008 f823 	bl	800b34c <iprintf>

			setCoordinates((double)msg.mX,(double)msg.mY,(double)msg.mZ);
 8003306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003308:	4618      	mov	r0, r3
 800330a:	f7fd f92d 	bl	8000568 <__aeabi_f2d>
 800330e:	4604      	mov	r4, r0
 8003310:	460d      	mov	r5, r1
 8003312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003314:	4618      	mov	r0, r3
 8003316:	f7fd f927 	bl	8000568 <__aeabi_f2d>
 800331a:	4680      	mov	r8, r0
 800331c:	4689      	mov	r9, r1
 800331e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003320:	4618      	mov	r0, r3
 8003322:	f7fd f921 	bl	8000568 <__aeabi_f2d>
 8003326:	4602      	mov	r2, r0
 8003328:	460b      	mov	r3, r1
 800332a:	ec43 2b12 	vmov	d2, r2, r3
 800332e:	ec49 8b11 	vmov	d1, r8, r9
 8003332:	ec45 4b10 	vmov	d0, r4, r5
 8003336:	f7fd fee1 	bl	80010fc <setCoordinates>

			uint16_t GPBefore[3];
			memcpy(GPBefore, GP, sizeof(uint16_t)*3);
 800333a:	4a86      	ldr	r2, [pc, #536]	; (8003554 <cal_Write_Pos_Task+0x2c0>)
 800333c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003340:	6810      	ldr	r0, [r2, #0]
 8003342:	6018      	str	r0, [r3, #0]
 8003344:	8892      	ldrh	r2, [r2, #4]
 8003346:	809a      	strh	r2, [r3, #4]

			inverse();
 8003348:	f7fe f8b2 	bl	80014b0 <inverse>
			ServoConversion();
 800334c:	f7fd fde0 	bl	8000f10 <ServoConversion>
			uint16_t diff[3];

			diff[0]=abs(GP[0]-GPBefore[0]);
 8003350:	4b80      	ldr	r3, [pc, #512]	; (8003554 <cal_Write_Pos_Task+0x2c0>)
 8003352:	881b      	ldrh	r3, [r3, #0]
 8003354:	461a      	mov	r2, r3
 8003356:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	bfb8      	it	lt
 800335e:	425b      	neglt	r3, r3
 8003360:	b29b      	uxth	r3, r3
 8003362:	843b      	strh	r3, [r7, #32]
			diff[1]=abs(GP[1]-GPBefore[1]);
 8003364:	4b7b      	ldr	r3, [pc, #492]	; (8003554 <cal_Write_Pos_Task+0x2c0>)
 8003366:	885b      	ldrh	r3, [r3, #2]
 8003368:	461a      	mov	r2, r3
 800336a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	bfb8      	it	lt
 8003372:	425b      	neglt	r3, r3
 8003374:	b29b      	uxth	r3, r3
 8003376:	847b      	strh	r3, [r7, #34]	; 0x22
			diff[2]=abs(GP[2]-GPBefore[2]);
 8003378:	4b76      	ldr	r3, [pc, #472]	; (8003554 <cal_Write_Pos_Task+0x2c0>)
 800337a:	889b      	ldrh	r3, [r3, #4]
 800337c:	461a      	mov	r2, r3
 800337e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	bfb8      	it	lt
 8003386:	425b      	neglt	r3, r3
 8003388:	b29b      	uxth	r3, r3
 800338a:	84bb      	strh	r3, [r7, #36]	; 0x24

			uint16_t max = (diff[0] > diff[1] && diff[0] > diff[2]) ? diff[0] : (diff[1] > diff[2]) ? diff[1] : diff[2];
 800338c:	8c3a      	ldrh	r2, [r7, #32]
 800338e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003390:	429a      	cmp	r2, r3
 8003392:	d905      	bls.n	80033a0 <cal_Write_Pos_Task+0x10c>
 8003394:	8c3a      	ldrh	r2, [r7, #32]
 8003396:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003398:	429a      	cmp	r2, r3
 800339a:	d901      	bls.n	80033a0 <cal_Write_Pos_Task+0x10c>
 800339c:	8c3b      	ldrh	r3, [r7, #32]
 800339e:	e005      	b.n	80033ac <cal_Write_Pos_Task+0x118>
 80033a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80033a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80033a4:	4293      	cmp	r3, r2
 80033a6:	bf38      	it	cc
 80033a8:	4613      	movcc	r3, r2
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

			double speed[3]={100,100,100};
 80033b0:	4b69      	ldr	r3, [pc, #420]	; (8003558 <cal_Write_Pos_Task+0x2c4>)
 80033b2:	f107 0408 	add.w	r4, r7, #8
 80033b6:	461d      	mov	r5, r3
 80033b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033bc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80033c0:	e884 0003 	stmia.w	r4, {r0, r1}

			if(max!=0){
 80033c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 808c 	beq.w	80034e6 <cal_Write_Pos_Task+0x252>
				speed[0]=((double)diff[0]/max)*msg.maxSpeed;
 80033ce:	8c3b      	ldrh	r3, [r7, #32]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fd f8a7 	bl	8000524 <__aeabi_ui2d>
 80033d6:	4604      	mov	r4, r0
 80033d8:	460d      	mov	r5, r1
 80033da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fd f8b0 	bl	8000544 <__aeabi_i2d>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4620      	mov	r0, r4
 80033ea:	4629      	mov	r1, r5
 80033ec:	f7fd fa3e 	bl	800086c <__aeabi_ddiv>
 80033f0:	4602      	mov	r2, r0
 80033f2:	460b      	mov	r3, r1
 80033f4:	4614      	mov	r4, r2
 80033f6:	461d      	mov	r5, r3
 80033f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fd f8a2 	bl	8000544 <__aeabi_i2d>
 8003400:	4602      	mov	r2, r0
 8003402:	460b      	mov	r3, r1
 8003404:	4620      	mov	r0, r4
 8003406:	4629      	mov	r1, r5
 8003408:	f7fd f906 	bl	8000618 <__aeabi_dmul>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	e9c7 2302 	strd	r2, r3, [r7, #8]
				speed[1]=((double)diff[1]/max)*msg.maxSpeed;
 8003414:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003416:	4618      	mov	r0, r3
 8003418:	f7fd f884 	bl	8000524 <__aeabi_ui2d>
 800341c:	4604      	mov	r4, r0
 800341e:	460d      	mov	r5, r1
 8003420:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003424:	4618      	mov	r0, r3
 8003426:	f7fd f88d 	bl	8000544 <__aeabi_i2d>
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	4620      	mov	r0, r4
 8003430:	4629      	mov	r1, r5
 8003432:	f7fd fa1b 	bl	800086c <__aeabi_ddiv>
 8003436:	4602      	mov	r2, r0
 8003438:	460b      	mov	r3, r1
 800343a:	4614      	mov	r4, r2
 800343c:	461d      	mov	r5, r3
 800343e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003440:	4618      	mov	r0, r3
 8003442:	f7fd f87f 	bl	8000544 <__aeabi_i2d>
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	4620      	mov	r0, r4
 800344c:	4629      	mov	r1, r5
 800344e:	f7fd f8e3 	bl	8000618 <__aeabi_dmul>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	e9c7 2304 	strd	r2, r3, [r7, #16]
				speed[2]=((double)diff[2]/max)*msg.maxSpeed;
 800345a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800345c:	4618      	mov	r0, r3
 800345e:	f7fd f861 	bl	8000524 <__aeabi_ui2d>
 8003462:	4604      	mov	r4, r0
 8003464:	460d      	mov	r5, r1
 8003466:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800346a:	4618      	mov	r0, r3
 800346c:	f7fd f86a 	bl	8000544 <__aeabi_i2d>
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	4620      	mov	r0, r4
 8003476:	4629      	mov	r1, r5
 8003478:	f7fd f9f8 	bl	800086c <__aeabi_ddiv>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	4614      	mov	r4, r2
 8003482:	461d      	mov	r5, r3
 8003484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003486:	4618      	mov	r0, r3
 8003488:	f7fd f85c 	bl	8000544 <__aeabi_i2d>
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	4620      	mov	r0, r4
 8003492:	4629      	mov	r1, r5
 8003494:	f7fd f8c0 	bl	8000618 <__aeabi_dmul>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	e9c7 2306 	strd	r2, r3, [r7, #24]
				for(int i=0; i<3; i++){
 80034a0:	2300      	movs	r3, #0
 80034a2:	657b      	str	r3, [r7, #84]	; 0x54
 80034a4:	e01c      	b.n	80034e0 <cal_Write_Pos_Task+0x24c>
					if(speed[i]<1) speed[i]=10;
 80034a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	3358      	adds	r3, #88	; 0x58
 80034ac:	443b      	add	r3, r7
 80034ae:	3b50      	subs	r3, #80	; 0x50
 80034b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	4b28      	ldr	r3, [pc, #160]	; (800355c <cal_Write_Pos_Task+0x2c8>)
 80034ba:	f7fd fb1f 	bl	8000afc <__aeabi_dcmplt>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <cal_Write_Pos_Task+0x246>
 80034c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	3358      	adds	r3, #88	; 0x58
 80034ca:	443b      	add	r3, r7
 80034cc:	f1a3 0150 	sub.w	r1, r3, #80	; 0x50
 80034d0:	f04f 0200 	mov.w	r2, #0
 80034d4:	4b22      	ldr	r3, [pc, #136]	; (8003560 <cal_Write_Pos_Task+0x2cc>)
 80034d6:	e9c1 2300 	strd	r2, r3, [r1]
				for(int i=0; i<3; i++){
 80034da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034dc:	3301      	adds	r3, #1
 80034de:	657b      	str	r3, [r7, #84]	; 0x54
 80034e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	dddf      	ble.n	80034a6 <cal_Write_Pos_Task+0x212>
				}
			}

			syncWriteGoalPosition(GP[0],(uint16_t)speed[0],GP[1],(uint16_t)speed[1],GP[2],(uint16_t)speed[2]);
 80034e6:	4b1b      	ldr	r3, [pc, #108]	; (8003554 <cal_Write_Pos_Task+0x2c0>)
 80034e8:	881d      	ldrh	r5, [r3, #0]
 80034ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034ee:	4610      	mov	r0, r2
 80034f0:	4619      	mov	r1, r3
 80034f2:	f7fd fb69 	bl	8000bc8 <__aeabi_d2uiz>
 80034f6:	4603      	mov	r3, r0
 80034f8:	b29e      	uxth	r6, r3
 80034fa:	4b16      	ldr	r3, [pc, #88]	; (8003554 <cal_Write_Pos_Task+0x2c0>)
 80034fc:	f8b3 8002 	ldrh.w	r8, [r3, #2]
 8003500:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003504:	4610      	mov	r0, r2
 8003506:	4619      	mov	r1, r3
 8003508:	f7fd fb5e 	bl	8000bc8 <__aeabi_d2uiz>
 800350c:	4603      	mov	r3, r0
 800350e:	fa1f f983 	uxth.w	r9, r3
 8003512:	4b10      	ldr	r3, [pc, #64]	; (8003554 <cal_Write_Pos_Task+0x2c0>)
 8003514:	889c      	ldrh	r4, [r3, #4]
 8003516:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800351a:	4610      	mov	r0, r2
 800351c:	4619      	mov	r1, r3
 800351e:	f7fd fb53 	bl	8000bc8 <__aeabi_d2uiz>
 8003522:	4603      	mov	r3, r0
 8003524:	b29b      	uxth	r3, r3
 8003526:	9301      	str	r3, [sp, #4]
 8003528:	9400      	str	r4, [sp, #0]
 800352a:	464b      	mov	r3, r9
 800352c:	4642      	mov	r2, r8
 800352e:	4631      	mov	r1, r6
 8003530:	4628      	mov	r0, r5
 8003532:	f7ff f89b 	bl	800266c <syncWriteGoalPosition>
			servoDelay(10);
 8003536:	200a      	movs	r0, #10
 8003538:	f7fe ff78 	bl	800242c <servoDelay>
  {
 800353c:	e6af      	b.n	800329e <cal_Write_Pos_Task+0xa>
 800353e:	bf00      	nop
 8003540:	200002bc 	.word	0x200002bc
 8003544:	0800effc 	.word	0x0800effc
 8003548:	0800f008 	.word	0x0800f008
 800354c:	0800f014 	.word	0x0800f014
 8003550:	0800f020 	.word	0x0800f020
 8003554:	20000278 	.word	0x20000278
 8003558:	0800f030 	.word	0x0800f030
 800355c:	3ff00000 	.word	0x3ff00000
 8003560:	40240000 	.word	0x40240000

08003564 <cmd_Handle_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_cmd_Handle_Task */
void cmd_Handle_Task(void const * argument)
{
 8003564:	b5b0      	push	{r4, r5, r7, lr}
 8003566:	b08e      	sub	sp, #56	; 0x38
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN cmd_Handle_Task */
  /* Infinite loop */
  for(;;)
  {
	  osEvent setEvent;
	  setEvent = osMessageGet(cmdQueueHandle, osWaitForever);
 800356c:	4b1b      	ldr	r3, [pc, #108]	; (80035dc <cmd_Handle_Task+0x78>)
 800356e:	6819      	ldr	r1, [r3, #0]
 8003570:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003574:	f04f 32ff 	mov.w	r2, #4294967295
 8003578:	4618      	mov	r0, r3
 800357a:	f004 fb37 	bl	8007bec <osMessageGet>
		if(setEvent.status == osEventMessage)
 800357e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003580:	2b10      	cmp	r3, #16
 8003582:	d1f3      	bne.n	800356c <cmd_Handle_Task+0x8>
		{

			queueMessage msg;
			char cmd[20]={0,};
 8003584:	2300      	movs	r3, #0
 8003586:	60bb      	str	r3, [r7, #8]
 8003588:	f107 030c 	add.w	r3, r7, #12
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	605a      	str	r2, [r3, #4]
 8003592:	609a      	str	r2, [r3, #8]
 8003594:	60da      	str	r2, [r3, #12]
			memcpy(cmd, setEvent.value.p, 20);
 8003596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003598:	f107 0408 	add.w	r4, r7, #8
 800359c:	461d      	mov	r5, r3
 800359e:	6828      	ldr	r0, [r5, #0]
 80035a0:	6869      	ldr	r1, [r5, #4]
 80035a2:	68aa      	ldr	r2, [r5, #8]
 80035a4:	68eb      	ldr	r3, [r5, #12]
 80035a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035a8:	6928      	ldr	r0, [r5, #16]
 80035aa:	6020      	str	r0, [r4, #0]
			if(cmd_handler(cmd, &msg)){
 80035ac:	f107 021c 	add.w	r2, r7, #28
 80035b0:	f107 0308 	add.w	r3, r7, #8
 80035b4:	4611      	mov	r1, r2
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fe fe30 	bl	800221c <cmd_handler>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0d4      	beq.n	800356c <cmd_Handle_Task+0x8>
				osSemaphoreRelease(ReadPosSemHandle);
 80035c2:	4b07      	ldr	r3, [pc, #28]	; (80035e0 <cmd_Handle_Task+0x7c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f004 fa72 	bl	8007ab0 <osSemaphoreRelease>
				osThreadSetPriority(defaultTaskHandle, osPriorityAboveNormal);
 80035cc:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <cmd_Handle_Task+0x80>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2101      	movs	r1, #1
 80035d2:	4618      	mov	r0, r3
 80035d4:	f004 f9b5 	bl	8007942 <osThreadSetPriority>
  {
 80035d8:	e7c8      	b.n	800356c <cmd_Handle_Task+0x8>
 80035da:	bf00      	nop
 80035dc:	200002c0 	.word	0x200002c0
 80035e0:	200002c4 	.word	0x200002c4
 80035e4:	200002b0 	.word	0x200002b0

080035e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08a      	sub	sp, #40	; 0x28
 80035ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035ee:	f107 0314 	add.w	r3, r7, #20
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	605a      	str	r2, [r3, #4]
 80035f8:	609a      	str	r2, [r3, #8]
 80035fa:	60da      	str	r2, [r3, #12]
 80035fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035fe:	2300      	movs	r3, #0
 8003600:	613b      	str	r3, [r7, #16]
 8003602:	4b40      	ldr	r3, [pc, #256]	; (8003704 <MX_GPIO_Init+0x11c>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	4a3f      	ldr	r2, [pc, #252]	; (8003704 <MX_GPIO_Init+0x11c>)
 8003608:	f043 0304 	orr.w	r3, r3, #4
 800360c:	6313      	str	r3, [r2, #48]	; 0x30
 800360e:	4b3d      	ldr	r3, [pc, #244]	; (8003704 <MX_GPIO_Init+0x11c>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	f003 0304 	and.w	r3, r3, #4
 8003616:	613b      	str	r3, [r7, #16]
 8003618:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800361a:	2300      	movs	r3, #0
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	4b39      	ldr	r3, [pc, #228]	; (8003704 <MX_GPIO_Init+0x11c>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	4a38      	ldr	r2, [pc, #224]	; (8003704 <MX_GPIO_Init+0x11c>)
 8003624:	f043 0301 	orr.w	r3, r3, #1
 8003628:	6313      	str	r3, [r2, #48]	; 0x30
 800362a:	4b36      	ldr	r3, [pc, #216]	; (8003704 <MX_GPIO_Init+0x11c>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003636:	2300      	movs	r3, #0
 8003638:	60bb      	str	r3, [r7, #8]
 800363a:	4b32      	ldr	r3, [pc, #200]	; (8003704 <MX_GPIO_Init+0x11c>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	4a31      	ldr	r2, [pc, #196]	; (8003704 <MX_GPIO_Init+0x11c>)
 8003640:	f043 0302 	orr.w	r3, r3, #2
 8003644:	6313      	str	r3, [r2, #48]	; 0x30
 8003646:	4b2f      	ldr	r3, [pc, #188]	; (8003704 <MX_GPIO_Init+0x11c>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	60bb      	str	r3, [r7, #8]
 8003650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003652:	2300      	movs	r3, #0
 8003654:	607b      	str	r3, [r7, #4]
 8003656:	4b2b      	ldr	r3, [pc, #172]	; (8003704 <MX_GPIO_Init+0x11c>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	4a2a      	ldr	r2, [pc, #168]	; (8003704 <MX_GPIO_Init+0x11c>)
 800365c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003660:	6313      	str	r3, [r2, #48]	; 0x30
 8003662:	4b28      	ldr	r3, [pc, #160]	; (8003704 <MX_GPIO_Init+0x11c>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800366a:	607b      	str	r3, [r7, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800366e:	2300      	movs	r3, #0
 8003670:	603b      	str	r3, [r7, #0]
 8003672:	4b24      	ldr	r3, [pc, #144]	; (8003704 <MX_GPIO_Init+0x11c>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	4a23      	ldr	r2, [pc, #140]	; (8003704 <MX_GPIO_Init+0x11c>)
 8003678:	f043 0308 	orr.w	r3, r3, #8
 800367c:	6313      	str	r3, [r2, #48]	; 0x30
 800367e:	4b21      	ldr	r3, [pc, #132]	; (8003704 <MX_GPIO_Init+0x11c>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	603b      	str	r3, [r7, #0]
 8003688:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800368a:	2200      	movs	r2, #0
 800368c:	2101      	movs	r1, #1
 800368e:	481e      	ldr	r0, [pc, #120]	; (8003708 <MX_GPIO_Init+0x120>)
 8003690:	f001 fbe6 	bl	8004e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_SET);
 8003694:	2201      	movs	r2, #1
 8003696:	2101      	movs	r1, #1
 8003698:	481c      	ldr	r0, [pc, #112]	; (800370c <MX_GPIO_Init+0x124>)
 800369a:	f001 fbe1 	bl	8004e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Direction_GPIO_Port, Direction_Pin, GPIO_PIN_RESET);
 800369e:	2200      	movs	r2, #0
 80036a0:	2180      	movs	r1, #128	; 0x80
 80036a2:	481b      	ldr	r0, [pc, #108]	; (8003710 <MX_GPIO_Init+0x128>)
 80036a4:	f001 fbdc 	bl	8004e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80036a8:	2301      	movs	r3, #1
 80036aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036ac:	2301      	movs	r3, #1
 80036ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b0:	2300      	movs	r3, #0
 80036b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b4:	2300      	movs	r3, #0
 80036b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036b8:	f107 0314 	add.w	r3, r7, #20
 80036bc:	4619      	mov	r1, r3
 80036be:	4812      	ldr	r0, [pc, #72]	; (8003708 <MX_GPIO_Init+0x120>)
 80036c0:	f001 fa22 	bl	8004b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80036c4:	2301      	movs	r3, #1
 80036c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036c8:	2301      	movs	r3, #1
 80036ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036cc:	2300      	movs	r3, #0
 80036ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036d0:	2300      	movs	r3, #0
 80036d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80036d4:	f107 0314 	add.w	r3, r7, #20
 80036d8:	4619      	mov	r1, r3
 80036da:	480c      	ldr	r0, [pc, #48]	; (800370c <MX_GPIO_Init+0x124>)
 80036dc:	f001 fa14 	bl	8004b08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Direction_Pin;
 80036e0:	2380      	movs	r3, #128	; 0x80
 80036e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80036e4:	2311      	movs	r3, #17
 80036e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e8:	2300      	movs	r3, #0
 80036ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ec:	2300      	movs	r3, #0
 80036ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Direction_GPIO_Port, &GPIO_InitStruct);
 80036f0:	f107 0314 	add.w	r3, r7, #20
 80036f4:	4619      	mov	r1, r3
 80036f6:	4806      	ldr	r0, [pc, #24]	; (8003710 <MX_GPIO_Init+0x128>)
 80036f8:	f001 fa06 	bl	8004b08 <HAL_GPIO_Init>

}
 80036fc:	bf00      	nop
 80036fe:	3728      	adds	r7, #40	; 0x28
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40023800 	.word	0x40023800
 8003708:	40020400 	.word	0x40020400
 800370c:	40021800 	.word	0x40021800
 8003710:	40020c00 	.word	0x40020c00

08003714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003718:	f000 fcd0 	bl	80040bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800371c:	f000 f812 	bl	8003744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003720:	f7ff ff62 	bl	80035e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003724:	f7fe fe62 	bl	80023ec <MX_DMA_Init>
  MX_RTC_Init();
 8003728:	f000 f896 	bl	8003858 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800372c:	f000 fb68 	bl	8003e00 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8003730:	f000 fb90 	bl	8003e54 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  UartCallback_Init();
 8003734:	f000 fa66 	bl	8003c04 <UartCallback_Init>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8003738:	f7ff fc56 	bl	8002fe8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800373c:	f004 f8ae 	bl	800789c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003740:	e7fe      	b.n	8003740 <main+0x2c>
	...

08003744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b094      	sub	sp, #80	; 0x50
 8003748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800374a:	f107 0320 	add.w	r3, r7, #32
 800374e:	2230      	movs	r2, #48	; 0x30
 8003750:	2100      	movs	r1, #0
 8003752:	4618      	mov	r0, r3
 8003754:	f007 f8f3 	bl	800a93e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003758:	f107 030c 	add.w	r3, r7, #12
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	605a      	str	r2, [r3, #4]
 8003762:	609a      	str	r2, [r3, #8]
 8003764:	60da      	str	r2, [r3, #12]
 8003766:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003768:	2300      	movs	r3, #0
 800376a:	60bb      	str	r3, [r7, #8]
 800376c:	4b2c      	ldr	r3, [pc, #176]	; (8003820 <SystemClock_Config+0xdc>)
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	4a2b      	ldr	r2, [pc, #172]	; (8003820 <SystemClock_Config+0xdc>)
 8003772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003776:	6413      	str	r3, [r2, #64]	; 0x40
 8003778:	4b29      	ldr	r3, [pc, #164]	; (8003820 <SystemClock_Config+0xdc>)
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003780:	60bb      	str	r3, [r7, #8]
 8003782:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003784:	2300      	movs	r3, #0
 8003786:	607b      	str	r3, [r7, #4]
 8003788:	4b26      	ldr	r3, [pc, #152]	; (8003824 <SystemClock_Config+0xe0>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a25      	ldr	r2, [pc, #148]	; (8003824 <SystemClock_Config+0xe0>)
 800378e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003792:	6013      	str	r3, [r2, #0]
 8003794:	4b23      	ldr	r3, [pc, #140]	; (8003824 <SystemClock_Config+0xe0>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800379c:	607b      	str	r3, [r7, #4]
 800379e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80037a0:	2306      	movs	r3, #6
 80037a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80037a4:	2301      	movs	r3, #1
 80037a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037a8:	2301      	movs	r3, #1
 80037aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80037ac:	2310      	movs	r3, #16
 80037ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037b0:	2302      	movs	r3, #2
 80037b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80037b4:	2300      	movs	r3, #0
 80037b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80037b8:	2308      	movs	r3, #8
 80037ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80037bc:	23b4      	movs	r3, #180	; 0xb4
 80037be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80037c0:	2302      	movs	r3, #2
 80037c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80037c4:	2304      	movs	r3, #4
 80037c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037c8:	f107 0320 	add.w	r3, r7, #32
 80037cc:	4618      	mov	r0, r3
 80037ce:	f001 fbb1 	bl	8004f34 <HAL_RCC_OscConfig>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80037d8:	f000 f838 	bl	800384c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80037dc:	f001 fb5a 	bl	8004e94 <HAL_PWREx_EnableOverDrive>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80037e6:	f000 f831 	bl	800384c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037ea:	230f      	movs	r3, #15
 80037ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037ee:	2302      	movs	r3, #2
 80037f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037f2:	2300      	movs	r3, #0
 80037f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80037f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80037fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80037fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003800:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003802:	f107 030c 	add.w	r3, r7, #12
 8003806:	2105      	movs	r1, #5
 8003808:	4618      	mov	r0, r3
 800380a:	f001 fe0b 	bl	8005424 <HAL_RCC_ClockConfig>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003814:	f000 f81a 	bl	800384c <Error_Handler>
  }
}
 8003818:	bf00      	nop
 800381a:	3750      	adds	r7, #80	; 0x50
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40023800 	.word	0x40023800
 8003824:	40007000 	.word	0x40007000

08003828 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a04      	ldr	r2, [pc, #16]	; (8003848 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d101      	bne.n	800383e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800383a:	f000 fc61 	bl	8004100 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800383e:	bf00      	nop
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40000800 	.word	0x40000800

0800384c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003850:	b672      	cpsid	i
}
 8003852:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003854:	e7fe      	b.n	8003854 <Error_Handler+0x8>
	...

08003858 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800385c:	4b0f      	ldr	r3, [pc, #60]	; (800389c <MX_RTC_Init+0x44>)
 800385e:	4a10      	ldr	r2, [pc, #64]	; (80038a0 <MX_RTC_Init+0x48>)
 8003860:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003862:	4b0e      	ldr	r3, [pc, #56]	; (800389c <MX_RTC_Init+0x44>)
 8003864:	2200      	movs	r2, #0
 8003866:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003868:	4b0c      	ldr	r3, [pc, #48]	; (800389c <MX_RTC_Init+0x44>)
 800386a:	227f      	movs	r2, #127	; 0x7f
 800386c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800386e:	4b0b      	ldr	r3, [pc, #44]	; (800389c <MX_RTC_Init+0x44>)
 8003870:	22ff      	movs	r2, #255	; 0xff
 8003872:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003874:	4b09      	ldr	r3, [pc, #36]	; (800389c <MX_RTC_Init+0x44>)
 8003876:	2200      	movs	r2, #0
 8003878:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800387a:	4b08      	ldr	r3, [pc, #32]	; (800389c <MX_RTC_Init+0x44>)
 800387c:	2200      	movs	r2, #0
 800387e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003880:	4b06      	ldr	r3, [pc, #24]	; (800389c <MX_RTC_Init+0x44>)
 8003882:	2200      	movs	r2, #0
 8003884:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003886:	4805      	ldr	r0, [pc, #20]	; (800389c <MX_RTC_Init+0x44>)
 8003888:	f002 f99e 	bl	8005bc8 <HAL_RTC_Init>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8003892:	f7ff ffdb 	bl	800384c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003896:	bf00      	nop
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	2000057c 	.word	0x2000057c
 80038a0:	40002800 	.word	0x40002800

080038a4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08e      	sub	sp, #56	; 0x38
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038ac:	f107 0308 	add.w	r3, r7, #8
 80038b0:	2230      	movs	r2, #48	; 0x30
 80038b2:	2100      	movs	r1, #0
 80038b4:	4618      	mov	r0, r3
 80038b6:	f007 f842 	bl	800a93e <memset>
  if(rtcHandle->Instance==RTC)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a0c      	ldr	r2, [pc, #48]	; (80038f0 <HAL_RTC_MspInit+0x4c>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d111      	bne.n	80038e8 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80038c4:	2320      	movs	r3, #32
 80038c6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80038c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038cc:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038ce:	f107 0308 	add.w	r3, r7, #8
 80038d2:	4618      	mov	r0, r3
 80038d4:	f001 ffb8 	bl	8005848 <HAL_RCCEx_PeriphCLKConfig>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80038de:	f7ff ffb5 	bl	800384c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80038e2:	4b04      	ldr	r3, [pc, #16]	; (80038f4 <HAL_RTC_MspInit+0x50>)
 80038e4:	2201      	movs	r2, #1
 80038e6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80038e8:	bf00      	nop
 80038ea:	3738      	adds	r7, #56	; 0x38
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40002800 	.word	0x40002800
 80038f4:	42470e3c 	.word	0x42470e3c

080038f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038fe:	2300      	movs	r3, #0
 8003900:	607b      	str	r3, [r7, #4]
 8003902:	4b12      	ldr	r3, [pc, #72]	; (800394c <HAL_MspInit+0x54>)
 8003904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003906:	4a11      	ldr	r2, [pc, #68]	; (800394c <HAL_MspInit+0x54>)
 8003908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800390c:	6453      	str	r3, [r2, #68]	; 0x44
 800390e:	4b0f      	ldr	r3, [pc, #60]	; (800394c <HAL_MspInit+0x54>)
 8003910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003916:	607b      	str	r3, [r7, #4]
 8003918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800391a:	2300      	movs	r3, #0
 800391c:	603b      	str	r3, [r7, #0]
 800391e:	4b0b      	ldr	r3, [pc, #44]	; (800394c <HAL_MspInit+0x54>)
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	4a0a      	ldr	r2, [pc, #40]	; (800394c <HAL_MspInit+0x54>)
 8003924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003928:	6413      	str	r3, [r2, #64]	; 0x40
 800392a:	4b08      	ldr	r3, [pc, #32]	; (800394c <HAL_MspInit+0x54>)
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003932:	603b      	str	r3, [r7, #0]
 8003934:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003936:	2200      	movs	r2, #0
 8003938:	210f      	movs	r1, #15
 800393a:	f06f 0001 	mvn.w	r0, #1
 800393e:	f000 fcb7 	bl	80042b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003942:	bf00      	nop
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	40023800 	.word	0x40023800

08003950 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b08c      	sub	sp, #48	; 0x30
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003958:	2300      	movs	r3, #0
 800395a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800395c:	2300      	movs	r3, #0
 800395e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8003960:	2200      	movs	r2, #0
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	201e      	movs	r0, #30
 8003966:	f000 fca3 	bl	80042b0 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800396a:	201e      	movs	r0, #30
 800396c:	f000 fcbc 	bl	80042e8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8003970:	2300      	movs	r3, #0
 8003972:	60fb      	str	r3, [r7, #12]
 8003974:	4b1f      	ldr	r3, [pc, #124]	; (80039f4 <HAL_InitTick+0xa4>)
 8003976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003978:	4a1e      	ldr	r2, [pc, #120]	; (80039f4 <HAL_InitTick+0xa4>)
 800397a:	f043 0304 	orr.w	r3, r3, #4
 800397e:	6413      	str	r3, [r2, #64]	; 0x40
 8003980:	4b1c      	ldr	r3, [pc, #112]	; (80039f4 <HAL_InitTick+0xa4>)
 8003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800398c:	f107 0210 	add.w	r2, r7, #16
 8003990:	f107 0314 	add.w	r3, r7, #20
 8003994:	4611      	mov	r1, r2
 8003996:	4618      	mov	r0, r3
 8003998:	f001 ff24 	bl	80057e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800399c:	f001 fefa 	bl	8005794 <HAL_RCC_GetPCLK1Freq>
 80039a0:	4603      	mov	r3, r0
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80039a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a8:	4a13      	ldr	r2, [pc, #76]	; (80039f8 <HAL_InitTick+0xa8>)
 80039aa:	fba2 2303 	umull	r2, r3, r2, r3
 80039ae:	0c9b      	lsrs	r3, r3, #18
 80039b0:	3b01      	subs	r3, #1
 80039b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80039b4:	4b11      	ldr	r3, [pc, #68]	; (80039fc <HAL_InitTick+0xac>)
 80039b6:	4a12      	ldr	r2, [pc, #72]	; (8003a00 <HAL_InitTick+0xb0>)
 80039b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80039ba:	4b10      	ldr	r3, [pc, #64]	; (80039fc <HAL_InitTick+0xac>)
 80039bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80039c0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80039c2:	4a0e      	ldr	r2, [pc, #56]	; (80039fc <HAL_InitTick+0xac>)
 80039c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80039c8:	4b0c      	ldr	r3, [pc, #48]	; (80039fc <HAL_InitTick+0xac>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039ce:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <HAL_InitTick+0xac>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80039d4:	4809      	ldr	r0, [pc, #36]	; (80039fc <HAL_InitTick+0xac>)
 80039d6:	f002 f9f1 	bl	8005dbc <HAL_TIM_Base_Init>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d104      	bne.n	80039ea <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80039e0:	4806      	ldr	r0, [pc, #24]	; (80039fc <HAL_InitTick+0xac>)
 80039e2:	f002 fa45 	bl	8005e70 <HAL_TIM_Base_Start_IT>
 80039e6:	4603      	mov	r3, r0
 80039e8:	e000      	b.n	80039ec <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3730      	adds	r7, #48	; 0x30
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40023800 	.word	0x40023800
 80039f8:	431bde83 	.word	0x431bde83
 80039fc:	2000059c 	.word	0x2000059c
 8003a00:	40000800 	.word	0x40000800

08003a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a08:	e7fe      	b.n	8003a08 <NMI_Handler+0x4>

08003a0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a0e:	e7fe      	b.n	8003a0e <HardFault_Handler+0x4>

08003a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a14:	e7fe      	b.n	8003a14 <MemManage_Handler+0x4>

08003a16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a16:	b480      	push	{r7}
 8003a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a1a:	e7fe      	b.n	8003a1a <BusFault_Handler+0x4>

08003a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a20:	e7fe      	b.n	8003a20 <UsageFault_Handler+0x4>

08003a22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a22:	b480      	push	{r7}
 8003a24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a26:	bf00      	nop
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003a34:	4802      	ldr	r0, [pc, #8]	; (8003a40 <DMA1_Stream5_IRQHandler+0x10>)
 8003a36:	f000 fdfd 	bl	8004634 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003a3a:	bf00      	nop
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	200006d0 	.word	0x200006d0

08003a44 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003a48:	4804      	ldr	r0, [pc, #16]	; (8003a5c <TIM4_IRQHandler+0x18>)
 8003a4a:	f002 fa81 	bl	8005f50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  TIMEOUT--;
 8003a4e:	4b04      	ldr	r3, [pc, #16]	; (8003a60 <TIM4_IRQHandler+0x1c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	3b01      	subs	r3, #1
 8003a54:	4a02      	ldr	r2, [pc, #8]	; (8003a60 <TIM4_IRQHandler+0x1c>)
 8003a56:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM4_IRQn 1 */
}
 8003a58:	bf00      	nop
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	2000059c 	.word	0x2000059c
 8003a60:	20000644 	.word	0x20000644

08003a64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003a68:	4802      	ldr	r0, [pc, #8]	; (8003a74 <USART2_IRQHandler+0x10>)
 8003a6a:	f002 fdc9 	bl	8006600 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003a6e:	bf00      	nop
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	20000648 	.word	0x20000648

08003a78 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003a7c:	4802      	ldr	r0, [pc, #8]	; (8003a88 <USART3_IRQHandler+0x10>)
 8003a7e:	f002 fdbf 	bl	8006600 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003a82:	bf00      	nop
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	2000068c 	.word	0x2000068c

08003a8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
	return 1;
 8003a90:	2301      	movs	r3, #1
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <_kill>:

int _kill(int pid, int sig)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003aa6:	f006 fe19 	bl	800a6dc <__errno>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2216      	movs	r2, #22
 8003aae:	601a      	str	r2, [r3, #0]
	return -1;
 8003ab0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <_exit>:

void _exit (int status)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f7ff ffe7 	bl	8003a9c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003ace:	e7fe      	b.n	8003ace <_exit+0x12>

08003ad0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003adc:	2300      	movs	r3, #0
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	e00a      	b.n	8003af8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003ae2:	f3af 8000 	nop.w
 8003ae6:	4601      	mov	r1, r0
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	60ba      	str	r2, [r7, #8]
 8003aee:	b2ca      	uxtb	r2, r1
 8003af0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	3301      	adds	r3, #1
 8003af6:	617b      	str	r3, [r7, #20]
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	dbf0      	blt.n	8003ae2 <_read+0x12>
	}

return len;
 8003b00:	687b      	ldr	r3, [r7, #4]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3718      	adds	r7, #24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <_close>:
	}
	return len;
}

int _close(int file)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
	return -1;
 8003b12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b083      	sub	sp, #12
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
 8003b2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b32:	605a      	str	r2, [r3, #4]
	return 0;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <_isatty>:

int _isatty(int file)
{
 8003b42:	b480      	push	{r7}
 8003b44:	b083      	sub	sp, #12
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
	return 1;
 8003b4a:	2301      	movs	r3, #1
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
	return 0;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
	...

08003b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b7c:	4a14      	ldr	r2, [pc, #80]	; (8003bd0 <_sbrk+0x5c>)
 8003b7e:	4b15      	ldr	r3, [pc, #84]	; (8003bd4 <_sbrk+0x60>)
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b88:	4b13      	ldr	r3, [pc, #76]	; (8003bd8 <_sbrk+0x64>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d102      	bne.n	8003b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b90:	4b11      	ldr	r3, [pc, #68]	; (8003bd8 <_sbrk+0x64>)
 8003b92:	4a12      	ldr	r2, [pc, #72]	; (8003bdc <_sbrk+0x68>)
 8003b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b96:	4b10      	ldr	r3, [pc, #64]	; (8003bd8 <_sbrk+0x64>)
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d207      	bcs.n	8003bb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ba4:	f006 fd9a 	bl	800a6dc <__errno>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	220c      	movs	r2, #12
 8003bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bae:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb2:	e009      	b.n	8003bc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bb4:	4b08      	ldr	r3, [pc, #32]	; (8003bd8 <_sbrk+0x64>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bba:	4b07      	ldr	r3, [pc, #28]	; (8003bd8 <_sbrk+0x64>)
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	4a05      	ldr	r2, [pc, #20]	; (8003bd8 <_sbrk+0x64>)
 8003bc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3718      	adds	r7, #24
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	20030000 	.word	0x20030000
 8003bd4:	00000400 	.word	0x00000400
 8003bd8:	200005e4 	.word	0x200005e4
 8003bdc:	20004498 	.word	0x20004498

08003be0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003be4:	4b06      	ldr	r3, [pc, #24]	; (8003c00 <SystemInit+0x20>)
 8003be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bea:	4a05      	ldr	r2, [pc, #20]	; (8003c00 <SystemInit+0x20>)
 8003bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003bf4:	bf00      	nop
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	e000ed00 	.word	0xe000ed00

08003c04 <UartCallback_Init>:



/* Initialize the Ring Buffer */
void UartCallback_Init (void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
	memset(rx2_Buf, '\0', RxBuf_SIZE);
 8003c08:	2214      	movs	r2, #20
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	4810      	ldr	r0, [pc, #64]	; (8003c50 <UartCallback_Init+0x4c>)
 8003c0e:	f006 fe96 	bl	800a93e <memset>
	memset(MainBuf, '\0', MainBuf_SIZE);
 8003c12:	2228      	movs	r2, #40	; 0x28
 8003c14:	2100      	movs	r1, #0
 8003c16:	480f      	ldr	r0, [pc, #60]	; (8003c54 <UartCallback_Init+0x50>)
 8003c18:	f006 fe91 	bl	800a93e <memset>

	//Head = Tail = 0;
	oldPos = 0;
 8003c1c:	4b0e      	ldr	r3, [pc, #56]	; (8003c58 <UartCallback_Init+0x54>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	801a      	strh	r2, [r3, #0]
	newPos = 0;
 8003c22:	4b0e      	ldr	r3, [pc, #56]	; (8003c5c <UartCallback_Init+0x58>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	801a      	strh	r2, [r3, #0]


  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rx2_Buf, RxBuf_SIZE);
 8003c28:	2214      	movs	r2, #20
 8003c2a:	4909      	ldr	r1, [pc, #36]	; (8003c50 <UartCallback_Init+0x4c>)
 8003c2c:	480c      	ldr	r0, [pc, #48]	; (8003c60 <UartCallback_Init+0x5c>)
 8003c2e:	f002 fc82 	bl	8006536 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8003c32:	4b0c      	ldr	r3, [pc, #48]	; (8003c64 <UartCallback_Init+0x60>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	4b0a      	ldr	r3, [pc, #40]	; (8003c64 <UartCallback_Init+0x60>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 0208 	bic.w	r2, r2, #8
 8003c40:	601a      	str	r2, [r3, #0]


  HAL_UART_Receive_IT(&huart3, &rx3_data, 1);
 8003c42:	2201      	movs	r2, #1
 8003c44:	4908      	ldr	r1, [pc, #32]	; (8003c68 <UartCallback_Init+0x64>)
 8003c46:	4809      	ldr	r0, [pc, #36]	; (8003c6c <UartCallback_Init+0x68>)
 8003c48:	f002 fc45 	bl	80064d6 <HAL_UART_Receive_IT>


}
 8003c4c:	bf00      	nop
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	20000604 	.word	0x20000604
 8003c54:	20000618 	.word	0x20000618
 8003c58:	20000640 	.word	0x20000640
 8003c5c:	20000642 	.word	0x20000642
 8003c60:	20000648 	.word	0x20000648
 8003c64:	200006d0 	.word	0x200006d0
 8003c68:	200005e8 	.word	0x200005e8
 8003c6c:	2000068c 	.word	0x2000068c

08003c70 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	807b      	strh	r3, [r7, #2]
		//isDataAvailable = 1;

	if(huart->Instance==USART2){
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a29      	ldr	r2, [pc, #164]	; (8003d28 <HAL_UARTEx_RxEventCallback+0xb8>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d14b      	bne.n	8003d1e <HAL_UARTEx_RxEventCallback+0xae>
		oldPos = newPos;  // Update the last position before copying new data
 8003c86:	4b29      	ldr	r3, [pc, #164]	; (8003d2c <HAL_UARTEx_RxEventCallback+0xbc>)
 8003c88:	881a      	ldrh	r2, [r3, #0]
 8003c8a:	4b29      	ldr	r3, [pc, #164]	; (8003d30 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003c8c:	801a      	strh	r2, [r3, #0]

		/* If the data in large and it is about to exceed the buffer size, we have to route it to the start of the buffer
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (oldPos+Size > MainBuf_SIZE)  // If the current position + new data size is greater than the main buffer
 8003c8e:	4b28      	ldr	r3, [pc, #160]	; (8003d30 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	461a      	mov	r2, r3
 8003c94:	887b      	ldrh	r3, [r7, #2]
 8003c96:	4413      	add	r3, r2
 8003c98:	2b28      	cmp	r3, #40	; 0x28
 8003c9a:	dd22      	ble.n	8003ce2 <HAL_UARTEx_RxEventCallback+0x72>
		{
			uint16_t datatocopy = MainBuf_SIZE-oldPos;  // find out how much space is left in the main buffer
 8003c9c:	4b24      	ldr	r3, [pc, #144]	; (8003d30 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003c9e:	881b      	ldrh	r3, [r3, #0]
 8003ca0:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8003ca4:	81fb      	strh	r3, [r7, #14]
			memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)rx2_Buf, datatocopy);  // copy data in that remaining space
 8003ca6:	4b22      	ldr	r3, [pc, #136]	; (8003d30 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	461a      	mov	r2, r3
 8003cac:	4b21      	ldr	r3, [pc, #132]	; (8003d34 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003cae:	4413      	add	r3, r2
 8003cb0:	89fa      	ldrh	r2, [r7, #14]
 8003cb2:	4921      	ldr	r1, [pc, #132]	; (8003d38 <HAL_UARTEx_RxEventCallback+0xc8>)
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f006 fe34 	bl	800a922 <memcpy>

			oldPos = 0;  // point to the start of the buffer
 8003cba:	4b1d      	ldr	r3, [pc, #116]	; (8003d30 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainBuf, (uint8_t *)rx2_Buf+datatocopy, (Size-datatocopy));  // copy the remaining data
 8003cc0:	89fb      	ldrh	r3, [r7, #14]
 8003cc2:	4a1d      	ldr	r2, [pc, #116]	; (8003d38 <HAL_UARTEx_RxEventCallback+0xc8>)
 8003cc4:	1899      	adds	r1, r3, r2
 8003cc6:	887a      	ldrh	r2, [r7, #2]
 8003cc8:	89fb      	ldrh	r3, [r7, #14]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	461a      	mov	r2, r3
 8003cce:	4819      	ldr	r0, [pc, #100]	; (8003d34 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003cd0:	f006 fe27 	bl	800a922 <memcpy>
			newPos = (Size-datatocopy);  // update the position
 8003cd4:	887a      	ldrh	r2, [r7, #2]
 8003cd6:	89fb      	ldrh	r3, [r7, #14]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	4b13      	ldr	r3, [pc, #76]	; (8003d2c <HAL_UARTEx_RxEventCallback+0xbc>)
 8003cde:	801a      	strh	r2, [r3, #0]
 8003ce0:	e010      	b.n	8003d04 <HAL_UARTEx_RxEventCallback+0x94>
		/* if the current position + new data size is less than the main buffer
		 * we will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)MainBuf+oldPos, (uint8_t *)rx2_Buf, Size);
 8003ce2:	4b13      	ldr	r3, [pc, #76]	; (8003d30 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	4b12      	ldr	r3, [pc, #72]	; (8003d34 <HAL_UARTEx_RxEventCallback+0xc4>)
 8003cea:	4413      	add	r3, r2
 8003cec:	887a      	ldrh	r2, [r7, #2]
 8003cee:	4912      	ldr	r1, [pc, #72]	; (8003d38 <HAL_UARTEx_RxEventCallback+0xc8>)
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f006 fe16 	bl	800a922 <memcpy>
			newPos = Size+oldPos;
 8003cf6:	4b0e      	ldr	r3, [pc, #56]	; (8003d30 <HAL_UARTEx_RxEventCallback+0xc0>)
 8003cf8:	881a      	ldrh	r2, [r3, #0]
 8003cfa:	887b      	ldrh	r3, [r7, #2]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <HAL_UARTEx_RxEventCallback+0xbc>)
 8003d02:	801a      	strh	r2, [r3, #0]
		 */
//		if (Head+Size < MainBuf_SIZE) Head = Head+Size;
//		else Head = Head+Size - MainBuf_SIZE;

		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, (uint8_t *) rx2_Buf, RxBuf_SIZE);
 8003d04:	2214      	movs	r2, #20
 8003d06:	490c      	ldr	r1, [pc, #48]	; (8003d38 <HAL_UARTEx_RxEventCallback+0xc8>)
 8003d08:	480c      	ldr	r0, [pc, #48]	; (8003d3c <HAL_UARTEx_RxEventCallback+0xcc>)
 8003d0a:	f002 fc14 	bl	8006536 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8003d0e:	4b0c      	ldr	r3, [pc, #48]	; (8003d40 <HAL_UARTEx_RxEventCallback+0xd0>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	4b0a      	ldr	r3, [pc, #40]	; (8003d40 <HAL_UARTEx_RxEventCallback+0xd0>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0208 	bic.w	r2, r2, #8
 8003d1c:	601a      	str	r2, [r3, #0]
	}


}
 8003d1e:	bf00      	nop
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	40004400 	.word	0x40004400
 8003d2c:	20000642 	.word	0x20000642
 8003d30:	20000640 	.word	0x20000640
 8003d34:	20000618 	.word	0x20000618
 8003d38:	20000604 	.word	0x20000604
 8003d3c:	20000648 	.word	0x20000648
 8003d40:	200006d0 	.word	0x200006d0

08003d44 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d44:	b5b0      	push	{r4, r5, r7, lr}
 8003d46:	b088      	sub	sp, #32
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART3){
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a24      	ldr	r2, [pc, #144]	; (8003de4 <HAL_UART_RxCpltCallback+0xa0>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d142      	bne.n	8003ddc <HAL_UART_RxCpltCallback+0x98>

		if(rx_start == 0){
 8003d56:	4b24      	ldr	r3, [pc, #144]	; (8003de8 <HAL_UART_RxCpltCallback+0xa4>)
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10a      	bne.n	8003d74 <HAL_UART_RxCpltCallback+0x30>
			if(rx3_data == 'D'){
 8003d5e:	4b23      	ldr	r3, [pc, #140]	; (8003dec <HAL_UART_RxCpltCallback+0xa8>)
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	2b44      	cmp	r3, #68	; 0x44
 8003d64:	d135      	bne.n	8003dd2 <HAL_UART_RxCpltCallback+0x8e>
				bufindex = 0;
 8003d66:	4b22      	ldr	r3, [pc, #136]	; (8003df0 <HAL_UART_RxCpltCallback+0xac>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	701a      	strb	r2, [r3, #0]
				rx_start = 1;
 8003d6c:	4b1e      	ldr	r3, [pc, #120]	; (8003de8 <HAL_UART_RxCpltCallback+0xa4>)
 8003d6e:	2201      	movs	r2, #1
 8003d70:	701a      	strb	r2, [r3, #0]
 8003d72:	e02e      	b.n	8003dd2 <HAL_UART_RxCpltCallback+0x8e>
			}
		}
		else {
			if(rx3_data != '\n' && bufindex < RxBuf_SIZE)
 8003d74:	4b1d      	ldr	r3, [pc, #116]	; (8003dec <HAL_UART_RxCpltCallback+0xa8>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	2b0a      	cmp	r3, #10
 8003d7a:	d00f      	beq.n	8003d9c <HAL_UART_RxCpltCallback+0x58>
 8003d7c:	4b1c      	ldr	r3, [pc, #112]	; (8003df0 <HAL_UART_RxCpltCallback+0xac>)
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	2b13      	cmp	r3, #19
 8003d82:	d80b      	bhi.n	8003d9c <HAL_UART_RxCpltCallback+0x58>
				rx3_buf[bufindex++] = rx3_data;
 8003d84:	4b1a      	ldr	r3, [pc, #104]	; (8003df0 <HAL_UART_RxCpltCallback+0xac>)
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	b2d1      	uxtb	r1, r2
 8003d8c:	4a18      	ldr	r2, [pc, #96]	; (8003df0 <HAL_UART_RxCpltCallback+0xac>)
 8003d8e:	7011      	strb	r1, [r2, #0]
 8003d90:	461a      	mov	r2, r3
 8003d92:	4b16      	ldr	r3, [pc, #88]	; (8003dec <HAL_UART_RxCpltCallback+0xa8>)
 8003d94:	7819      	ldrb	r1, [r3, #0]
 8003d96:	4b17      	ldr	r3, [pc, #92]	; (8003df4 <HAL_UART_RxCpltCallback+0xb0>)
 8003d98:	5499      	strb	r1, [r3, r2]
 8003d9a:	e01a      	b.n	8003dd2 <HAL_UART_RxCpltCallback+0x8e>
			else {
				char temp_buf[20];
				memcpy(temp_buf, (char*)rx3_buf, 20);
 8003d9c:	4b15      	ldr	r3, [pc, #84]	; (8003df4 <HAL_UART_RxCpltCallback+0xb0>)
 8003d9e:	f107 040c 	add.w	r4, r7, #12
 8003da2:	461d      	mov	r5, r3
 8003da4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003da8:	682b      	ldr	r3, [r5, #0]
 8003daa:	6023      	str	r3, [r4, #0]
				osMessagePut(cmdQueueHandle, (uint32_t)temp_buf, 100);
 8003dac:	4b12      	ldr	r3, [pc, #72]	; (8003df8 <HAL_UART_RxCpltCallback+0xb4>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f107 010c 	add.w	r1, r7, #12
 8003db4:	2264      	movs	r2, #100	; 0x64
 8003db6:	4618      	mov	r0, r3
 8003db8:	f003 fed8 	bl	8007b6c <osMessagePut>
				memset(rx3_buf,0,sizeof(rx3_buf));
 8003dbc:	2214      	movs	r2, #20
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	480c      	ldr	r0, [pc, #48]	; (8003df4 <HAL_UART_RxCpltCallback+0xb0>)
 8003dc2:	f006 fdbc 	bl	800a93e <memset>
				bufindex=0;
 8003dc6:	4b0a      	ldr	r3, [pc, #40]	; (8003df0 <HAL_UART_RxCpltCallback+0xac>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	701a      	strb	r2, [r3, #0]
				rx_start = 0;
 8003dcc:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <HAL_UART_RxCpltCallback+0xa4>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	701a      	strb	r2, [r3, #0]
			}
		}
		HAL_UART_Receive_IT(&huart3, &rx3_data, 1);
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	4905      	ldr	r1, [pc, #20]	; (8003dec <HAL_UART_RxCpltCallback+0xa8>)
 8003dd6:	4809      	ldr	r0, [pc, #36]	; (8003dfc <HAL_UART_RxCpltCallback+0xb8>)
 8003dd8:	f002 fb7d 	bl	80064d6 <HAL_UART_Receive_IT>

	}

}
 8003ddc:	bf00      	nop
 8003dde:	3720      	adds	r7, #32
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bdb0      	pop	{r4, r5, r7, pc}
 8003de4:	40004800 	.word	0x40004800
 8003de8:	20000600 	.word	0x20000600
 8003dec:	200005e8 	.word	0x200005e8
 8003df0:	20000601 	.word	0x20000601
 8003df4:	200005ec 	.word	0x200005ec
 8003df8:	200002c0 	.word	0x200002c0
 8003dfc:	2000068c 	.word	0x2000068c

08003e00 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003e04:	4b11      	ldr	r3, [pc, #68]	; (8003e4c <MX_USART2_UART_Init+0x4c>)
 8003e06:	4a12      	ldr	r2, [pc, #72]	; (8003e50 <MX_USART2_UART_Init+0x50>)
 8003e08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003e0a:	4b10      	ldr	r3, [pc, #64]	; (8003e4c <MX_USART2_UART_Init+0x4c>)
 8003e0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003e10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003e12:	4b0e      	ldr	r3, [pc, #56]	; (8003e4c <MX_USART2_UART_Init+0x4c>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003e18:	4b0c      	ldr	r3, [pc, #48]	; (8003e4c <MX_USART2_UART_Init+0x4c>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003e1e:	4b0b      	ldr	r3, [pc, #44]	; (8003e4c <MX_USART2_UART_Init+0x4c>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003e24:	4b09      	ldr	r3, [pc, #36]	; (8003e4c <MX_USART2_UART_Init+0x4c>)
 8003e26:	220c      	movs	r2, #12
 8003e28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e2a:	4b08      	ldr	r3, [pc, #32]	; (8003e4c <MX_USART2_UART_Init+0x4c>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e30:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <MX_USART2_UART_Init+0x4c>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003e36:	4805      	ldr	r0, [pc, #20]	; (8003e4c <MX_USART2_UART_Init+0x4c>)
 8003e38:	f002 fa6e 	bl	8006318 <HAL_UART_Init>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003e42:	f7ff fd03 	bl	800384c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003e46:	bf00      	nop
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	20000648 	.word	0x20000648
 8003e50:	40004400 	.word	0x40004400

08003e54 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003e58:	4b11      	ldr	r3, [pc, #68]	; (8003ea0 <MX_USART3_UART_Init+0x4c>)
 8003e5a:	4a12      	ldr	r2, [pc, #72]	; (8003ea4 <MX_USART3_UART_Init+0x50>)
 8003e5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003e5e:	4b10      	ldr	r3, [pc, #64]	; (8003ea0 <MX_USART3_UART_Init+0x4c>)
 8003e60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003e64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003e66:	4b0e      	ldr	r3, [pc, #56]	; (8003ea0 <MX_USART3_UART_Init+0x4c>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003e6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ea0 <MX_USART3_UART_Init+0x4c>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003e72:	4b0b      	ldr	r3, [pc, #44]	; (8003ea0 <MX_USART3_UART_Init+0x4c>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003e78:	4b09      	ldr	r3, [pc, #36]	; (8003ea0 <MX_USART3_UART_Init+0x4c>)
 8003e7a:	220c      	movs	r2, #12
 8003e7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e7e:	4b08      	ldr	r3, [pc, #32]	; (8003ea0 <MX_USART3_UART_Init+0x4c>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e84:	4b06      	ldr	r3, [pc, #24]	; (8003ea0 <MX_USART3_UART_Init+0x4c>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003e8a:	4805      	ldr	r0, [pc, #20]	; (8003ea0 <MX_USART3_UART_Init+0x4c>)
 8003e8c:	f002 fa44 	bl	8006318 <HAL_UART_Init>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003e96:	f7ff fcd9 	bl	800384c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003e9a:	bf00      	nop
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	2000068c 	.word	0x2000068c
 8003ea4:	40004800 	.word	0x40004800

08003ea8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08c      	sub	sp, #48	; 0x30
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eb0:	f107 031c 	add.w	r3, r7, #28
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	605a      	str	r2, [r3, #4]
 8003eba:	609a      	str	r2, [r3, #8]
 8003ebc:	60da      	str	r2, [r3, #12]
 8003ebe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a61      	ldr	r2, [pc, #388]	; (800404c <HAL_UART_MspInit+0x1a4>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	f040 8081 	bne.w	8003fce <HAL_UART_MspInit+0x126>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ecc:	2300      	movs	r3, #0
 8003ece:	61bb      	str	r3, [r7, #24]
 8003ed0:	4b5f      	ldr	r3, [pc, #380]	; (8004050 <HAL_UART_MspInit+0x1a8>)
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed4:	4a5e      	ldr	r2, [pc, #376]	; (8004050 <HAL_UART_MspInit+0x1a8>)
 8003ed6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eda:	6413      	str	r3, [r2, #64]	; 0x40
 8003edc:	4b5c      	ldr	r3, [pc, #368]	; (8004050 <HAL_UART_MspInit+0x1a8>)
 8003ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee4:	61bb      	str	r3, [r7, #24]
 8003ee6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ee8:	2300      	movs	r3, #0
 8003eea:	617b      	str	r3, [r7, #20]
 8003eec:	4b58      	ldr	r3, [pc, #352]	; (8004050 <HAL_UART_MspInit+0x1a8>)
 8003eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef0:	4a57      	ldr	r2, [pc, #348]	; (8004050 <HAL_UART_MspInit+0x1a8>)
 8003ef2:	f043 0301 	orr.w	r3, r3, #1
 8003ef6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ef8:	4b55      	ldr	r3, [pc, #340]	; (8004050 <HAL_UART_MspInit+0x1a8>)
 8003efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	617b      	str	r3, [r7, #20]
 8003f02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f04:	2300      	movs	r3, #0
 8003f06:	613b      	str	r3, [r7, #16]
 8003f08:	4b51      	ldr	r3, [pc, #324]	; (8004050 <HAL_UART_MspInit+0x1a8>)
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0c:	4a50      	ldr	r2, [pc, #320]	; (8004050 <HAL_UART_MspInit+0x1a8>)
 8003f0e:	f043 0308 	orr.w	r3, r3, #8
 8003f12:	6313      	str	r3, [r2, #48]	; 0x30
 8003f14:	4b4e      	ldr	r3, [pc, #312]	; (8004050 <HAL_UART_MspInit+0x1a8>)
 8003f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f18:	f003 0308 	and.w	r3, r3, #8
 8003f1c:	613b      	str	r3, [r7, #16]
 8003f1e:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003f20:	2308      	movs	r3, #8
 8003f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f24:	2302      	movs	r3, #2
 8003f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003f30:	2307      	movs	r3, #7
 8003f32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f34:	f107 031c 	add.w	r3, r7, #28
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4846      	ldr	r0, [pc, #280]	; (8004054 <HAL_UART_MspInit+0x1ac>)
 8003f3c:	f000 fde4 	bl	8004b08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003f40:	2320      	movs	r3, #32
 8003f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f44:	2302      	movs	r3, #2
 8003f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003f50:	2307      	movs	r3, #7
 8003f52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f54:	f107 031c 	add.w	r3, r7, #28
 8003f58:	4619      	mov	r1, r3
 8003f5a:	483f      	ldr	r0, [pc, #252]	; (8004058 <HAL_UART_MspInit+0x1b0>)
 8003f5c:	f000 fdd4 	bl	8004b08 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003f60:	4b3e      	ldr	r3, [pc, #248]	; (800405c <HAL_UART_MspInit+0x1b4>)
 8003f62:	4a3f      	ldr	r2, [pc, #252]	; (8004060 <HAL_UART_MspInit+0x1b8>)
 8003f64:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003f66:	4b3d      	ldr	r3, [pc, #244]	; (800405c <HAL_UART_MspInit+0x1b4>)
 8003f68:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f6c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f6e:	4b3b      	ldr	r3, [pc, #236]	; (800405c <HAL_UART_MspInit+0x1b4>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f74:	4b39      	ldr	r3, [pc, #228]	; (800405c <HAL_UART_MspInit+0x1b4>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f7a:	4b38      	ldr	r3, [pc, #224]	; (800405c <HAL_UART_MspInit+0x1b4>)
 8003f7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f80:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f82:	4b36      	ldr	r3, [pc, #216]	; (800405c <HAL_UART_MspInit+0x1b4>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f88:	4b34      	ldr	r3, [pc, #208]	; (800405c <HAL_UART_MspInit+0x1b4>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003f8e:	4b33      	ldr	r3, [pc, #204]	; (800405c <HAL_UART_MspInit+0x1b4>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003f94:	4b31      	ldr	r3, [pc, #196]	; (800405c <HAL_UART_MspInit+0x1b4>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f9a:	4b30      	ldr	r3, [pc, #192]	; (800405c <HAL_UART_MspInit+0x1b4>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003fa0:	482e      	ldr	r0, [pc, #184]	; (800405c <HAL_UART_MspInit+0x1b4>)
 8003fa2:	f000 f9af 	bl	8004304 <HAL_DMA_Init>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8003fac:	f7ff fc4e 	bl	800384c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a2a      	ldr	r2, [pc, #168]	; (800405c <HAL_UART_MspInit+0x1b4>)
 8003fb4:	639a      	str	r2, [r3, #56]	; 0x38
 8003fb6:	4a29      	ldr	r2, [pc, #164]	; (800405c <HAL_UART_MspInit+0x1b4>)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	2105      	movs	r1, #5
 8003fc0:	2026      	movs	r0, #38	; 0x26
 8003fc2:	f000 f975 	bl	80042b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003fc6:	2026      	movs	r0, #38	; 0x26
 8003fc8:	f000 f98e 	bl	80042e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003fcc:	e039      	b.n	8004042 <HAL_UART_MspInit+0x19a>
  else if(uartHandle->Instance==USART3)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a24      	ldr	r2, [pc, #144]	; (8004064 <HAL_UART_MspInit+0x1bc>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d134      	bne.n	8004042 <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003fd8:	2300      	movs	r3, #0
 8003fda:	60fb      	str	r3, [r7, #12]
 8003fdc:	4b1c      	ldr	r3, [pc, #112]	; (8004050 <HAL_UART_MspInit+0x1a8>)
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	4a1b      	ldr	r2, [pc, #108]	; (8004050 <HAL_UART_MspInit+0x1a8>)
 8003fe2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fe6:	6413      	str	r3, [r2, #64]	; 0x40
 8003fe8:	4b19      	ldr	r3, [pc, #100]	; (8004050 <HAL_UART_MspInit+0x1a8>)
 8003fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	60bb      	str	r3, [r7, #8]
 8003ff8:	4b15      	ldr	r3, [pc, #84]	; (8004050 <HAL_UART_MspInit+0x1a8>)
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffc:	4a14      	ldr	r2, [pc, #80]	; (8004050 <HAL_UART_MspInit+0x1a8>)
 8003ffe:	f043 0308 	orr.w	r3, r3, #8
 8004002:	6313      	str	r3, [r2, #48]	; 0x30
 8004004:	4b12      	ldr	r3, [pc, #72]	; (8004050 <HAL_UART_MspInit+0x1a8>)
 8004006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004008:	f003 0308 	and.w	r3, r3, #8
 800400c:	60bb      	str	r3, [r7, #8]
 800400e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004010:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004016:	2302      	movs	r3, #2
 8004018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800401a:	2300      	movs	r3, #0
 800401c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800401e:	2303      	movs	r3, #3
 8004020:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004022:	2307      	movs	r3, #7
 8004024:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004026:	f107 031c 	add.w	r3, r7, #28
 800402a:	4619      	mov	r1, r3
 800402c:	480a      	ldr	r0, [pc, #40]	; (8004058 <HAL_UART_MspInit+0x1b0>)
 800402e:	f000 fd6b 	bl	8004b08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004032:	2200      	movs	r2, #0
 8004034:	2105      	movs	r1, #5
 8004036:	2027      	movs	r0, #39	; 0x27
 8004038:	f000 f93a 	bl	80042b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800403c:	2027      	movs	r0, #39	; 0x27
 800403e:	f000 f953 	bl	80042e8 <HAL_NVIC_EnableIRQ>
}
 8004042:	bf00      	nop
 8004044:	3730      	adds	r7, #48	; 0x30
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	40004400 	.word	0x40004400
 8004050:	40023800 	.word	0x40023800
 8004054:	40020000 	.word	0x40020000
 8004058:	40020c00 	.word	0x40020c00
 800405c:	200006d0 	.word	0x200006d0
 8004060:	40026088 	.word	0x40026088
 8004064:	40004800 	.word	0x40004800

08004068 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004068:	f8df d034 	ldr.w	sp, [pc, #52]	; 80040a0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800406c:	480d      	ldr	r0, [pc, #52]	; (80040a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800406e:	490e      	ldr	r1, [pc, #56]	; (80040a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004070:	4a0e      	ldr	r2, [pc, #56]	; (80040ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004074:	e002      	b.n	800407c <LoopCopyDataInit>

08004076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800407a:	3304      	adds	r3, #4

0800407c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800407c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800407e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004080:	d3f9      	bcc.n	8004076 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004082:	4a0b      	ldr	r2, [pc, #44]	; (80040b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004084:	4c0b      	ldr	r4, [pc, #44]	; (80040b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004088:	e001      	b.n	800408e <LoopFillZerobss>

0800408a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800408a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800408c:	3204      	adds	r2, #4

0800408e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800408e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004090:	d3fb      	bcc.n	800408a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004092:	f7ff fda5 	bl	8003be0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004096:	f006 fc1d 	bl	800a8d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800409a:	f7ff fb3b 	bl	8003714 <main>
  bx  lr    
 800409e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80040a0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80040a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040a8:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 80040ac:	0800f6a8 	.word	0x0800f6a8
  ldr r2, =_sbss
 80040b0:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 80040b4:	20004498 	.word	0x20004498

080040b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040b8:	e7fe      	b.n	80040b8 <ADC_IRQHandler>
	...

080040bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80040c0:	4b0e      	ldr	r3, [pc, #56]	; (80040fc <HAL_Init+0x40>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a0d      	ldr	r2, [pc, #52]	; (80040fc <HAL_Init+0x40>)
 80040c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80040cc:	4b0b      	ldr	r3, [pc, #44]	; (80040fc <HAL_Init+0x40>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a0a      	ldr	r2, [pc, #40]	; (80040fc <HAL_Init+0x40>)
 80040d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040d8:	4b08      	ldr	r3, [pc, #32]	; (80040fc <HAL_Init+0x40>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a07      	ldr	r2, [pc, #28]	; (80040fc <HAL_Init+0x40>)
 80040de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040e4:	2003      	movs	r0, #3
 80040e6:	f000 f8d8 	bl	800429a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040ea:	200f      	movs	r0, #15
 80040ec:	f7ff fc30 	bl	8003950 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040f0:	f7ff fc02 	bl	80038f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	40023c00 	.word	0x40023c00

08004100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004104:	4b06      	ldr	r3, [pc, #24]	; (8004120 <HAL_IncTick+0x20>)
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	461a      	mov	r2, r3
 800410a:	4b06      	ldr	r3, [pc, #24]	; (8004124 <HAL_IncTick+0x24>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4413      	add	r3, r2
 8004110:	4a04      	ldr	r2, [pc, #16]	; (8004124 <HAL_IncTick+0x24>)
 8004112:	6013      	str	r3, [r2, #0]
}
 8004114:	bf00      	nop
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	20000050 	.word	0x20000050
 8004124:	20000730 	.word	0x20000730

08004128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  return uwTick;
 800412c:	4b03      	ldr	r3, [pc, #12]	; (800413c <HAL_GetTick+0x14>)
 800412e:	681b      	ldr	r3, [r3, #0]
}
 8004130:	4618      	mov	r0, r3
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	20000730 	.word	0x20000730

08004140 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f003 0307 	and.w	r3, r3, #7
 800414e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004150:	4b0c      	ldr	r3, [pc, #48]	; (8004184 <__NVIC_SetPriorityGrouping+0x44>)
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800415c:	4013      	ands	r3, r2
 800415e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004168:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800416c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004172:	4a04      	ldr	r2, [pc, #16]	; (8004184 <__NVIC_SetPriorityGrouping+0x44>)
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	60d3      	str	r3, [r2, #12]
}
 8004178:	bf00      	nop
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	e000ed00 	.word	0xe000ed00

08004188 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004188:	b480      	push	{r7}
 800418a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800418c:	4b04      	ldr	r3, [pc, #16]	; (80041a0 <__NVIC_GetPriorityGrouping+0x18>)
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	0a1b      	lsrs	r3, r3, #8
 8004192:	f003 0307 	and.w	r3, r3, #7
}
 8004196:	4618      	mov	r0, r3
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	e000ed00 	.word	0xe000ed00

080041a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	4603      	mov	r3, r0
 80041ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	db0b      	blt.n	80041ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041b6:	79fb      	ldrb	r3, [r7, #7]
 80041b8:	f003 021f 	and.w	r2, r3, #31
 80041bc:	4907      	ldr	r1, [pc, #28]	; (80041dc <__NVIC_EnableIRQ+0x38>)
 80041be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041c2:	095b      	lsrs	r3, r3, #5
 80041c4:	2001      	movs	r0, #1
 80041c6:	fa00 f202 	lsl.w	r2, r0, r2
 80041ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	e000e100 	.word	0xe000e100

080041e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	4603      	mov	r3, r0
 80041e8:	6039      	str	r1, [r7, #0]
 80041ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	db0a      	blt.n	800420a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	490c      	ldr	r1, [pc, #48]	; (800422c <__NVIC_SetPriority+0x4c>)
 80041fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fe:	0112      	lsls	r2, r2, #4
 8004200:	b2d2      	uxtb	r2, r2
 8004202:	440b      	add	r3, r1
 8004204:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004208:	e00a      	b.n	8004220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	b2da      	uxtb	r2, r3
 800420e:	4908      	ldr	r1, [pc, #32]	; (8004230 <__NVIC_SetPriority+0x50>)
 8004210:	79fb      	ldrb	r3, [r7, #7]
 8004212:	f003 030f 	and.w	r3, r3, #15
 8004216:	3b04      	subs	r3, #4
 8004218:	0112      	lsls	r2, r2, #4
 800421a:	b2d2      	uxtb	r2, r2
 800421c:	440b      	add	r3, r1
 800421e:	761a      	strb	r2, [r3, #24]
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	e000e100 	.word	0xe000e100
 8004230:	e000ed00 	.word	0xe000ed00

08004234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004234:	b480      	push	{r7}
 8004236:	b089      	sub	sp, #36	; 0x24
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f003 0307 	and.w	r3, r3, #7
 8004246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	f1c3 0307 	rsb	r3, r3, #7
 800424e:	2b04      	cmp	r3, #4
 8004250:	bf28      	it	cs
 8004252:	2304      	movcs	r3, #4
 8004254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	3304      	adds	r3, #4
 800425a:	2b06      	cmp	r3, #6
 800425c:	d902      	bls.n	8004264 <NVIC_EncodePriority+0x30>
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	3b03      	subs	r3, #3
 8004262:	e000      	b.n	8004266 <NVIC_EncodePriority+0x32>
 8004264:	2300      	movs	r3, #0
 8004266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004268:	f04f 32ff 	mov.w	r2, #4294967295
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	fa02 f303 	lsl.w	r3, r2, r3
 8004272:	43da      	mvns	r2, r3
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	401a      	ands	r2, r3
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800427c:	f04f 31ff 	mov.w	r1, #4294967295
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	fa01 f303 	lsl.w	r3, r1, r3
 8004286:	43d9      	mvns	r1, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800428c:	4313      	orrs	r3, r2
         );
}
 800428e:	4618      	mov	r0, r3
 8004290:	3724      	adds	r7, #36	; 0x24
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b082      	sub	sp, #8
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7ff ff4c 	bl	8004140 <__NVIC_SetPriorityGrouping>
}
 80042a8:	bf00      	nop
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	4603      	mov	r3, r0
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
 80042bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80042be:	2300      	movs	r3, #0
 80042c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042c2:	f7ff ff61 	bl	8004188 <__NVIC_GetPriorityGrouping>
 80042c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	68b9      	ldr	r1, [r7, #8]
 80042cc:	6978      	ldr	r0, [r7, #20]
 80042ce:	f7ff ffb1 	bl	8004234 <NVIC_EncodePriority>
 80042d2:	4602      	mov	r2, r0
 80042d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042d8:	4611      	mov	r1, r2
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff ff80 	bl	80041e0 <__NVIC_SetPriority>
}
 80042e0:	bf00      	nop
 80042e2:	3718      	adds	r7, #24
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	4603      	mov	r3, r0
 80042f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7ff ff54 	bl	80041a4 <__NVIC_EnableIRQ>
}
 80042fc:	bf00      	nop
 80042fe:	3708      	adds	r7, #8
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800430c:	2300      	movs	r3, #0
 800430e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004310:	f7ff ff0a 	bl	8004128 <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e099      	b.n	8004454 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0201 	bic.w	r2, r2, #1
 800433e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004340:	e00f      	b.n	8004362 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004342:	f7ff fef1 	bl	8004128 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b05      	cmp	r3, #5
 800434e:	d908      	bls.n	8004362 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2220      	movs	r2, #32
 8004354:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2203      	movs	r2, #3
 800435a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e078      	b.n	8004454 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1e8      	bne.n	8004342 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	4b38      	ldr	r3, [pc, #224]	; (800445c <HAL_DMA_Init+0x158>)
 800437c:	4013      	ands	r3, r2
 800437e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800438e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800439a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	2b04      	cmp	r3, #4
 80043ba:	d107      	bne.n	80043cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c4:	4313      	orrs	r3, r2
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	f023 0307 	bic.w	r3, r3, #7
 80043e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d117      	bne.n	8004426 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00e      	beq.n	8004426 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 fb01 	bl	8004a10 <DMA_CheckFifoParam>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d008      	beq.n	8004426 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2240      	movs	r2, #64	; 0x40
 8004418:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004422:	2301      	movs	r3, #1
 8004424:	e016      	b.n	8004454 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 fab8 	bl	80049a4 <DMA_CalcBaseAndBitshift>
 8004434:	4603      	mov	r3, r0
 8004436:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800443c:	223f      	movs	r2, #63	; 0x3f
 800443e:	409a      	lsls	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	f010803f 	.word	0xf010803f

08004460 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
 800446c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800446e:	2300      	movs	r3, #0
 8004470:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004476:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800447e:	2b01      	cmp	r3, #1
 8004480:	d101      	bne.n	8004486 <HAL_DMA_Start_IT+0x26>
 8004482:	2302      	movs	r3, #2
 8004484:	e040      	b.n	8004508 <HAL_DMA_Start_IT+0xa8>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b01      	cmp	r3, #1
 8004498:	d12f      	bne.n	80044fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2202      	movs	r2, #2
 800449e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	68b9      	ldr	r1, [r7, #8]
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 fa4a 	bl	8004948 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b8:	223f      	movs	r2, #63	; 0x3f
 80044ba:	409a      	lsls	r2, r3
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0216 	orr.w	r2, r2, #22
 80044ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d007      	beq.n	80044e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 0208 	orr.w	r2, r2, #8
 80044e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0201 	orr.w	r2, r2, #1
 80044f6:	601a      	str	r2, [r3, #0]
 80044f8:	e005      	b.n	8004506 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004502:	2302      	movs	r3, #2
 8004504:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004506:	7dfb      	ldrb	r3, [r7, #23]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800451e:	f7ff fe03 	bl	8004128 <HAL_GetTick>
 8004522:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b02      	cmp	r3, #2
 800452e:	d008      	beq.n	8004542 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2280      	movs	r2, #128	; 0x80
 8004534:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e052      	b.n	80045e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 0216 	bic.w	r2, r2, #22
 8004550:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	695a      	ldr	r2, [r3, #20]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004560:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004566:	2b00      	cmp	r3, #0
 8004568:	d103      	bne.n	8004572 <HAL_DMA_Abort+0x62>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800456e:	2b00      	cmp	r3, #0
 8004570:	d007      	beq.n	8004582 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 0208 	bic.w	r2, r2, #8
 8004580:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 0201 	bic.w	r2, r2, #1
 8004590:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004592:	e013      	b.n	80045bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004594:	f7ff fdc8 	bl	8004128 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b05      	cmp	r3, #5
 80045a0:	d90c      	bls.n	80045bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2220      	movs	r2, #32
 80045a6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2203      	movs	r2, #3
 80045ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e015      	b.n	80045e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1e4      	bne.n	8004594 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ce:	223f      	movs	r2, #63	; 0x3f
 80045d0:	409a      	lsls	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d004      	beq.n	800460e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2280      	movs	r2, #128	; 0x80
 8004608:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e00c      	b.n	8004628 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2205      	movs	r2, #5
 8004612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 0201 	bic.w	r2, r2, #1
 8004624:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004640:	4b8e      	ldr	r3, [pc, #568]	; (800487c <HAL_DMA_IRQHandler+0x248>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a8e      	ldr	r2, [pc, #568]	; (8004880 <HAL_DMA_IRQHandler+0x24c>)
 8004646:	fba2 2303 	umull	r2, r3, r2, r3
 800464a:	0a9b      	lsrs	r3, r3, #10
 800464c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004652:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800465e:	2208      	movs	r2, #8
 8004660:	409a      	lsls	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4013      	ands	r3, r2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d01a      	beq.n	80046a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b00      	cmp	r3, #0
 8004676:	d013      	beq.n	80046a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0204 	bic.w	r2, r2, #4
 8004686:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800468c:	2208      	movs	r2, #8
 800468e:	409a      	lsls	r2, r3
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004698:	f043 0201 	orr.w	r2, r3, #1
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a4:	2201      	movs	r2, #1
 80046a6:	409a      	lsls	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	4013      	ands	r3, r2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d012      	beq.n	80046d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00b      	beq.n	80046d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c2:	2201      	movs	r2, #1
 80046c4:	409a      	lsls	r2, r3
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ce:	f043 0202 	orr.w	r2, r3, #2
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046da:	2204      	movs	r2, #4
 80046dc:	409a      	lsls	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	4013      	ands	r3, r2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d012      	beq.n	800470c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00b      	beq.n	800470c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f8:	2204      	movs	r2, #4
 80046fa:	409a      	lsls	r2, r3
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004704:	f043 0204 	orr.w	r2, r3, #4
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004710:	2210      	movs	r2, #16
 8004712:	409a      	lsls	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4013      	ands	r3, r2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d043      	beq.n	80047a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0308 	and.w	r3, r3, #8
 8004726:	2b00      	cmp	r3, #0
 8004728:	d03c      	beq.n	80047a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800472e:	2210      	movs	r2, #16
 8004730:	409a      	lsls	r2, r3
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d018      	beq.n	8004776 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d108      	bne.n	8004764 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	2b00      	cmp	r3, #0
 8004758:	d024      	beq.n	80047a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	4798      	blx	r3
 8004762:	e01f      	b.n	80047a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004768:	2b00      	cmp	r3, #0
 800476a:	d01b      	beq.n	80047a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	4798      	blx	r3
 8004774:	e016      	b.n	80047a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004780:	2b00      	cmp	r3, #0
 8004782:	d107      	bne.n	8004794 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 0208 	bic.w	r2, r2, #8
 8004792:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a8:	2220      	movs	r2, #32
 80047aa:	409a      	lsls	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	4013      	ands	r3, r2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 808f 	beq.w	80048d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0310 	and.w	r3, r3, #16
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f000 8087 	beq.w	80048d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ca:	2220      	movs	r2, #32
 80047cc:	409a      	lsls	r2, r3
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b05      	cmp	r3, #5
 80047dc:	d136      	bne.n	800484c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f022 0216 	bic.w	r2, r2, #22
 80047ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	695a      	ldr	r2, [r3, #20]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004802:	2b00      	cmp	r3, #0
 8004804:	d103      	bne.n	800480e <HAL_DMA_IRQHandler+0x1da>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800480a:	2b00      	cmp	r3, #0
 800480c:	d007      	beq.n	800481e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0208 	bic.w	r2, r2, #8
 800481c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004822:	223f      	movs	r2, #63	; 0x3f
 8004824:	409a      	lsls	r2, r3
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800483e:	2b00      	cmp	r3, #0
 8004840:	d07e      	beq.n	8004940 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	4798      	blx	r3
        }
        return;
 800484a:	e079      	b.n	8004940 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d01d      	beq.n	8004896 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10d      	bne.n	8004884 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486c:	2b00      	cmp	r3, #0
 800486e:	d031      	beq.n	80048d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	4798      	blx	r3
 8004878:	e02c      	b.n	80048d4 <HAL_DMA_IRQHandler+0x2a0>
 800487a:	bf00      	nop
 800487c:	20000048 	.word	0x20000048
 8004880:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004888:	2b00      	cmp	r3, #0
 800488a:	d023      	beq.n	80048d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	4798      	blx	r3
 8004894:	e01e      	b.n	80048d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10f      	bne.n	80048c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 0210 	bic.w	r2, r2, #16
 80048b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d003      	beq.n	80048d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d032      	beq.n	8004942 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d022      	beq.n	800492e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2205      	movs	r2, #5
 80048ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f022 0201 	bic.w	r2, r2, #1
 80048fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	3301      	adds	r3, #1
 8004904:	60bb      	str	r3, [r7, #8]
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	429a      	cmp	r2, r3
 800490a:	d307      	bcc.n	800491c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1f2      	bne.n	8004900 <HAL_DMA_IRQHandler+0x2cc>
 800491a:	e000      	b.n	800491e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800491c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004932:	2b00      	cmp	r3, #0
 8004934:	d005      	beq.n	8004942 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	4798      	blx	r3
 800493e:	e000      	b.n	8004942 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004940:	bf00      	nop
    }
  }
}
 8004942:	3718      	adds	r7, #24
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
 8004954:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004964:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	2b40      	cmp	r3, #64	; 0x40
 8004974:	d108      	bne.n	8004988 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004986:	e007      	b.n	8004998 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	60da      	str	r2, [r3, #12]
}
 8004998:	bf00      	nop
 800499a:	3714      	adds	r7, #20
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	3b10      	subs	r3, #16
 80049b4:	4a14      	ldr	r2, [pc, #80]	; (8004a08 <DMA_CalcBaseAndBitshift+0x64>)
 80049b6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ba:	091b      	lsrs	r3, r3, #4
 80049bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80049be:	4a13      	ldr	r2, [pc, #76]	; (8004a0c <DMA_CalcBaseAndBitshift+0x68>)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4413      	add	r3, r2
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	461a      	mov	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2b03      	cmp	r3, #3
 80049d0:	d909      	bls.n	80049e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80049da:	f023 0303 	bic.w	r3, r3, #3
 80049de:	1d1a      	adds	r2, r3, #4
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	659a      	str	r2, [r3, #88]	; 0x58
 80049e4:	e007      	b.n	80049f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80049ee:	f023 0303 	bic.w	r3, r3, #3
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	aaaaaaab 	.word	0xaaaaaaab
 8004a0c:	0800f068 	.word	0x0800f068

08004a10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d11f      	bne.n	8004a6a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2b03      	cmp	r3, #3
 8004a2e:	d856      	bhi.n	8004ade <DMA_CheckFifoParam+0xce>
 8004a30:	a201      	add	r2, pc, #4	; (adr r2, 8004a38 <DMA_CheckFifoParam+0x28>)
 8004a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a36:	bf00      	nop
 8004a38:	08004a49 	.word	0x08004a49
 8004a3c:	08004a5b 	.word	0x08004a5b
 8004a40:	08004a49 	.word	0x08004a49
 8004a44:	08004adf 	.word	0x08004adf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d046      	beq.n	8004ae2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a58:	e043      	b.n	8004ae2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a62:	d140      	bne.n	8004ae6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a68:	e03d      	b.n	8004ae6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a72:	d121      	bne.n	8004ab8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2b03      	cmp	r3, #3
 8004a78:	d837      	bhi.n	8004aea <DMA_CheckFifoParam+0xda>
 8004a7a:	a201      	add	r2, pc, #4	; (adr r2, 8004a80 <DMA_CheckFifoParam+0x70>)
 8004a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a80:	08004a91 	.word	0x08004a91
 8004a84:	08004a97 	.word	0x08004a97
 8004a88:	08004a91 	.word	0x08004a91
 8004a8c:	08004aa9 	.word	0x08004aa9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	73fb      	strb	r3, [r7, #15]
      break;
 8004a94:	e030      	b.n	8004af8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d025      	beq.n	8004aee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aa6:	e022      	b.n	8004aee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ab0:	d11f      	bne.n	8004af2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004ab6:	e01c      	b.n	8004af2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d903      	bls.n	8004ac6 <DMA_CheckFifoParam+0xb6>
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2b03      	cmp	r3, #3
 8004ac2:	d003      	beq.n	8004acc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ac4:	e018      	b.n	8004af8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	73fb      	strb	r3, [r7, #15]
      break;
 8004aca:	e015      	b.n	8004af8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00e      	beq.n	8004af6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	73fb      	strb	r3, [r7, #15]
      break;
 8004adc:	e00b      	b.n	8004af6 <DMA_CheckFifoParam+0xe6>
      break;
 8004ade:	bf00      	nop
 8004ae0:	e00a      	b.n	8004af8 <DMA_CheckFifoParam+0xe8>
      break;
 8004ae2:	bf00      	nop
 8004ae4:	e008      	b.n	8004af8 <DMA_CheckFifoParam+0xe8>
      break;
 8004ae6:	bf00      	nop
 8004ae8:	e006      	b.n	8004af8 <DMA_CheckFifoParam+0xe8>
      break;
 8004aea:	bf00      	nop
 8004aec:	e004      	b.n	8004af8 <DMA_CheckFifoParam+0xe8>
      break;
 8004aee:	bf00      	nop
 8004af0:	e002      	b.n	8004af8 <DMA_CheckFifoParam+0xe8>
      break;   
 8004af2:	bf00      	nop
 8004af4:	e000      	b.n	8004af8 <DMA_CheckFifoParam+0xe8>
      break;
 8004af6:	bf00      	nop
    }
  } 
  
  return status; 
 8004af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop

08004b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b089      	sub	sp, #36	; 0x24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b12:	2300      	movs	r3, #0
 8004b14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b16:	2300      	movs	r3, #0
 8004b18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b1e:	2300      	movs	r3, #0
 8004b20:	61fb      	str	r3, [r7, #28]
 8004b22:	e177      	b.n	8004e14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b24:	2201      	movs	r2, #1
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	4013      	ands	r3, r2
 8004b36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	f040 8166 	bne.w	8004e0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f003 0303 	and.w	r3, r3, #3
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d005      	beq.n	8004b5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d130      	bne.n	8004bbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	2203      	movs	r2, #3
 8004b66:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6a:	43db      	mvns	r3, r3
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	68da      	ldr	r2, [r3, #12]
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	69ba      	ldr	r2, [r7, #24]
 8004b88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b90:	2201      	movs	r2, #1
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	fa02 f303 	lsl.w	r3, r2, r3
 8004b98:	43db      	mvns	r3, r3
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	091b      	lsrs	r3, r3, #4
 8004ba6:	f003 0201 	and.w	r2, r3, #1
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f003 0303 	and.w	r3, r3, #3
 8004bc4:	2b03      	cmp	r3, #3
 8004bc6:	d017      	beq.n	8004bf8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	2203      	movs	r2, #3
 8004bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd8:	43db      	mvns	r3, r3
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	005b      	lsls	r3, r3, #1
 8004be8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f003 0303 	and.w	r3, r3, #3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d123      	bne.n	8004c4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	08da      	lsrs	r2, r3, #3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	3208      	adds	r2, #8
 8004c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	f003 0307 	and.w	r3, r3, #7
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	220f      	movs	r2, #15
 8004c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c20:	43db      	mvns	r3, r3
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	4013      	ands	r3, r2
 8004c26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	691a      	ldr	r2, [r3, #16]
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	f003 0307 	and.w	r3, r3, #7
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	fa02 f303 	lsl.w	r3, r2, r3
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	08da      	lsrs	r2, r3, #3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	3208      	adds	r2, #8
 8004c46:	69b9      	ldr	r1, [r7, #24]
 8004c48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	2203      	movs	r2, #3
 8004c58:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5c:	43db      	mvns	r3, r3
 8004c5e:	69ba      	ldr	r2, [r7, #24]
 8004c60:	4013      	ands	r3, r2
 8004c62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f003 0203 	and.w	r2, r3, #3
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	fa02 f303 	lsl.w	r3, r2, r3
 8004c74:	69ba      	ldr	r2, [r7, #24]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	69ba      	ldr	r2, [r7, #24]
 8004c7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 80c0 	beq.w	8004e0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c8e:	2300      	movs	r3, #0
 8004c90:	60fb      	str	r3, [r7, #12]
 8004c92:	4b66      	ldr	r3, [pc, #408]	; (8004e2c <HAL_GPIO_Init+0x324>)
 8004c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c96:	4a65      	ldr	r2, [pc, #404]	; (8004e2c <HAL_GPIO_Init+0x324>)
 8004c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8004c9e:	4b63      	ldr	r3, [pc, #396]	; (8004e2c <HAL_GPIO_Init+0x324>)
 8004ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ca6:	60fb      	str	r3, [r7, #12]
 8004ca8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004caa:	4a61      	ldr	r2, [pc, #388]	; (8004e30 <HAL_GPIO_Init+0x328>)
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	089b      	lsrs	r3, r3, #2
 8004cb0:	3302      	adds	r3, #2
 8004cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	f003 0303 	and.w	r3, r3, #3
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	220f      	movs	r2, #15
 8004cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a58      	ldr	r2, [pc, #352]	; (8004e34 <HAL_GPIO_Init+0x32c>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d037      	beq.n	8004d46 <HAL_GPIO_Init+0x23e>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a57      	ldr	r2, [pc, #348]	; (8004e38 <HAL_GPIO_Init+0x330>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d031      	beq.n	8004d42 <HAL_GPIO_Init+0x23a>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a56      	ldr	r2, [pc, #344]	; (8004e3c <HAL_GPIO_Init+0x334>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d02b      	beq.n	8004d3e <HAL_GPIO_Init+0x236>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a55      	ldr	r2, [pc, #340]	; (8004e40 <HAL_GPIO_Init+0x338>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d025      	beq.n	8004d3a <HAL_GPIO_Init+0x232>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a54      	ldr	r2, [pc, #336]	; (8004e44 <HAL_GPIO_Init+0x33c>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d01f      	beq.n	8004d36 <HAL_GPIO_Init+0x22e>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a53      	ldr	r2, [pc, #332]	; (8004e48 <HAL_GPIO_Init+0x340>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d019      	beq.n	8004d32 <HAL_GPIO_Init+0x22a>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a52      	ldr	r2, [pc, #328]	; (8004e4c <HAL_GPIO_Init+0x344>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d013      	beq.n	8004d2e <HAL_GPIO_Init+0x226>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a51      	ldr	r2, [pc, #324]	; (8004e50 <HAL_GPIO_Init+0x348>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d00d      	beq.n	8004d2a <HAL_GPIO_Init+0x222>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a50      	ldr	r2, [pc, #320]	; (8004e54 <HAL_GPIO_Init+0x34c>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d007      	beq.n	8004d26 <HAL_GPIO_Init+0x21e>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a4f      	ldr	r2, [pc, #316]	; (8004e58 <HAL_GPIO_Init+0x350>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d101      	bne.n	8004d22 <HAL_GPIO_Init+0x21a>
 8004d1e:	2309      	movs	r3, #9
 8004d20:	e012      	b.n	8004d48 <HAL_GPIO_Init+0x240>
 8004d22:	230a      	movs	r3, #10
 8004d24:	e010      	b.n	8004d48 <HAL_GPIO_Init+0x240>
 8004d26:	2308      	movs	r3, #8
 8004d28:	e00e      	b.n	8004d48 <HAL_GPIO_Init+0x240>
 8004d2a:	2307      	movs	r3, #7
 8004d2c:	e00c      	b.n	8004d48 <HAL_GPIO_Init+0x240>
 8004d2e:	2306      	movs	r3, #6
 8004d30:	e00a      	b.n	8004d48 <HAL_GPIO_Init+0x240>
 8004d32:	2305      	movs	r3, #5
 8004d34:	e008      	b.n	8004d48 <HAL_GPIO_Init+0x240>
 8004d36:	2304      	movs	r3, #4
 8004d38:	e006      	b.n	8004d48 <HAL_GPIO_Init+0x240>
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e004      	b.n	8004d48 <HAL_GPIO_Init+0x240>
 8004d3e:	2302      	movs	r3, #2
 8004d40:	e002      	b.n	8004d48 <HAL_GPIO_Init+0x240>
 8004d42:	2301      	movs	r3, #1
 8004d44:	e000      	b.n	8004d48 <HAL_GPIO_Init+0x240>
 8004d46:	2300      	movs	r3, #0
 8004d48:	69fa      	ldr	r2, [r7, #28]
 8004d4a:	f002 0203 	and.w	r2, r2, #3
 8004d4e:	0092      	lsls	r2, r2, #2
 8004d50:	4093      	lsls	r3, r2
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	4313      	orrs	r3, r2
 8004d56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d58:	4935      	ldr	r1, [pc, #212]	; (8004e30 <HAL_GPIO_Init+0x328>)
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	089b      	lsrs	r3, r3, #2
 8004d5e:	3302      	adds	r3, #2
 8004d60:	69ba      	ldr	r2, [r7, #24]
 8004d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d66:	4b3d      	ldr	r3, [pc, #244]	; (8004e5c <HAL_GPIO_Init+0x354>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	43db      	mvns	r3, r3
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	4013      	ands	r3, r2
 8004d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d8a:	4a34      	ldr	r2, [pc, #208]	; (8004e5c <HAL_GPIO_Init+0x354>)
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d90:	4b32      	ldr	r3, [pc, #200]	; (8004e5c <HAL_GPIO_Init+0x354>)
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004db4:	4a29      	ldr	r2, [pc, #164]	; (8004e5c <HAL_GPIO_Init+0x354>)
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004dba:	4b28      	ldr	r3, [pc, #160]	; (8004e5c <HAL_GPIO_Init+0x354>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	43db      	mvns	r3, r3
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004dd6:	69ba      	ldr	r2, [r7, #24]
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004dde:	4a1f      	ldr	r2, [pc, #124]	; (8004e5c <HAL_GPIO_Init+0x354>)
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004de4:	4b1d      	ldr	r3, [pc, #116]	; (8004e5c <HAL_GPIO_Init+0x354>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	43db      	mvns	r3, r3
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	4013      	ands	r3, r2
 8004df2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d003      	beq.n	8004e08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e08:	4a14      	ldr	r2, [pc, #80]	; (8004e5c <HAL_GPIO_Init+0x354>)
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	3301      	adds	r3, #1
 8004e12:	61fb      	str	r3, [r7, #28]
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	2b0f      	cmp	r3, #15
 8004e18:	f67f ae84 	bls.w	8004b24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e1c:	bf00      	nop
 8004e1e:	bf00      	nop
 8004e20:	3724      	adds	r7, #36	; 0x24
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	40023800 	.word	0x40023800
 8004e30:	40013800 	.word	0x40013800
 8004e34:	40020000 	.word	0x40020000
 8004e38:	40020400 	.word	0x40020400
 8004e3c:	40020800 	.word	0x40020800
 8004e40:	40020c00 	.word	0x40020c00
 8004e44:	40021000 	.word	0x40021000
 8004e48:	40021400 	.word	0x40021400
 8004e4c:	40021800 	.word	0x40021800
 8004e50:	40021c00 	.word	0x40021c00
 8004e54:	40022000 	.word	0x40022000
 8004e58:	40022400 	.word	0x40022400
 8004e5c:	40013c00 	.word	0x40013c00

08004e60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	460b      	mov	r3, r1
 8004e6a:	807b      	strh	r3, [r7, #2]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e70:	787b      	ldrb	r3, [r7, #1]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e76:	887a      	ldrh	r2, [r7, #2]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e7c:	e003      	b.n	8004e86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e7e:	887b      	ldrh	r3, [r7, #2]
 8004e80:	041a      	lsls	r2, r3, #16
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	619a      	str	r2, [r3, #24]
}
 8004e86:	bf00      	nop
 8004e88:	370c      	adds	r7, #12
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
	...

08004e94 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	603b      	str	r3, [r7, #0]
 8004ea2:	4b20      	ldr	r3, [pc, #128]	; (8004f24 <HAL_PWREx_EnableOverDrive+0x90>)
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea6:	4a1f      	ldr	r2, [pc, #124]	; (8004f24 <HAL_PWREx_EnableOverDrive+0x90>)
 8004ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eac:	6413      	str	r3, [r2, #64]	; 0x40
 8004eae:	4b1d      	ldr	r3, [pc, #116]	; (8004f24 <HAL_PWREx_EnableOverDrive+0x90>)
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb6:	603b      	str	r3, [r7, #0]
 8004eb8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004eba:	4b1b      	ldr	r3, [pc, #108]	; (8004f28 <HAL_PWREx_EnableOverDrive+0x94>)
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ec0:	f7ff f932 	bl	8004128 <HAL_GetTick>
 8004ec4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ec6:	e009      	b.n	8004edc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ec8:	f7ff f92e 	bl	8004128 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ed6:	d901      	bls.n	8004edc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e01f      	b.n	8004f1c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004edc:	4b13      	ldr	r3, [pc, #76]	; (8004f2c <HAL_PWREx_EnableOverDrive+0x98>)
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee8:	d1ee      	bne.n	8004ec8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004eea:	4b11      	ldr	r3, [pc, #68]	; (8004f30 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004eec:	2201      	movs	r2, #1
 8004eee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ef0:	f7ff f91a 	bl	8004128 <HAL_GetTick>
 8004ef4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ef6:	e009      	b.n	8004f0c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ef8:	f7ff f916 	bl	8004128 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f06:	d901      	bls.n	8004f0c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e007      	b.n	8004f1c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004f0c:	4b07      	ldr	r3, [pc, #28]	; (8004f2c <HAL_PWREx_EnableOverDrive+0x98>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f18:	d1ee      	bne.n	8004ef8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40023800 	.word	0x40023800
 8004f28:	420e0040 	.word	0x420e0040
 8004f2c:	40007000 	.word	0x40007000
 8004f30:	420e0044 	.word	0x420e0044

08004f34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e267      	b.n	8005416 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d075      	beq.n	800503e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f52:	4b88      	ldr	r3, [pc, #544]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 030c 	and.w	r3, r3, #12
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	d00c      	beq.n	8004f78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f5e:	4b85      	ldr	r3, [pc, #532]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f66:	2b08      	cmp	r3, #8
 8004f68:	d112      	bne.n	8004f90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f6a:	4b82      	ldr	r3, [pc, #520]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f76:	d10b      	bne.n	8004f90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f78:	4b7e      	ldr	r3, [pc, #504]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d05b      	beq.n	800503c <HAL_RCC_OscConfig+0x108>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d157      	bne.n	800503c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e242      	b.n	8005416 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f98:	d106      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x74>
 8004f9a:	4b76      	ldr	r3, [pc, #472]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a75      	ldr	r2, [pc, #468]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fa4:	6013      	str	r3, [r2, #0]
 8004fa6:	e01d      	b.n	8004fe4 <HAL_RCC_OscConfig+0xb0>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fb0:	d10c      	bne.n	8004fcc <HAL_RCC_OscConfig+0x98>
 8004fb2:	4b70      	ldr	r3, [pc, #448]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a6f      	ldr	r2, [pc, #444]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004fb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fbc:	6013      	str	r3, [r2, #0]
 8004fbe:	4b6d      	ldr	r3, [pc, #436]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a6c      	ldr	r2, [pc, #432]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc8:	6013      	str	r3, [r2, #0]
 8004fca:	e00b      	b.n	8004fe4 <HAL_RCC_OscConfig+0xb0>
 8004fcc:	4b69      	ldr	r3, [pc, #420]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a68      	ldr	r2, [pc, #416]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fd6:	6013      	str	r3, [r2, #0]
 8004fd8:	4b66      	ldr	r3, [pc, #408]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a65      	ldr	r2, [pc, #404]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8004fde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fe2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d013      	beq.n	8005014 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fec:	f7ff f89c 	bl	8004128 <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ff2:	e008      	b.n	8005006 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ff4:	f7ff f898 	bl	8004128 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b64      	cmp	r3, #100	; 0x64
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e207      	b.n	8005416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005006:	4b5b      	ldr	r3, [pc, #364]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0f0      	beq.n	8004ff4 <HAL_RCC_OscConfig+0xc0>
 8005012:	e014      	b.n	800503e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005014:	f7ff f888 	bl	8004128 <HAL_GetTick>
 8005018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800501a:	e008      	b.n	800502e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800501c:	f7ff f884 	bl	8004128 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b64      	cmp	r3, #100	; 0x64
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e1f3      	b.n	8005416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800502e:	4b51      	ldr	r3, [pc, #324]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1f0      	bne.n	800501c <HAL_RCC_OscConfig+0xe8>
 800503a:	e000      	b.n	800503e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800503c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d063      	beq.n	8005112 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800504a:	4b4a      	ldr	r3, [pc, #296]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 030c 	and.w	r3, r3, #12
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00b      	beq.n	800506e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005056:	4b47      	ldr	r3, [pc, #284]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800505e:	2b08      	cmp	r3, #8
 8005060:	d11c      	bne.n	800509c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005062:	4b44      	ldr	r3, [pc, #272]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d116      	bne.n	800509c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800506e:	4b41      	ldr	r3, [pc, #260]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d005      	beq.n	8005086 <HAL_RCC_OscConfig+0x152>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d001      	beq.n	8005086 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e1c7      	b.n	8005416 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005086:	4b3b      	ldr	r3, [pc, #236]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	4937      	ldr	r1, [pc, #220]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8005096:	4313      	orrs	r3, r2
 8005098:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800509a:	e03a      	b.n	8005112 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d020      	beq.n	80050e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050a4:	4b34      	ldr	r3, [pc, #208]	; (8005178 <HAL_RCC_OscConfig+0x244>)
 80050a6:	2201      	movs	r2, #1
 80050a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050aa:	f7ff f83d 	bl	8004128 <HAL_GetTick>
 80050ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050b0:	e008      	b.n	80050c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050b2:	f7ff f839 	bl	8004128 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d901      	bls.n	80050c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e1a8      	b.n	8005416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050c4:	4b2b      	ldr	r3, [pc, #172]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0f0      	beq.n	80050b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050d0:	4b28      	ldr	r3, [pc, #160]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	00db      	lsls	r3, r3, #3
 80050de:	4925      	ldr	r1, [pc, #148]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	600b      	str	r3, [r1, #0]
 80050e4:	e015      	b.n	8005112 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050e6:	4b24      	ldr	r3, [pc, #144]	; (8005178 <HAL_RCC_OscConfig+0x244>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ec:	f7ff f81c 	bl	8004128 <HAL_GetTick>
 80050f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050f2:	e008      	b.n	8005106 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050f4:	f7ff f818 	bl	8004128 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e187      	b.n	8005416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005106:	4b1b      	ldr	r3, [pc, #108]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1f0      	bne.n	80050f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 0308 	and.w	r3, r3, #8
 800511a:	2b00      	cmp	r3, #0
 800511c:	d036      	beq.n	800518c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d016      	beq.n	8005154 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005126:	4b15      	ldr	r3, [pc, #84]	; (800517c <HAL_RCC_OscConfig+0x248>)
 8005128:	2201      	movs	r2, #1
 800512a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800512c:	f7fe fffc 	bl	8004128 <HAL_GetTick>
 8005130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005132:	e008      	b.n	8005146 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005134:	f7fe fff8 	bl	8004128 <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	2b02      	cmp	r3, #2
 8005140:	d901      	bls.n	8005146 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e167      	b.n	8005416 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005146:	4b0b      	ldr	r3, [pc, #44]	; (8005174 <HAL_RCC_OscConfig+0x240>)
 8005148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d0f0      	beq.n	8005134 <HAL_RCC_OscConfig+0x200>
 8005152:	e01b      	b.n	800518c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005154:	4b09      	ldr	r3, [pc, #36]	; (800517c <HAL_RCC_OscConfig+0x248>)
 8005156:	2200      	movs	r2, #0
 8005158:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800515a:	f7fe ffe5 	bl	8004128 <HAL_GetTick>
 800515e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005160:	e00e      	b.n	8005180 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005162:	f7fe ffe1 	bl	8004128 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	2b02      	cmp	r3, #2
 800516e:	d907      	bls.n	8005180 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e150      	b.n	8005416 <HAL_RCC_OscConfig+0x4e2>
 8005174:	40023800 	.word	0x40023800
 8005178:	42470000 	.word	0x42470000
 800517c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005180:	4b88      	ldr	r3, [pc, #544]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 8005182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005184:	f003 0302 	and.w	r3, r3, #2
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1ea      	bne.n	8005162 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0304 	and.w	r3, r3, #4
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 8097 	beq.w	80052c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800519a:	2300      	movs	r3, #0
 800519c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800519e:	4b81      	ldr	r3, [pc, #516]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10f      	bne.n	80051ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051aa:	2300      	movs	r3, #0
 80051ac:	60bb      	str	r3, [r7, #8]
 80051ae:	4b7d      	ldr	r3, [pc, #500]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	4a7c      	ldr	r2, [pc, #496]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 80051b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051b8:	6413      	str	r3, [r2, #64]	; 0x40
 80051ba:	4b7a      	ldr	r3, [pc, #488]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c2:	60bb      	str	r3, [r7, #8]
 80051c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051c6:	2301      	movs	r3, #1
 80051c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051ca:	4b77      	ldr	r3, [pc, #476]	; (80053a8 <HAL_RCC_OscConfig+0x474>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d118      	bne.n	8005208 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051d6:	4b74      	ldr	r3, [pc, #464]	; (80053a8 <HAL_RCC_OscConfig+0x474>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a73      	ldr	r2, [pc, #460]	; (80053a8 <HAL_RCC_OscConfig+0x474>)
 80051dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051e2:	f7fe ffa1 	bl	8004128 <HAL_GetTick>
 80051e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e8:	e008      	b.n	80051fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051ea:	f7fe ff9d 	bl	8004128 <HAL_GetTick>
 80051ee:	4602      	mov	r2, r0
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	1ad3      	subs	r3, r2, r3
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d901      	bls.n	80051fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80051f8:	2303      	movs	r3, #3
 80051fa:	e10c      	b.n	8005416 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051fc:	4b6a      	ldr	r3, [pc, #424]	; (80053a8 <HAL_RCC_OscConfig+0x474>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005204:	2b00      	cmp	r3, #0
 8005206:	d0f0      	beq.n	80051ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d106      	bne.n	800521e <HAL_RCC_OscConfig+0x2ea>
 8005210:	4b64      	ldr	r3, [pc, #400]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 8005212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005214:	4a63      	ldr	r2, [pc, #396]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 8005216:	f043 0301 	orr.w	r3, r3, #1
 800521a:	6713      	str	r3, [r2, #112]	; 0x70
 800521c:	e01c      	b.n	8005258 <HAL_RCC_OscConfig+0x324>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	2b05      	cmp	r3, #5
 8005224:	d10c      	bne.n	8005240 <HAL_RCC_OscConfig+0x30c>
 8005226:	4b5f      	ldr	r3, [pc, #380]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 8005228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522a:	4a5e      	ldr	r2, [pc, #376]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 800522c:	f043 0304 	orr.w	r3, r3, #4
 8005230:	6713      	str	r3, [r2, #112]	; 0x70
 8005232:	4b5c      	ldr	r3, [pc, #368]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 8005234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005236:	4a5b      	ldr	r2, [pc, #364]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 8005238:	f043 0301 	orr.w	r3, r3, #1
 800523c:	6713      	str	r3, [r2, #112]	; 0x70
 800523e:	e00b      	b.n	8005258 <HAL_RCC_OscConfig+0x324>
 8005240:	4b58      	ldr	r3, [pc, #352]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 8005242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005244:	4a57      	ldr	r2, [pc, #348]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 8005246:	f023 0301 	bic.w	r3, r3, #1
 800524a:	6713      	str	r3, [r2, #112]	; 0x70
 800524c:	4b55      	ldr	r3, [pc, #340]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 800524e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005250:	4a54      	ldr	r2, [pc, #336]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 8005252:	f023 0304 	bic.w	r3, r3, #4
 8005256:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d015      	beq.n	800528c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005260:	f7fe ff62 	bl	8004128 <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005266:	e00a      	b.n	800527e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005268:	f7fe ff5e 	bl	8004128 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	f241 3288 	movw	r2, #5000	; 0x1388
 8005276:	4293      	cmp	r3, r2
 8005278:	d901      	bls.n	800527e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e0cb      	b.n	8005416 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800527e:	4b49      	ldr	r3, [pc, #292]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 8005280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d0ee      	beq.n	8005268 <HAL_RCC_OscConfig+0x334>
 800528a:	e014      	b.n	80052b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800528c:	f7fe ff4c 	bl	8004128 <HAL_GetTick>
 8005290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005292:	e00a      	b.n	80052aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005294:	f7fe ff48 	bl	8004128 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	f241 3288 	movw	r2, #5000	; 0x1388
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e0b5      	b.n	8005416 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052aa:	4b3e      	ldr	r3, [pc, #248]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 80052ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ae:	f003 0302 	and.w	r3, r3, #2
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1ee      	bne.n	8005294 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052b6:	7dfb      	ldrb	r3, [r7, #23]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d105      	bne.n	80052c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052bc:	4b39      	ldr	r3, [pc, #228]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 80052be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c0:	4a38      	ldr	r2, [pc, #224]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 80052c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 80a1 	beq.w	8005414 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052d2:	4b34      	ldr	r3, [pc, #208]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f003 030c 	and.w	r3, r3, #12
 80052da:	2b08      	cmp	r3, #8
 80052dc:	d05c      	beq.n	8005398 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d141      	bne.n	800536a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052e6:	4b31      	ldr	r3, [pc, #196]	; (80053ac <HAL_RCC_OscConfig+0x478>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ec:	f7fe ff1c 	bl	8004128 <HAL_GetTick>
 80052f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052f2:	e008      	b.n	8005306 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052f4:	f7fe ff18 	bl	8004128 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d901      	bls.n	8005306 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e087      	b.n	8005416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005306:	4b27      	ldr	r3, [pc, #156]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1f0      	bne.n	80052f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	69da      	ldr	r2, [r3, #28]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	431a      	orrs	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005320:	019b      	lsls	r3, r3, #6
 8005322:	431a      	orrs	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005328:	085b      	lsrs	r3, r3, #1
 800532a:	3b01      	subs	r3, #1
 800532c:	041b      	lsls	r3, r3, #16
 800532e:	431a      	orrs	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005334:	061b      	lsls	r3, r3, #24
 8005336:	491b      	ldr	r1, [pc, #108]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 8005338:	4313      	orrs	r3, r2
 800533a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800533c:	4b1b      	ldr	r3, [pc, #108]	; (80053ac <HAL_RCC_OscConfig+0x478>)
 800533e:	2201      	movs	r2, #1
 8005340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005342:	f7fe fef1 	bl	8004128 <HAL_GetTick>
 8005346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005348:	e008      	b.n	800535c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800534a:	f7fe feed 	bl	8004128 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b02      	cmp	r3, #2
 8005356:	d901      	bls.n	800535c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e05c      	b.n	8005416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800535c:	4b11      	ldr	r3, [pc, #68]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d0f0      	beq.n	800534a <HAL_RCC_OscConfig+0x416>
 8005368:	e054      	b.n	8005414 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800536a:	4b10      	ldr	r3, [pc, #64]	; (80053ac <HAL_RCC_OscConfig+0x478>)
 800536c:	2200      	movs	r2, #0
 800536e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005370:	f7fe feda 	bl	8004128 <HAL_GetTick>
 8005374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005376:	e008      	b.n	800538a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005378:	f7fe fed6 	bl	8004128 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	2b02      	cmp	r3, #2
 8005384:	d901      	bls.n	800538a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e045      	b.n	8005416 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800538a:	4b06      	ldr	r3, [pc, #24]	; (80053a4 <HAL_RCC_OscConfig+0x470>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1f0      	bne.n	8005378 <HAL_RCC_OscConfig+0x444>
 8005396:	e03d      	b.n	8005414 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d107      	bne.n	80053b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e038      	b.n	8005416 <HAL_RCC_OscConfig+0x4e2>
 80053a4:	40023800 	.word	0x40023800
 80053a8:	40007000 	.word	0x40007000
 80053ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80053b0:	4b1b      	ldr	r3, [pc, #108]	; (8005420 <HAL_RCC_OscConfig+0x4ec>)
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d028      	beq.n	8005410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d121      	bne.n	8005410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d11a      	bne.n	8005410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053e0:	4013      	ands	r3, r2
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d111      	bne.n	8005410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f6:	085b      	lsrs	r3, r3, #1
 80053f8:	3b01      	subs	r3, #1
 80053fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d107      	bne.n	8005410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800540c:	429a      	cmp	r2, r3
 800540e:	d001      	beq.n	8005414 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e000      	b.n	8005416 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3718      	adds	r7, #24
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	40023800 	.word	0x40023800

08005424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e0cc      	b.n	80055d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005438:	4b68      	ldr	r3, [pc, #416]	; (80055dc <HAL_RCC_ClockConfig+0x1b8>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 030f 	and.w	r3, r3, #15
 8005440:	683a      	ldr	r2, [r7, #0]
 8005442:	429a      	cmp	r2, r3
 8005444:	d90c      	bls.n	8005460 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005446:	4b65      	ldr	r3, [pc, #404]	; (80055dc <HAL_RCC_ClockConfig+0x1b8>)
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	b2d2      	uxtb	r2, r2
 800544c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800544e:	4b63      	ldr	r3, [pc, #396]	; (80055dc <HAL_RCC_ClockConfig+0x1b8>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 030f 	and.w	r3, r3, #15
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	429a      	cmp	r2, r3
 800545a:	d001      	beq.n	8005460 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e0b8      	b.n	80055d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 0302 	and.w	r3, r3, #2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d020      	beq.n	80054ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0304 	and.w	r3, r3, #4
 8005474:	2b00      	cmp	r3, #0
 8005476:	d005      	beq.n	8005484 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005478:	4b59      	ldr	r3, [pc, #356]	; (80055e0 <HAL_RCC_ClockConfig+0x1bc>)
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	4a58      	ldr	r2, [pc, #352]	; (80055e0 <HAL_RCC_ClockConfig+0x1bc>)
 800547e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005482:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0308 	and.w	r3, r3, #8
 800548c:	2b00      	cmp	r3, #0
 800548e:	d005      	beq.n	800549c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005490:	4b53      	ldr	r3, [pc, #332]	; (80055e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	4a52      	ldr	r2, [pc, #328]	; (80055e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005496:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800549a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800549c:	4b50      	ldr	r3, [pc, #320]	; (80055e0 <HAL_RCC_ClockConfig+0x1bc>)
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	494d      	ldr	r1, [pc, #308]	; (80055e0 <HAL_RCC_ClockConfig+0x1bc>)
 80054aa:	4313      	orrs	r3, r2
 80054ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d044      	beq.n	8005544 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d107      	bne.n	80054d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054c2:	4b47      	ldr	r3, [pc, #284]	; (80055e0 <HAL_RCC_ClockConfig+0x1bc>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d119      	bne.n	8005502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e07f      	b.n	80055d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d003      	beq.n	80054e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054de:	2b03      	cmp	r3, #3
 80054e0:	d107      	bne.n	80054f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054e2:	4b3f      	ldr	r3, [pc, #252]	; (80055e0 <HAL_RCC_ClockConfig+0x1bc>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d109      	bne.n	8005502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e06f      	b.n	80055d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054f2:	4b3b      	ldr	r3, [pc, #236]	; (80055e0 <HAL_RCC_ClockConfig+0x1bc>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0302 	and.w	r3, r3, #2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d101      	bne.n	8005502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e067      	b.n	80055d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005502:	4b37      	ldr	r3, [pc, #220]	; (80055e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f023 0203 	bic.w	r2, r3, #3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	4934      	ldr	r1, [pc, #208]	; (80055e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005510:	4313      	orrs	r3, r2
 8005512:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005514:	f7fe fe08 	bl	8004128 <HAL_GetTick>
 8005518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800551a:	e00a      	b.n	8005532 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800551c:	f7fe fe04 	bl	8004128 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	f241 3288 	movw	r2, #5000	; 0x1388
 800552a:	4293      	cmp	r3, r2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e04f      	b.n	80055d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005532:	4b2b      	ldr	r3, [pc, #172]	; (80055e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f003 020c 	and.w	r2, r3, #12
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	429a      	cmp	r2, r3
 8005542:	d1eb      	bne.n	800551c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005544:	4b25      	ldr	r3, [pc, #148]	; (80055dc <HAL_RCC_ClockConfig+0x1b8>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 030f 	and.w	r3, r3, #15
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	429a      	cmp	r2, r3
 8005550:	d20c      	bcs.n	800556c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005552:	4b22      	ldr	r3, [pc, #136]	; (80055dc <HAL_RCC_ClockConfig+0x1b8>)
 8005554:	683a      	ldr	r2, [r7, #0]
 8005556:	b2d2      	uxtb	r2, r2
 8005558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800555a:	4b20      	ldr	r3, [pc, #128]	; (80055dc <HAL_RCC_ClockConfig+0x1b8>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 030f 	and.w	r3, r3, #15
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	429a      	cmp	r2, r3
 8005566:	d001      	beq.n	800556c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e032      	b.n	80055d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0304 	and.w	r3, r3, #4
 8005574:	2b00      	cmp	r3, #0
 8005576:	d008      	beq.n	800558a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005578:	4b19      	ldr	r3, [pc, #100]	; (80055e0 <HAL_RCC_ClockConfig+0x1bc>)
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	4916      	ldr	r1, [pc, #88]	; (80055e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005586:	4313      	orrs	r3, r2
 8005588:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0308 	and.w	r3, r3, #8
 8005592:	2b00      	cmp	r3, #0
 8005594:	d009      	beq.n	80055aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005596:	4b12      	ldr	r3, [pc, #72]	; (80055e0 <HAL_RCC_ClockConfig+0x1bc>)
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	00db      	lsls	r3, r3, #3
 80055a4:	490e      	ldr	r1, [pc, #56]	; (80055e0 <HAL_RCC_ClockConfig+0x1bc>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80055aa:	f000 f821 	bl	80055f0 <HAL_RCC_GetSysClockFreq>
 80055ae:	4602      	mov	r2, r0
 80055b0:	4b0b      	ldr	r3, [pc, #44]	; (80055e0 <HAL_RCC_ClockConfig+0x1bc>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	091b      	lsrs	r3, r3, #4
 80055b6:	f003 030f 	and.w	r3, r3, #15
 80055ba:	490a      	ldr	r1, [pc, #40]	; (80055e4 <HAL_RCC_ClockConfig+0x1c0>)
 80055bc:	5ccb      	ldrb	r3, [r1, r3]
 80055be:	fa22 f303 	lsr.w	r3, r2, r3
 80055c2:	4a09      	ldr	r2, [pc, #36]	; (80055e8 <HAL_RCC_ClockConfig+0x1c4>)
 80055c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055c6:	4b09      	ldr	r3, [pc, #36]	; (80055ec <HAL_RCC_ClockConfig+0x1c8>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7fe f9c0 	bl	8003950 <HAL_InitTick>

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	40023c00 	.word	0x40023c00
 80055e0:	40023800 	.word	0x40023800
 80055e4:	0800f050 	.word	0x0800f050
 80055e8:	20000048 	.word	0x20000048
 80055ec:	2000004c 	.word	0x2000004c

080055f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055f4:	b090      	sub	sp, #64	; 0x40
 80055f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80055f8:	2300      	movs	r3, #0
 80055fa:	637b      	str	r3, [r7, #52]	; 0x34
 80055fc:	2300      	movs	r3, #0
 80055fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005600:	2300      	movs	r3, #0
 8005602:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005604:	2300      	movs	r3, #0
 8005606:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005608:	4b59      	ldr	r3, [pc, #356]	; (8005770 <HAL_RCC_GetSysClockFreq+0x180>)
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f003 030c 	and.w	r3, r3, #12
 8005610:	2b08      	cmp	r3, #8
 8005612:	d00d      	beq.n	8005630 <HAL_RCC_GetSysClockFreq+0x40>
 8005614:	2b08      	cmp	r3, #8
 8005616:	f200 80a1 	bhi.w	800575c <HAL_RCC_GetSysClockFreq+0x16c>
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <HAL_RCC_GetSysClockFreq+0x34>
 800561e:	2b04      	cmp	r3, #4
 8005620:	d003      	beq.n	800562a <HAL_RCC_GetSysClockFreq+0x3a>
 8005622:	e09b      	b.n	800575c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005624:	4b53      	ldr	r3, [pc, #332]	; (8005774 <HAL_RCC_GetSysClockFreq+0x184>)
 8005626:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005628:	e09b      	b.n	8005762 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800562a:	4b53      	ldr	r3, [pc, #332]	; (8005778 <HAL_RCC_GetSysClockFreq+0x188>)
 800562c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800562e:	e098      	b.n	8005762 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005630:	4b4f      	ldr	r3, [pc, #316]	; (8005770 <HAL_RCC_GetSysClockFreq+0x180>)
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005638:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800563a:	4b4d      	ldr	r3, [pc, #308]	; (8005770 <HAL_RCC_GetSysClockFreq+0x180>)
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d028      	beq.n	8005698 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005646:	4b4a      	ldr	r3, [pc, #296]	; (8005770 <HAL_RCC_GetSysClockFreq+0x180>)
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	099b      	lsrs	r3, r3, #6
 800564c:	2200      	movs	r2, #0
 800564e:	623b      	str	r3, [r7, #32]
 8005650:	627a      	str	r2, [r7, #36]	; 0x24
 8005652:	6a3b      	ldr	r3, [r7, #32]
 8005654:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005658:	2100      	movs	r1, #0
 800565a:	4b47      	ldr	r3, [pc, #284]	; (8005778 <HAL_RCC_GetSysClockFreq+0x188>)
 800565c:	fb03 f201 	mul.w	r2, r3, r1
 8005660:	2300      	movs	r3, #0
 8005662:	fb00 f303 	mul.w	r3, r0, r3
 8005666:	4413      	add	r3, r2
 8005668:	4a43      	ldr	r2, [pc, #268]	; (8005778 <HAL_RCC_GetSysClockFreq+0x188>)
 800566a:	fba0 1202 	umull	r1, r2, r0, r2
 800566e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005670:	460a      	mov	r2, r1
 8005672:	62ba      	str	r2, [r7, #40]	; 0x28
 8005674:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005676:	4413      	add	r3, r2
 8005678:	62fb      	str	r3, [r7, #44]	; 0x2c
 800567a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800567c:	2200      	movs	r2, #0
 800567e:	61bb      	str	r3, [r7, #24]
 8005680:	61fa      	str	r2, [r7, #28]
 8005682:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005686:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800568a:	f7fb fabd 	bl	8000c08 <__aeabi_uldivmod>
 800568e:	4602      	mov	r2, r0
 8005690:	460b      	mov	r3, r1
 8005692:	4613      	mov	r3, r2
 8005694:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005696:	e053      	b.n	8005740 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005698:	4b35      	ldr	r3, [pc, #212]	; (8005770 <HAL_RCC_GetSysClockFreq+0x180>)
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	099b      	lsrs	r3, r3, #6
 800569e:	2200      	movs	r2, #0
 80056a0:	613b      	str	r3, [r7, #16]
 80056a2:	617a      	str	r2, [r7, #20]
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80056aa:	f04f 0b00 	mov.w	fp, #0
 80056ae:	4652      	mov	r2, sl
 80056b0:	465b      	mov	r3, fp
 80056b2:	f04f 0000 	mov.w	r0, #0
 80056b6:	f04f 0100 	mov.w	r1, #0
 80056ba:	0159      	lsls	r1, r3, #5
 80056bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056c0:	0150      	lsls	r0, r2, #5
 80056c2:	4602      	mov	r2, r0
 80056c4:	460b      	mov	r3, r1
 80056c6:	ebb2 080a 	subs.w	r8, r2, sl
 80056ca:	eb63 090b 	sbc.w	r9, r3, fp
 80056ce:	f04f 0200 	mov.w	r2, #0
 80056d2:	f04f 0300 	mov.w	r3, #0
 80056d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80056da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80056de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80056e2:	ebb2 0408 	subs.w	r4, r2, r8
 80056e6:	eb63 0509 	sbc.w	r5, r3, r9
 80056ea:	f04f 0200 	mov.w	r2, #0
 80056ee:	f04f 0300 	mov.w	r3, #0
 80056f2:	00eb      	lsls	r3, r5, #3
 80056f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056f8:	00e2      	lsls	r2, r4, #3
 80056fa:	4614      	mov	r4, r2
 80056fc:	461d      	mov	r5, r3
 80056fe:	eb14 030a 	adds.w	r3, r4, sl
 8005702:	603b      	str	r3, [r7, #0]
 8005704:	eb45 030b 	adc.w	r3, r5, fp
 8005708:	607b      	str	r3, [r7, #4]
 800570a:	f04f 0200 	mov.w	r2, #0
 800570e:	f04f 0300 	mov.w	r3, #0
 8005712:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005716:	4629      	mov	r1, r5
 8005718:	028b      	lsls	r3, r1, #10
 800571a:	4621      	mov	r1, r4
 800571c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005720:	4621      	mov	r1, r4
 8005722:	028a      	lsls	r2, r1, #10
 8005724:	4610      	mov	r0, r2
 8005726:	4619      	mov	r1, r3
 8005728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800572a:	2200      	movs	r2, #0
 800572c:	60bb      	str	r3, [r7, #8]
 800572e:	60fa      	str	r2, [r7, #12]
 8005730:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005734:	f7fb fa68 	bl	8000c08 <__aeabi_uldivmod>
 8005738:	4602      	mov	r2, r0
 800573a:	460b      	mov	r3, r1
 800573c:	4613      	mov	r3, r2
 800573e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005740:	4b0b      	ldr	r3, [pc, #44]	; (8005770 <HAL_RCC_GetSysClockFreq+0x180>)
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	0c1b      	lsrs	r3, r3, #16
 8005746:	f003 0303 	and.w	r3, r3, #3
 800574a:	3301      	adds	r3, #1
 800574c:	005b      	lsls	r3, r3, #1
 800574e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005750:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005754:	fbb2 f3f3 	udiv	r3, r2, r3
 8005758:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800575a:	e002      	b.n	8005762 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800575c:	4b05      	ldr	r3, [pc, #20]	; (8005774 <HAL_RCC_GetSysClockFreq+0x184>)
 800575e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005760:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005764:	4618      	mov	r0, r3
 8005766:	3740      	adds	r7, #64	; 0x40
 8005768:	46bd      	mov	sp, r7
 800576a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800576e:	bf00      	nop
 8005770:	40023800 	.word	0x40023800
 8005774:	00f42400 	.word	0x00f42400
 8005778:	017d7840 	.word	0x017d7840

0800577c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800577c:	b480      	push	{r7}
 800577e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005780:	4b03      	ldr	r3, [pc, #12]	; (8005790 <HAL_RCC_GetHCLKFreq+0x14>)
 8005782:	681b      	ldr	r3, [r3, #0]
}
 8005784:	4618      	mov	r0, r3
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	20000048 	.word	0x20000048

08005794 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005798:	f7ff fff0 	bl	800577c <HAL_RCC_GetHCLKFreq>
 800579c:	4602      	mov	r2, r0
 800579e:	4b05      	ldr	r3, [pc, #20]	; (80057b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	0a9b      	lsrs	r3, r3, #10
 80057a4:	f003 0307 	and.w	r3, r3, #7
 80057a8:	4903      	ldr	r1, [pc, #12]	; (80057b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057aa:	5ccb      	ldrb	r3, [r1, r3]
 80057ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	40023800 	.word	0x40023800
 80057b8:	0800f060 	.word	0x0800f060

080057bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80057c0:	f7ff ffdc 	bl	800577c <HAL_RCC_GetHCLKFreq>
 80057c4:	4602      	mov	r2, r0
 80057c6:	4b05      	ldr	r3, [pc, #20]	; (80057dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	0b5b      	lsrs	r3, r3, #13
 80057cc:	f003 0307 	and.w	r3, r3, #7
 80057d0:	4903      	ldr	r1, [pc, #12]	; (80057e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057d2:	5ccb      	ldrb	r3, [r1, r3]
 80057d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057d8:	4618      	mov	r0, r3
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	40023800 	.word	0x40023800
 80057e0:	0800f060 	.word	0x0800f060

080057e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	220f      	movs	r2, #15
 80057f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80057f4:	4b12      	ldr	r3, [pc, #72]	; (8005840 <HAL_RCC_GetClockConfig+0x5c>)
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f003 0203 	and.w	r2, r3, #3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005800:	4b0f      	ldr	r3, [pc, #60]	; (8005840 <HAL_RCC_GetClockConfig+0x5c>)
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800580c:	4b0c      	ldr	r3, [pc, #48]	; (8005840 <HAL_RCC_GetClockConfig+0x5c>)
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005818:	4b09      	ldr	r3, [pc, #36]	; (8005840 <HAL_RCC_GetClockConfig+0x5c>)
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	08db      	lsrs	r3, r3, #3
 800581e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005826:	4b07      	ldr	r3, [pc, #28]	; (8005844 <HAL_RCC_GetClockConfig+0x60>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 020f 	and.w	r2, r3, #15
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	601a      	str	r2, [r3, #0]
}
 8005832:	bf00      	nop
 8005834:	370c      	adds	r7, #12
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	40023800 	.word	0x40023800
 8005844:	40023c00 	.word	0x40023c00

08005848 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005850:	2300      	movs	r3, #0
 8005852:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005854:	2300      	movs	r3, #0
 8005856:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0301 	and.w	r3, r3, #1
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10b      	bne.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800586c:	2b00      	cmp	r3, #0
 800586e:	d105      	bne.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005878:	2b00      	cmp	r3, #0
 800587a:	d075      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800587c:	4b91      	ldr	r3, [pc, #580]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800587e:	2200      	movs	r2, #0
 8005880:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005882:	f7fe fc51 	bl	8004128 <HAL_GetTick>
 8005886:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005888:	e008      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800588a:	f7fe fc4d 	bl	8004128 <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d901      	bls.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e189      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800589c:	4b8a      	ldr	r3, [pc, #552]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1f0      	bne.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d009      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	019a      	lsls	r2, r3, #6
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	071b      	lsls	r3, r3, #28
 80058c0:	4981      	ldr	r1, [pc, #516]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0302 	and.w	r3, r3, #2
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d01f      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80058d4:	4b7c      	ldr	r3, [pc, #496]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058da:	0f1b      	lsrs	r3, r3, #28
 80058dc:	f003 0307 	and.w	r3, r3, #7
 80058e0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	019a      	lsls	r2, r3, #6
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	061b      	lsls	r3, r3, #24
 80058ee:	431a      	orrs	r2, r3
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	071b      	lsls	r3, r3, #28
 80058f4:	4974      	ldr	r1, [pc, #464]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80058fc:	4b72      	ldr	r3, [pc, #456]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005902:	f023 021f 	bic.w	r2, r3, #31
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	3b01      	subs	r3, #1
 800590c:	496e      	ldr	r1, [pc, #440]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800590e:	4313      	orrs	r3, r2
 8005910:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00d      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	019a      	lsls	r2, r3, #6
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	061b      	lsls	r3, r3, #24
 800592c:	431a      	orrs	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	071b      	lsls	r3, r3, #28
 8005934:	4964      	ldr	r1, [pc, #400]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005936:	4313      	orrs	r3, r2
 8005938:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800593c:	4b61      	ldr	r3, [pc, #388]	; (8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800593e:	2201      	movs	r2, #1
 8005940:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005942:	f7fe fbf1 	bl	8004128 <HAL_GetTick>
 8005946:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005948:	e008      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800594a:	f7fe fbed 	bl	8004128 <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	2b02      	cmp	r3, #2
 8005956:	d901      	bls.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	e129      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800595c:	4b5a      	ldr	r3, [pc, #360]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d0f0      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b00      	cmp	r3, #0
 8005972:	d105      	bne.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800597c:	2b00      	cmp	r3, #0
 800597e:	d079      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005980:	4b52      	ldr	r3, [pc, #328]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005982:	2200      	movs	r2, #0
 8005984:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005986:	f7fe fbcf 	bl	8004128 <HAL_GetTick>
 800598a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800598c:	e008      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800598e:	f7fe fbcb 	bl	8004128 <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	2b02      	cmp	r3, #2
 800599a:	d901      	bls.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e107      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80059a0:	4b49      	ldr	r3, [pc, #292]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059ac:	d0ef      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0304 	and.w	r3, r3, #4
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d020      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80059ba:	4b43      	ldr	r3, [pc, #268]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c0:	0f1b      	lsrs	r3, r3, #28
 80059c2:	f003 0307 	and.w	r3, r3, #7
 80059c6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	019a      	lsls	r2, r3, #6
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	061b      	lsls	r3, r3, #24
 80059d4:	431a      	orrs	r2, r3
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	071b      	lsls	r3, r3, #28
 80059da:	493b      	ldr	r1, [pc, #236]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80059e2:	4b39      	ldr	r3, [pc, #228]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059e8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a1b      	ldr	r3, [r3, #32]
 80059f0:	3b01      	subs	r3, #1
 80059f2:	021b      	lsls	r3, r3, #8
 80059f4:	4934      	ldr	r1, [pc, #208]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0308 	and.w	r3, r3, #8
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d01e      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005a08:	4b2f      	ldr	r3, [pc, #188]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a0e:	0e1b      	lsrs	r3, r3, #24
 8005a10:	f003 030f 	and.w	r3, r3, #15
 8005a14:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	019a      	lsls	r2, r3, #6
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	061b      	lsls	r3, r3, #24
 8005a20:	431a      	orrs	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	071b      	lsls	r3, r3, #28
 8005a28:	4927      	ldr	r1, [pc, #156]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005a30:	4b25      	ldr	r3, [pc, #148]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a36:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3e:	4922      	ldr	r1, [pc, #136]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005a46:	4b21      	ldr	r3, [pc, #132]	; (8005acc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005a48:	2201      	movs	r2, #1
 8005a4a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a4c:	f7fe fb6c 	bl	8004128 <HAL_GetTick>
 8005a50:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005a52:	e008      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005a54:	f7fe fb68 	bl	8004128 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d901      	bls.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e0a4      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005a66:	4b18      	ldr	r3, [pc, #96]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a72:	d1ef      	bne.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0320 	and.w	r3, r3, #32
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f000 808b 	beq.w	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a82:	2300      	movs	r3, #0
 8005a84:	60fb      	str	r3, [r7, #12]
 8005a86:	4b10      	ldr	r3, [pc, #64]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8a:	4a0f      	ldr	r2, [pc, #60]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a90:	6413      	str	r3, [r2, #64]	; 0x40
 8005a92:	4b0d      	ldr	r3, [pc, #52]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a9a:	60fb      	str	r3, [r7, #12]
 8005a9c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005a9e:	4b0c      	ldr	r3, [pc, #48]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a0b      	ldr	r2, [pc, #44]	; (8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005aa8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005aaa:	f7fe fb3d 	bl	8004128 <HAL_GetTick>
 8005aae:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ab0:	e010      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005ab2:	f7fe fb39 	bl	8004128 <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	2b02      	cmp	r3, #2
 8005abe:	d909      	bls.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e075      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005ac4:	42470068 	.word	0x42470068
 8005ac8:	40023800 	.word	0x40023800
 8005acc:	42470070 	.word	0x42470070
 8005ad0:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ad4:	4b38      	ldr	r3, [pc, #224]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d0e8      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ae0:	4b36      	ldr	r3, [pc, #216]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ae8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d02f      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d028      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005afe:	4b2f      	ldr	r3, [pc, #188]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b06:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b08:	4b2d      	ldr	r3, [pc, #180]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b0e:	4b2c      	ldr	r3, [pc, #176]	; (8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005b10:	2200      	movs	r2, #0
 8005b12:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005b14:	4a29      	ldr	r2, [pc, #164]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b1a:	4b28      	ldr	r3, [pc, #160]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d114      	bne.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005b26:	f7fe faff 	bl	8004128 <HAL_GetTick>
 8005b2a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b2c:	e00a      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b2e:	f7fe fafb 	bl	8004128 <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d901      	bls.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e035      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b44:	4b1d      	ldr	r3, [pc, #116]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d0ee      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b5c:	d10d      	bne.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005b5e:	4b17      	ldr	r3, [pc, #92]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b72:	4912      	ldr	r1, [pc, #72]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	608b      	str	r3, [r1, #8]
 8005b78:	e005      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005b7a:	4b10      	ldr	r3, [pc, #64]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	4a0f      	ldr	r2, [pc, #60]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b80:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005b84:	6093      	str	r3, [r2, #8]
 8005b86:	4b0d      	ldr	r3, [pc, #52]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b92:	490a      	ldr	r1, [pc, #40]	; (8005bbc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0310 	and.w	r3, r3, #16
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d004      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005baa:	4b06      	ldr	r3, [pc, #24]	; (8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005bac:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3718      	adds	r7, #24
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	40007000 	.word	0x40007000
 8005bbc:	40023800 	.word	0x40023800
 8005bc0:	42470e40 	.word	0x42470e40
 8005bc4:	424711e0 	.word	0x424711e0

08005bc8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e066      	b.n	8005cac <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	7f5b      	ldrb	r3, [r3, #29]
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d105      	bne.n	8005bf4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f7fd fe58 	bl	80038a4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	22ca      	movs	r2, #202	; 0xca
 8005c00:	625a      	str	r2, [r3, #36]	; 0x24
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2253      	movs	r2, #83	; 0x53
 8005c08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f87a 	bl	8005d04 <RTC_EnterInitMode>
 8005c10:	4603      	mov	r3, r0
 8005c12:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005c14:	7bfb      	ldrb	r3, [r7, #15]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d12c      	bne.n	8005c74 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	6812      	ldr	r2, [r2, #0]
 8005c24:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005c28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c2c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	6899      	ldr	r1, [r3, #8]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685a      	ldr	r2, [r3, #4]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	431a      	orrs	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	431a      	orrs	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	68d2      	ldr	r2, [r2, #12]
 8005c54:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	6919      	ldr	r1, [r3, #16]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	041a      	lsls	r2, r3, #16
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f881 	bl	8005d72 <RTC_ExitInitMode>
 8005c70:	4603      	mov	r3, r0
 8005c72:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005c74:	7bfb      	ldrb	r3, [r7, #15]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d113      	bne.n	8005ca2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c88:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	699a      	ldr	r2, [r3, #24]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	22ff      	movs	r2, #255	; 0xff
 8005ca8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3710      	adds	r7, #16
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68da      	ldr	r2, [r3, #12]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005cce:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005cd0:	f7fe fa2a 	bl	8004128 <HAL_GetTick>
 8005cd4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005cd6:	e009      	b.n	8005cec <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005cd8:	f7fe fa26 	bl	8004128 <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ce6:	d901      	bls.n	8005cec <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e007      	b.n	8005cfc <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	f003 0320 	and.w	r3, r3, #32
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d0ee      	beq.n	8005cd8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005d10:	2300      	movs	r3, #0
 8005d12:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d122      	bne.n	8005d68 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68da      	ldr	r2, [r3, #12]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d30:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d32:	f7fe f9f9 	bl	8004128 <HAL_GetTick>
 8005d36:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005d38:	e00c      	b.n	8005d54 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d3a:	f7fe f9f5 	bl	8004128 <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d48:	d904      	bls.n	8005d54 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2204      	movs	r2, #4
 8005d4e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d102      	bne.n	8005d68 <RTC_EnterInitMode+0x64>
 8005d62:	7bfb      	ldrb	r3, [r7, #15]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d1e8      	bne.n	8005d3a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b084      	sub	sp, #16
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68da      	ldr	r2, [r3, #12]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d8c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	f003 0320 	and.w	r3, r3, #32
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10a      	bne.n	8005db2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f7ff ff89 	bl	8005cb4 <HAL_RTC_WaitForSynchro>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d004      	beq.n	8005db2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2204      	movs	r2, #4
 8005dac:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e041      	b.n	8005e52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d106      	bne.n	8005de8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f839 	bl	8005e5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	3304      	adds	r3, #4
 8005df8:	4619      	mov	r1, r3
 8005dfa:	4610      	mov	r0, r2
 8005dfc:	f000 f9d8 	bl	80061b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	b083      	sub	sp, #12
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005e62:	bf00      	nop
 8005e64:	370c      	adds	r7, #12
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
	...

08005e70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d001      	beq.n	8005e88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e04e      	b.n	8005f26 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68da      	ldr	r2, [r3, #12]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f042 0201 	orr.w	r2, r2, #1
 8005e9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a23      	ldr	r2, [pc, #140]	; (8005f34 <HAL_TIM_Base_Start_IT+0xc4>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d022      	beq.n	8005ef0 <HAL_TIM_Base_Start_IT+0x80>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eb2:	d01d      	beq.n	8005ef0 <HAL_TIM_Base_Start_IT+0x80>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a1f      	ldr	r2, [pc, #124]	; (8005f38 <HAL_TIM_Base_Start_IT+0xc8>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d018      	beq.n	8005ef0 <HAL_TIM_Base_Start_IT+0x80>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a1e      	ldr	r2, [pc, #120]	; (8005f3c <HAL_TIM_Base_Start_IT+0xcc>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d013      	beq.n	8005ef0 <HAL_TIM_Base_Start_IT+0x80>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a1c      	ldr	r2, [pc, #112]	; (8005f40 <HAL_TIM_Base_Start_IT+0xd0>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d00e      	beq.n	8005ef0 <HAL_TIM_Base_Start_IT+0x80>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a1b      	ldr	r2, [pc, #108]	; (8005f44 <HAL_TIM_Base_Start_IT+0xd4>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d009      	beq.n	8005ef0 <HAL_TIM_Base_Start_IT+0x80>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a19      	ldr	r2, [pc, #100]	; (8005f48 <HAL_TIM_Base_Start_IT+0xd8>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d004      	beq.n	8005ef0 <HAL_TIM_Base_Start_IT+0x80>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a18      	ldr	r2, [pc, #96]	; (8005f4c <HAL_TIM_Base_Start_IT+0xdc>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d111      	bne.n	8005f14 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f003 0307 	and.w	r3, r3, #7
 8005efa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2b06      	cmp	r3, #6
 8005f00:	d010      	beq.n	8005f24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f042 0201 	orr.w	r2, r2, #1
 8005f10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f12:	e007      	b.n	8005f24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f042 0201 	orr.w	r2, r2, #1
 8005f22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3714      	adds	r7, #20
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	40010000 	.word	0x40010000
 8005f38:	40000400 	.word	0x40000400
 8005f3c:	40000800 	.word	0x40000800
 8005f40:	40000c00 	.word	0x40000c00
 8005f44:	40010400 	.word	0x40010400
 8005f48:	40014000 	.word	0x40014000
 8005f4c:	40001800 	.word	0x40001800

08005f50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	f003 0302 	and.w	r3, r3, #2
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d122      	bne.n	8005fac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	f003 0302 	and.w	r3, r3, #2
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d11b      	bne.n	8005fac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f06f 0202 	mvn.w	r2, #2
 8005f7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	f003 0303 	and.w	r3, r3, #3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d003      	beq.n	8005f9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f8ee 	bl	8006174 <HAL_TIM_IC_CaptureCallback>
 8005f98:	e005      	b.n	8005fa6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f8e0 	bl	8006160 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 f8f1 	bl	8006188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	f003 0304 	and.w	r3, r3, #4
 8005fb6:	2b04      	cmp	r3, #4
 8005fb8:	d122      	bne.n	8006000 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	f003 0304 	and.w	r3, r3, #4
 8005fc4:	2b04      	cmp	r3, #4
 8005fc6:	d11b      	bne.n	8006000 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f06f 0204 	mvn.w	r2, #4
 8005fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2202      	movs	r2, #2
 8005fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	699b      	ldr	r3, [r3, #24]
 8005fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d003      	beq.n	8005fee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f8c4 	bl	8006174 <HAL_TIM_IC_CaptureCallback>
 8005fec:	e005      	b.n	8005ffa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f8b6 	bl	8006160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 f8c7 	bl	8006188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	f003 0308 	and.w	r3, r3, #8
 800600a:	2b08      	cmp	r3, #8
 800600c:	d122      	bne.n	8006054 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	f003 0308 	and.w	r3, r3, #8
 8006018:	2b08      	cmp	r3, #8
 800601a:	d11b      	bne.n	8006054 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f06f 0208 	mvn.w	r2, #8
 8006024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2204      	movs	r2, #4
 800602a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	f003 0303 	and.w	r3, r3, #3
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f89a 	bl	8006174 <HAL_TIM_IC_CaptureCallback>
 8006040:	e005      	b.n	800604e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f88c 	bl	8006160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f89d 	bl	8006188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	f003 0310 	and.w	r3, r3, #16
 800605e:	2b10      	cmp	r3, #16
 8006060:	d122      	bne.n	80060a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	f003 0310 	and.w	r3, r3, #16
 800606c:	2b10      	cmp	r3, #16
 800606e:	d11b      	bne.n	80060a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f06f 0210 	mvn.w	r2, #16
 8006078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2208      	movs	r2, #8
 800607e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	69db      	ldr	r3, [r3, #28]
 8006086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800608a:	2b00      	cmp	r3, #0
 800608c:	d003      	beq.n	8006096 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f870 	bl	8006174 <HAL_TIM_IC_CaptureCallback>
 8006094:	e005      	b.n	80060a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 f862 	bl	8006160 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 f873 	bl	8006188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d10e      	bne.n	80060d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d107      	bne.n	80060d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f06f 0201 	mvn.w	r2, #1
 80060cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f7fd fbaa 	bl	8003828 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060de:	2b80      	cmp	r3, #128	; 0x80
 80060e0:	d10e      	bne.n	8006100 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ec:	2b80      	cmp	r3, #128	; 0x80
 80060ee:	d107      	bne.n	8006100 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f902 	bl	8006304 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610a:	2b40      	cmp	r3, #64	; 0x40
 800610c:	d10e      	bne.n	800612c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006118:	2b40      	cmp	r3, #64	; 0x40
 800611a:	d107      	bne.n	800612c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f838 	bl	800619c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	f003 0320 	and.w	r3, r3, #32
 8006136:	2b20      	cmp	r3, #32
 8006138:	d10e      	bne.n	8006158 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	f003 0320 	and.w	r3, r3, #32
 8006144:	2b20      	cmp	r3, #32
 8006146:	d107      	bne.n	8006158 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f06f 0220 	mvn.w	r2, #32
 8006150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f8cc 	bl	80062f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006158:	bf00      	nop
 800615a:	3708      	adds	r7, #8
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800617c:	bf00      	nop
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a40      	ldr	r2, [pc, #256]	; (80062c4 <TIM_Base_SetConfig+0x114>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d013      	beq.n	80061f0 <TIM_Base_SetConfig+0x40>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061ce:	d00f      	beq.n	80061f0 <TIM_Base_SetConfig+0x40>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a3d      	ldr	r2, [pc, #244]	; (80062c8 <TIM_Base_SetConfig+0x118>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d00b      	beq.n	80061f0 <TIM_Base_SetConfig+0x40>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a3c      	ldr	r2, [pc, #240]	; (80062cc <TIM_Base_SetConfig+0x11c>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d007      	beq.n	80061f0 <TIM_Base_SetConfig+0x40>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a3b      	ldr	r2, [pc, #236]	; (80062d0 <TIM_Base_SetConfig+0x120>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d003      	beq.n	80061f0 <TIM_Base_SetConfig+0x40>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a3a      	ldr	r2, [pc, #232]	; (80062d4 <TIM_Base_SetConfig+0x124>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d108      	bne.n	8006202 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	4313      	orrs	r3, r2
 8006200:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a2f      	ldr	r2, [pc, #188]	; (80062c4 <TIM_Base_SetConfig+0x114>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d02b      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006210:	d027      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a2c      	ldr	r2, [pc, #176]	; (80062c8 <TIM_Base_SetConfig+0x118>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d023      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a2b      	ldr	r2, [pc, #172]	; (80062cc <TIM_Base_SetConfig+0x11c>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d01f      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a2a      	ldr	r2, [pc, #168]	; (80062d0 <TIM_Base_SetConfig+0x120>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d01b      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a29      	ldr	r2, [pc, #164]	; (80062d4 <TIM_Base_SetConfig+0x124>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d017      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a28      	ldr	r2, [pc, #160]	; (80062d8 <TIM_Base_SetConfig+0x128>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d013      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a27      	ldr	r2, [pc, #156]	; (80062dc <TIM_Base_SetConfig+0x12c>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d00f      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a26      	ldr	r2, [pc, #152]	; (80062e0 <TIM_Base_SetConfig+0x130>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d00b      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a25      	ldr	r2, [pc, #148]	; (80062e4 <TIM_Base_SetConfig+0x134>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d007      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a24      	ldr	r2, [pc, #144]	; (80062e8 <TIM_Base_SetConfig+0x138>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d003      	beq.n	8006262 <TIM_Base_SetConfig+0xb2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a23      	ldr	r2, [pc, #140]	; (80062ec <TIM_Base_SetConfig+0x13c>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d108      	bne.n	8006274 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006268:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	4313      	orrs	r3, r2
 8006272:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	4313      	orrs	r3, r2
 8006280:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	689a      	ldr	r2, [r3, #8]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a0a      	ldr	r2, [pc, #40]	; (80062c4 <TIM_Base_SetConfig+0x114>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d003      	beq.n	80062a8 <TIM_Base_SetConfig+0xf8>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a0c      	ldr	r2, [pc, #48]	; (80062d4 <TIM_Base_SetConfig+0x124>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d103      	bne.n	80062b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	691a      	ldr	r2, [r3, #16]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	615a      	str	r2, [r3, #20]
}
 80062b6:	bf00      	nop
 80062b8:	3714      	adds	r7, #20
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	40010000 	.word	0x40010000
 80062c8:	40000400 	.word	0x40000400
 80062cc:	40000800 	.word	0x40000800
 80062d0:	40000c00 	.word	0x40000c00
 80062d4:	40010400 	.word	0x40010400
 80062d8:	40014000 	.word	0x40014000
 80062dc:	40014400 	.word	0x40014400
 80062e0:	40014800 	.word	0x40014800
 80062e4:	40001800 	.word	0x40001800
 80062e8:	40001c00 	.word	0x40001c00
 80062ec:	40002000 	.word	0x40002000

080062f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800630c:	bf00      	nop
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d101      	bne.n	800632a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e03f      	b.n	80063aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006330:	b2db      	uxtb	r3, r3
 8006332:	2b00      	cmp	r3, #0
 8006334:	d106      	bne.n	8006344 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f7fd fdb2 	bl	8003ea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2224      	movs	r2, #36	; 0x24
 8006348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68da      	ldr	r2, [r3, #12]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800635a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 ffff 	bl	8007360 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	691a      	ldr	r2, [r3, #16]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006370:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	695a      	ldr	r2, [r3, #20]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006380:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68da      	ldr	r2, [r3, #12]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006390:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2220      	movs	r2, #32
 800639c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2220      	movs	r2, #32
 80063a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3708      	adds	r7, #8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b08a      	sub	sp, #40	; 0x28
 80063b6:	af02      	add	r7, sp, #8
 80063b8:	60f8      	str	r0, [r7, #12]
 80063ba:	60b9      	str	r1, [r7, #8]
 80063bc:	603b      	str	r3, [r7, #0]
 80063be:	4613      	mov	r3, r2
 80063c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80063c2:	2300      	movs	r3, #0
 80063c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b20      	cmp	r3, #32
 80063d0:	d17c      	bne.n	80064cc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d002      	beq.n	80063de <HAL_UART_Transmit+0x2c>
 80063d8:	88fb      	ldrh	r3, [r7, #6]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e075      	b.n	80064ce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d101      	bne.n	80063f0 <HAL_UART_Transmit+0x3e>
 80063ec:	2302      	movs	r3, #2
 80063ee:	e06e      	b.n	80064ce <HAL_UART_Transmit+0x11c>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2221      	movs	r2, #33	; 0x21
 8006402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006406:	f7fd fe8f 	bl	8004128 <HAL_GetTick>
 800640a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	88fa      	ldrh	r2, [r7, #6]
 8006410:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	88fa      	ldrh	r2, [r7, #6]
 8006416:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006420:	d108      	bne.n	8006434 <HAL_UART_Transmit+0x82>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d104      	bne.n	8006434 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800642a:	2300      	movs	r3, #0
 800642c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	61bb      	str	r3, [r7, #24]
 8006432:	e003      	b.n	800643c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006438:	2300      	movs	r3, #0
 800643a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006444:	e02a      	b.n	800649c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	9300      	str	r3, [sp, #0]
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	2200      	movs	r2, #0
 800644e:	2180      	movs	r1, #128	; 0x80
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f000 fc79 	bl	8006d48 <UART_WaitOnFlagUntilTimeout>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d001      	beq.n	8006460 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800645c:	2303      	movs	r3, #3
 800645e:	e036      	b.n	80064ce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10b      	bne.n	800647e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	881b      	ldrh	r3, [r3, #0]
 800646a:	461a      	mov	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006474:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	3302      	adds	r3, #2
 800647a:	61bb      	str	r3, [r7, #24]
 800647c:	e007      	b.n	800648e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	781a      	ldrb	r2, [r3, #0]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	3301      	adds	r3, #1
 800648c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006492:	b29b      	uxth	r3, r3
 8006494:	3b01      	subs	r3, #1
 8006496:	b29a      	uxth	r2, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1cf      	bne.n	8006446 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	2200      	movs	r2, #0
 80064ae:	2140      	movs	r1, #64	; 0x40
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f000 fc49 	bl	8006d48 <UART_WaitOnFlagUntilTimeout>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d001      	beq.n	80064c0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	e006      	b.n	80064ce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2220      	movs	r2, #32
 80064c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80064c8:	2300      	movs	r3, #0
 80064ca:	e000      	b.n	80064ce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80064cc:	2302      	movs	r3, #2
  }
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3720      	adds	r7, #32
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b084      	sub	sp, #16
 80064da:	af00      	add	r7, sp, #0
 80064dc:	60f8      	str	r0, [r7, #12]
 80064de:	60b9      	str	r1, [r7, #8]
 80064e0:	4613      	mov	r3, r2
 80064e2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b20      	cmp	r3, #32
 80064ee:	d11d      	bne.n	800652c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d002      	beq.n	80064fc <HAL_UART_Receive_IT+0x26>
 80064f6:	88fb      	ldrh	r3, [r7, #6]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d101      	bne.n	8006500 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e016      	b.n	800652e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006506:	2b01      	cmp	r3, #1
 8006508:	d101      	bne.n	800650e <HAL_UART_Receive_IT+0x38>
 800650a:	2302      	movs	r3, #2
 800650c:	e00f      	b.n	800652e <HAL_UART_Receive_IT+0x58>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800651c:	88fb      	ldrh	r3, [r7, #6]
 800651e:	461a      	mov	r2, r3
 8006520:	68b9      	ldr	r1, [r7, #8]
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f000 fc7e 	bl	8006e24 <UART_Start_Receive_IT>
 8006528:	4603      	mov	r3, r0
 800652a:	e000      	b.n	800652e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800652c:	2302      	movs	r3, #2
  }
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b08c      	sub	sp, #48	; 0x30
 800653a:	af00      	add	r7, sp, #0
 800653c:	60f8      	str	r0, [r7, #12]
 800653e:	60b9      	str	r1, [r7, #8]
 8006540:	4613      	mov	r3, r2
 8006542:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800654a:	b2db      	uxtb	r3, r3
 800654c:	2b20      	cmp	r3, #32
 800654e:	d152      	bne.n	80065f6 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d002      	beq.n	800655c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8006556:	88fb      	ldrh	r3, [r7, #6]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d101      	bne.n	8006560 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e04b      	b.n	80065f8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006566:	2b01      	cmp	r3, #1
 8006568:	d101      	bne.n	800656e <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800656a:	2302      	movs	r3, #2
 800656c:	e044      	b.n	80065f8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2201      	movs	r2, #1
 800657a:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800657c:	88fb      	ldrh	r3, [r7, #6]
 800657e:	461a      	mov	r2, r3
 8006580:	68b9      	ldr	r1, [r7, #8]
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f000 fc8c 	bl	8006ea0 <UART_Start_Receive_DMA>
 8006588:	4603      	mov	r3, r0
 800658a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800658e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006592:	2b00      	cmp	r3, #0
 8006594:	d12c      	bne.n	80065f0 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659a:	2b01      	cmp	r3, #1
 800659c:	d125      	bne.n	80065ea <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800659e:	2300      	movs	r3, #0
 80065a0:	613b      	str	r3, [r7, #16]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	613b      	str	r3, [r7, #16]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	613b      	str	r3, [r7, #16]
 80065b2:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	330c      	adds	r3, #12
 80065ba:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	e853 3f00 	ldrex	r3, [r3]
 80065c2:	617b      	str	r3, [r7, #20]
   return(result);
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	f043 0310 	orr.w	r3, r3, #16
 80065ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	330c      	adds	r3, #12
 80065d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065d4:	627a      	str	r2, [r7, #36]	; 0x24
 80065d6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d8:	6a39      	ldr	r1, [r7, #32]
 80065da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065dc:	e841 2300 	strex	r3, r2, [r1]
 80065e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1e5      	bne.n	80065b4 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80065e8:	e002      	b.n	80065f0 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80065f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065f4:	e000      	b.n	80065f8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80065f6:	2302      	movs	r3, #2
  }
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3730      	adds	r7, #48	; 0x30
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b0ba      	sub	sp, #232	; 0xe8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006626:	2300      	movs	r3, #0
 8006628:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800662c:	2300      	movs	r3, #0
 800662e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006636:	f003 030f 	and.w	r3, r3, #15
 800663a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800663e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10f      	bne.n	8006666 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800664a:	f003 0320 	and.w	r3, r3, #32
 800664e:	2b00      	cmp	r3, #0
 8006650:	d009      	beq.n	8006666 <HAL_UART_IRQHandler+0x66>
 8006652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006656:	f003 0320 	and.w	r3, r3, #32
 800665a:	2b00      	cmp	r3, #0
 800665c:	d003      	beq.n	8006666 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 fdc3 	bl	80071ea <UART_Receive_IT>
      return;
 8006664:	e256      	b.n	8006b14 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006666:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800666a:	2b00      	cmp	r3, #0
 800666c:	f000 80de 	beq.w	800682c <HAL_UART_IRQHandler+0x22c>
 8006670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006674:	f003 0301 	and.w	r3, r3, #1
 8006678:	2b00      	cmp	r3, #0
 800667a:	d106      	bne.n	800668a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800667c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006680:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006684:	2b00      	cmp	r3, #0
 8006686:	f000 80d1 	beq.w	800682c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800668a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00b      	beq.n	80066ae <HAL_UART_IRQHandler+0xae>
 8006696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800669a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d005      	beq.n	80066ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a6:	f043 0201 	orr.w	r2, r3, #1
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066b2:	f003 0304 	and.w	r3, r3, #4
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00b      	beq.n	80066d2 <HAL_UART_IRQHandler+0xd2>
 80066ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d005      	beq.n	80066d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ca:	f043 0202 	orr.w	r2, r3, #2
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066d6:	f003 0302 	and.w	r3, r3, #2
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00b      	beq.n	80066f6 <HAL_UART_IRQHandler+0xf6>
 80066de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d005      	beq.n	80066f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ee:	f043 0204 	orr.w	r2, r3, #4
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80066f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066fa:	f003 0308 	and.w	r3, r3, #8
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d011      	beq.n	8006726 <HAL_UART_IRQHandler+0x126>
 8006702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006706:	f003 0320 	and.w	r3, r3, #32
 800670a:	2b00      	cmp	r3, #0
 800670c:	d105      	bne.n	800671a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800670e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006712:	f003 0301 	and.w	r3, r3, #1
 8006716:	2b00      	cmp	r3, #0
 8006718:	d005      	beq.n	8006726 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671e:	f043 0208 	orr.w	r2, r3, #8
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672a:	2b00      	cmp	r3, #0
 800672c:	f000 81ed 	beq.w	8006b0a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006734:	f003 0320 	and.w	r3, r3, #32
 8006738:	2b00      	cmp	r3, #0
 800673a:	d008      	beq.n	800674e <HAL_UART_IRQHandler+0x14e>
 800673c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006740:	f003 0320 	and.w	r3, r3, #32
 8006744:	2b00      	cmp	r3, #0
 8006746:	d002      	beq.n	800674e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 fd4e 	bl	80071ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	695b      	ldr	r3, [r3, #20]
 8006754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006758:	2b40      	cmp	r3, #64	; 0x40
 800675a:	bf0c      	ite	eq
 800675c:	2301      	moveq	r3, #1
 800675e:	2300      	movne	r3, #0
 8006760:	b2db      	uxtb	r3, r3
 8006762:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676a:	f003 0308 	and.w	r3, r3, #8
 800676e:	2b00      	cmp	r3, #0
 8006770:	d103      	bne.n	800677a <HAL_UART_IRQHandler+0x17a>
 8006772:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006776:	2b00      	cmp	r3, #0
 8006778:	d04f      	beq.n	800681a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fc56 	bl	800702c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678a:	2b40      	cmp	r3, #64	; 0x40
 800678c:	d141      	bne.n	8006812 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	3314      	adds	r3, #20
 8006794:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006798:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800679c:	e853 3f00 	ldrex	r3, [r3]
 80067a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80067a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	3314      	adds	r3, #20
 80067b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80067ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80067be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80067c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80067ca:	e841 2300 	strex	r3, r2, [r1]
 80067ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80067d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1d9      	bne.n	800678e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d013      	beq.n	800680a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e6:	4a7d      	ldr	r2, [pc, #500]	; (80069dc <HAL_UART_IRQHandler+0x3dc>)
 80067e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fd fefe 	bl	80045f0 <HAL_DMA_Abort_IT>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d016      	beq.n	8006828 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006804:	4610      	mov	r0, r2
 8006806:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006808:	e00e      	b.n	8006828 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f99a 	bl	8006b44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006810:	e00a      	b.n	8006828 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 f996 	bl	8006b44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006818:	e006      	b.n	8006828 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 f992 	bl	8006b44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006826:	e170      	b.n	8006b0a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006828:	bf00      	nop
    return;
 800682a:	e16e      	b.n	8006b0a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006830:	2b01      	cmp	r3, #1
 8006832:	f040 814a 	bne.w	8006aca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800683a:	f003 0310 	and.w	r3, r3, #16
 800683e:	2b00      	cmp	r3, #0
 8006840:	f000 8143 	beq.w	8006aca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006848:	f003 0310 	and.w	r3, r3, #16
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 813c 	beq.w	8006aca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006852:	2300      	movs	r3, #0
 8006854:	60bb      	str	r3, [r7, #8]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	60bb      	str	r3, [r7, #8]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	60bb      	str	r3, [r7, #8]
 8006866:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006872:	2b40      	cmp	r3, #64	; 0x40
 8006874:	f040 80b4 	bne.w	80069e0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006884:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006888:	2b00      	cmp	r3, #0
 800688a:	f000 8140 	beq.w	8006b0e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006892:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006896:	429a      	cmp	r2, r3
 8006898:	f080 8139 	bcs.w	8006b0e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a8:	69db      	ldr	r3, [r3, #28]
 80068aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068ae:	f000 8088 	beq.w	80069c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	330c      	adds	r3, #12
 80068b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80068c0:	e853 3f00 	ldrex	r3, [r3]
 80068c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80068c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80068cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	330c      	adds	r3, #12
 80068da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80068de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80068e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80068ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80068ee:	e841 2300 	strex	r3, r2, [r1]
 80068f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80068f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1d9      	bne.n	80068b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	3314      	adds	r3, #20
 8006904:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006906:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006908:	e853 3f00 	ldrex	r3, [r3]
 800690c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800690e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006910:	f023 0301 	bic.w	r3, r3, #1
 8006914:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	3314      	adds	r3, #20
 800691e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006922:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006926:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006928:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800692a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800692e:	e841 2300 	strex	r3, r2, [r1]
 8006932:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006934:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1e1      	bne.n	80068fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	3314      	adds	r3, #20
 8006940:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006942:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006944:	e853 3f00 	ldrex	r3, [r3]
 8006948:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800694a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800694c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006950:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	3314      	adds	r3, #20
 800695a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800695e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006960:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006962:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006964:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006966:	e841 2300 	strex	r3, r2, [r1]
 800696a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800696c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1e3      	bne.n	800693a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2220      	movs	r2, #32
 8006976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	330c      	adds	r3, #12
 8006986:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800698a:	e853 3f00 	ldrex	r3, [r3]
 800698e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006992:	f023 0310 	bic.w	r3, r3, #16
 8006996:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	330c      	adds	r3, #12
 80069a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80069a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80069a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069ac:	e841 2300 	strex	r3, r2, [r1]
 80069b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80069b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1e3      	bne.n	8006980 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069bc:	4618      	mov	r0, r3
 80069be:	f7fd fda7 	bl	8004510 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	4619      	mov	r1, r3
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7fd f94c 	bl	8003c70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80069d8:	e099      	b.n	8006b0e <HAL_UART_IRQHandler+0x50e>
 80069da:	bf00      	nop
 80069dc:	080070f3 	.word	0x080070f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f000 808b 	beq.w	8006b12 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80069fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 8086 	beq.w	8006b12 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	330c      	adds	r3, #12
 8006a0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a10:	e853 3f00 	ldrex	r3, [r3]
 8006a14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	330c      	adds	r3, #12
 8006a26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006a2a:	647a      	str	r2, [r7, #68]	; 0x44
 8006a2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a32:	e841 2300 	strex	r3, r2, [r1]
 8006a36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1e3      	bne.n	8006a06 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	3314      	adds	r3, #20
 8006a44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a48:	e853 3f00 	ldrex	r3, [r3]
 8006a4c:	623b      	str	r3, [r7, #32]
   return(result);
 8006a4e:	6a3b      	ldr	r3, [r7, #32]
 8006a50:	f023 0301 	bic.w	r3, r3, #1
 8006a54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	3314      	adds	r3, #20
 8006a5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a62:	633a      	str	r2, [r7, #48]	; 0x30
 8006a64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a6a:	e841 2300 	strex	r3, r2, [r1]
 8006a6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1e3      	bne.n	8006a3e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2220      	movs	r2, #32
 8006a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	330c      	adds	r3, #12
 8006a8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	e853 3f00 	ldrex	r3, [r3]
 8006a92:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f023 0310 	bic.w	r3, r3, #16
 8006a9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	330c      	adds	r3, #12
 8006aa4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006aa8:	61fa      	str	r2, [r7, #28]
 8006aaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aac:	69b9      	ldr	r1, [r7, #24]
 8006aae:	69fa      	ldr	r2, [r7, #28]
 8006ab0:	e841 2300 	strex	r3, r2, [r1]
 8006ab4:	617b      	str	r3, [r7, #20]
   return(result);
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1e3      	bne.n	8006a84 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006abc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7fd f8d4 	bl	8003c70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ac8:	e023      	b.n	8006b12 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d009      	beq.n	8006aea <HAL_UART_IRQHandler+0x4ea>
 8006ad6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d003      	beq.n	8006aea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 fb19 	bl	800711a <UART_Transmit_IT>
    return;
 8006ae8:	e014      	b.n	8006b14 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00e      	beq.n	8006b14 <HAL_UART_IRQHandler+0x514>
 8006af6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d008      	beq.n	8006b14 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 fb59 	bl	80071ba <UART_EndTransmit_IT>
    return;
 8006b08:	e004      	b.n	8006b14 <HAL_UART_IRQHandler+0x514>
    return;
 8006b0a:	bf00      	nop
 8006b0c:	e002      	b.n	8006b14 <HAL_UART_IRQHandler+0x514>
      return;
 8006b0e:	bf00      	nop
 8006b10:	e000      	b.n	8006b14 <HAL_UART_IRQHandler+0x514>
      return;
 8006b12:	bf00      	nop
  }
}
 8006b14:	37e8      	adds	r7, #232	; 0xe8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop

08006b1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b09c      	sub	sp, #112	; 0x70
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b64:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d172      	bne.n	8006c5a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006b74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b76:	2200      	movs	r2, #0
 8006b78:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	330c      	adds	r3, #12
 8006b80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b84:	e853 3f00 	ldrex	r3, [r3]
 8006b88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b90:	66bb      	str	r3, [r7, #104]	; 0x68
 8006b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	330c      	adds	r3, #12
 8006b98:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006b9a:	65ba      	str	r2, [r7, #88]	; 0x58
 8006b9c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ba0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ba2:	e841 2300 	strex	r3, r2, [r1]
 8006ba6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ba8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d1e5      	bne.n	8006b7a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	3314      	adds	r3, #20
 8006bb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb8:	e853 3f00 	ldrex	r3, [r3]
 8006bbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc0:	f023 0301 	bic.w	r3, r3, #1
 8006bc4:	667b      	str	r3, [r7, #100]	; 0x64
 8006bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	3314      	adds	r3, #20
 8006bcc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006bce:	647a      	str	r2, [r7, #68]	; 0x44
 8006bd0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006bd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bd6:	e841 2300 	strex	r3, r2, [r1]
 8006bda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1e5      	bne.n	8006bae <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	3314      	adds	r3, #20
 8006be8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	e853 3f00 	ldrex	r3, [r3]
 8006bf0:	623b      	str	r3, [r7, #32]
   return(result);
 8006bf2:	6a3b      	ldr	r3, [r7, #32]
 8006bf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bf8:	663b      	str	r3, [r7, #96]	; 0x60
 8006bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	3314      	adds	r3, #20
 8006c00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c02:	633a      	str	r2, [r7, #48]	; 0x30
 8006c04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c0a:	e841 2300 	strex	r3, r2, [r1]
 8006c0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1e5      	bne.n	8006be2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c18:	2220      	movs	r2, #32
 8006c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d119      	bne.n	8006c5a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	330c      	adds	r3, #12
 8006c2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	e853 3f00 	ldrex	r3, [r3]
 8006c34:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f023 0310 	bic.w	r3, r3, #16
 8006c3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	330c      	adds	r3, #12
 8006c44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c46:	61fa      	str	r2, [r7, #28]
 8006c48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4a:	69b9      	ldr	r1, [r7, #24]
 8006c4c:	69fa      	ldr	r2, [r7, #28]
 8006c4e:	e841 2300 	strex	r3, r2, [r1]
 8006c52:	617b      	str	r3, [r7, #20]
   return(result);
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1e5      	bne.n	8006c26 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d106      	bne.n	8006c70 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c66:	4619      	mov	r1, r3
 8006c68:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006c6a:	f7fd f801 	bl	8003c70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c6e:	e002      	b.n	8006c76 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006c70:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006c72:	f7fd f867 	bl	8003d44 <HAL_UART_RxCpltCallback>
}
 8006c76:	bf00      	nop
 8006c78:	3770      	adds	r7, #112	; 0x70
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b084      	sub	sp, #16
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d108      	bne.n	8006ca6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c98:	085b      	lsrs	r3, r3, #1
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f7fc ffe6 	bl	8003c70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ca4:	e002      	b.n	8006cac <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	f7ff ff42 	bl	8006b30 <HAL_UART_RxHalfCpltCallback>
}
 8006cac:	bf00      	nop
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	695b      	ldr	r3, [r3, #20]
 8006ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cd0:	2b80      	cmp	r3, #128	; 0x80
 8006cd2:	bf0c      	ite	eq
 8006cd4:	2301      	moveq	r3, #1
 8006cd6:	2300      	movne	r3, #0
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	2b21      	cmp	r3, #33	; 0x21
 8006ce6:	d108      	bne.n	8006cfa <UART_DMAError+0x46>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d005      	beq.n	8006cfa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006cf4:	68b8      	ldr	r0, [r7, #8]
 8006cf6:	f000 f971 	bl	8006fdc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	695b      	ldr	r3, [r3, #20]
 8006d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d04:	2b40      	cmp	r3, #64	; 0x40
 8006d06:	bf0c      	ite	eq
 8006d08:	2301      	moveq	r3, #1
 8006d0a:	2300      	movne	r3, #0
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	2b22      	cmp	r3, #34	; 0x22
 8006d1a:	d108      	bne.n	8006d2e <UART_DMAError+0x7a>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d005      	beq.n	8006d2e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	2200      	movs	r2, #0
 8006d26:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006d28:	68b8      	ldr	r0, [r7, #8]
 8006d2a:	f000 f97f 	bl	800702c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d32:	f043 0210 	orr.w	r2, r3, #16
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d3a:	68b8      	ldr	r0, [r7, #8]
 8006d3c:	f7ff ff02 	bl	8006b44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d40:	bf00      	nop
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b090      	sub	sp, #64	; 0x40
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	603b      	str	r3, [r7, #0]
 8006d54:	4613      	mov	r3, r2
 8006d56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d58:	e050      	b.n	8006dfc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d60:	d04c      	beq.n	8006dfc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d007      	beq.n	8006d78 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d68:	f7fd f9de 	bl	8004128 <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d241      	bcs.n	8006dfc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	330c      	adds	r3, #12
 8006d7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d82:	e853 3f00 	ldrex	r3, [r3]
 8006d86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	330c      	adds	r3, #12
 8006d96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d98:	637a      	str	r2, [r7, #52]	; 0x34
 8006d9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006da0:	e841 2300 	strex	r3, r2, [r1]
 8006da4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1e5      	bne.n	8006d78 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	3314      	adds	r3, #20
 8006db2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	e853 3f00 	ldrex	r3, [r3]
 8006dba:	613b      	str	r3, [r7, #16]
   return(result);
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	f023 0301 	bic.w	r3, r3, #1
 8006dc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	3314      	adds	r3, #20
 8006dca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dcc:	623a      	str	r2, [r7, #32]
 8006dce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd0:	69f9      	ldr	r1, [r7, #28]
 8006dd2:	6a3a      	ldr	r2, [r7, #32]
 8006dd4:	e841 2300 	strex	r3, r2, [r1]
 8006dd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d1e5      	bne.n	8006dac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2220      	movs	r2, #32
 8006de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2220      	movs	r2, #32
 8006dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e00f      	b.n	8006e1c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	4013      	ands	r3, r2
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	bf0c      	ite	eq
 8006e0c:	2301      	moveq	r3, #1
 8006e0e:	2300      	movne	r3, #0
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	461a      	mov	r2, r3
 8006e14:	79fb      	ldrb	r3, [r7, #7]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d09f      	beq.n	8006d5a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3740      	adds	r7, #64	; 0x40
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	4613      	mov	r3, r2
 8006e30:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	68ba      	ldr	r2, [r7, #8]
 8006e36:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	88fa      	ldrh	r2, [r7, #6]
 8006e3c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	88fa      	ldrh	r2, [r7, #6]
 8006e42:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2222      	movs	r2, #34	; 0x22
 8006e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d007      	beq.n	8006e72 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68da      	ldr	r2, [r3, #12]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e70:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	695a      	ldr	r2, [r3, #20]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f042 0201 	orr.w	r2, r2, #1
 8006e80:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68da      	ldr	r2, [r3, #12]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f042 0220 	orr.w	r2, r2, #32
 8006e90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3714      	adds	r7, #20
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b098      	sub	sp, #96	; 0x60
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	88fa      	ldrh	r2, [r7, #6]
 8006eb8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2222      	movs	r2, #34	; 0x22
 8006ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ecc:	4a40      	ldr	r2, [pc, #256]	; (8006fd0 <UART_Start_Receive_DMA+0x130>)
 8006ece:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed4:	4a3f      	ldr	r2, [pc, #252]	; (8006fd4 <UART_Start_Receive_DMA+0x134>)
 8006ed6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006edc:	4a3e      	ldr	r2, [pc, #248]	; (8006fd8 <UART_Start_Receive_DMA+0x138>)
 8006ede:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006ee8:	f107 0308 	add.w	r3, r7, #8
 8006eec:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	3304      	adds	r3, #4
 8006ef8:	4619      	mov	r1, r3
 8006efa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	88fb      	ldrh	r3, [r7, #6]
 8006f00:	f7fd faae 	bl	8004460 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006f04:	2300      	movs	r3, #0
 8006f06:	613b      	str	r3, [r7, #16]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	613b      	str	r3, [r7, #16]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	613b      	str	r3, [r7, #16]
 8006f18:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	691b      	ldr	r3, [r3, #16]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d019      	beq.n	8006f5e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	330c      	adds	r3, #12
 8006f30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f34:	e853 3f00 	ldrex	r3, [r3]
 8006f38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f40:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	330c      	adds	r3, #12
 8006f48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f4a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006f4c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006f50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f52:	e841 2300 	strex	r3, r2, [r1]
 8006f56:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1e5      	bne.n	8006f2a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	3314      	adds	r3, #20
 8006f64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f68:	e853 3f00 	ldrex	r3, [r3]
 8006f6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f70:	f043 0301 	orr.w	r3, r3, #1
 8006f74:	657b      	str	r3, [r7, #84]	; 0x54
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	3314      	adds	r3, #20
 8006f7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f7e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006f80:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f82:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006f84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f86:	e841 2300 	strex	r3, r2, [r1]
 8006f8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1e5      	bne.n	8006f5e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	3314      	adds	r3, #20
 8006f98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	e853 3f00 	ldrex	r3, [r3]
 8006fa0:	617b      	str	r3, [r7, #20]
   return(result);
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fa8:	653b      	str	r3, [r7, #80]	; 0x50
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	3314      	adds	r3, #20
 8006fb0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006fb2:	627a      	str	r2, [r7, #36]	; 0x24
 8006fb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb6:	6a39      	ldr	r1, [r7, #32]
 8006fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fba:	e841 2300 	strex	r3, r2, [r1]
 8006fbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d1e5      	bne.n	8006f92 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3760      	adds	r7, #96	; 0x60
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	08006b59 	.word	0x08006b59
 8006fd4:	08006c7f 	.word	0x08006c7f
 8006fd8:	08006cb5 	.word	0x08006cb5

08006fdc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b089      	sub	sp, #36	; 0x24
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	330c      	adds	r3, #12
 8006fea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	e853 3f00 	ldrex	r3, [r3]
 8006ff2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006ffa:	61fb      	str	r3, [r7, #28]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	330c      	adds	r3, #12
 8007002:	69fa      	ldr	r2, [r7, #28]
 8007004:	61ba      	str	r2, [r7, #24]
 8007006:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007008:	6979      	ldr	r1, [r7, #20]
 800700a:	69ba      	ldr	r2, [r7, #24]
 800700c:	e841 2300 	strex	r3, r2, [r1]
 8007010:	613b      	str	r3, [r7, #16]
   return(result);
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1e5      	bne.n	8006fe4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2220      	movs	r2, #32
 800701c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007020:	bf00      	nop
 8007022:	3724      	adds	r7, #36	; 0x24
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800702c:	b480      	push	{r7}
 800702e:	b095      	sub	sp, #84	; 0x54
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	330c      	adds	r3, #12
 800703a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800703e:	e853 3f00 	ldrex	r3, [r3]
 8007042:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007046:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800704a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	330c      	adds	r3, #12
 8007052:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007054:	643a      	str	r2, [r7, #64]	; 0x40
 8007056:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007058:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800705a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800705c:	e841 2300 	strex	r3, r2, [r1]
 8007060:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1e5      	bne.n	8007034 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	3314      	adds	r3, #20
 800706e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007070:	6a3b      	ldr	r3, [r7, #32]
 8007072:	e853 3f00 	ldrex	r3, [r3]
 8007076:	61fb      	str	r3, [r7, #28]
   return(result);
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	f023 0301 	bic.w	r3, r3, #1
 800707e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	3314      	adds	r3, #20
 8007086:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007088:	62fa      	str	r2, [r7, #44]	; 0x2c
 800708a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800708e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007090:	e841 2300 	strex	r3, r2, [r1]
 8007094:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1e5      	bne.n	8007068 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d119      	bne.n	80070d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	330c      	adds	r3, #12
 80070aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	e853 3f00 	ldrex	r3, [r3]
 80070b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	f023 0310 	bic.w	r3, r3, #16
 80070ba:	647b      	str	r3, [r7, #68]	; 0x44
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	330c      	adds	r3, #12
 80070c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070c4:	61ba      	str	r2, [r7, #24]
 80070c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c8:	6979      	ldr	r1, [r7, #20]
 80070ca:	69ba      	ldr	r2, [r7, #24]
 80070cc:	e841 2300 	strex	r3, r2, [r1]
 80070d0:	613b      	str	r3, [r7, #16]
   return(result);
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1e5      	bne.n	80070a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2220      	movs	r2, #32
 80070dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80070e6:	bf00      	nop
 80070e8:	3754      	adds	r7, #84	; 0x54
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr

080070f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b084      	sub	sp, #16
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2200      	movs	r2, #0
 8007104:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f7ff fd19 	bl	8006b44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007112:	bf00      	nop
 8007114:	3710      	adds	r7, #16
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800711a:	b480      	push	{r7}
 800711c:	b085      	sub	sp, #20
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007128:	b2db      	uxtb	r3, r3
 800712a:	2b21      	cmp	r3, #33	; 0x21
 800712c:	d13e      	bne.n	80071ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007136:	d114      	bne.n	8007162 <UART_Transmit_IT+0x48>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d110      	bne.n	8007162 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a1b      	ldr	r3, [r3, #32]
 8007144:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	881b      	ldrh	r3, [r3, #0]
 800714a:	461a      	mov	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007154:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	1c9a      	adds	r2, r3, #2
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	621a      	str	r2, [r3, #32]
 8007160:	e008      	b.n	8007174 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a1b      	ldr	r3, [r3, #32]
 8007166:	1c59      	adds	r1, r3, #1
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	6211      	str	r1, [r2, #32]
 800716c:	781a      	ldrb	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007178:	b29b      	uxth	r3, r3
 800717a:	3b01      	subs	r3, #1
 800717c:	b29b      	uxth	r3, r3
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	4619      	mov	r1, r3
 8007182:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007184:	2b00      	cmp	r3, #0
 8007186:	d10f      	bne.n	80071a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68da      	ldr	r2, [r3, #12]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007196:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68da      	ldr	r2, [r3, #12]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	e000      	b.n	80071ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80071ac:	2302      	movs	r3, #2
  }
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3714      	adds	r7, #20
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr

080071ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b082      	sub	sp, #8
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68da      	ldr	r2, [r3, #12]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2220      	movs	r2, #32
 80071d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f7ff fc9e 	bl	8006b1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3708      	adds	r7, #8
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b08c      	sub	sp, #48	; 0x30
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	2b22      	cmp	r3, #34	; 0x22
 80071fc:	f040 80ab 	bne.w	8007356 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007208:	d117      	bne.n	800723a <UART_Receive_IT+0x50>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d113      	bne.n	800723a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007212:	2300      	movs	r3, #0
 8007214:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800721a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	b29b      	uxth	r3, r3
 8007224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007228:	b29a      	uxth	r2, r3
 800722a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007232:	1c9a      	adds	r2, r3, #2
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	629a      	str	r2, [r3, #40]	; 0x28
 8007238:	e026      	b.n	8007288 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007240:	2300      	movs	r3, #0
 8007242:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800724c:	d007      	beq.n	800725e <UART_Receive_IT+0x74>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d10a      	bne.n	800726c <UART_Receive_IT+0x82>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d106      	bne.n	800726c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	b2da      	uxtb	r2, r3
 8007266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007268:	701a      	strb	r2, [r3, #0]
 800726a:	e008      	b.n	800727e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	b2db      	uxtb	r3, r3
 8007274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007278:	b2da      	uxtb	r2, r3
 800727a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007282:	1c5a      	adds	r2, r3, #1
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800728c:	b29b      	uxth	r3, r3
 800728e:	3b01      	subs	r3, #1
 8007290:	b29b      	uxth	r3, r3
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	4619      	mov	r1, r3
 8007296:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007298:	2b00      	cmp	r3, #0
 800729a:	d15a      	bne.n	8007352 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68da      	ldr	r2, [r3, #12]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f022 0220 	bic.w	r2, r2, #32
 80072aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68da      	ldr	r2, [r3, #12]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	695a      	ldr	r2, [r3, #20]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f022 0201 	bic.w	r2, r2, #1
 80072ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2220      	movs	r2, #32
 80072d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d135      	bne.n	8007348 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	330c      	adds	r3, #12
 80072e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	e853 3f00 	ldrex	r3, [r3]
 80072f0:	613b      	str	r3, [r7, #16]
   return(result);
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	f023 0310 	bic.w	r3, r3, #16
 80072f8:	627b      	str	r3, [r7, #36]	; 0x24
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	330c      	adds	r3, #12
 8007300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007302:	623a      	str	r2, [r7, #32]
 8007304:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007306:	69f9      	ldr	r1, [r7, #28]
 8007308:	6a3a      	ldr	r2, [r7, #32]
 800730a:	e841 2300 	strex	r3, r2, [r1]
 800730e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1e5      	bne.n	80072e2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 0310 	and.w	r3, r3, #16
 8007320:	2b10      	cmp	r3, #16
 8007322:	d10a      	bne.n	800733a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007324:	2300      	movs	r3, #0
 8007326:	60fb      	str	r3, [r7, #12]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	60fb      	str	r3, [r7, #12]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	60fb      	str	r3, [r7, #12]
 8007338:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800733e:	4619      	mov	r1, r3
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f7fc fc95 	bl	8003c70 <HAL_UARTEx_RxEventCallback>
 8007346:	e002      	b.n	800734e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f7fc fcfb 	bl	8003d44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800734e:	2300      	movs	r3, #0
 8007350:	e002      	b.n	8007358 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007352:	2300      	movs	r3, #0
 8007354:	e000      	b.n	8007358 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007356:	2302      	movs	r3, #2
  }
}
 8007358:	4618      	mov	r0, r3
 800735a:	3730      	adds	r7, #48	; 0x30
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007364:	b0c0      	sub	sp, #256	; 0x100
 8007366:	af00      	add	r7, sp, #0
 8007368:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800736c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800737c:	68d9      	ldr	r1, [r3, #12]
 800737e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	ea40 0301 	orr.w	r3, r0, r1
 8007388:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800738a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800738e:	689a      	ldr	r2, [r3, #8]
 8007390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	431a      	orrs	r2, r3
 8007398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800739c:	695b      	ldr	r3, [r3, #20]
 800739e:	431a      	orrs	r2, r3
 80073a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073a4:	69db      	ldr	r3, [r3, #28]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80073ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80073b8:	f021 010c 	bic.w	r1, r1, #12
 80073bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80073c6:	430b      	orrs	r3, r1
 80073c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80073ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80073d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073da:	6999      	ldr	r1, [r3, #24]
 80073dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	ea40 0301 	orr.w	r3, r0, r1
 80073e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80073e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	4b8f      	ldr	r3, [pc, #572]	; (800762c <UART_SetConfig+0x2cc>)
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d005      	beq.n	8007400 <UART_SetConfig+0xa0>
 80073f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	4b8d      	ldr	r3, [pc, #564]	; (8007630 <UART_SetConfig+0x2d0>)
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d104      	bne.n	800740a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007400:	f7fe f9dc 	bl	80057bc <HAL_RCC_GetPCLK2Freq>
 8007404:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007408:	e003      	b.n	8007412 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800740a:	f7fe f9c3 	bl	8005794 <HAL_RCC_GetPCLK1Freq>
 800740e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007416:	69db      	ldr	r3, [r3, #28]
 8007418:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800741c:	f040 810c 	bne.w	8007638 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007420:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007424:	2200      	movs	r2, #0
 8007426:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800742a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800742e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007432:	4622      	mov	r2, r4
 8007434:	462b      	mov	r3, r5
 8007436:	1891      	adds	r1, r2, r2
 8007438:	65b9      	str	r1, [r7, #88]	; 0x58
 800743a:	415b      	adcs	r3, r3
 800743c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800743e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007442:	4621      	mov	r1, r4
 8007444:	eb12 0801 	adds.w	r8, r2, r1
 8007448:	4629      	mov	r1, r5
 800744a:	eb43 0901 	adc.w	r9, r3, r1
 800744e:	f04f 0200 	mov.w	r2, #0
 8007452:	f04f 0300 	mov.w	r3, #0
 8007456:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800745a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800745e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007462:	4690      	mov	r8, r2
 8007464:	4699      	mov	r9, r3
 8007466:	4623      	mov	r3, r4
 8007468:	eb18 0303 	adds.w	r3, r8, r3
 800746c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007470:	462b      	mov	r3, r5
 8007472:	eb49 0303 	adc.w	r3, r9, r3
 8007476:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800747a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007486:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800748a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800748e:	460b      	mov	r3, r1
 8007490:	18db      	adds	r3, r3, r3
 8007492:	653b      	str	r3, [r7, #80]	; 0x50
 8007494:	4613      	mov	r3, r2
 8007496:	eb42 0303 	adc.w	r3, r2, r3
 800749a:	657b      	str	r3, [r7, #84]	; 0x54
 800749c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80074a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80074a4:	f7f9 fbb0 	bl	8000c08 <__aeabi_uldivmod>
 80074a8:	4602      	mov	r2, r0
 80074aa:	460b      	mov	r3, r1
 80074ac:	4b61      	ldr	r3, [pc, #388]	; (8007634 <UART_SetConfig+0x2d4>)
 80074ae:	fba3 2302 	umull	r2, r3, r3, r2
 80074b2:	095b      	lsrs	r3, r3, #5
 80074b4:	011c      	lsls	r4, r3, #4
 80074b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074ba:	2200      	movs	r2, #0
 80074bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80074c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80074c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80074c8:	4642      	mov	r2, r8
 80074ca:	464b      	mov	r3, r9
 80074cc:	1891      	adds	r1, r2, r2
 80074ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80074d0:	415b      	adcs	r3, r3
 80074d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80074d8:	4641      	mov	r1, r8
 80074da:	eb12 0a01 	adds.w	sl, r2, r1
 80074de:	4649      	mov	r1, r9
 80074e0:	eb43 0b01 	adc.w	fp, r3, r1
 80074e4:	f04f 0200 	mov.w	r2, #0
 80074e8:	f04f 0300 	mov.w	r3, #0
 80074ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80074f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80074f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074f8:	4692      	mov	sl, r2
 80074fa:	469b      	mov	fp, r3
 80074fc:	4643      	mov	r3, r8
 80074fe:	eb1a 0303 	adds.w	r3, sl, r3
 8007502:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007506:	464b      	mov	r3, r9
 8007508:	eb4b 0303 	adc.w	r3, fp, r3
 800750c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800751c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007520:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007524:	460b      	mov	r3, r1
 8007526:	18db      	adds	r3, r3, r3
 8007528:	643b      	str	r3, [r7, #64]	; 0x40
 800752a:	4613      	mov	r3, r2
 800752c:	eb42 0303 	adc.w	r3, r2, r3
 8007530:	647b      	str	r3, [r7, #68]	; 0x44
 8007532:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007536:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800753a:	f7f9 fb65 	bl	8000c08 <__aeabi_uldivmod>
 800753e:	4602      	mov	r2, r0
 8007540:	460b      	mov	r3, r1
 8007542:	4611      	mov	r1, r2
 8007544:	4b3b      	ldr	r3, [pc, #236]	; (8007634 <UART_SetConfig+0x2d4>)
 8007546:	fba3 2301 	umull	r2, r3, r3, r1
 800754a:	095b      	lsrs	r3, r3, #5
 800754c:	2264      	movs	r2, #100	; 0x64
 800754e:	fb02 f303 	mul.w	r3, r2, r3
 8007552:	1acb      	subs	r3, r1, r3
 8007554:	00db      	lsls	r3, r3, #3
 8007556:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800755a:	4b36      	ldr	r3, [pc, #216]	; (8007634 <UART_SetConfig+0x2d4>)
 800755c:	fba3 2302 	umull	r2, r3, r3, r2
 8007560:	095b      	lsrs	r3, r3, #5
 8007562:	005b      	lsls	r3, r3, #1
 8007564:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007568:	441c      	add	r4, r3
 800756a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800756e:	2200      	movs	r2, #0
 8007570:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007574:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007578:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800757c:	4642      	mov	r2, r8
 800757e:	464b      	mov	r3, r9
 8007580:	1891      	adds	r1, r2, r2
 8007582:	63b9      	str	r1, [r7, #56]	; 0x38
 8007584:	415b      	adcs	r3, r3
 8007586:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007588:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800758c:	4641      	mov	r1, r8
 800758e:	1851      	adds	r1, r2, r1
 8007590:	6339      	str	r1, [r7, #48]	; 0x30
 8007592:	4649      	mov	r1, r9
 8007594:	414b      	adcs	r3, r1
 8007596:	637b      	str	r3, [r7, #52]	; 0x34
 8007598:	f04f 0200 	mov.w	r2, #0
 800759c:	f04f 0300 	mov.w	r3, #0
 80075a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80075a4:	4659      	mov	r1, fp
 80075a6:	00cb      	lsls	r3, r1, #3
 80075a8:	4651      	mov	r1, sl
 80075aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075ae:	4651      	mov	r1, sl
 80075b0:	00ca      	lsls	r2, r1, #3
 80075b2:	4610      	mov	r0, r2
 80075b4:	4619      	mov	r1, r3
 80075b6:	4603      	mov	r3, r0
 80075b8:	4642      	mov	r2, r8
 80075ba:	189b      	adds	r3, r3, r2
 80075bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80075c0:	464b      	mov	r3, r9
 80075c2:	460a      	mov	r2, r1
 80075c4:	eb42 0303 	adc.w	r3, r2, r3
 80075c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80075cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80075d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80075dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80075e0:	460b      	mov	r3, r1
 80075e2:	18db      	adds	r3, r3, r3
 80075e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80075e6:	4613      	mov	r3, r2
 80075e8:	eb42 0303 	adc.w	r3, r2, r3
 80075ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80075f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80075f6:	f7f9 fb07 	bl	8000c08 <__aeabi_uldivmod>
 80075fa:	4602      	mov	r2, r0
 80075fc:	460b      	mov	r3, r1
 80075fe:	4b0d      	ldr	r3, [pc, #52]	; (8007634 <UART_SetConfig+0x2d4>)
 8007600:	fba3 1302 	umull	r1, r3, r3, r2
 8007604:	095b      	lsrs	r3, r3, #5
 8007606:	2164      	movs	r1, #100	; 0x64
 8007608:	fb01 f303 	mul.w	r3, r1, r3
 800760c:	1ad3      	subs	r3, r2, r3
 800760e:	00db      	lsls	r3, r3, #3
 8007610:	3332      	adds	r3, #50	; 0x32
 8007612:	4a08      	ldr	r2, [pc, #32]	; (8007634 <UART_SetConfig+0x2d4>)
 8007614:	fba2 2303 	umull	r2, r3, r2, r3
 8007618:	095b      	lsrs	r3, r3, #5
 800761a:	f003 0207 	and.w	r2, r3, #7
 800761e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4422      	add	r2, r4
 8007626:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007628:	e105      	b.n	8007836 <UART_SetConfig+0x4d6>
 800762a:	bf00      	nop
 800762c:	40011000 	.word	0x40011000
 8007630:	40011400 	.word	0x40011400
 8007634:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007638:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800763c:	2200      	movs	r2, #0
 800763e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007642:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007646:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800764a:	4642      	mov	r2, r8
 800764c:	464b      	mov	r3, r9
 800764e:	1891      	adds	r1, r2, r2
 8007650:	6239      	str	r1, [r7, #32]
 8007652:	415b      	adcs	r3, r3
 8007654:	627b      	str	r3, [r7, #36]	; 0x24
 8007656:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800765a:	4641      	mov	r1, r8
 800765c:	1854      	adds	r4, r2, r1
 800765e:	4649      	mov	r1, r9
 8007660:	eb43 0501 	adc.w	r5, r3, r1
 8007664:	f04f 0200 	mov.w	r2, #0
 8007668:	f04f 0300 	mov.w	r3, #0
 800766c:	00eb      	lsls	r3, r5, #3
 800766e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007672:	00e2      	lsls	r2, r4, #3
 8007674:	4614      	mov	r4, r2
 8007676:	461d      	mov	r5, r3
 8007678:	4643      	mov	r3, r8
 800767a:	18e3      	adds	r3, r4, r3
 800767c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007680:	464b      	mov	r3, r9
 8007682:	eb45 0303 	adc.w	r3, r5, r3
 8007686:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800768a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007696:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800769a:	f04f 0200 	mov.w	r2, #0
 800769e:	f04f 0300 	mov.w	r3, #0
 80076a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80076a6:	4629      	mov	r1, r5
 80076a8:	008b      	lsls	r3, r1, #2
 80076aa:	4621      	mov	r1, r4
 80076ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076b0:	4621      	mov	r1, r4
 80076b2:	008a      	lsls	r2, r1, #2
 80076b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80076b8:	f7f9 faa6 	bl	8000c08 <__aeabi_uldivmod>
 80076bc:	4602      	mov	r2, r0
 80076be:	460b      	mov	r3, r1
 80076c0:	4b60      	ldr	r3, [pc, #384]	; (8007844 <UART_SetConfig+0x4e4>)
 80076c2:	fba3 2302 	umull	r2, r3, r3, r2
 80076c6:	095b      	lsrs	r3, r3, #5
 80076c8:	011c      	lsls	r4, r3, #4
 80076ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076ce:	2200      	movs	r2, #0
 80076d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80076d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80076d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80076dc:	4642      	mov	r2, r8
 80076de:	464b      	mov	r3, r9
 80076e0:	1891      	adds	r1, r2, r2
 80076e2:	61b9      	str	r1, [r7, #24]
 80076e4:	415b      	adcs	r3, r3
 80076e6:	61fb      	str	r3, [r7, #28]
 80076e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80076ec:	4641      	mov	r1, r8
 80076ee:	1851      	adds	r1, r2, r1
 80076f0:	6139      	str	r1, [r7, #16]
 80076f2:	4649      	mov	r1, r9
 80076f4:	414b      	adcs	r3, r1
 80076f6:	617b      	str	r3, [r7, #20]
 80076f8:	f04f 0200 	mov.w	r2, #0
 80076fc:	f04f 0300 	mov.w	r3, #0
 8007700:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007704:	4659      	mov	r1, fp
 8007706:	00cb      	lsls	r3, r1, #3
 8007708:	4651      	mov	r1, sl
 800770a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800770e:	4651      	mov	r1, sl
 8007710:	00ca      	lsls	r2, r1, #3
 8007712:	4610      	mov	r0, r2
 8007714:	4619      	mov	r1, r3
 8007716:	4603      	mov	r3, r0
 8007718:	4642      	mov	r2, r8
 800771a:	189b      	adds	r3, r3, r2
 800771c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007720:	464b      	mov	r3, r9
 8007722:	460a      	mov	r2, r1
 8007724:	eb42 0303 	adc.w	r3, r2, r3
 8007728:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800772c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	67bb      	str	r3, [r7, #120]	; 0x78
 8007736:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007738:	f04f 0200 	mov.w	r2, #0
 800773c:	f04f 0300 	mov.w	r3, #0
 8007740:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007744:	4649      	mov	r1, r9
 8007746:	008b      	lsls	r3, r1, #2
 8007748:	4641      	mov	r1, r8
 800774a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800774e:	4641      	mov	r1, r8
 8007750:	008a      	lsls	r2, r1, #2
 8007752:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007756:	f7f9 fa57 	bl	8000c08 <__aeabi_uldivmod>
 800775a:	4602      	mov	r2, r0
 800775c:	460b      	mov	r3, r1
 800775e:	4b39      	ldr	r3, [pc, #228]	; (8007844 <UART_SetConfig+0x4e4>)
 8007760:	fba3 1302 	umull	r1, r3, r3, r2
 8007764:	095b      	lsrs	r3, r3, #5
 8007766:	2164      	movs	r1, #100	; 0x64
 8007768:	fb01 f303 	mul.w	r3, r1, r3
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	011b      	lsls	r3, r3, #4
 8007770:	3332      	adds	r3, #50	; 0x32
 8007772:	4a34      	ldr	r2, [pc, #208]	; (8007844 <UART_SetConfig+0x4e4>)
 8007774:	fba2 2303 	umull	r2, r3, r2, r3
 8007778:	095b      	lsrs	r3, r3, #5
 800777a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800777e:	441c      	add	r4, r3
 8007780:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007784:	2200      	movs	r2, #0
 8007786:	673b      	str	r3, [r7, #112]	; 0x70
 8007788:	677a      	str	r2, [r7, #116]	; 0x74
 800778a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800778e:	4642      	mov	r2, r8
 8007790:	464b      	mov	r3, r9
 8007792:	1891      	adds	r1, r2, r2
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	415b      	adcs	r3, r3
 8007798:	60fb      	str	r3, [r7, #12]
 800779a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800779e:	4641      	mov	r1, r8
 80077a0:	1851      	adds	r1, r2, r1
 80077a2:	6039      	str	r1, [r7, #0]
 80077a4:	4649      	mov	r1, r9
 80077a6:	414b      	adcs	r3, r1
 80077a8:	607b      	str	r3, [r7, #4]
 80077aa:	f04f 0200 	mov.w	r2, #0
 80077ae:	f04f 0300 	mov.w	r3, #0
 80077b2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80077b6:	4659      	mov	r1, fp
 80077b8:	00cb      	lsls	r3, r1, #3
 80077ba:	4651      	mov	r1, sl
 80077bc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077c0:	4651      	mov	r1, sl
 80077c2:	00ca      	lsls	r2, r1, #3
 80077c4:	4610      	mov	r0, r2
 80077c6:	4619      	mov	r1, r3
 80077c8:	4603      	mov	r3, r0
 80077ca:	4642      	mov	r2, r8
 80077cc:	189b      	adds	r3, r3, r2
 80077ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80077d0:	464b      	mov	r3, r9
 80077d2:	460a      	mov	r2, r1
 80077d4:	eb42 0303 	adc.w	r3, r2, r3
 80077d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	663b      	str	r3, [r7, #96]	; 0x60
 80077e4:	667a      	str	r2, [r7, #100]	; 0x64
 80077e6:	f04f 0200 	mov.w	r2, #0
 80077ea:	f04f 0300 	mov.w	r3, #0
 80077ee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80077f2:	4649      	mov	r1, r9
 80077f4:	008b      	lsls	r3, r1, #2
 80077f6:	4641      	mov	r1, r8
 80077f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077fc:	4641      	mov	r1, r8
 80077fe:	008a      	lsls	r2, r1, #2
 8007800:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007804:	f7f9 fa00 	bl	8000c08 <__aeabi_uldivmod>
 8007808:	4602      	mov	r2, r0
 800780a:	460b      	mov	r3, r1
 800780c:	4b0d      	ldr	r3, [pc, #52]	; (8007844 <UART_SetConfig+0x4e4>)
 800780e:	fba3 1302 	umull	r1, r3, r3, r2
 8007812:	095b      	lsrs	r3, r3, #5
 8007814:	2164      	movs	r1, #100	; 0x64
 8007816:	fb01 f303 	mul.w	r3, r1, r3
 800781a:	1ad3      	subs	r3, r2, r3
 800781c:	011b      	lsls	r3, r3, #4
 800781e:	3332      	adds	r3, #50	; 0x32
 8007820:	4a08      	ldr	r2, [pc, #32]	; (8007844 <UART_SetConfig+0x4e4>)
 8007822:	fba2 2303 	umull	r2, r3, r2, r3
 8007826:	095b      	lsrs	r3, r3, #5
 8007828:	f003 020f 	and.w	r2, r3, #15
 800782c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4422      	add	r2, r4
 8007834:	609a      	str	r2, [r3, #8]
}
 8007836:	bf00      	nop
 8007838:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800783c:	46bd      	mov	sp, r7
 800783e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007842:	bf00      	nop
 8007844:	51eb851f 	.word	0x51eb851f

08007848 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	4603      	mov	r3, r0
 8007850:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007852:	2300      	movs	r3, #0
 8007854:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800785a:	2b84      	cmp	r3, #132	; 0x84
 800785c:	d005      	beq.n	800786a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800785e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	4413      	add	r3, r2
 8007866:	3303      	adds	r3, #3
 8007868:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800786a:	68fb      	ldr	r3, [r7, #12]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3714      	adds	r7, #20
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800787e:	f3ef 8305 	mrs	r3, IPSR
 8007882:	607b      	str	r3, [r7, #4]
  return(result);
 8007884:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007886:	2b00      	cmp	r3, #0
 8007888:	bf14      	ite	ne
 800788a:	2301      	movne	r3, #1
 800788c:	2300      	moveq	r3, #0
 800788e:	b2db      	uxtb	r3, r3
}
 8007890:	4618      	mov	r0, r3
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80078a0:	f001 fcb2 	bl	8009208 <vTaskStartScheduler>
  
  return osOK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	bd80      	pop	{r7, pc}

080078aa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80078aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078ac:	b089      	sub	sp, #36	; 0x24
 80078ae:	af04      	add	r7, sp, #16
 80078b0:	6078      	str	r0, [r7, #4]
 80078b2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	695b      	ldr	r3, [r3, #20]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d020      	beq.n	80078fe <osThreadCreate+0x54>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	699b      	ldr	r3, [r3, #24]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d01c      	beq.n	80078fe <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	685c      	ldr	r4, [r3, #4]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681d      	ldr	r5, [r3, #0]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	691e      	ldr	r6, [r3, #16]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7ff ffb6 	bl	8007848 <makeFreeRtosPriority>
 80078dc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078e6:	9202      	str	r2, [sp, #8]
 80078e8:	9301      	str	r3, [sp, #4]
 80078ea:	9100      	str	r1, [sp, #0]
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	4632      	mov	r2, r6
 80078f0:	4629      	mov	r1, r5
 80078f2:	4620      	mov	r0, r4
 80078f4:	f001 fa00 	bl	8008cf8 <xTaskCreateStatic>
 80078f8:	4603      	mov	r3, r0
 80078fa:	60fb      	str	r3, [r7, #12]
 80078fc:	e01c      	b.n	8007938 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	685c      	ldr	r4, [r3, #4]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800790a:	b29e      	uxth	r6, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007912:	4618      	mov	r0, r3
 8007914:	f7ff ff98 	bl	8007848 <makeFreeRtosPriority>
 8007918:	4602      	mov	r2, r0
 800791a:	f107 030c 	add.w	r3, r7, #12
 800791e:	9301      	str	r3, [sp, #4]
 8007920:	9200      	str	r2, [sp, #0]
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	4632      	mov	r2, r6
 8007926:	4629      	mov	r1, r5
 8007928:	4620      	mov	r0, r4
 800792a:	f001 fa42 	bl	8008db2 <xTaskCreate>
 800792e:	4603      	mov	r3, r0
 8007930:	2b01      	cmp	r3, #1
 8007932:	d001      	beq.n	8007938 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007934:	2300      	movs	r3, #0
 8007936:	e000      	b.n	800793a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007938:	68fb      	ldr	r3, [r7, #12]
}
 800793a:	4618      	mov	r0, r3
 800793c:	3714      	adds	r7, #20
 800793e:	46bd      	mov	sp, r7
 8007940:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007942 <osThreadSetPriority>:
* @param   priority      new priority value for the thread function.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadSetPriority shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadSetPriority (osThreadId thread_id, osPriority priority)
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b082      	sub	sp, #8
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
 800794a:	460b      	mov	r3, r1
 800794c:	807b      	strh	r3, [r7, #2]
#if (INCLUDE_vTaskPrioritySet == 1)
  vTaskPrioritySet(thread_id, makeFreeRtosPriority(priority));
 800794e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007952:	4618      	mov	r0, r3
 8007954:	f7ff ff78 	bl	8007848 <makeFreeRtosPriority>
 8007958:	4603      	mov	r3, r0
 800795a:	4619      	mov	r1, r3
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f001 fba9 	bl	80090b4 <vTaskPrioritySet>
  return osOK;
 8007962:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8007964:	4618      	mov	r0, r3
 8007966:	3708      	adds	r7, #8
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d001      	beq.n	8007982 <osDelay+0x16>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	e000      	b.n	8007984 <osDelay+0x18>
 8007982:	2301      	movs	r3, #1
 8007984:	4618      	mov	r0, r3
 8007986:	f001 fb61 	bl	800904c <vTaskDelay>
  
  return osOK;
 800798a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800798c:	4618      	mov	r0, r3
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007994:	b580      	push	{r7, lr}
 8007996:	b086      	sub	sp, #24
 8007998:	af02      	add	r7, sp, #8
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d016      	beq.n	80079d4 <osSemaphoreCreate+0x40>
    if (count == 1) {
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d10a      	bne.n	80079c2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	2203      	movs	r2, #3
 80079b2:	9200      	str	r2, [sp, #0]
 80079b4:	2200      	movs	r2, #0
 80079b6:	2100      	movs	r1, #0
 80079b8:	2001      	movs	r0, #1
 80079ba:	f000 faa7 	bl	8007f0c <xQueueGenericCreateStatic>
 80079be:	4603      	mov	r3, r0
 80079c0:	e023      	b.n	8007a0a <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 80079c2:	6838      	ldr	r0, [r7, #0]
 80079c4:	6839      	ldr	r1, [r7, #0]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	461a      	mov	r2, r3
 80079cc:	f000 fb6f 	bl	80080ae <xQueueCreateCountingSemaphoreStatic>
 80079d0:	4603      	mov	r3, r0
 80079d2:	e01a      	b.n	8007a0a <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d110      	bne.n	80079fc <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 80079da:	2203      	movs	r2, #3
 80079dc:	2100      	movs	r1, #0
 80079de:	2001      	movs	r0, #1
 80079e0:	f000 fb0c 	bl	8007ffc <xQueueGenericCreate>
 80079e4:	60f8      	str	r0, [r7, #12]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d005      	beq.n	80079f8 <osSemaphoreCreate+0x64>
 80079ec:	2300      	movs	r3, #0
 80079ee:	2200      	movs	r2, #0
 80079f0:	2100      	movs	r1, #0
 80079f2:	68f8      	ldr	r0, [r7, #12]
 80079f4:	f000 fbc6 	bl	8008184 <xQueueGenericSend>
      return sema;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	e006      	b.n	8007a0a <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	683a      	ldr	r2, [r7, #0]
 8007a00:	4611      	mov	r1, r2
 8007a02:	4618      	mov	r0, r3
 8007a04:	f000 fb8a 	bl	800811c <xQueueCreateCountingSemaphore>
 8007a08:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
	...

08007a14 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007a1e:	2300      	movs	r3, #0
 8007a20:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d101      	bne.n	8007a2c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8007a28:	2380      	movs	r3, #128	; 0x80
 8007a2a:	e03a      	b.n	8007aa2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a36:	d103      	bne.n	8007a40 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8007a38:	f04f 33ff 	mov.w	r3, #4294967295
 8007a3c:	60fb      	str	r3, [r7, #12]
 8007a3e:	e009      	b.n	8007a54 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d006      	beq.n	8007a54 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d101      	bne.n	8007a54 <osSemaphoreWait+0x40>
      ticks = 1;
 8007a50:	2301      	movs	r3, #1
 8007a52:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007a54:	f7ff ff10 	bl	8007878 <inHandlerMode>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d017      	beq.n	8007a8e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007a5e:	f107 0308 	add.w	r3, r7, #8
 8007a62:	461a      	mov	r2, r3
 8007a64:	2100      	movs	r1, #0
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 ff9e 	bl	80089a8 <xQueueReceiveFromISR>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d001      	beq.n	8007a76 <osSemaphoreWait+0x62>
      return osErrorOS;
 8007a72:	23ff      	movs	r3, #255	; 0xff
 8007a74:	e015      	b.n	8007aa2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d011      	beq.n	8007aa0 <osSemaphoreWait+0x8c>
 8007a7c:	4b0b      	ldr	r3, [pc, #44]	; (8007aac <osSemaphoreWait+0x98>)
 8007a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a82:	601a      	str	r2, [r3, #0]
 8007a84:	f3bf 8f4f 	dsb	sy
 8007a88:	f3bf 8f6f 	isb	sy
 8007a8c:	e008      	b.n	8007aa0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8007a8e:	68f9      	ldr	r1, [r7, #12]
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 fe7d 	bl	8008790 <xQueueSemaphoreTake>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d001      	beq.n	8007aa0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007a9c:	23ff      	movs	r3, #255	; 0xff
 8007a9e:	e000      	b.n	8007aa2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	e000ed04 	.word	0xe000ed04

08007ab0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007abc:	2300      	movs	r3, #0
 8007abe:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007ac0:	f7ff feda 	bl	8007878 <inHandlerMode>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d016      	beq.n	8007af8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007aca:	f107 0308 	add.w	r3, r7, #8
 8007ace:	4619      	mov	r1, r3
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 fcf0 	bl	80084b6 <xQueueGiveFromISR>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d001      	beq.n	8007ae0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8007adc:	23ff      	movs	r3, #255	; 0xff
 8007ade:	e017      	b.n	8007b10 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d013      	beq.n	8007b0e <osSemaphoreRelease+0x5e>
 8007ae6:	4b0c      	ldr	r3, [pc, #48]	; (8007b18 <osSemaphoreRelease+0x68>)
 8007ae8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aec:	601a      	str	r2, [r3, #0]
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	f3bf 8f6f 	isb	sy
 8007af6:	e00a      	b.n	8007b0e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007af8:	2300      	movs	r3, #0
 8007afa:	2200      	movs	r2, #0
 8007afc:	2100      	movs	r1, #0
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 fb40 	bl	8008184 <xQueueGenericSend>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d001      	beq.n	8007b0e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8007b0a:	23ff      	movs	r3, #255	; 0xff
 8007b0c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	e000ed04 	.word	0xe000ed04

08007b1c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007b1c:	b590      	push	{r4, r7, lr}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af02      	add	r7, sp, #8
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d011      	beq.n	8007b52 <osMessageCreate+0x36>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00d      	beq.n	8007b52 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6818      	ldr	r0, [r3, #0]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6859      	ldr	r1, [r3, #4]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	689a      	ldr	r2, [r3, #8]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	2400      	movs	r4, #0
 8007b48:	9400      	str	r4, [sp, #0]
 8007b4a:	f000 f9df 	bl	8007f0c <xQueueGenericCreateStatic>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	e008      	b.n	8007b64 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6818      	ldr	r0, [r3, #0]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	f000 fa4d 	bl	8007ffc <xQueueGenericCreate>
 8007b62:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd90      	pop	{r4, r7, pc}

08007b6c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b086      	sub	sp, #24
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d101      	bne.n	8007b8a <osMessagePut+0x1e>
    ticks = 1;
 8007b86:	2301      	movs	r3, #1
 8007b88:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007b8a:	f7ff fe75 	bl	8007878 <inHandlerMode>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d018      	beq.n	8007bc6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007b94:	f107 0210 	add.w	r2, r7, #16
 8007b98:	f107 0108 	add.w	r1, r7, #8
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f000 fbee 	bl	8008380 <xQueueGenericSendFromISR>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b01      	cmp	r3, #1
 8007ba8:	d001      	beq.n	8007bae <osMessagePut+0x42>
      return osErrorOS;
 8007baa:	23ff      	movs	r3, #255	; 0xff
 8007bac:	e018      	b.n	8007be0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d014      	beq.n	8007bde <osMessagePut+0x72>
 8007bb4:	4b0c      	ldr	r3, [pc, #48]	; (8007be8 <osMessagePut+0x7c>)
 8007bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bba:	601a      	str	r2, [r3, #0]
 8007bbc:	f3bf 8f4f 	dsb	sy
 8007bc0:	f3bf 8f6f 	isb	sy
 8007bc4:	e00b      	b.n	8007bde <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8007bc6:	f107 0108 	add.w	r1, r7, #8
 8007bca:	2300      	movs	r3, #0
 8007bcc:	697a      	ldr	r2, [r7, #20]
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f000 fad8 	bl	8008184 <xQueueGenericSend>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d001      	beq.n	8007bde <osMessagePut+0x72>
      return osErrorOS;
 8007bda:	23ff      	movs	r3, #255	; 0xff
 8007bdc:	e000      	b.n	8007be0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3718      	adds	r7, #24
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	e000ed04 	.word	0xe000ed04

08007bec <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007bec:	b590      	push	{r4, r7, lr}
 8007bee:	b08b      	sub	sp, #44	; 0x2c
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d10a      	bne.n	8007c1c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8007c06:	2380      	movs	r3, #128	; 0x80
 8007c08:	617b      	str	r3, [r7, #20]
    return event;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	461c      	mov	r4, r3
 8007c0e:	f107 0314 	add.w	r3, r7, #20
 8007c12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007c16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007c1a:	e054      	b.n	8007cc6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007c20:	2300      	movs	r3, #0
 8007c22:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c2a:	d103      	bne.n	8007c34 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c30:	627b      	str	r3, [r7, #36]	; 0x24
 8007c32:	e009      	b.n	8007c48 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d006      	beq.n	8007c48 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8007c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d101      	bne.n	8007c48 <osMessageGet+0x5c>
      ticks = 1;
 8007c44:	2301      	movs	r3, #1
 8007c46:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007c48:	f7ff fe16 	bl	8007878 <inHandlerMode>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d01c      	beq.n	8007c8c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007c52:	f107 0220 	add.w	r2, r7, #32
 8007c56:	f107 0314 	add.w	r3, r7, #20
 8007c5a:	3304      	adds	r3, #4
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	68b8      	ldr	r0, [r7, #8]
 8007c60:	f000 fea2 	bl	80089a8 <xQueueReceiveFromISR>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d102      	bne.n	8007c70 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8007c6a:	2310      	movs	r3, #16
 8007c6c:	617b      	str	r3, [r7, #20]
 8007c6e:	e001      	b.n	8007c74 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8007c70:	2300      	movs	r3, #0
 8007c72:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007c74:	6a3b      	ldr	r3, [r7, #32]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d01d      	beq.n	8007cb6 <osMessageGet+0xca>
 8007c7a:	4b15      	ldr	r3, [pc, #84]	; (8007cd0 <osMessageGet+0xe4>)
 8007c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c80:	601a      	str	r2, [r3, #0]
 8007c82:	f3bf 8f4f 	dsb	sy
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	e014      	b.n	8007cb6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007c8c:	f107 0314 	add.w	r3, r7, #20
 8007c90:	3304      	adds	r3, #4
 8007c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c94:	4619      	mov	r1, r3
 8007c96:	68b8      	ldr	r0, [r7, #8]
 8007c98:	f000 fc9a 	bl	80085d0 <xQueueReceive>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d102      	bne.n	8007ca8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8007ca2:	2310      	movs	r3, #16
 8007ca4:	617b      	str	r3, [r7, #20]
 8007ca6:	e006      	b.n	8007cb6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d101      	bne.n	8007cb2 <osMessageGet+0xc6>
 8007cae:	2300      	movs	r3, #0
 8007cb0:	e000      	b.n	8007cb4 <osMessageGet+0xc8>
 8007cb2:	2340      	movs	r3, #64	; 0x40
 8007cb4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	461c      	mov	r4, r3
 8007cba:	f107 0314 	add.w	r3, r7, #20
 8007cbe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007cc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007cc6:	68f8      	ldr	r0, [r7, #12]
 8007cc8:	372c      	adds	r7, #44	; 0x2c
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd90      	pop	{r4, r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	e000ed04 	.word	0xe000ed04

08007cd4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f103 0208 	add.w	r2, r3, #8
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8007cec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f103 0208 	add.w	r2, r3, #8
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f103 0208 	add.w	r2, r3, #8
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007d08:	bf00      	nop
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007d22:	bf00      	nop
 8007d24:	370c      	adds	r7, #12
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b085      	sub	sp, #20
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
 8007d36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	689a      	ldr	r2, [r3, #8]
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	683a      	ldr	r2, [r7, #0]
 8007d52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	683a      	ldr	r2, [r7, #0]
 8007d58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	1c5a      	adds	r2, r3, #1
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	601a      	str	r2, [r3, #0]
}
 8007d6a:	bf00      	nop
 8007d6c:	3714      	adds	r7, #20
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr

08007d76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d76:	b480      	push	{r7}
 8007d78:	b085      	sub	sp, #20
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
 8007d7e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d8c:	d103      	bne.n	8007d96 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	60fb      	str	r3, [r7, #12]
 8007d94:	e00c      	b.n	8007db0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	3308      	adds	r3, #8
 8007d9a:	60fb      	str	r3, [r7, #12]
 8007d9c:	e002      	b.n	8007da4 <vListInsert+0x2e>
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	60fb      	str	r3, [r7, #12]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	68ba      	ldr	r2, [r7, #8]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d2f6      	bcs.n	8007d9e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	685a      	ldr	r2, [r3, #4]
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	683a      	ldr	r2, [r7, #0]
 8007dbe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	683a      	ldr	r2, [r7, #0]
 8007dca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	1c5a      	adds	r2, r3, #1
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	601a      	str	r2, [r3, #0]
}
 8007ddc:	bf00      	nop
 8007dde:	3714      	adds	r7, #20
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007de8:	b480      	push	{r7}
 8007dea:	b085      	sub	sp, #20
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	6892      	ldr	r2, [r2, #8]
 8007dfe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	6852      	ldr	r2, [r2, #4]
 8007e08:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d103      	bne.n	8007e1c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	689a      	ldr	r2, [r3, #8]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	1e5a      	subs	r2, r3, #1
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3714      	adds	r7, #20
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr

08007e3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d10a      	bne.n	8007e66 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e54:	f383 8811 	msr	BASEPRI, r3
 8007e58:	f3bf 8f6f 	isb	sy
 8007e5c:	f3bf 8f4f 	dsb	sy
 8007e60:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007e62:	bf00      	nop
 8007e64:	e7fe      	b.n	8007e64 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007e66:	f002 f92d 	bl	800a0c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e72:	68f9      	ldr	r1, [r7, #12]
 8007e74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007e76:	fb01 f303 	mul.w	r3, r1, r3
 8007e7a:	441a      	add	r2, r3
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2200      	movs	r2, #0
 8007e84:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e96:	3b01      	subs	r3, #1
 8007e98:	68f9      	ldr	r1, [r7, #12]
 8007e9a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007e9c:	fb01 f303 	mul.w	r3, r1, r3
 8007ea0:	441a      	add	r2, r3
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	22ff      	movs	r2, #255	; 0xff
 8007eaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	22ff      	movs	r2, #255	; 0xff
 8007eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d114      	bne.n	8007ee6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d01a      	beq.n	8007efa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	3310      	adds	r3, #16
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f001 fbef 	bl	80096ac <xTaskRemoveFromEventList>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d012      	beq.n	8007efa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007ed4:	4b0c      	ldr	r3, [pc, #48]	; (8007f08 <xQueueGenericReset+0xcc>)
 8007ed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eda:	601a      	str	r2, [r3, #0]
 8007edc:	f3bf 8f4f 	dsb	sy
 8007ee0:	f3bf 8f6f 	isb	sy
 8007ee4:	e009      	b.n	8007efa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	3310      	adds	r3, #16
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7ff fef2 	bl	8007cd4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	3324      	adds	r3, #36	; 0x24
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f7ff feed 	bl	8007cd4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007efa:	f002 f913 	bl	800a124 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007efe:	2301      	movs	r3, #1
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	e000ed04 	.word	0xe000ed04

08007f0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b08e      	sub	sp, #56	; 0x38
 8007f10:	af02      	add	r7, sp, #8
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
 8007f18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d10a      	bne.n	8007f36 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f24:	f383 8811 	msr	BASEPRI, r3
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007f32:	bf00      	nop
 8007f34:	e7fe      	b.n	8007f34 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d10a      	bne.n	8007f52 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f40:	f383 8811 	msr	BASEPRI, r3
 8007f44:	f3bf 8f6f 	isb	sy
 8007f48:	f3bf 8f4f 	dsb	sy
 8007f4c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f4e:	bf00      	nop
 8007f50:	e7fe      	b.n	8007f50 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d002      	beq.n	8007f5e <xQueueGenericCreateStatic+0x52>
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d001      	beq.n	8007f62 <xQueueGenericCreateStatic+0x56>
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e000      	b.n	8007f64 <xQueueGenericCreateStatic+0x58>
 8007f62:	2300      	movs	r3, #0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d10a      	bne.n	8007f7e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6c:	f383 8811 	msr	BASEPRI, r3
 8007f70:	f3bf 8f6f 	isb	sy
 8007f74:	f3bf 8f4f 	dsb	sy
 8007f78:	623b      	str	r3, [r7, #32]
}
 8007f7a:	bf00      	nop
 8007f7c:	e7fe      	b.n	8007f7c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d102      	bne.n	8007f8a <xQueueGenericCreateStatic+0x7e>
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d101      	bne.n	8007f8e <xQueueGenericCreateStatic+0x82>
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e000      	b.n	8007f90 <xQueueGenericCreateStatic+0x84>
 8007f8e:	2300      	movs	r3, #0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d10a      	bne.n	8007faa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f98:	f383 8811 	msr	BASEPRI, r3
 8007f9c:	f3bf 8f6f 	isb	sy
 8007fa0:	f3bf 8f4f 	dsb	sy
 8007fa4:	61fb      	str	r3, [r7, #28]
}
 8007fa6:	bf00      	nop
 8007fa8:	e7fe      	b.n	8007fa8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007faa:	2348      	movs	r3, #72	; 0x48
 8007fac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	2b48      	cmp	r3, #72	; 0x48
 8007fb2:	d00a      	beq.n	8007fca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb8:	f383 8811 	msr	BASEPRI, r3
 8007fbc:	f3bf 8f6f 	isb	sy
 8007fc0:	f3bf 8f4f 	dsb	sy
 8007fc4:	61bb      	str	r3, [r7, #24]
}
 8007fc6:	bf00      	nop
 8007fc8:	e7fe      	b.n	8007fc8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007fca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00d      	beq.n	8007ff2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd8:	2201      	movs	r2, #1
 8007fda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007fde:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe4:	9300      	str	r3, [sp, #0]
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	68b9      	ldr	r1, [r7, #8]
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	f000 f83f 	bl	8008070 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3730      	adds	r7, #48	; 0x30
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b08a      	sub	sp, #40	; 0x28
 8008000:	af02      	add	r7, sp, #8
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	4613      	mov	r3, r2
 8008008:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d10a      	bne.n	8008026 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008014:	f383 8811 	msr	BASEPRI, r3
 8008018:	f3bf 8f6f 	isb	sy
 800801c:	f3bf 8f4f 	dsb	sy
 8008020:	613b      	str	r3, [r7, #16]
}
 8008022:	bf00      	nop
 8008024:	e7fe      	b.n	8008024 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	68ba      	ldr	r2, [r7, #8]
 800802a:	fb02 f303 	mul.w	r3, r2, r3
 800802e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	3348      	adds	r3, #72	; 0x48
 8008034:	4618      	mov	r0, r3
 8008036:	f002 f967 	bl	800a308 <pvPortMalloc>
 800803a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d011      	beq.n	8008066 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	3348      	adds	r3, #72	; 0x48
 800804a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	2200      	movs	r2, #0
 8008050:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008054:	79fa      	ldrb	r2, [r7, #7]
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	9300      	str	r3, [sp, #0]
 800805a:	4613      	mov	r3, r2
 800805c:	697a      	ldr	r2, [r7, #20]
 800805e:	68b9      	ldr	r1, [r7, #8]
 8008060:	68f8      	ldr	r0, [r7, #12]
 8008062:	f000 f805 	bl	8008070 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008066:	69bb      	ldr	r3, [r7, #24]
	}
 8008068:	4618      	mov	r0, r3
 800806a:	3720      	adds	r7, #32
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	607a      	str	r2, [r7, #4]
 800807c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d103      	bne.n	800808c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	69ba      	ldr	r2, [r7, #24]
 8008088:	601a      	str	r2, [r3, #0]
 800808a:	e002      	b.n	8008092 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800808c:	69bb      	ldr	r3, [r7, #24]
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	68fa      	ldr	r2, [r7, #12]
 8008096:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800809e:	2101      	movs	r1, #1
 80080a0:	69b8      	ldr	r0, [r7, #24]
 80080a2:	f7ff fecb 	bl	8007e3c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80080a6:	bf00      	nop
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b08a      	sub	sp, #40	; 0x28
 80080b2:	af02      	add	r7, sp, #8
 80080b4:	60f8      	str	r0, [r7, #12]
 80080b6:	60b9      	str	r1, [r7, #8]
 80080b8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d10a      	bne.n	80080d6 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80080c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c4:	f383 8811 	msr	BASEPRI, r3
 80080c8:	f3bf 8f6f 	isb	sy
 80080cc:	f3bf 8f4f 	dsb	sy
 80080d0:	61bb      	str	r3, [r7, #24]
}
 80080d2:	bf00      	nop
 80080d4:	e7fe      	b.n	80080d4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80080d6:	68ba      	ldr	r2, [r7, #8]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d90a      	bls.n	80080f4 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80080de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e2:	f383 8811 	msr	BASEPRI, r3
 80080e6:	f3bf 8f6f 	isb	sy
 80080ea:	f3bf 8f4f 	dsb	sy
 80080ee:	617b      	str	r3, [r7, #20]
}
 80080f0:	bf00      	nop
 80080f2:	e7fe      	b.n	80080f2 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80080f4:	2302      	movs	r3, #2
 80080f6:	9300      	str	r3, [sp, #0]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2200      	movs	r2, #0
 80080fc:	2100      	movs	r1, #0
 80080fe:	68f8      	ldr	r0, [r7, #12]
 8008100:	f7ff ff04 	bl	8007f0c <xQueueGenericCreateStatic>
 8008104:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d002      	beq.n	8008112 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008112:	69fb      	ldr	r3, [r7, #28]
	}
 8008114:	4618      	mov	r0, r3
 8008116:	3720      	adds	r7, #32
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800811c:	b580      	push	{r7, lr}
 800811e:	b086      	sub	sp, #24
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10a      	bne.n	8008142 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800812c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008130:	f383 8811 	msr	BASEPRI, r3
 8008134:	f3bf 8f6f 	isb	sy
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	613b      	str	r3, [r7, #16]
}
 800813e:	bf00      	nop
 8008140:	e7fe      	b.n	8008140 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008142:	683a      	ldr	r2, [r7, #0]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	429a      	cmp	r2, r3
 8008148:	d90a      	bls.n	8008160 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800814a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814e:	f383 8811 	msr	BASEPRI, r3
 8008152:	f3bf 8f6f 	isb	sy
 8008156:	f3bf 8f4f 	dsb	sy
 800815a:	60fb      	str	r3, [r7, #12]
}
 800815c:	bf00      	nop
 800815e:	e7fe      	b.n	800815e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008160:	2202      	movs	r2, #2
 8008162:	2100      	movs	r1, #0
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f7ff ff49 	bl	8007ffc <xQueueGenericCreate>
 800816a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d002      	beq.n	8008178 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	683a      	ldr	r2, [r7, #0]
 8008176:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008178:	697b      	ldr	r3, [r7, #20]
	}
 800817a:	4618      	mov	r0, r3
 800817c:	3718      	adds	r7, #24
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
	...

08008184 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b08e      	sub	sp, #56	; 0x38
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
 8008190:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008192:	2300      	movs	r3, #0
 8008194:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800819a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800819c:	2b00      	cmp	r3, #0
 800819e:	d10a      	bne.n	80081b6 <xQueueGenericSend+0x32>
	__asm volatile
 80081a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a4:	f383 8811 	msr	BASEPRI, r3
 80081a8:	f3bf 8f6f 	isb	sy
 80081ac:	f3bf 8f4f 	dsb	sy
 80081b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80081b2:	bf00      	nop
 80081b4:	e7fe      	b.n	80081b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d103      	bne.n	80081c4 <xQueueGenericSend+0x40>
 80081bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d101      	bne.n	80081c8 <xQueueGenericSend+0x44>
 80081c4:	2301      	movs	r3, #1
 80081c6:	e000      	b.n	80081ca <xQueueGenericSend+0x46>
 80081c8:	2300      	movs	r3, #0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d10a      	bne.n	80081e4 <xQueueGenericSend+0x60>
	__asm volatile
 80081ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d2:	f383 8811 	msr	BASEPRI, r3
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	f3bf 8f4f 	dsb	sy
 80081de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80081e0:	bf00      	nop
 80081e2:	e7fe      	b.n	80081e2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d103      	bne.n	80081f2 <xQueueGenericSend+0x6e>
 80081ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d101      	bne.n	80081f6 <xQueueGenericSend+0x72>
 80081f2:	2301      	movs	r3, #1
 80081f4:	e000      	b.n	80081f8 <xQueueGenericSend+0x74>
 80081f6:	2300      	movs	r3, #0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10a      	bne.n	8008212 <xQueueGenericSend+0x8e>
	__asm volatile
 80081fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008200:	f383 8811 	msr	BASEPRI, r3
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	623b      	str	r3, [r7, #32]
}
 800820e:	bf00      	nop
 8008210:	e7fe      	b.n	8008210 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008212:	f001 fc0b 	bl	8009a2c <xTaskGetSchedulerState>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d102      	bne.n	8008222 <xQueueGenericSend+0x9e>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d101      	bne.n	8008226 <xQueueGenericSend+0xa2>
 8008222:	2301      	movs	r3, #1
 8008224:	e000      	b.n	8008228 <xQueueGenericSend+0xa4>
 8008226:	2300      	movs	r3, #0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d10a      	bne.n	8008242 <xQueueGenericSend+0xbe>
	__asm volatile
 800822c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008230:	f383 8811 	msr	BASEPRI, r3
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	61fb      	str	r3, [r7, #28]
}
 800823e:	bf00      	nop
 8008240:	e7fe      	b.n	8008240 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008242:	f001 ff3f 	bl	800a0c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008248:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800824a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800824e:	429a      	cmp	r2, r3
 8008250:	d302      	bcc.n	8008258 <xQueueGenericSend+0xd4>
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	2b02      	cmp	r3, #2
 8008256:	d129      	bne.n	80082ac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008258:	683a      	ldr	r2, [r7, #0]
 800825a:	68b9      	ldr	r1, [r7, #8]
 800825c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800825e:	f000 fc3b 	bl	8008ad8 <prvCopyDataToQueue>
 8008262:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008268:	2b00      	cmp	r3, #0
 800826a:	d010      	beq.n	800828e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800826c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826e:	3324      	adds	r3, #36	; 0x24
 8008270:	4618      	mov	r0, r3
 8008272:	f001 fa1b 	bl	80096ac <xTaskRemoveFromEventList>
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d013      	beq.n	80082a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800827c:	4b3f      	ldr	r3, [pc, #252]	; (800837c <xQueueGenericSend+0x1f8>)
 800827e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008282:	601a      	str	r2, [r3, #0]
 8008284:	f3bf 8f4f 	dsb	sy
 8008288:	f3bf 8f6f 	isb	sy
 800828c:	e00a      	b.n	80082a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800828e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008290:	2b00      	cmp	r3, #0
 8008292:	d007      	beq.n	80082a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008294:	4b39      	ldr	r3, [pc, #228]	; (800837c <xQueueGenericSend+0x1f8>)
 8008296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800829a:	601a      	str	r2, [r3, #0]
 800829c:	f3bf 8f4f 	dsb	sy
 80082a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80082a4:	f001 ff3e 	bl	800a124 <vPortExitCritical>
				return pdPASS;
 80082a8:	2301      	movs	r3, #1
 80082aa:	e063      	b.n	8008374 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d103      	bne.n	80082ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80082b2:	f001 ff37 	bl	800a124 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80082b6:	2300      	movs	r3, #0
 80082b8:	e05c      	b.n	8008374 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d106      	bne.n	80082ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082c0:	f107 0314 	add.w	r3, r7, #20
 80082c4:	4618      	mov	r0, r3
 80082c6:	f001 fa53 	bl	8009770 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80082ca:	2301      	movs	r3, #1
 80082cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80082ce:	f001 ff29 	bl	800a124 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80082d2:	f001 f803 	bl	80092dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082d6:	f001 fef5 	bl	800a0c4 <vPortEnterCritical>
 80082da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082e0:	b25b      	sxtb	r3, r3
 80082e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e6:	d103      	bne.n	80082f0 <xQueueGenericSend+0x16c>
 80082e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ea:	2200      	movs	r2, #0
 80082ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082f6:	b25b      	sxtb	r3, r3
 80082f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082fc:	d103      	bne.n	8008306 <xQueueGenericSend+0x182>
 80082fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008300:	2200      	movs	r2, #0
 8008302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008306:	f001 ff0d 	bl	800a124 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800830a:	1d3a      	adds	r2, r7, #4
 800830c:	f107 0314 	add.w	r3, r7, #20
 8008310:	4611      	mov	r1, r2
 8008312:	4618      	mov	r0, r3
 8008314:	f001 fa42 	bl	800979c <xTaskCheckForTimeOut>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d124      	bne.n	8008368 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800831e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008320:	f000 fcd2 	bl	8008cc8 <prvIsQueueFull>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d018      	beq.n	800835c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800832a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832c:	3310      	adds	r3, #16
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	4611      	mov	r1, r2
 8008332:	4618      	mov	r0, r3
 8008334:	f001 f996 	bl	8009664 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008338:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800833a:	f000 fc5d 	bl	8008bf8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800833e:	f000 ffdb 	bl	80092f8 <xTaskResumeAll>
 8008342:	4603      	mov	r3, r0
 8008344:	2b00      	cmp	r3, #0
 8008346:	f47f af7c 	bne.w	8008242 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800834a:	4b0c      	ldr	r3, [pc, #48]	; (800837c <xQueueGenericSend+0x1f8>)
 800834c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008350:	601a      	str	r2, [r3, #0]
 8008352:	f3bf 8f4f 	dsb	sy
 8008356:	f3bf 8f6f 	isb	sy
 800835a:	e772      	b.n	8008242 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800835c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800835e:	f000 fc4b 	bl	8008bf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008362:	f000 ffc9 	bl	80092f8 <xTaskResumeAll>
 8008366:	e76c      	b.n	8008242 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008368:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800836a:	f000 fc45 	bl	8008bf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800836e:	f000 ffc3 	bl	80092f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008372:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008374:	4618      	mov	r0, r3
 8008376:	3738      	adds	r7, #56	; 0x38
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	e000ed04 	.word	0xe000ed04

08008380 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b090      	sub	sp, #64	; 0x40
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	607a      	str	r2, [r7, #4]
 800838c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10a      	bne.n	80083ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839c:	f383 8811 	msr	BASEPRI, r3
 80083a0:	f3bf 8f6f 	isb	sy
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80083aa:	bf00      	nop
 80083ac:	e7fe      	b.n	80083ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d103      	bne.n	80083bc <xQueueGenericSendFromISR+0x3c>
 80083b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d101      	bne.n	80083c0 <xQueueGenericSendFromISR+0x40>
 80083bc:	2301      	movs	r3, #1
 80083be:	e000      	b.n	80083c2 <xQueueGenericSendFromISR+0x42>
 80083c0:	2300      	movs	r3, #0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d10a      	bne.n	80083dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80083c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ca:	f383 8811 	msr	BASEPRI, r3
 80083ce:	f3bf 8f6f 	isb	sy
 80083d2:	f3bf 8f4f 	dsb	sy
 80083d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80083d8:	bf00      	nop
 80083da:	e7fe      	b.n	80083da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	2b02      	cmp	r3, #2
 80083e0:	d103      	bne.n	80083ea <xQueueGenericSendFromISR+0x6a>
 80083e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d101      	bne.n	80083ee <xQueueGenericSendFromISR+0x6e>
 80083ea:	2301      	movs	r3, #1
 80083ec:	e000      	b.n	80083f0 <xQueueGenericSendFromISR+0x70>
 80083ee:	2300      	movs	r3, #0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d10a      	bne.n	800840a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80083f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f8:	f383 8811 	msr	BASEPRI, r3
 80083fc:	f3bf 8f6f 	isb	sy
 8008400:	f3bf 8f4f 	dsb	sy
 8008404:	623b      	str	r3, [r7, #32]
}
 8008406:	bf00      	nop
 8008408:	e7fe      	b.n	8008408 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800840a:	f001 ff3d 	bl	800a288 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800840e:	f3ef 8211 	mrs	r2, BASEPRI
 8008412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008416:	f383 8811 	msr	BASEPRI, r3
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	61fa      	str	r2, [r7, #28]
 8008424:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008426:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008428:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800842a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800842e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008432:	429a      	cmp	r2, r3
 8008434:	d302      	bcc.n	800843c <xQueueGenericSendFromISR+0xbc>
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	2b02      	cmp	r3, #2
 800843a:	d12f      	bne.n	800849c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800843c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800844c:	683a      	ldr	r2, [r7, #0]
 800844e:	68b9      	ldr	r1, [r7, #8]
 8008450:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008452:	f000 fb41 	bl	8008ad8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008456:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800845a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800845e:	d112      	bne.n	8008486 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008464:	2b00      	cmp	r3, #0
 8008466:	d016      	beq.n	8008496 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846a:	3324      	adds	r3, #36	; 0x24
 800846c:	4618      	mov	r0, r3
 800846e:	f001 f91d 	bl	80096ac <xTaskRemoveFromEventList>
 8008472:	4603      	mov	r3, r0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d00e      	beq.n	8008496 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00b      	beq.n	8008496 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2201      	movs	r2, #1
 8008482:	601a      	str	r2, [r3, #0]
 8008484:	e007      	b.n	8008496 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008486:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800848a:	3301      	adds	r3, #1
 800848c:	b2db      	uxtb	r3, r3
 800848e:	b25a      	sxtb	r2, r3
 8008490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008492:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008496:	2301      	movs	r3, #1
 8008498:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800849a:	e001      	b.n	80084a0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800849c:	2300      	movs	r3, #0
 800849e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084a2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80084aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80084ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3740      	adds	r7, #64	; 0x40
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b08e      	sub	sp, #56	; 0x38
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
 80084be:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80084c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d10a      	bne.n	80084e0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80084ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ce:	f383 8811 	msr	BASEPRI, r3
 80084d2:	f3bf 8f6f 	isb	sy
 80084d6:	f3bf 8f4f 	dsb	sy
 80084da:	623b      	str	r3, [r7, #32]
}
 80084dc:	bf00      	nop
 80084de:	e7fe      	b.n	80084de <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80084e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d00a      	beq.n	80084fe <xQueueGiveFromISR+0x48>
	__asm volatile
 80084e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ec:	f383 8811 	msr	BASEPRI, r3
 80084f0:	f3bf 8f6f 	isb	sy
 80084f4:	f3bf 8f4f 	dsb	sy
 80084f8:	61fb      	str	r3, [r7, #28]
}
 80084fa:	bf00      	nop
 80084fc:	e7fe      	b.n	80084fc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80084fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d103      	bne.n	800850e <xQueueGiveFromISR+0x58>
 8008506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d101      	bne.n	8008512 <xQueueGiveFromISR+0x5c>
 800850e:	2301      	movs	r3, #1
 8008510:	e000      	b.n	8008514 <xQueueGiveFromISR+0x5e>
 8008512:	2300      	movs	r3, #0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d10a      	bne.n	800852e <xQueueGiveFromISR+0x78>
	__asm volatile
 8008518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851c:	f383 8811 	msr	BASEPRI, r3
 8008520:	f3bf 8f6f 	isb	sy
 8008524:	f3bf 8f4f 	dsb	sy
 8008528:	61bb      	str	r3, [r7, #24]
}
 800852a:	bf00      	nop
 800852c:	e7fe      	b.n	800852c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800852e:	f001 feab 	bl	800a288 <vPortValidateInterruptPriority>
	__asm volatile
 8008532:	f3ef 8211 	mrs	r2, BASEPRI
 8008536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853a:	f383 8811 	msr	BASEPRI, r3
 800853e:	f3bf 8f6f 	isb	sy
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	617a      	str	r2, [r7, #20]
 8008548:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800854a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800854c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800854e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008552:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008558:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800855a:	429a      	cmp	r2, r3
 800855c:	d22b      	bcs.n	80085b6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800855e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008560:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856a:	1c5a      	adds	r2, r3, #1
 800856c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008570:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008578:	d112      	bne.n	80085a0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800857a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857e:	2b00      	cmp	r3, #0
 8008580:	d016      	beq.n	80085b0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008584:	3324      	adds	r3, #36	; 0x24
 8008586:	4618      	mov	r0, r3
 8008588:	f001 f890 	bl	80096ac <xTaskRemoveFromEventList>
 800858c:	4603      	mov	r3, r0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d00e      	beq.n	80085b0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d00b      	beq.n	80085b0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	2201      	movs	r2, #1
 800859c:	601a      	str	r2, [r3, #0]
 800859e:	e007      	b.n	80085b0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80085a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085a4:	3301      	adds	r3, #1
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	b25a      	sxtb	r2, r3
 80085aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80085b0:	2301      	movs	r3, #1
 80085b2:	637b      	str	r3, [r7, #52]	; 0x34
 80085b4:	e001      	b.n	80085ba <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80085b6:	2300      	movs	r3, #0
 80085b8:	637b      	str	r3, [r7, #52]	; 0x34
 80085ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085bc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f383 8811 	msr	BASEPRI, r3
}
 80085c4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80085c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3738      	adds	r7, #56	; 0x38
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b08c      	sub	sp, #48	; 0x30
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80085dc:	2300      	movs	r3, #0
 80085de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80085e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d10a      	bne.n	8008600 <xQueueReceive+0x30>
	__asm volatile
 80085ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ee:	f383 8811 	msr	BASEPRI, r3
 80085f2:	f3bf 8f6f 	isb	sy
 80085f6:	f3bf 8f4f 	dsb	sy
 80085fa:	623b      	str	r3, [r7, #32]
}
 80085fc:	bf00      	nop
 80085fe:	e7fe      	b.n	80085fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d103      	bne.n	800860e <xQueueReceive+0x3e>
 8008606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800860a:	2b00      	cmp	r3, #0
 800860c:	d101      	bne.n	8008612 <xQueueReceive+0x42>
 800860e:	2301      	movs	r3, #1
 8008610:	e000      	b.n	8008614 <xQueueReceive+0x44>
 8008612:	2300      	movs	r3, #0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d10a      	bne.n	800862e <xQueueReceive+0x5e>
	__asm volatile
 8008618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861c:	f383 8811 	msr	BASEPRI, r3
 8008620:	f3bf 8f6f 	isb	sy
 8008624:	f3bf 8f4f 	dsb	sy
 8008628:	61fb      	str	r3, [r7, #28]
}
 800862a:	bf00      	nop
 800862c:	e7fe      	b.n	800862c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800862e:	f001 f9fd 	bl	8009a2c <xTaskGetSchedulerState>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d102      	bne.n	800863e <xQueueReceive+0x6e>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d101      	bne.n	8008642 <xQueueReceive+0x72>
 800863e:	2301      	movs	r3, #1
 8008640:	e000      	b.n	8008644 <xQueueReceive+0x74>
 8008642:	2300      	movs	r3, #0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d10a      	bne.n	800865e <xQueueReceive+0x8e>
	__asm volatile
 8008648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864c:	f383 8811 	msr	BASEPRI, r3
 8008650:	f3bf 8f6f 	isb	sy
 8008654:	f3bf 8f4f 	dsb	sy
 8008658:	61bb      	str	r3, [r7, #24]
}
 800865a:	bf00      	nop
 800865c:	e7fe      	b.n	800865c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800865e:	f001 fd31 	bl	800a0c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008666:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866a:	2b00      	cmp	r3, #0
 800866c:	d01f      	beq.n	80086ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800866e:	68b9      	ldr	r1, [r7, #8]
 8008670:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008672:	f000 fa9b 	bl	8008bac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008678:	1e5a      	subs	r2, r3, #1
 800867a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800867c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800867e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008680:	691b      	ldr	r3, [r3, #16]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00f      	beq.n	80086a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008688:	3310      	adds	r3, #16
 800868a:	4618      	mov	r0, r3
 800868c:	f001 f80e 	bl	80096ac <xTaskRemoveFromEventList>
 8008690:	4603      	mov	r3, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d007      	beq.n	80086a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008696:	4b3d      	ldr	r3, [pc, #244]	; (800878c <xQueueReceive+0x1bc>)
 8008698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800869c:	601a      	str	r2, [r3, #0]
 800869e:	f3bf 8f4f 	dsb	sy
 80086a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80086a6:	f001 fd3d 	bl	800a124 <vPortExitCritical>
				return pdPASS;
 80086aa:	2301      	movs	r3, #1
 80086ac:	e069      	b.n	8008782 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d103      	bne.n	80086bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80086b4:	f001 fd36 	bl	800a124 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80086b8:	2300      	movs	r3, #0
 80086ba:	e062      	b.n	8008782 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80086bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d106      	bne.n	80086d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80086c2:	f107 0310 	add.w	r3, r7, #16
 80086c6:	4618      	mov	r0, r3
 80086c8:	f001 f852 	bl	8009770 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80086cc:	2301      	movs	r3, #1
 80086ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80086d0:	f001 fd28 	bl	800a124 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80086d4:	f000 fe02 	bl	80092dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086d8:	f001 fcf4 	bl	800a0c4 <vPortEnterCritical>
 80086dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086e2:	b25b      	sxtb	r3, r3
 80086e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086e8:	d103      	bne.n	80086f2 <xQueueReceive+0x122>
 80086ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ec:	2200      	movs	r2, #0
 80086ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086f8:	b25b      	sxtb	r3, r3
 80086fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086fe:	d103      	bne.n	8008708 <xQueueReceive+0x138>
 8008700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008702:	2200      	movs	r2, #0
 8008704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008708:	f001 fd0c 	bl	800a124 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800870c:	1d3a      	adds	r2, r7, #4
 800870e:	f107 0310 	add.w	r3, r7, #16
 8008712:	4611      	mov	r1, r2
 8008714:	4618      	mov	r0, r3
 8008716:	f001 f841 	bl	800979c <xTaskCheckForTimeOut>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d123      	bne.n	8008768 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008720:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008722:	f000 fabb 	bl	8008c9c <prvIsQueueEmpty>
 8008726:	4603      	mov	r3, r0
 8008728:	2b00      	cmp	r3, #0
 800872a:	d017      	beq.n	800875c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800872c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872e:	3324      	adds	r3, #36	; 0x24
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	4611      	mov	r1, r2
 8008734:	4618      	mov	r0, r3
 8008736:	f000 ff95 	bl	8009664 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800873a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800873c:	f000 fa5c 	bl	8008bf8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008740:	f000 fdda 	bl	80092f8 <xTaskResumeAll>
 8008744:	4603      	mov	r3, r0
 8008746:	2b00      	cmp	r3, #0
 8008748:	d189      	bne.n	800865e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800874a:	4b10      	ldr	r3, [pc, #64]	; (800878c <xQueueReceive+0x1bc>)
 800874c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008750:	601a      	str	r2, [r3, #0]
 8008752:	f3bf 8f4f 	dsb	sy
 8008756:	f3bf 8f6f 	isb	sy
 800875a:	e780      	b.n	800865e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800875c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800875e:	f000 fa4b 	bl	8008bf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008762:	f000 fdc9 	bl	80092f8 <xTaskResumeAll>
 8008766:	e77a      	b.n	800865e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008768:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800876a:	f000 fa45 	bl	8008bf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800876e:	f000 fdc3 	bl	80092f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008772:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008774:	f000 fa92 	bl	8008c9c <prvIsQueueEmpty>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	f43f af6f 	beq.w	800865e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008780:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008782:	4618      	mov	r0, r3
 8008784:	3730      	adds	r7, #48	; 0x30
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	e000ed04 	.word	0xe000ed04

08008790 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b08e      	sub	sp, #56	; 0x38
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800879a:	2300      	movs	r3, #0
 800879c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80087a2:	2300      	movs	r3, #0
 80087a4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80087a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d10a      	bne.n	80087c2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80087ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b0:	f383 8811 	msr	BASEPRI, r3
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	623b      	str	r3, [r7, #32]
}
 80087be:	bf00      	nop
 80087c0:	e7fe      	b.n	80087c0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80087c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00a      	beq.n	80087e0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80087ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ce:	f383 8811 	msr	BASEPRI, r3
 80087d2:	f3bf 8f6f 	isb	sy
 80087d6:	f3bf 8f4f 	dsb	sy
 80087da:	61fb      	str	r3, [r7, #28]
}
 80087dc:	bf00      	nop
 80087de:	e7fe      	b.n	80087de <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087e0:	f001 f924 	bl	8009a2c <xTaskGetSchedulerState>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d102      	bne.n	80087f0 <xQueueSemaphoreTake+0x60>
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d101      	bne.n	80087f4 <xQueueSemaphoreTake+0x64>
 80087f0:	2301      	movs	r3, #1
 80087f2:	e000      	b.n	80087f6 <xQueueSemaphoreTake+0x66>
 80087f4:	2300      	movs	r3, #0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d10a      	bne.n	8008810 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80087fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fe:	f383 8811 	msr	BASEPRI, r3
 8008802:	f3bf 8f6f 	isb	sy
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	61bb      	str	r3, [r7, #24]
}
 800880c:	bf00      	nop
 800880e:	e7fe      	b.n	800880e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008810:	f001 fc58 	bl	800a0c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008818:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800881a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881c:	2b00      	cmp	r3, #0
 800881e:	d024      	beq.n	800886a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008822:	1e5a      	subs	r2, r3, #1
 8008824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008826:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d104      	bne.n	800883a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008830:	f001 faa4 	bl	8009d7c <pvTaskIncrementMutexHeldCount>
 8008834:	4602      	mov	r2, r0
 8008836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008838:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800883a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800883c:	691b      	ldr	r3, [r3, #16]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d00f      	beq.n	8008862 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008844:	3310      	adds	r3, #16
 8008846:	4618      	mov	r0, r3
 8008848:	f000 ff30 	bl	80096ac <xTaskRemoveFromEventList>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d007      	beq.n	8008862 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008852:	4b54      	ldr	r3, [pc, #336]	; (80089a4 <xQueueSemaphoreTake+0x214>)
 8008854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008858:	601a      	str	r2, [r3, #0]
 800885a:	f3bf 8f4f 	dsb	sy
 800885e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008862:	f001 fc5f 	bl	800a124 <vPortExitCritical>
				return pdPASS;
 8008866:	2301      	movs	r3, #1
 8008868:	e097      	b.n	800899a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d111      	bne.n	8008894 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008872:	2b00      	cmp	r3, #0
 8008874:	d00a      	beq.n	800888c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887a:	f383 8811 	msr	BASEPRI, r3
 800887e:	f3bf 8f6f 	isb	sy
 8008882:	f3bf 8f4f 	dsb	sy
 8008886:	617b      	str	r3, [r7, #20]
}
 8008888:	bf00      	nop
 800888a:	e7fe      	b.n	800888a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800888c:	f001 fc4a 	bl	800a124 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008890:	2300      	movs	r3, #0
 8008892:	e082      	b.n	800899a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008896:	2b00      	cmp	r3, #0
 8008898:	d106      	bne.n	80088a8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800889a:	f107 030c 	add.w	r3, r7, #12
 800889e:	4618      	mov	r0, r3
 80088a0:	f000 ff66 	bl	8009770 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80088a4:	2301      	movs	r3, #1
 80088a6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80088a8:	f001 fc3c 	bl	800a124 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80088ac:	f000 fd16 	bl	80092dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80088b0:	f001 fc08 	bl	800a0c4 <vPortEnterCritical>
 80088b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088ba:	b25b      	sxtb	r3, r3
 80088bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088c0:	d103      	bne.n	80088ca <xQueueSemaphoreTake+0x13a>
 80088c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c4:	2200      	movs	r2, #0
 80088c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088d0:	b25b      	sxtb	r3, r3
 80088d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d6:	d103      	bne.n	80088e0 <xQueueSemaphoreTake+0x150>
 80088d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088da:	2200      	movs	r2, #0
 80088dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088e0:	f001 fc20 	bl	800a124 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088e4:	463a      	mov	r2, r7
 80088e6:	f107 030c 	add.w	r3, r7, #12
 80088ea:	4611      	mov	r1, r2
 80088ec:	4618      	mov	r0, r3
 80088ee:	f000 ff55 	bl	800979c <xTaskCheckForTimeOut>
 80088f2:	4603      	mov	r3, r0
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d132      	bne.n	800895e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80088fa:	f000 f9cf 	bl	8008c9c <prvIsQueueEmpty>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d026      	beq.n	8008952 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d109      	bne.n	8008920 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800890c:	f001 fbda 	bl	800a0c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	4618      	mov	r0, r3
 8008916:	f001 f8a7 	bl	8009a68 <xTaskPriorityInherit>
 800891a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800891c:	f001 fc02 	bl	800a124 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008922:	3324      	adds	r3, #36	; 0x24
 8008924:	683a      	ldr	r2, [r7, #0]
 8008926:	4611      	mov	r1, r2
 8008928:	4618      	mov	r0, r3
 800892a:	f000 fe9b 	bl	8009664 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800892e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008930:	f000 f962 	bl	8008bf8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008934:	f000 fce0 	bl	80092f8 <xTaskResumeAll>
 8008938:	4603      	mov	r3, r0
 800893a:	2b00      	cmp	r3, #0
 800893c:	f47f af68 	bne.w	8008810 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008940:	4b18      	ldr	r3, [pc, #96]	; (80089a4 <xQueueSemaphoreTake+0x214>)
 8008942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008946:	601a      	str	r2, [r3, #0]
 8008948:	f3bf 8f4f 	dsb	sy
 800894c:	f3bf 8f6f 	isb	sy
 8008950:	e75e      	b.n	8008810 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008952:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008954:	f000 f950 	bl	8008bf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008958:	f000 fcce 	bl	80092f8 <xTaskResumeAll>
 800895c:	e758      	b.n	8008810 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800895e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008960:	f000 f94a 	bl	8008bf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008964:	f000 fcc8 	bl	80092f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008968:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800896a:	f000 f997 	bl	8008c9c <prvIsQueueEmpty>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	f43f af4d 	beq.w	8008810 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00d      	beq.n	8008998 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800897c:	f001 fba2 	bl	800a0c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008980:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008982:	f000 f891 	bl	8008aa8 <prvGetDisinheritPriorityAfterTimeout>
 8008986:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800898e:	4618      	mov	r0, r3
 8008990:	f001 f966 	bl	8009c60 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008994:	f001 fbc6 	bl	800a124 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008998:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800899a:	4618      	mov	r0, r3
 800899c:	3738      	adds	r7, #56	; 0x38
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop
 80089a4:	e000ed04 	.word	0xe000ed04

080089a8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b08e      	sub	sp, #56	; 0x38
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	60f8      	str	r0, [r7, #12]
 80089b0:	60b9      	str	r1, [r7, #8]
 80089b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80089b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d10a      	bne.n	80089d4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80089be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c2:	f383 8811 	msr	BASEPRI, r3
 80089c6:	f3bf 8f6f 	isb	sy
 80089ca:	f3bf 8f4f 	dsb	sy
 80089ce:	623b      	str	r3, [r7, #32]
}
 80089d0:	bf00      	nop
 80089d2:	e7fe      	b.n	80089d2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d103      	bne.n	80089e2 <xQueueReceiveFromISR+0x3a>
 80089da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d101      	bne.n	80089e6 <xQueueReceiveFromISR+0x3e>
 80089e2:	2301      	movs	r3, #1
 80089e4:	e000      	b.n	80089e8 <xQueueReceiveFromISR+0x40>
 80089e6:	2300      	movs	r3, #0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d10a      	bne.n	8008a02 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80089ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f0:	f383 8811 	msr	BASEPRI, r3
 80089f4:	f3bf 8f6f 	isb	sy
 80089f8:	f3bf 8f4f 	dsb	sy
 80089fc:	61fb      	str	r3, [r7, #28]
}
 80089fe:	bf00      	nop
 8008a00:	e7fe      	b.n	8008a00 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a02:	f001 fc41 	bl	800a288 <vPortValidateInterruptPriority>
	__asm volatile
 8008a06:	f3ef 8211 	mrs	r2, BASEPRI
 8008a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0e:	f383 8811 	msr	BASEPRI, r3
 8008a12:	f3bf 8f6f 	isb	sy
 8008a16:	f3bf 8f4f 	dsb	sy
 8008a1a:	61ba      	str	r2, [r7, #24]
 8008a1c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008a1e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a20:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a26:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d02f      	beq.n	8008a8e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a38:	68b9      	ldr	r1, [r7, #8]
 8008a3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a3c:	f000 f8b6 	bl	8008bac <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a42:	1e5a      	subs	r2, r3, #1
 8008a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a46:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008a48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a50:	d112      	bne.n	8008a78 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a54:	691b      	ldr	r3, [r3, #16]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d016      	beq.n	8008a88 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5c:	3310      	adds	r3, #16
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f000 fe24 	bl	80096ac <xTaskRemoveFromEventList>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d00e      	beq.n	8008a88 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d00b      	beq.n	8008a88 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2201      	movs	r2, #1
 8008a74:	601a      	str	r2, [r3, #0]
 8008a76:	e007      	b.n	8008a88 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008a78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	b25a      	sxtb	r2, r3
 8008a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	637b      	str	r3, [r7, #52]	; 0x34
 8008a8c:	e001      	b.n	8008a92 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	637b      	str	r3, [r7, #52]	; 0x34
 8008a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a94:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	f383 8811 	msr	BASEPRI, r3
}
 8008a9c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3738      	adds	r7, #56	; 0x38
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d006      	beq.n	8008ac6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f1c3 0307 	rsb	r3, r3, #7
 8008ac2:	60fb      	str	r3, [r7, #12]
 8008ac4:	e001      	b.n	8008aca <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008aca:	68fb      	ldr	r3, [r7, #12]
	}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3714      	adds	r7, #20
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b086      	sub	sp, #24
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	60f8      	str	r0, [r7, #12]
 8008ae0:	60b9      	str	r1, [r7, #8]
 8008ae2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d10d      	bne.n	8008b12 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d14d      	bne.n	8008b9a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	4618      	mov	r0, r3
 8008b04:	f001 f826 	bl	8009b54 <xTaskPriorityDisinherit>
 8008b08:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	609a      	str	r2, [r3, #8]
 8008b10:	e043      	b.n	8008b9a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d119      	bne.n	8008b4c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6858      	ldr	r0, [r3, #4]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b20:	461a      	mov	r2, r3
 8008b22:	68b9      	ldr	r1, [r7, #8]
 8008b24:	f001 fefd 	bl	800a922 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	685a      	ldr	r2, [r3, #4]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b30:	441a      	add	r2, r3
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	685a      	ldr	r2, [r3, #4]
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d32b      	bcc.n	8008b9a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	605a      	str	r2, [r3, #4]
 8008b4a:	e026      	b.n	8008b9a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	68d8      	ldr	r0, [r3, #12]
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b54:	461a      	mov	r2, r3
 8008b56:	68b9      	ldr	r1, [r7, #8]
 8008b58:	f001 fee3 	bl	800a922 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	68da      	ldr	r2, [r3, #12]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b64:	425b      	negs	r3, r3
 8008b66:	441a      	add	r2, r3
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	68da      	ldr	r2, [r3, #12]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d207      	bcs.n	8008b88 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	689a      	ldr	r2, [r3, #8]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b80:	425b      	negs	r3, r3
 8008b82:	441a      	add	r2, r3
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2b02      	cmp	r3, #2
 8008b8c:	d105      	bne.n	8008b9a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d002      	beq.n	8008b9a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	3b01      	subs	r3, #1
 8008b98:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	1c5a      	adds	r2, r3, #1
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008ba2:	697b      	ldr	r3, [r7, #20]
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3718      	adds	r7, #24
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d018      	beq.n	8008bf0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	68da      	ldr	r2, [r3, #12]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc6:	441a      	add	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	68da      	ldr	r2, [r3, #12]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d303      	bcc.n	8008be0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	68d9      	ldr	r1, [r3, #12]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be8:	461a      	mov	r2, r3
 8008bea:	6838      	ldr	r0, [r7, #0]
 8008bec:	f001 fe99 	bl	800a922 <memcpy>
	}
}
 8008bf0:	bf00      	nop
 8008bf2:	3708      	adds	r7, #8
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008c00:	f001 fa60 	bl	800a0c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c0a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c0c:	e011      	b.n	8008c32 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d012      	beq.n	8008c3c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	3324      	adds	r3, #36	; 0x24
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f000 fd46 	bl	80096ac <xTaskRemoveFromEventList>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d001      	beq.n	8008c2a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008c26:	f000 fe1b 	bl	8009860 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008c2a:	7bfb      	ldrb	r3, [r7, #15]
 8008c2c:	3b01      	subs	r3, #1
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	dce9      	bgt.n	8008c0e <prvUnlockQueue+0x16>
 8008c3a:	e000      	b.n	8008c3e <prvUnlockQueue+0x46>
					break;
 8008c3c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	22ff      	movs	r2, #255	; 0xff
 8008c42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008c46:	f001 fa6d 	bl	800a124 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008c4a:	f001 fa3b 	bl	800a0c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c54:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c56:	e011      	b.n	8008c7c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	691b      	ldr	r3, [r3, #16]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d012      	beq.n	8008c86 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	3310      	adds	r3, #16
 8008c64:	4618      	mov	r0, r3
 8008c66:	f000 fd21 	bl	80096ac <xTaskRemoveFromEventList>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d001      	beq.n	8008c74 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008c70:	f000 fdf6 	bl	8009860 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008c74:	7bbb      	ldrb	r3, [r7, #14]
 8008c76:	3b01      	subs	r3, #1
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	dce9      	bgt.n	8008c58 <prvUnlockQueue+0x60>
 8008c84:	e000      	b.n	8008c88 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008c86:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	22ff      	movs	r2, #255	; 0xff
 8008c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008c90:	f001 fa48 	bl	800a124 <vPortExitCritical>
}
 8008c94:	bf00      	nop
 8008c96:	3710      	adds	r7, #16
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ca4:	f001 fa0e 	bl	800a0c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d102      	bne.n	8008cb6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	60fb      	str	r3, [r7, #12]
 8008cb4:	e001      	b.n	8008cba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008cba:	f001 fa33 	bl	800a124 <vPortExitCritical>

	return xReturn;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3710      	adds	r7, #16
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008cd0:	f001 f9f8 	bl	800a0c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d102      	bne.n	8008ce6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	60fb      	str	r3, [r7, #12]
 8008ce4:	e001      	b.n	8008cea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008cea:	f001 fa1b 	bl	800a124 <vPortExitCritical>

	return xReturn;
 8008cee:	68fb      	ldr	r3, [r7, #12]
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3710      	adds	r7, #16
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b08e      	sub	sp, #56	; 0x38
 8008cfc:	af04      	add	r7, sp, #16
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	60b9      	str	r1, [r7, #8]
 8008d02:	607a      	str	r2, [r7, #4]
 8008d04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d10a      	bne.n	8008d22 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d10:	f383 8811 	msr	BASEPRI, r3
 8008d14:	f3bf 8f6f 	isb	sy
 8008d18:	f3bf 8f4f 	dsb	sy
 8008d1c:	623b      	str	r3, [r7, #32]
}
 8008d1e:	bf00      	nop
 8008d20:	e7fe      	b.n	8008d20 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d10a      	bne.n	8008d3e <xTaskCreateStatic+0x46>
	__asm volatile
 8008d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d2c:	f383 8811 	msr	BASEPRI, r3
 8008d30:	f3bf 8f6f 	isb	sy
 8008d34:	f3bf 8f4f 	dsb	sy
 8008d38:	61fb      	str	r3, [r7, #28]
}
 8008d3a:	bf00      	nop
 8008d3c:	e7fe      	b.n	8008d3c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008d3e:	23b4      	movs	r3, #180	; 0xb4
 8008d40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	2bb4      	cmp	r3, #180	; 0xb4
 8008d46:	d00a      	beq.n	8008d5e <xTaskCreateStatic+0x66>
	__asm volatile
 8008d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d4c:	f383 8811 	msr	BASEPRI, r3
 8008d50:	f3bf 8f6f 	isb	sy
 8008d54:	f3bf 8f4f 	dsb	sy
 8008d58:	61bb      	str	r3, [r7, #24]
}
 8008d5a:	bf00      	nop
 8008d5c:	e7fe      	b.n	8008d5c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008d5e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d01e      	beq.n	8008da4 <xTaskCreateStatic+0xac>
 8008d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d01b      	beq.n	8008da4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d6e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d74:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d78:	2202      	movs	r2, #2
 8008d7a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008d7e:	2300      	movs	r3, #0
 8008d80:	9303      	str	r3, [sp, #12]
 8008d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d84:	9302      	str	r3, [sp, #8]
 8008d86:	f107 0314 	add.w	r3, r7, #20
 8008d8a:	9301      	str	r3, [sp, #4]
 8008d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8e:	9300      	str	r3, [sp, #0]
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	68b9      	ldr	r1, [r7, #8]
 8008d96:	68f8      	ldr	r0, [r7, #12]
 8008d98:	f000 f850 	bl	8008e3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d9e:	f000 f8eb 	bl	8008f78 <prvAddNewTaskToReadyList>
 8008da2:	e001      	b.n	8008da8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008da4:	2300      	movs	r3, #0
 8008da6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008da8:	697b      	ldr	r3, [r7, #20]
	}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3728      	adds	r7, #40	; 0x28
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b08c      	sub	sp, #48	; 0x30
 8008db6:	af04      	add	r7, sp, #16
 8008db8:	60f8      	str	r0, [r7, #12]
 8008dba:	60b9      	str	r1, [r7, #8]
 8008dbc:	603b      	str	r3, [r7, #0]
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008dc2:	88fb      	ldrh	r3, [r7, #6]
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f001 fa9e 	bl	800a308 <pvPortMalloc>
 8008dcc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00e      	beq.n	8008df2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008dd4:	20b4      	movs	r0, #180	; 0xb4
 8008dd6:	f001 fa97 	bl	800a308 <pvPortMalloc>
 8008dda:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d003      	beq.n	8008dea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008de2:	69fb      	ldr	r3, [r7, #28]
 8008de4:	697a      	ldr	r2, [r7, #20]
 8008de6:	631a      	str	r2, [r3, #48]	; 0x30
 8008de8:	e005      	b.n	8008df6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008dea:	6978      	ldr	r0, [r7, #20]
 8008dec:	f001 fb58 	bl	800a4a0 <vPortFree>
 8008df0:	e001      	b.n	8008df6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008df2:	2300      	movs	r3, #0
 8008df4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d017      	beq.n	8008e2c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008e04:	88fa      	ldrh	r2, [r7, #6]
 8008e06:	2300      	movs	r3, #0
 8008e08:	9303      	str	r3, [sp, #12]
 8008e0a:	69fb      	ldr	r3, [r7, #28]
 8008e0c:	9302      	str	r3, [sp, #8]
 8008e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e10:	9301      	str	r3, [sp, #4]
 8008e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e14:	9300      	str	r3, [sp, #0]
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	68b9      	ldr	r1, [r7, #8]
 8008e1a:	68f8      	ldr	r0, [r7, #12]
 8008e1c:	f000 f80e 	bl	8008e3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e20:	69f8      	ldr	r0, [r7, #28]
 8008e22:	f000 f8a9 	bl	8008f78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008e26:	2301      	movs	r3, #1
 8008e28:	61bb      	str	r3, [r7, #24]
 8008e2a:	e002      	b.n	8008e32 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e30:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008e32:	69bb      	ldr	r3, [r7, #24]
	}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3720      	adds	r7, #32
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b088      	sub	sp, #32
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	607a      	str	r2, [r7, #4]
 8008e48:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008e54:	3b01      	subs	r3, #1
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	4413      	add	r3, r2
 8008e5a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	f023 0307 	bic.w	r3, r3, #7
 8008e62:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	f003 0307 	and.w	r3, r3, #7
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00a      	beq.n	8008e84 <prvInitialiseNewTask+0x48>
	__asm volatile
 8008e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e72:	f383 8811 	msr	BASEPRI, r3
 8008e76:	f3bf 8f6f 	isb	sy
 8008e7a:	f3bf 8f4f 	dsb	sy
 8008e7e:	617b      	str	r3, [r7, #20]
}
 8008e80:	bf00      	nop
 8008e82:	e7fe      	b.n	8008e82 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d01f      	beq.n	8008eca <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	61fb      	str	r3, [r7, #28]
 8008e8e:	e012      	b.n	8008eb6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008e90:	68ba      	ldr	r2, [r7, #8]
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	4413      	add	r3, r2
 8008e96:	7819      	ldrb	r1, [r3, #0]
 8008e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	3334      	adds	r3, #52	; 0x34
 8008ea0:	460a      	mov	r2, r1
 8008ea2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008ea4:	68ba      	ldr	r2, [r7, #8]
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d006      	beq.n	8008ebe <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	61fb      	str	r3, [r7, #28]
 8008eb6:	69fb      	ldr	r3, [r7, #28]
 8008eb8:	2b0f      	cmp	r3, #15
 8008eba:	d9e9      	bls.n	8008e90 <prvInitialiseNewTask+0x54>
 8008ebc:	e000      	b.n	8008ec0 <prvInitialiseNewTask+0x84>
			{
				break;
 8008ebe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ec8:	e003      	b.n	8008ed2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ecc:	2200      	movs	r2, #0
 8008ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed4:	2b06      	cmp	r3, #6
 8008ed6:	d901      	bls.n	8008edc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008ed8:	2306      	movs	r3, #6
 8008eda:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ee0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ee6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eea:	2200      	movs	r2, #0
 8008eec:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef0:	3304      	adds	r3, #4
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f7fe ff0e 	bl	8007d14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efa:	3318      	adds	r3, #24
 8008efc:	4618      	mov	r0, r3
 8008efe:	f7fe ff09 	bl	8007d14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0a:	f1c3 0207 	rsb	r2, r3, #7
 8008f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f16:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f22:	2200      	movs	r2, #0
 8008f24:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2a:	334c      	adds	r3, #76	; 0x4c
 8008f2c:	2260      	movs	r2, #96	; 0x60
 8008f2e:	2100      	movs	r1, #0
 8008f30:	4618      	mov	r0, r3
 8008f32:	f001 fd04 	bl	800a93e <memset>
 8008f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f38:	4a0c      	ldr	r2, [pc, #48]	; (8008f6c <prvInitialiseNewTask+0x130>)
 8008f3a:	651a      	str	r2, [r3, #80]	; 0x50
 8008f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3e:	4a0c      	ldr	r2, [pc, #48]	; (8008f70 <prvInitialiseNewTask+0x134>)
 8008f40:	655a      	str	r2, [r3, #84]	; 0x54
 8008f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f44:	4a0b      	ldr	r2, [pc, #44]	; (8008f74 <prvInitialiseNewTask+0x138>)
 8008f46:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f48:	683a      	ldr	r2, [r7, #0]
 8008f4a:	68f9      	ldr	r1, [r7, #12]
 8008f4c:	69b8      	ldr	r0, [r7, #24]
 8008f4e:	f000 ff8f 	bl	8009e70 <pxPortInitialiseStack>
 8008f52:	4602      	mov	r2, r0
 8008f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f56:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d002      	beq.n	8008f64 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f62:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f64:	bf00      	nop
 8008f66:	3720      	adds	r7, #32
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}
 8008f6c:	0800f090 	.word	0x0800f090
 8008f70:	0800f0b0 	.word	0x0800f0b0
 8008f74:	0800f070 	.word	0x0800f070

08008f78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008f80:	f001 f8a0 	bl	800a0c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008f84:	4b2a      	ldr	r3, [pc, #168]	; (8009030 <prvAddNewTaskToReadyList+0xb8>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	3301      	adds	r3, #1
 8008f8a:	4a29      	ldr	r2, [pc, #164]	; (8009030 <prvAddNewTaskToReadyList+0xb8>)
 8008f8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008f8e:	4b29      	ldr	r3, [pc, #164]	; (8009034 <prvAddNewTaskToReadyList+0xbc>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d109      	bne.n	8008faa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008f96:	4a27      	ldr	r2, [pc, #156]	; (8009034 <prvAddNewTaskToReadyList+0xbc>)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008f9c:	4b24      	ldr	r3, [pc, #144]	; (8009030 <prvAddNewTaskToReadyList+0xb8>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d110      	bne.n	8008fc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008fa4:	f000 fc80 	bl	80098a8 <prvInitialiseTaskLists>
 8008fa8:	e00d      	b.n	8008fc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008faa:	4b23      	ldr	r3, [pc, #140]	; (8009038 <prvAddNewTaskToReadyList+0xc0>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d109      	bne.n	8008fc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008fb2:	4b20      	ldr	r3, [pc, #128]	; (8009034 <prvAddNewTaskToReadyList+0xbc>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d802      	bhi.n	8008fc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008fc0:	4a1c      	ldr	r2, [pc, #112]	; (8009034 <prvAddNewTaskToReadyList+0xbc>)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008fc6:	4b1d      	ldr	r3, [pc, #116]	; (800903c <prvAddNewTaskToReadyList+0xc4>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	3301      	adds	r3, #1
 8008fcc:	4a1b      	ldr	r2, [pc, #108]	; (800903c <prvAddNewTaskToReadyList+0xc4>)
 8008fce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	409a      	lsls	r2, r3
 8008fd8:	4b19      	ldr	r3, [pc, #100]	; (8009040 <prvAddNewTaskToReadyList+0xc8>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	4a18      	ldr	r2, [pc, #96]	; (8009040 <prvAddNewTaskToReadyList+0xc8>)
 8008fe0:	6013      	str	r3, [r2, #0]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	4413      	add	r3, r2
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	4a15      	ldr	r2, [pc, #84]	; (8009044 <prvAddNewTaskToReadyList+0xcc>)
 8008ff0:	441a      	add	r2, r3
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	3304      	adds	r3, #4
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	4610      	mov	r0, r2
 8008ffa:	f7fe fe98 	bl	8007d2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008ffe:	f001 f891 	bl	800a124 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009002:	4b0d      	ldr	r3, [pc, #52]	; (8009038 <prvAddNewTaskToReadyList+0xc0>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00e      	beq.n	8009028 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800900a:	4b0a      	ldr	r3, [pc, #40]	; (8009034 <prvAddNewTaskToReadyList+0xbc>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009014:	429a      	cmp	r2, r3
 8009016:	d207      	bcs.n	8009028 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009018:	4b0b      	ldr	r3, [pc, #44]	; (8009048 <prvAddNewTaskToReadyList+0xd0>)
 800901a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800901e:	601a      	str	r2, [r3, #0]
 8009020:	f3bf 8f4f 	dsb	sy
 8009024:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009028:	bf00      	nop
 800902a:	3708      	adds	r7, #8
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}
 8009030:	20000834 	.word	0x20000834
 8009034:	20000734 	.word	0x20000734
 8009038:	20000840 	.word	0x20000840
 800903c:	20000850 	.word	0x20000850
 8009040:	2000083c 	.word	0x2000083c
 8009044:	20000738 	.word	0x20000738
 8009048:	e000ed04 	.word	0xe000ed04

0800904c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009054:	2300      	movs	r3, #0
 8009056:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d017      	beq.n	800908e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800905e:	4b13      	ldr	r3, [pc, #76]	; (80090ac <vTaskDelay+0x60>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d00a      	beq.n	800907c <vTaskDelay+0x30>
	__asm volatile
 8009066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906a:	f383 8811 	msr	BASEPRI, r3
 800906e:	f3bf 8f6f 	isb	sy
 8009072:	f3bf 8f4f 	dsb	sy
 8009076:	60bb      	str	r3, [r7, #8]
}
 8009078:	bf00      	nop
 800907a:	e7fe      	b.n	800907a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800907c:	f000 f92e 	bl	80092dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009080:	2100      	movs	r1, #0
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 fe8e 	bl	8009da4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009088:	f000 f936 	bl	80092f8 <xTaskResumeAll>
 800908c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d107      	bne.n	80090a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009094:	4b06      	ldr	r3, [pc, #24]	; (80090b0 <vTaskDelay+0x64>)
 8009096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800909a:	601a      	str	r2, [r3, #0]
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80090a4:	bf00      	nop
 80090a6:	3710      	adds	r7, #16
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	2000085c 	.word	0x2000085c
 80090b0:	e000ed04 	.word	0xe000ed04

080090b4 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b088      	sub	sp, #32
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 80090be:	2300      	movs	r3, #0
 80090c0:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	2b06      	cmp	r3, #6
 80090c6:	d90a      	bls.n	80090de <vTaskPrioritySet+0x2a>
	__asm volatile
 80090c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090cc:	f383 8811 	msr	BASEPRI, r3
 80090d0:	f3bf 8f6f 	isb	sy
 80090d4:	f3bf 8f4f 	dsb	sy
 80090d8:	60fb      	str	r3, [r7, #12]
}
 80090da:	bf00      	nop
 80090dc:	e7fe      	b.n	80090dc <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	2b06      	cmp	r3, #6
 80090e2:	d901      	bls.n	80090e8 <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80090e4:	2306      	movs	r3, #6
 80090e6:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 80090e8:	f000 ffec 	bl	800a0c4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d102      	bne.n	80090f8 <vTaskPrioritySet+0x44>
 80090f2:	4b41      	ldr	r3, [pc, #260]	; (80091f8 <vTaskPrioritySet+0x144>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	e000      	b.n	80090fa <vTaskPrioritySet+0x46>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 80090fc:	69bb      	ldr	r3, [r7, #24]
 80090fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009100:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8009102:	697a      	ldr	r2, [r7, #20]
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	429a      	cmp	r2, r3
 8009108:	d06f      	beq.n	80091ea <vTaskPrioritySet+0x136>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 800910a:	683a      	ldr	r2, [r7, #0]
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	429a      	cmp	r2, r3
 8009110:	d90d      	bls.n	800912e <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 8009112:	4b39      	ldr	r3, [pc, #228]	; (80091f8 <vTaskPrioritySet+0x144>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	69ba      	ldr	r2, [r7, #24]
 8009118:	429a      	cmp	r2, r3
 800911a:	d00f      	beq.n	800913c <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800911c:	4b36      	ldr	r3, [pc, #216]	; (80091f8 <vTaskPrioritySet+0x144>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009122:	683a      	ldr	r2, [r7, #0]
 8009124:	429a      	cmp	r2, r3
 8009126:	d309      	bcc.n	800913c <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 8009128:	2301      	movs	r3, #1
 800912a:	61fb      	str	r3, [r7, #28]
 800912c:	e006      	b.n	800913c <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 800912e:	4b32      	ldr	r3, [pc, #200]	; (80091f8 <vTaskPrioritySet+0x144>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	69ba      	ldr	r2, [r7, #24]
 8009134:	429a      	cmp	r2, r3
 8009136:	d101      	bne.n	800913c <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8009138:	2301      	movs	r3, #1
 800913a:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800913c:	69bb      	ldr	r3, [r7, #24]
 800913e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009140:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8009142:	69bb      	ldr	r3, [r7, #24]
 8009144:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800914a:	429a      	cmp	r2, r3
 800914c:	d102      	bne.n	8009154 <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 800914e:	69bb      	ldr	r3, [r7, #24]
 8009150:	683a      	ldr	r2, [r7, #0]
 8009152:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8009154:	69bb      	ldr	r3, [r7, #24]
 8009156:	683a      	ldr	r2, [r7, #0]
 8009158:	645a      	str	r2, [r3, #68]	; 0x44
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800915a:	69bb      	ldr	r3, [r7, #24]
 800915c:	699b      	ldr	r3, [r3, #24]
 800915e:	2b00      	cmp	r3, #0
 8009160:	db04      	blt.n	800916c <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	f1c3 0207 	rsb	r2, r3, #7
 8009168:	69bb      	ldr	r3, [r7, #24]
 800916a:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800916c:	69bb      	ldr	r3, [r7, #24]
 800916e:	6959      	ldr	r1, [r3, #20]
 8009170:	693a      	ldr	r2, [r7, #16]
 8009172:	4613      	mov	r3, r2
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	4413      	add	r3, r2
 8009178:	009b      	lsls	r3, r3, #2
 800917a:	4a20      	ldr	r2, [pc, #128]	; (80091fc <vTaskPrioritySet+0x148>)
 800917c:	4413      	add	r3, r2
 800917e:	4299      	cmp	r1, r3
 8009180:	d128      	bne.n	80091d4 <vTaskPrioritySet+0x120>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	3304      	adds	r3, #4
 8009186:	4618      	mov	r0, r3
 8009188:	f7fe fe2e 	bl	8007de8 <uxListRemove>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d109      	bne.n	80091a6 <vTaskPrioritySet+0xf2>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8009192:	2201      	movs	r2, #1
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	fa02 f303 	lsl.w	r3, r2, r3
 800919a:	43da      	mvns	r2, r3
 800919c:	4b18      	ldr	r3, [pc, #96]	; (8009200 <vTaskPrioritySet+0x14c>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4013      	ands	r3, r2
 80091a2:	4a17      	ldr	r2, [pc, #92]	; (8009200 <vTaskPrioritySet+0x14c>)
 80091a4:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 80091a6:	69bb      	ldr	r3, [r7, #24]
 80091a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091aa:	2201      	movs	r2, #1
 80091ac:	409a      	lsls	r2, r3
 80091ae:	4b14      	ldr	r3, [pc, #80]	; (8009200 <vTaskPrioritySet+0x14c>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	4a12      	ldr	r2, [pc, #72]	; (8009200 <vTaskPrioritySet+0x14c>)
 80091b6:	6013      	str	r3, [r2, #0]
 80091b8:	69bb      	ldr	r3, [r7, #24]
 80091ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091bc:	4613      	mov	r3, r2
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	4413      	add	r3, r2
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	4a0d      	ldr	r2, [pc, #52]	; (80091fc <vTaskPrioritySet+0x148>)
 80091c6:	441a      	add	r2, r3
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	3304      	adds	r3, #4
 80091cc:	4619      	mov	r1, r3
 80091ce:	4610      	mov	r0, r2
 80091d0:	f7fe fdad 	bl	8007d2e <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 80091d4:	69fb      	ldr	r3, [r7, #28]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d007      	beq.n	80091ea <vTaskPrioritySet+0x136>
				{
					taskYIELD_IF_USING_PREEMPTION();
 80091da:	4b0a      	ldr	r3, [pc, #40]	; (8009204 <vTaskPrioritySet+0x150>)
 80091dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091e0:	601a      	str	r2, [r3, #0]
 80091e2:	f3bf 8f4f 	dsb	sy
 80091e6:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 80091ea:	f000 ff9b 	bl	800a124 <vPortExitCritical>
	}
 80091ee:	bf00      	nop
 80091f0:	3720      	adds	r7, #32
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	20000734 	.word	0x20000734
 80091fc:	20000738 	.word	0x20000738
 8009200:	2000083c 	.word	0x2000083c
 8009204:	e000ed04 	.word	0xe000ed04

08009208 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b08a      	sub	sp, #40	; 0x28
 800920c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800920e:	2300      	movs	r3, #0
 8009210:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009212:	2300      	movs	r3, #0
 8009214:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009216:	463a      	mov	r2, r7
 8009218:	1d39      	adds	r1, r7, #4
 800921a:	f107 0308 	add.w	r3, r7, #8
 800921e:	4618      	mov	r0, r3
 8009220:	f7f9 fec8 	bl	8002fb4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009224:	6839      	ldr	r1, [r7, #0]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	68ba      	ldr	r2, [r7, #8]
 800922a:	9202      	str	r2, [sp, #8]
 800922c:	9301      	str	r3, [sp, #4]
 800922e:	2300      	movs	r3, #0
 8009230:	9300      	str	r3, [sp, #0]
 8009232:	2300      	movs	r3, #0
 8009234:	460a      	mov	r2, r1
 8009236:	4921      	ldr	r1, [pc, #132]	; (80092bc <vTaskStartScheduler+0xb4>)
 8009238:	4821      	ldr	r0, [pc, #132]	; (80092c0 <vTaskStartScheduler+0xb8>)
 800923a:	f7ff fd5d 	bl	8008cf8 <xTaskCreateStatic>
 800923e:	4603      	mov	r3, r0
 8009240:	4a20      	ldr	r2, [pc, #128]	; (80092c4 <vTaskStartScheduler+0xbc>)
 8009242:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009244:	4b1f      	ldr	r3, [pc, #124]	; (80092c4 <vTaskStartScheduler+0xbc>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d002      	beq.n	8009252 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800924c:	2301      	movs	r3, #1
 800924e:	617b      	str	r3, [r7, #20]
 8009250:	e001      	b.n	8009256 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009252:	2300      	movs	r3, #0
 8009254:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	2b01      	cmp	r3, #1
 800925a:	d11b      	bne.n	8009294 <vTaskStartScheduler+0x8c>
	__asm volatile
 800925c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009260:	f383 8811 	msr	BASEPRI, r3
 8009264:	f3bf 8f6f 	isb	sy
 8009268:	f3bf 8f4f 	dsb	sy
 800926c:	613b      	str	r3, [r7, #16]
}
 800926e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009270:	4b15      	ldr	r3, [pc, #84]	; (80092c8 <vTaskStartScheduler+0xc0>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	334c      	adds	r3, #76	; 0x4c
 8009276:	4a15      	ldr	r2, [pc, #84]	; (80092cc <vTaskStartScheduler+0xc4>)
 8009278:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800927a:	4b15      	ldr	r3, [pc, #84]	; (80092d0 <vTaskStartScheduler+0xc8>)
 800927c:	f04f 32ff 	mov.w	r2, #4294967295
 8009280:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009282:	4b14      	ldr	r3, [pc, #80]	; (80092d4 <vTaskStartScheduler+0xcc>)
 8009284:	2201      	movs	r2, #1
 8009286:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009288:	4b13      	ldr	r3, [pc, #76]	; (80092d8 <vTaskStartScheduler+0xd0>)
 800928a:	2200      	movs	r2, #0
 800928c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800928e:	f000 fe77 	bl	8009f80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009292:	e00e      	b.n	80092b2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800929a:	d10a      	bne.n	80092b2 <vTaskStartScheduler+0xaa>
	__asm volatile
 800929c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a0:	f383 8811 	msr	BASEPRI, r3
 80092a4:	f3bf 8f6f 	isb	sy
 80092a8:	f3bf 8f4f 	dsb	sy
 80092ac:	60fb      	str	r3, [r7, #12]
}
 80092ae:	bf00      	nop
 80092b0:	e7fe      	b.n	80092b0 <vTaskStartScheduler+0xa8>
}
 80092b2:	bf00      	nop
 80092b4:	3718      	adds	r7, #24
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	0800f048 	.word	0x0800f048
 80092c0:	08009879 	.word	0x08009879
 80092c4:	20000858 	.word	0x20000858
 80092c8:	20000734 	.word	0x20000734
 80092cc:	20000058 	.word	0x20000058
 80092d0:	20000854 	.word	0x20000854
 80092d4:	20000840 	.word	0x20000840
 80092d8:	20000838 	.word	0x20000838

080092dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80092dc:	b480      	push	{r7}
 80092de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80092e0:	4b04      	ldr	r3, [pc, #16]	; (80092f4 <vTaskSuspendAll+0x18>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	3301      	adds	r3, #1
 80092e6:	4a03      	ldr	r2, [pc, #12]	; (80092f4 <vTaskSuspendAll+0x18>)
 80092e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80092ea:	bf00      	nop
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr
 80092f4:	2000085c 	.word	0x2000085c

080092f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80092fe:	2300      	movs	r3, #0
 8009300:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009302:	2300      	movs	r3, #0
 8009304:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009306:	4b41      	ldr	r3, [pc, #260]	; (800940c <xTaskResumeAll+0x114>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d10a      	bne.n	8009324 <xTaskResumeAll+0x2c>
	__asm volatile
 800930e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009312:	f383 8811 	msr	BASEPRI, r3
 8009316:	f3bf 8f6f 	isb	sy
 800931a:	f3bf 8f4f 	dsb	sy
 800931e:	603b      	str	r3, [r7, #0]
}
 8009320:	bf00      	nop
 8009322:	e7fe      	b.n	8009322 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009324:	f000 fece 	bl	800a0c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009328:	4b38      	ldr	r3, [pc, #224]	; (800940c <xTaskResumeAll+0x114>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	3b01      	subs	r3, #1
 800932e:	4a37      	ldr	r2, [pc, #220]	; (800940c <xTaskResumeAll+0x114>)
 8009330:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009332:	4b36      	ldr	r3, [pc, #216]	; (800940c <xTaskResumeAll+0x114>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d161      	bne.n	80093fe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800933a:	4b35      	ldr	r3, [pc, #212]	; (8009410 <xTaskResumeAll+0x118>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d05d      	beq.n	80093fe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009342:	e02e      	b.n	80093a2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009344:	4b33      	ldr	r3, [pc, #204]	; (8009414 <xTaskResumeAll+0x11c>)
 8009346:	68db      	ldr	r3, [r3, #12]
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	3318      	adds	r3, #24
 8009350:	4618      	mov	r0, r3
 8009352:	f7fe fd49 	bl	8007de8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	3304      	adds	r3, #4
 800935a:	4618      	mov	r0, r3
 800935c:	f7fe fd44 	bl	8007de8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009364:	2201      	movs	r2, #1
 8009366:	409a      	lsls	r2, r3
 8009368:	4b2b      	ldr	r3, [pc, #172]	; (8009418 <xTaskResumeAll+0x120>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4313      	orrs	r3, r2
 800936e:	4a2a      	ldr	r2, [pc, #168]	; (8009418 <xTaskResumeAll+0x120>)
 8009370:	6013      	str	r3, [r2, #0]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009376:	4613      	mov	r3, r2
 8009378:	009b      	lsls	r3, r3, #2
 800937a:	4413      	add	r3, r2
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	4a27      	ldr	r2, [pc, #156]	; (800941c <xTaskResumeAll+0x124>)
 8009380:	441a      	add	r2, r3
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	3304      	adds	r3, #4
 8009386:	4619      	mov	r1, r3
 8009388:	4610      	mov	r0, r2
 800938a:	f7fe fcd0 	bl	8007d2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009392:	4b23      	ldr	r3, [pc, #140]	; (8009420 <xTaskResumeAll+0x128>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009398:	429a      	cmp	r2, r3
 800939a:	d302      	bcc.n	80093a2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800939c:	4b21      	ldr	r3, [pc, #132]	; (8009424 <xTaskResumeAll+0x12c>)
 800939e:	2201      	movs	r2, #1
 80093a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093a2:	4b1c      	ldr	r3, [pc, #112]	; (8009414 <xTaskResumeAll+0x11c>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d1cc      	bne.n	8009344 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d001      	beq.n	80093b4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80093b0:	f000 fb1c 	bl	80099ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80093b4:	4b1c      	ldr	r3, [pc, #112]	; (8009428 <xTaskResumeAll+0x130>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d010      	beq.n	80093e2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80093c0:	f000 f836 	bl	8009430 <xTaskIncrementTick>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d002      	beq.n	80093d0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80093ca:	4b16      	ldr	r3, [pc, #88]	; (8009424 <xTaskResumeAll+0x12c>)
 80093cc:	2201      	movs	r2, #1
 80093ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	3b01      	subs	r3, #1
 80093d4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d1f1      	bne.n	80093c0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80093dc:	4b12      	ldr	r3, [pc, #72]	; (8009428 <xTaskResumeAll+0x130>)
 80093de:	2200      	movs	r2, #0
 80093e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80093e2:	4b10      	ldr	r3, [pc, #64]	; (8009424 <xTaskResumeAll+0x12c>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d009      	beq.n	80093fe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80093ea:	2301      	movs	r3, #1
 80093ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80093ee:	4b0f      	ldr	r3, [pc, #60]	; (800942c <xTaskResumeAll+0x134>)
 80093f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093f4:	601a      	str	r2, [r3, #0]
 80093f6:	f3bf 8f4f 	dsb	sy
 80093fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80093fe:	f000 fe91 	bl	800a124 <vPortExitCritical>

	return xAlreadyYielded;
 8009402:	68bb      	ldr	r3, [r7, #8]
}
 8009404:	4618      	mov	r0, r3
 8009406:	3710      	adds	r7, #16
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}
 800940c:	2000085c 	.word	0x2000085c
 8009410:	20000834 	.word	0x20000834
 8009414:	200007f4 	.word	0x200007f4
 8009418:	2000083c 	.word	0x2000083c
 800941c:	20000738 	.word	0x20000738
 8009420:	20000734 	.word	0x20000734
 8009424:	20000848 	.word	0x20000848
 8009428:	20000844 	.word	0x20000844
 800942c:	e000ed04 	.word	0xe000ed04

08009430 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b086      	sub	sp, #24
 8009434:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009436:	2300      	movs	r3, #0
 8009438:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800943a:	4b4e      	ldr	r3, [pc, #312]	; (8009574 <xTaskIncrementTick+0x144>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	f040 808e 	bne.w	8009560 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009444:	4b4c      	ldr	r3, [pc, #304]	; (8009578 <xTaskIncrementTick+0x148>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	3301      	adds	r3, #1
 800944a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800944c:	4a4a      	ldr	r2, [pc, #296]	; (8009578 <xTaskIncrementTick+0x148>)
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d120      	bne.n	800949a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009458:	4b48      	ldr	r3, [pc, #288]	; (800957c <xTaskIncrementTick+0x14c>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d00a      	beq.n	8009478 <xTaskIncrementTick+0x48>
	__asm volatile
 8009462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009466:	f383 8811 	msr	BASEPRI, r3
 800946a:	f3bf 8f6f 	isb	sy
 800946e:	f3bf 8f4f 	dsb	sy
 8009472:	603b      	str	r3, [r7, #0]
}
 8009474:	bf00      	nop
 8009476:	e7fe      	b.n	8009476 <xTaskIncrementTick+0x46>
 8009478:	4b40      	ldr	r3, [pc, #256]	; (800957c <xTaskIncrementTick+0x14c>)
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	60fb      	str	r3, [r7, #12]
 800947e:	4b40      	ldr	r3, [pc, #256]	; (8009580 <xTaskIncrementTick+0x150>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a3e      	ldr	r2, [pc, #248]	; (800957c <xTaskIncrementTick+0x14c>)
 8009484:	6013      	str	r3, [r2, #0]
 8009486:	4a3e      	ldr	r2, [pc, #248]	; (8009580 <xTaskIncrementTick+0x150>)
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	6013      	str	r3, [r2, #0]
 800948c:	4b3d      	ldr	r3, [pc, #244]	; (8009584 <xTaskIncrementTick+0x154>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	3301      	adds	r3, #1
 8009492:	4a3c      	ldr	r2, [pc, #240]	; (8009584 <xTaskIncrementTick+0x154>)
 8009494:	6013      	str	r3, [r2, #0]
 8009496:	f000 faa9 	bl	80099ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800949a:	4b3b      	ldr	r3, [pc, #236]	; (8009588 <xTaskIncrementTick+0x158>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	693a      	ldr	r2, [r7, #16]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d348      	bcc.n	8009536 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094a4:	4b35      	ldr	r3, [pc, #212]	; (800957c <xTaskIncrementTick+0x14c>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d104      	bne.n	80094b8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094ae:	4b36      	ldr	r3, [pc, #216]	; (8009588 <xTaskIncrementTick+0x158>)
 80094b0:	f04f 32ff 	mov.w	r2, #4294967295
 80094b4:	601a      	str	r2, [r3, #0]
					break;
 80094b6:	e03e      	b.n	8009536 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094b8:	4b30      	ldr	r3, [pc, #192]	; (800957c <xTaskIncrementTick+0x14c>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	68db      	ldr	r3, [r3, #12]
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80094c8:	693a      	ldr	r2, [r7, #16]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d203      	bcs.n	80094d8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80094d0:	4a2d      	ldr	r2, [pc, #180]	; (8009588 <xTaskIncrementTick+0x158>)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80094d6:	e02e      	b.n	8009536 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	3304      	adds	r3, #4
 80094dc:	4618      	mov	r0, r3
 80094de:	f7fe fc83 	bl	8007de8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d004      	beq.n	80094f4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	3318      	adds	r3, #24
 80094ee:	4618      	mov	r0, r3
 80094f0:	f7fe fc7a 	bl	8007de8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f8:	2201      	movs	r2, #1
 80094fa:	409a      	lsls	r2, r3
 80094fc:	4b23      	ldr	r3, [pc, #140]	; (800958c <xTaskIncrementTick+0x15c>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4313      	orrs	r3, r2
 8009502:	4a22      	ldr	r2, [pc, #136]	; (800958c <xTaskIncrementTick+0x15c>)
 8009504:	6013      	str	r3, [r2, #0]
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800950a:	4613      	mov	r3, r2
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	4413      	add	r3, r2
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	4a1f      	ldr	r2, [pc, #124]	; (8009590 <xTaskIncrementTick+0x160>)
 8009514:	441a      	add	r2, r3
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	3304      	adds	r3, #4
 800951a:	4619      	mov	r1, r3
 800951c:	4610      	mov	r0, r2
 800951e:	f7fe fc06 	bl	8007d2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009526:	4b1b      	ldr	r3, [pc, #108]	; (8009594 <xTaskIncrementTick+0x164>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800952c:	429a      	cmp	r2, r3
 800952e:	d3b9      	bcc.n	80094a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009530:	2301      	movs	r3, #1
 8009532:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009534:	e7b6      	b.n	80094a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009536:	4b17      	ldr	r3, [pc, #92]	; (8009594 <xTaskIncrementTick+0x164>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800953c:	4914      	ldr	r1, [pc, #80]	; (8009590 <xTaskIncrementTick+0x160>)
 800953e:	4613      	mov	r3, r2
 8009540:	009b      	lsls	r3, r3, #2
 8009542:	4413      	add	r3, r2
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	440b      	add	r3, r1
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2b01      	cmp	r3, #1
 800954c:	d901      	bls.n	8009552 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800954e:	2301      	movs	r3, #1
 8009550:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009552:	4b11      	ldr	r3, [pc, #68]	; (8009598 <xTaskIncrementTick+0x168>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d007      	beq.n	800956a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800955a:	2301      	movs	r3, #1
 800955c:	617b      	str	r3, [r7, #20]
 800955e:	e004      	b.n	800956a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009560:	4b0e      	ldr	r3, [pc, #56]	; (800959c <xTaskIncrementTick+0x16c>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	3301      	adds	r3, #1
 8009566:	4a0d      	ldr	r2, [pc, #52]	; (800959c <xTaskIncrementTick+0x16c>)
 8009568:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800956a:	697b      	ldr	r3, [r7, #20]
}
 800956c:	4618      	mov	r0, r3
 800956e:	3718      	adds	r7, #24
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}
 8009574:	2000085c 	.word	0x2000085c
 8009578:	20000838 	.word	0x20000838
 800957c:	200007ec 	.word	0x200007ec
 8009580:	200007f0 	.word	0x200007f0
 8009584:	2000084c 	.word	0x2000084c
 8009588:	20000854 	.word	0x20000854
 800958c:	2000083c 	.word	0x2000083c
 8009590:	20000738 	.word	0x20000738
 8009594:	20000734 	.word	0x20000734
 8009598:	20000848 	.word	0x20000848
 800959c:	20000844 	.word	0x20000844

080095a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80095a0:	b480      	push	{r7}
 80095a2:	b087      	sub	sp, #28
 80095a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80095a6:	4b29      	ldr	r3, [pc, #164]	; (800964c <vTaskSwitchContext+0xac>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d003      	beq.n	80095b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80095ae:	4b28      	ldr	r3, [pc, #160]	; (8009650 <vTaskSwitchContext+0xb0>)
 80095b0:	2201      	movs	r2, #1
 80095b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80095b4:	e044      	b.n	8009640 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80095b6:	4b26      	ldr	r3, [pc, #152]	; (8009650 <vTaskSwitchContext+0xb0>)
 80095b8:	2200      	movs	r2, #0
 80095ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095bc:	4b25      	ldr	r3, [pc, #148]	; (8009654 <vTaskSwitchContext+0xb4>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	fab3 f383 	clz	r3, r3
 80095c8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80095ca:	7afb      	ldrb	r3, [r7, #11]
 80095cc:	f1c3 031f 	rsb	r3, r3, #31
 80095d0:	617b      	str	r3, [r7, #20]
 80095d2:	4921      	ldr	r1, [pc, #132]	; (8009658 <vTaskSwitchContext+0xb8>)
 80095d4:	697a      	ldr	r2, [r7, #20]
 80095d6:	4613      	mov	r3, r2
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	4413      	add	r3, r2
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	440b      	add	r3, r1
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d10a      	bne.n	80095fc <vTaskSwitchContext+0x5c>
	__asm volatile
 80095e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ea:	f383 8811 	msr	BASEPRI, r3
 80095ee:	f3bf 8f6f 	isb	sy
 80095f2:	f3bf 8f4f 	dsb	sy
 80095f6:	607b      	str	r3, [r7, #4]
}
 80095f8:	bf00      	nop
 80095fa:	e7fe      	b.n	80095fa <vTaskSwitchContext+0x5a>
 80095fc:	697a      	ldr	r2, [r7, #20]
 80095fe:	4613      	mov	r3, r2
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	4413      	add	r3, r2
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	4a14      	ldr	r2, [pc, #80]	; (8009658 <vTaskSwitchContext+0xb8>)
 8009608:	4413      	add	r3, r2
 800960a:	613b      	str	r3, [r7, #16]
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	685a      	ldr	r2, [r3, #4]
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	605a      	str	r2, [r3, #4]
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	685a      	ldr	r2, [r3, #4]
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	3308      	adds	r3, #8
 800961e:	429a      	cmp	r2, r3
 8009620:	d104      	bne.n	800962c <vTaskSwitchContext+0x8c>
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	685a      	ldr	r2, [r3, #4]
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	605a      	str	r2, [r3, #4]
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	68db      	ldr	r3, [r3, #12]
 8009632:	4a0a      	ldr	r2, [pc, #40]	; (800965c <vTaskSwitchContext+0xbc>)
 8009634:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009636:	4b09      	ldr	r3, [pc, #36]	; (800965c <vTaskSwitchContext+0xbc>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	334c      	adds	r3, #76	; 0x4c
 800963c:	4a08      	ldr	r2, [pc, #32]	; (8009660 <vTaskSwitchContext+0xc0>)
 800963e:	6013      	str	r3, [r2, #0]
}
 8009640:	bf00      	nop
 8009642:	371c      	adds	r7, #28
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr
 800964c:	2000085c 	.word	0x2000085c
 8009650:	20000848 	.word	0x20000848
 8009654:	2000083c 	.word	0x2000083c
 8009658:	20000738 	.word	0x20000738
 800965c:	20000734 	.word	0x20000734
 8009660:	20000058 	.word	0x20000058

08009664 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d10a      	bne.n	800968a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009678:	f383 8811 	msr	BASEPRI, r3
 800967c:	f3bf 8f6f 	isb	sy
 8009680:	f3bf 8f4f 	dsb	sy
 8009684:	60fb      	str	r3, [r7, #12]
}
 8009686:	bf00      	nop
 8009688:	e7fe      	b.n	8009688 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800968a:	4b07      	ldr	r3, [pc, #28]	; (80096a8 <vTaskPlaceOnEventList+0x44>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	3318      	adds	r3, #24
 8009690:	4619      	mov	r1, r3
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f7fe fb6f 	bl	8007d76 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009698:	2101      	movs	r1, #1
 800969a:	6838      	ldr	r0, [r7, #0]
 800969c:	f000 fb82 	bl	8009da4 <prvAddCurrentTaskToDelayedList>
}
 80096a0:	bf00      	nop
 80096a2:	3710      	adds	r7, #16
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	20000734 	.word	0x20000734

080096ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b086      	sub	sp, #24
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	68db      	ldr	r3, [r3, #12]
 80096ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d10a      	bne.n	80096d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80096c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c6:	f383 8811 	msr	BASEPRI, r3
 80096ca:	f3bf 8f6f 	isb	sy
 80096ce:	f3bf 8f4f 	dsb	sy
 80096d2:	60fb      	str	r3, [r7, #12]
}
 80096d4:	bf00      	nop
 80096d6:	e7fe      	b.n	80096d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	3318      	adds	r3, #24
 80096dc:	4618      	mov	r0, r3
 80096de:	f7fe fb83 	bl	8007de8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096e2:	4b1d      	ldr	r3, [pc, #116]	; (8009758 <xTaskRemoveFromEventList+0xac>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d11c      	bne.n	8009724 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80096ea:	693b      	ldr	r3, [r7, #16]
 80096ec:	3304      	adds	r3, #4
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7fe fb7a 	bl	8007de8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f8:	2201      	movs	r2, #1
 80096fa:	409a      	lsls	r2, r3
 80096fc:	4b17      	ldr	r3, [pc, #92]	; (800975c <xTaskRemoveFromEventList+0xb0>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4313      	orrs	r3, r2
 8009702:	4a16      	ldr	r2, [pc, #88]	; (800975c <xTaskRemoveFromEventList+0xb0>)
 8009704:	6013      	str	r3, [r2, #0]
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800970a:	4613      	mov	r3, r2
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	4413      	add	r3, r2
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	4a13      	ldr	r2, [pc, #76]	; (8009760 <xTaskRemoveFromEventList+0xb4>)
 8009714:	441a      	add	r2, r3
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	3304      	adds	r3, #4
 800971a:	4619      	mov	r1, r3
 800971c:	4610      	mov	r0, r2
 800971e:	f7fe fb06 	bl	8007d2e <vListInsertEnd>
 8009722:	e005      	b.n	8009730 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	3318      	adds	r3, #24
 8009728:	4619      	mov	r1, r3
 800972a:	480e      	ldr	r0, [pc, #56]	; (8009764 <xTaskRemoveFromEventList+0xb8>)
 800972c:	f7fe faff 	bl	8007d2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009734:	4b0c      	ldr	r3, [pc, #48]	; (8009768 <xTaskRemoveFromEventList+0xbc>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800973a:	429a      	cmp	r2, r3
 800973c:	d905      	bls.n	800974a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800973e:	2301      	movs	r3, #1
 8009740:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009742:	4b0a      	ldr	r3, [pc, #40]	; (800976c <xTaskRemoveFromEventList+0xc0>)
 8009744:	2201      	movs	r2, #1
 8009746:	601a      	str	r2, [r3, #0]
 8009748:	e001      	b.n	800974e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800974a:	2300      	movs	r3, #0
 800974c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800974e:	697b      	ldr	r3, [r7, #20]
}
 8009750:	4618      	mov	r0, r3
 8009752:	3718      	adds	r7, #24
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	2000085c 	.word	0x2000085c
 800975c:	2000083c 	.word	0x2000083c
 8009760:	20000738 	.word	0x20000738
 8009764:	200007f4 	.word	0x200007f4
 8009768:	20000734 	.word	0x20000734
 800976c:	20000848 	.word	0x20000848

08009770 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009770:	b480      	push	{r7}
 8009772:	b083      	sub	sp, #12
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009778:	4b06      	ldr	r3, [pc, #24]	; (8009794 <vTaskInternalSetTimeOutState+0x24>)
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009780:	4b05      	ldr	r3, [pc, #20]	; (8009798 <vTaskInternalSetTimeOutState+0x28>)
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	605a      	str	r2, [r3, #4]
}
 8009788:	bf00      	nop
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr
 8009794:	2000084c 	.word	0x2000084c
 8009798:	20000838 	.word	0x20000838

0800979c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b088      	sub	sp, #32
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d10a      	bne.n	80097c2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80097ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b0:	f383 8811 	msr	BASEPRI, r3
 80097b4:	f3bf 8f6f 	isb	sy
 80097b8:	f3bf 8f4f 	dsb	sy
 80097bc:	613b      	str	r3, [r7, #16]
}
 80097be:	bf00      	nop
 80097c0:	e7fe      	b.n	80097c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d10a      	bne.n	80097de <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80097c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097cc:	f383 8811 	msr	BASEPRI, r3
 80097d0:	f3bf 8f6f 	isb	sy
 80097d4:	f3bf 8f4f 	dsb	sy
 80097d8:	60fb      	str	r3, [r7, #12]
}
 80097da:	bf00      	nop
 80097dc:	e7fe      	b.n	80097dc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80097de:	f000 fc71 	bl	800a0c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80097e2:	4b1d      	ldr	r3, [pc, #116]	; (8009858 <xTaskCheckForTimeOut+0xbc>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	69ba      	ldr	r2, [r7, #24]
 80097ee:	1ad3      	subs	r3, r2, r3
 80097f0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097fa:	d102      	bne.n	8009802 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80097fc:	2300      	movs	r3, #0
 80097fe:	61fb      	str	r3, [r7, #28]
 8009800:	e023      	b.n	800984a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	4b15      	ldr	r3, [pc, #84]	; (800985c <xTaskCheckForTimeOut+0xc0>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	429a      	cmp	r2, r3
 800980c:	d007      	beq.n	800981e <xTaskCheckForTimeOut+0x82>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	69ba      	ldr	r2, [r7, #24]
 8009814:	429a      	cmp	r2, r3
 8009816:	d302      	bcc.n	800981e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009818:	2301      	movs	r3, #1
 800981a:	61fb      	str	r3, [r7, #28]
 800981c:	e015      	b.n	800984a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	697a      	ldr	r2, [r7, #20]
 8009824:	429a      	cmp	r2, r3
 8009826:	d20b      	bcs.n	8009840 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	1ad2      	subs	r2, r2, r3
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f7ff ff9b 	bl	8009770 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800983a:	2300      	movs	r3, #0
 800983c:	61fb      	str	r3, [r7, #28]
 800983e:	e004      	b.n	800984a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	2200      	movs	r2, #0
 8009844:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009846:	2301      	movs	r3, #1
 8009848:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800984a:	f000 fc6b 	bl	800a124 <vPortExitCritical>

	return xReturn;
 800984e:	69fb      	ldr	r3, [r7, #28]
}
 8009850:	4618      	mov	r0, r3
 8009852:	3720      	adds	r7, #32
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}
 8009858:	20000838 	.word	0x20000838
 800985c:	2000084c 	.word	0x2000084c

08009860 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009860:	b480      	push	{r7}
 8009862:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009864:	4b03      	ldr	r3, [pc, #12]	; (8009874 <vTaskMissedYield+0x14>)
 8009866:	2201      	movs	r2, #1
 8009868:	601a      	str	r2, [r3, #0]
}
 800986a:	bf00      	nop
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr
 8009874:	20000848 	.word	0x20000848

08009878 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009880:	f000 f852 	bl	8009928 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009884:	4b06      	ldr	r3, [pc, #24]	; (80098a0 <prvIdleTask+0x28>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2b01      	cmp	r3, #1
 800988a:	d9f9      	bls.n	8009880 <prvIdleTask+0x8>
			{
				taskYIELD();
 800988c:	4b05      	ldr	r3, [pc, #20]	; (80098a4 <prvIdleTask+0x2c>)
 800988e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009892:	601a      	str	r2, [r3, #0]
 8009894:	f3bf 8f4f 	dsb	sy
 8009898:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800989c:	e7f0      	b.n	8009880 <prvIdleTask+0x8>
 800989e:	bf00      	nop
 80098a0:	20000738 	.word	0x20000738
 80098a4:	e000ed04 	.word	0xe000ed04

080098a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b082      	sub	sp, #8
 80098ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098ae:	2300      	movs	r3, #0
 80098b0:	607b      	str	r3, [r7, #4]
 80098b2:	e00c      	b.n	80098ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	4613      	mov	r3, r2
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	4413      	add	r3, r2
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	4a12      	ldr	r2, [pc, #72]	; (8009908 <prvInitialiseTaskLists+0x60>)
 80098c0:	4413      	add	r3, r2
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7fe fa06 	bl	8007cd4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	3301      	adds	r3, #1
 80098cc:	607b      	str	r3, [r7, #4]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2b06      	cmp	r3, #6
 80098d2:	d9ef      	bls.n	80098b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80098d4:	480d      	ldr	r0, [pc, #52]	; (800990c <prvInitialiseTaskLists+0x64>)
 80098d6:	f7fe f9fd 	bl	8007cd4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80098da:	480d      	ldr	r0, [pc, #52]	; (8009910 <prvInitialiseTaskLists+0x68>)
 80098dc:	f7fe f9fa 	bl	8007cd4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80098e0:	480c      	ldr	r0, [pc, #48]	; (8009914 <prvInitialiseTaskLists+0x6c>)
 80098e2:	f7fe f9f7 	bl	8007cd4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80098e6:	480c      	ldr	r0, [pc, #48]	; (8009918 <prvInitialiseTaskLists+0x70>)
 80098e8:	f7fe f9f4 	bl	8007cd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80098ec:	480b      	ldr	r0, [pc, #44]	; (800991c <prvInitialiseTaskLists+0x74>)
 80098ee:	f7fe f9f1 	bl	8007cd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80098f2:	4b0b      	ldr	r3, [pc, #44]	; (8009920 <prvInitialiseTaskLists+0x78>)
 80098f4:	4a05      	ldr	r2, [pc, #20]	; (800990c <prvInitialiseTaskLists+0x64>)
 80098f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80098f8:	4b0a      	ldr	r3, [pc, #40]	; (8009924 <prvInitialiseTaskLists+0x7c>)
 80098fa:	4a05      	ldr	r2, [pc, #20]	; (8009910 <prvInitialiseTaskLists+0x68>)
 80098fc:	601a      	str	r2, [r3, #0]
}
 80098fe:	bf00      	nop
 8009900:	3708      	adds	r7, #8
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	20000738 	.word	0x20000738
 800990c:	200007c4 	.word	0x200007c4
 8009910:	200007d8 	.word	0x200007d8
 8009914:	200007f4 	.word	0x200007f4
 8009918:	20000808 	.word	0x20000808
 800991c:	20000820 	.word	0x20000820
 8009920:	200007ec 	.word	0x200007ec
 8009924:	200007f0 	.word	0x200007f0

08009928 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800992e:	e019      	b.n	8009964 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009930:	f000 fbc8 	bl	800a0c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009934:	4b10      	ldr	r3, [pc, #64]	; (8009978 <prvCheckTasksWaitingTermination+0x50>)
 8009936:	68db      	ldr	r3, [r3, #12]
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	3304      	adds	r3, #4
 8009940:	4618      	mov	r0, r3
 8009942:	f7fe fa51 	bl	8007de8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009946:	4b0d      	ldr	r3, [pc, #52]	; (800997c <prvCheckTasksWaitingTermination+0x54>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	3b01      	subs	r3, #1
 800994c:	4a0b      	ldr	r2, [pc, #44]	; (800997c <prvCheckTasksWaitingTermination+0x54>)
 800994e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009950:	4b0b      	ldr	r3, [pc, #44]	; (8009980 <prvCheckTasksWaitingTermination+0x58>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	3b01      	subs	r3, #1
 8009956:	4a0a      	ldr	r2, [pc, #40]	; (8009980 <prvCheckTasksWaitingTermination+0x58>)
 8009958:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800995a:	f000 fbe3 	bl	800a124 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 f810 	bl	8009984 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009964:	4b06      	ldr	r3, [pc, #24]	; (8009980 <prvCheckTasksWaitingTermination+0x58>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d1e1      	bne.n	8009930 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800996c:	bf00      	nop
 800996e:	bf00      	nop
 8009970:	3708      	adds	r7, #8
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	20000808 	.word	0x20000808
 800997c:	20000834 	.word	0x20000834
 8009980:	2000081c 	.word	0x2000081c

08009984 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009984:	b580      	push	{r7, lr}
 8009986:	b084      	sub	sp, #16
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	334c      	adds	r3, #76	; 0x4c
 8009990:	4618      	mov	r0, r3
 8009992:	f001 fd77 	bl	800b484 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800999c:	2b00      	cmp	r3, #0
 800999e:	d108      	bne.n	80099b2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099a4:	4618      	mov	r0, r3
 80099a6:	f000 fd7b 	bl	800a4a0 <vPortFree>
				vPortFree( pxTCB );
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 fd78 	bl	800a4a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80099b0:	e018      	b.n	80099e4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d103      	bne.n	80099c4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 fd6f 	bl	800a4a0 <vPortFree>
	}
 80099c2:	e00f      	b.n	80099e4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80099ca:	2b02      	cmp	r3, #2
 80099cc:	d00a      	beq.n	80099e4 <prvDeleteTCB+0x60>
	__asm volatile
 80099ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d2:	f383 8811 	msr	BASEPRI, r3
 80099d6:	f3bf 8f6f 	isb	sy
 80099da:	f3bf 8f4f 	dsb	sy
 80099de:	60fb      	str	r3, [r7, #12]
}
 80099e0:	bf00      	nop
 80099e2:	e7fe      	b.n	80099e2 <prvDeleteTCB+0x5e>
	}
 80099e4:	bf00      	nop
 80099e6:	3710      	adds	r7, #16
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80099ec:	b480      	push	{r7}
 80099ee:	b083      	sub	sp, #12
 80099f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099f2:	4b0c      	ldr	r3, [pc, #48]	; (8009a24 <prvResetNextTaskUnblockTime+0x38>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d104      	bne.n	8009a06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80099fc:	4b0a      	ldr	r3, [pc, #40]	; (8009a28 <prvResetNextTaskUnblockTime+0x3c>)
 80099fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009a02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009a04:	e008      	b.n	8009a18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a06:	4b07      	ldr	r3, [pc, #28]	; (8009a24 <prvResetNextTaskUnblockTime+0x38>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	68db      	ldr	r3, [r3, #12]
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	4a04      	ldr	r2, [pc, #16]	; (8009a28 <prvResetNextTaskUnblockTime+0x3c>)
 8009a16:	6013      	str	r3, [r2, #0]
}
 8009a18:	bf00      	nop
 8009a1a:	370c      	adds	r7, #12
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr
 8009a24:	200007ec 	.word	0x200007ec
 8009a28:	20000854 	.word	0x20000854

08009a2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009a32:	4b0b      	ldr	r3, [pc, #44]	; (8009a60 <xTaskGetSchedulerState+0x34>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d102      	bne.n	8009a40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	607b      	str	r3, [r7, #4]
 8009a3e:	e008      	b.n	8009a52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a40:	4b08      	ldr	r3, [pc, #32]	; (8009a64 <xTaskGetSchedulerState+0x38>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d102      	bne.n	8009a4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009a48:	2302      	movs	r3, #2
 8009a4a:	607b      	str	r3, [r7, #4]
 8009a4c:	e001      	b.n	8009a52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009a52:	687b      	ldr	r3, [r7, #4]
	}
 8009a54:	4618      	mov	r0, r3
 8009a56:	370c      	adds	r7, #12
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr
 8009a60:	20000840 	.word	0x20000840
 8009a64:	2000085c 	.word	0x2000085c

08009a68 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009a74:	2300      	movs	r3, #0
 8009a76:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d05e      	beq.n	8009b3c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a82:	4b31      	ldr	r3, [pc, #196]	; (8009b48 <xTaskPriorityInherit+0xe0>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d24e      	bcs.n	8009b2a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	699b      	ldr	r3, [r3, #24]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	db06      	blt.n	8009aa2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a94:	4b2c      	ldr	r3, [pc, #176]	; (8009b48 <xTaskPriorityInherit+0xe0>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a9a:	f1c3 0207 	rsb	r2, r3, #7
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	6959      	ldr	r1, [r3, #20]
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aaa:	4613      	mov	r3, r2
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	4413      	add	r3, r2
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	4a26      	ldr	r2, [pc, #152]	; (8009b4c <xTaskPriorityInherit+0xe4>)
 8009ab4:	4413      	add	r3, r2
 8009ab6:	4299      	cmp	r1, r3
 8009ab8:	d12f      	bne.n	8009b1a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	3304      	adds	r3, #4
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7fe f992 	bl	8007de8 <uxListRemove>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d10a      	bne.n	8009ae0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ace:	2201      	movs	r2, #1
 8009ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad4:	43da      	mvns	r2, r3
 8009ad6:	4b1e      	ldr	r3, [pc, #120]	; (8009b50 <xTaskPriorityInherit+0xe8>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4013      	ands	r3, r2
 8009adc:	4a1c      	ldr	r2, [pc, #112]	; (8009b50 <xTaskPriorityInherit+0xe8>)
 8009ade:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009ae0:	4b19      	ldr	r3, [pc, #100]	; (8009b48 <xTaskPriorityInherit+0xe0>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aee:	2201      	movs	r2, #1
 8009af0:	409a      	lsls	r2, r3
 8009af2:	4b17      	ldr	r3, [pc, #92]	; (8009b50 <xTaskPriorityInherit+0xe8>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4313      	orrs	r3, r2
 8009af8:	4a15      	ldr	r2, [pc, #84]	; (8009b50 <xTaskPriorityInherit+0xe8>)
 8009afa:	6013      	str	r3, [r2, #0]
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b00:	4613      	mov	r3, r2
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	4413      	add	r3, r2
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	4a10      	ldr	r2, [pc, #64]	; (8009b4c <xTaskPriorityInherit+0xe4>)
 8009b0a:	441a      	add	r2, r3
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	3304      	adds	r3, #4
 8009b10:	4619      	mov	r1, r3
 8009b12:	4610      	mov	r0, r2
 8009b14:	f7fe f90b 	bl	8007d2e <vListInsertEnd>
 8009b18:	e004      	b.n	8009b24 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009b1a:	4b0b      	ldr	r3, [pc, #44]	; (8009b48 <xTaskPriorityInherit+0xe0>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009b24:	2301      	movs	r3, #1
 8009b26:	60fb      	str	r3, [r7, #12]
 8009b28:	e008      	b.n	8009b3c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b2e:	4b06      	ldr	r3, [pc, #24]	; (8009b48 <xTaskPriorityInherit+0xe0>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d201      	bcs.n	8009b3c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
	}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3710      	adds	r7, #16
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	20000734 	.word	0x20000734
 8009b4c:	20000738 	.word	0x20000738
 8009b50:	2000083c 	.word	0x2000083c

08009b54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b086      	sub	sp, #24
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009b60:	2300      	movs	r3, #0
 8009b62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d06e      	beq.n	8009c48 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009b6a:	4b3a      	ldr	r3, [pc, #232]	; (8009c54 <xTaskPriorityDisinherit+0x100>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	693a      	ldr	r2, [r7, #16]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d00a      	beq.n	8009b8a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b78:	f383 8811 	msr	BASEPRI, r3
 8009b7c:	f3bf 8f6f 	isb	sy
 8009b80:	f3bf 8f4f 	dsb	sy
 8009b84:	60fb      	str	r3, [r7, #12]
}
 8009b86:	bf00      	nop
 8009b88:	e7fe      	b.n	8009b88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d10a      	bne.n	8009ba8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b96:	f383 8811 	msr	BASEPRI, r3
 8009b9a:	f3bf 8f6f 	isb	sy
 8009b9e:	f3bf 8f4f 	dsb	sy
 8009ba2:	60bb      	str	r3, [r7, #8]
}
 8009ba4:	bf00      	nop
 8009ba6:	e7fe      	b.n	8009ba6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bac:	1e5a      	subs	r2, r3, #1
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d044      	beq.n	8009c48 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d140      	bne.n	8009c48 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	3304      	adds	r3, #4
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7fe f90c 	bl	8007de8 <uxListRemove>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d115      	bne.n	8009c02 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bda:	491f      	ldr	r1, [pc, #124]	; (8009c58 <xTaskPriorityDisinherit+0x104>)
 8009bdc:	4613      	mov	r3, r2
 8009bde:	009b      	lsls	r3, r3, #2
 8009be0:	4413      	add	r3, r2
 8009be2:	009b      	lsls	r3, r3, #2
 8009be4:	440b      	add	r3, r1
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d10a      	bne.n	8009c02 <xTaskPriorityDisinherit+0xae>
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8009bf6:	43da      	mvns	r2, r3
 8009bf8:	4b18      	ldr	r3, [pc, #96]	; (8009c5c <xTaskPriorityDisinherit+0x108>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4013      	ands	r3, r2
 8009bfe:	4a17      	ldr	r2, [pc, #92]	; (8009c5c <xTaskPriorityDisinherit+0x108>)
 8009c00:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c0e:	f1c3 0207 	rsb	r2, r3, #7
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	409a      	lsls	r2, r3
 8009c1e:	4b0f      	ldr	r3, [pc, #60]	; (8009c5c <xTaskPriorityDisinherit+0x108>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4313      	orrs	r3, r2
 8009c24:	4a0d      	ldr	r2, [pc, #52]	; (8009c5c <xTaskPriorityDisinherit+0x108>)
 8009c26:	6013      	str	r3, [r2, #0]
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c2c:	4613      	mov	r3, r2
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	4413      	add	r3, r2
 8009c32:	009b      	lsls	r3, r3, #2
 8009c34:	4a08      	ldr	r2, [pc, #32]	; (8009c58 <xTaskPriorityDisinherit+0x104>)
 8009c36:	441a      	add	r2, r3
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	3304      	adds	r3, #4
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	4610      	mov	r0, r2
 8009c40:	f7fe f875 	bl	8007d2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009c44:	2301      	movs	r3, #1
 8009c46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009c48:	697b      	ldr	r3, [r7, #20]
	}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3718      	adds	r7, #24
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	20000734 	.word	0x20000734
 8009c58:	20000738 	.word	0x20000738
 8009c5c:	2000083c 	.word	0x2000083c

08009c60 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b088      	sub	sp, #32
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d077      	beq.n	8009d68 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d10a      	bne.n	8009c96 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c84:	f383 8811 	msr	BASEPRI, r3
 8009c88:	f3bf 8f6f 	isb	sy
 8009c8c:	f3bf 8f4f 	dsb	sy
 8009c90:	60fb      	str	r3, [r7, #12]
}
 8009c92:	bf00      	nop
 8009c94:	e7fe      	b.n	8009c94 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009c96:	69bb      	ldr	r3, [r7, #24]
 8009c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c9a:	683a      	ldr	r2, [r7, #0]
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d902      	bls.n	8009ca6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	61fb      	str	r3, [r7, #28]
 8009ca4:	e002      	b.n	8009cac <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009ca6:	69bb      	ldr	r3, [r7, #24]
 8009ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009caa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009cac:	69bb      	ldr	r3, [r7, #24]
 8009cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb0:	69fa      	ldr	r2, [r7, #28]
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d058      	beq.n	8009d68 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009cb6:	69bb      	ldr	r3, [r7, #24]
 8009cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cba:	697a      	ldr	r2, [r7, #20]
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d153      	bne.n	8009d68 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009cc0:	4b2b      	ldr	r3, [pc, #172]	; (8009d70 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	69ba      	ldr	r2, [r7, #24]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d10a      	bne.n	8009ce0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cce:	f383 8811 	msr	BASEPRI, r3
 8009cd2:	f3bf 8f6f 	isb	sy
 8009cd6:	f3bf 8f4f 	dsb	sy
 8009cda:	60bb      	str	r3, [r7, #8]
}
 8009cdc:	bf00      	nop
 8009cde:	e7fe      	b.n	8009cde <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009ce0:	69bb      	ldr	r3, [r7, #24]
 8009ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009ce6:	69bb      	ldr	r3, [r7, #24]
 8009ce8:	69fa      	ldr	r2, [r7, #28]
 8009cea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009cec:	69bb      	ldr	r3, [r7, #24]
 8009cee:	699b      	ldr	r3, [r3, #24]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	db04      	blt.n	8009cfe <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cf4:	69fb      	ldr	r3, [r7, #28]
 8009cf6:	f1c3 0207 	rsb	r2, r3, #7
 8009cfa:	69bb      	ldr	r3, [r7, #24]
 8009cfc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009cfe:	69bb      	ldr	r3, [r7, #24]
 8009d00:	6959      	ldr	r1, [r3, #20]
 8009d02:	693a      	ldr	r2, [r7, #16]
 8009d04:	4613      	mov	r3, r2
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	4413      	add	r3, r2
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	4a19      	ldr	r2, [pc, #100]	; (8009d74 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009d0e:	4413      	add	r3, r2
 8009d10:	4299      	cmp	r1, r3
 8009d12:	d129      	bne.n	8009d68 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d14:	69bb      	ldr	r3, [r7, #24]
 8009d16:	3304      	adds	r3, #4
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7fe f865 	bl	8007de8 <uxListRemove>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d10a      	bne.n	8009d3a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009d24:	69bb      	ldr	r3, [r7, #24]
 8009d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d28:	2201      	movs	r2, #1
 8009d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d2e:	43da      	mvns	r2, r3
 8009d30:	4b11      	ldr	r3, [pc, #68]	; (8009d78 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4013      	ands	r3, r2
 8009d36:	4a10      	ldr	r2, [pc, #64]	; (8009d78 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009d38:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d3e:	2201      	movs	r2, #1
 8009d40:	409a      	lsls	r2, r3
 8009d42:	4b0d      	ldr	r3, [pc, #52]	; (8009d78 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4313      	orrs	r3, r2
 8009d48:	4a0b      	ldr	r2, [pc, #44]	; (8009d78 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009d4a:	6013      	str	r3, [r2, #0]
 8009d4c:	69bb      	ldr	r3, [r7, #24]
 8009d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d50:	4613      	mov	r3, r2
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	4413      	add	r3, r2
 8009d56:	009b      	lsls	r3, r3, #2
 8009d58:	4a06      	ldr	r2, [pc, #24]	; (8009d74 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009d5a:	441a      	add	r2, r3
 8009d5c:	69bb      	ldr	r3, [r7, #24]
 8009d5e:	3304      	adds	r3, #4
 8009d60:	4619      	mov	r1, r3
 8009d62:	4610      	mov	r0, r2
 8009d64:	f7fd ffe3 	bl	8007d2e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009d68:	bf00      	nop
 8009d6a:	3720      	adds	r7, #32
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	20000734 	.word	0x20000734
 8009d74:	20000738 	.word	0x20000738
 8009d78:	2000083c 	.word	0x2000083c

08009d7c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009d7c:	b480      	push	{r7}
 8009d7e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009d80:	4b07      	ldr	r3, [pc, #28]	; (8009da0 <pvTaskIncrementMutexHeldCount+0x24>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d004      	beq.n	8009d92 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009d88:	4b05      	ldr	r3, [pc, #20]	; (8009da0 <pvTaskIncrementMutexHeldCount+0x24>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009d8e:	3201      	adds	r2, #1
 8009d90:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009d92:	4b03      	ldr	r3, [pc, #12]	; (8009da0 <pvTaskIncrementMutexHeldCount+0x24>)
 8009d94:	681b      	ldr	r3, [r3, #0]
	}
 8009d96:	4618      	mov	r0, r3
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr
 8009da0:	20000734 	.word	0x20000734

08009da4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009dae:	4b29      	ldr	r3, [pc, #164]	; (8009e54 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009db4:	4b28      	ldr	r3, [pc, #160]	; (8009e58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	3304      	adds	r3, #4
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7fe f814 	bl	8007de8 <uxListRemove>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d10b      	bne.n	8009dde <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009dc6:	4b24      	ldr	r3, [pc, #144]	; (8009e58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dcc:	2201      	movs	r2, #1
 8009dce:	fa02 f303 	lsl.w	r3, r2, r3
 8009dd2:	43da      	mvns	r2, r3
 8009dd4:	4b21      	ldr	r3, [pc, #132]	; (8009e5c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4013      	ands	r3, r2
 8009dda:	4a20      	ldr	r2, [pc, #128]	; (8009e5c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009ddc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009de4:	d10a      	bne.n	8009dfc <prvAddCurrentTaskToDelayedList+0x58>
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d007      	beq.n	8009dfc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009dec:	4b1a      	ldr	r3, [pc, #104]	; (8009e58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	3304      	adds	r3, #4
 8009df2:	4619      	mov	r1, r3
 8009df4:	481a      	ldr	r0, [pc, #104]	; (8009e60 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009df6:	f7fd ff9a 	bl	8007d2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009dfa:	e026      	b.n	8009e4a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009dfc:	68fa      	ldr	r2, [r7, #12]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	4413      	add	r3, r2
 8009e02:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009e04:	4b14      	ldr	r3, [pc, #80]	; (8009e58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	68ba      	ldr	r2, [r7, #8]
 8009e0a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009e0c:	68ba      	ldr	r2, [r7, #8]
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d209      	bcs.n	8009e28 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e14:	4b13      	ldr	r3, [pc, #76]	; (8009e64 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	4b0f      	ldr	r3, [pc, #60]	; (8009e58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	3304      	adds	r3, #4
 8009e1e:	4619      	mov	r1, r3
 8009e20:	4610      	mov	r0, r2
 8009e22:	f7fd ffa8 	bl	8007d76 <vListInsert>
}
 8009e26:	e010      	b.n	8009e4a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e28:	4b0f      	ldr	r3, [pc, #60]	; (8009e68 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	4b0a      	ldr	r3, [pc, #40]	; (8009e58 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	3304      	adds	r3, #4
 8009e32:	4619      	mov	r1, r3
 8009e34:	4610      	mov	r0, r2
 8009e36:	f7fd ff9e 	bl	8007d76 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009e3a:	4b0c      	ldr	r3, [pc, #48]	; (8009e6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	68ba      	ldr	r2, [r7, #8]
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d202      	bcs.n	8009e4a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009e44:	4a09      	ldr	r2, [pc, #36]	; (8009e6c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	6013      	str	r3, [r2, #0]
}
 8009e4a:	bf00      	nop
 8009e4c:	3710      	adds	r7, #16
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	20000838 	.word	0x20000838
 8009e58:	20000734 	.word	0x20000734
 8009e5c:	2000083c 	.word	0x2000083c
 8009e60:	20000820 	.word	0x20000820
 8009e64:	200007f0 	.word	0x200007f0
 8009e68:	200007ec 	.word	0x200007ec
 8009e6c:	20000854 	.word	0x20000854

08009e70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009e70:	b480      	push	{r7}
 8009e72:	b085      	sub	sp, #20
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	60b9      	str	r1, [r7, #8]
 8009e7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	3b04      	subs	r3, #4
 8009e80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009e88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	3b04      	subs	r3, #4
 8009e8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	f023 0201 	bic.w	r2, r3, #1
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	3b04      	subs	r3, #4
 8009e9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009ea0:	4a0c      	ldr	r2, [pc, #48]	; (8009ed4 <pxPortInitialiseStack+0x64>)
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	3b14      	subs	r3, #20
 8009eaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	3b04      	subs	r3, #4
 8009eb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f06f 0202 	mvn.w	r2, #2
 8009ebe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	3b20      	subs	r3, #32
 8009ec4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3714      	adds	r7, #20
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr
 8009ed4:	08009ed9 	.word	0x08009ed9

08009ed8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b085      	sub	sp, #20
 8009edc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009ee2:	4b12      	ldr	r3, [pc, #72]	; (8009f2c <prvTaskExitError+0x54>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eea:	d00a      	beq.n	8009f02 <prvTaskExitError+0x2a>
	__asm volatile
 8009eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef0:	f383 8811 	msr	BASEPRI, r3
 8009ef4:	f3bf 8f6f 	isb	sy
 8009ef8:	f3bf 8f4f 	dsb	sy
 8009efc:	60fb      	str	r3, [r7, #12]
}
 8009efe:	bf00      	nop
 8009f00:	e7fe      	b.n	8009f00 <prvTaskExitError+0x28>
	__asm volatile
 8009f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f06:	f383 8811 	msr	BASEPRI, r3
 8009f0a:	f3bf 8f6f 	isb	sy
 8009f0e:	f3bf 8f4f 	dsb	sy
 8009f12:	60bb      	str	r3, [r7, #8]
}
 8009f14:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009f16:	bf00      	nop
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d0fc      	beq.n	8009f18 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009f1e:	bf00      	nop
 8009f20:	bf00      	nop
 8009f22:	3714      	adds	r7, #20
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr
 8009f2c:	20000054 	.word	0x20000054

08009f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009f30:	4b07      	ldr	r3, [pc, #28]	; (8009f50 <pxCurrentTCBConst2>)
 8009f32:	6819      	ldr	r1, [r3, #0]
 8009f34:	6808      	ldr	r0, [r1, #0]
 8009f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f3a:	f380 8809 	msr	PSP, r0
 8009f3e:	f3bf 8f6f 	isb	sy
 8009f42:	f04f 0000 	mov.w	r0, #0
 8009f46:	f380 8811 	msr	BASEPRI, r0
 8009f4a:	4770      	bx	lr
 8009f4c:	f3af 8000 	nop.w

08009f50 <pxCurrentTCBConst2>:
 8009f50:	20000734 	.word	0x20000734
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009f54:	bf00      	nop
 8009f56:	bf00      	nop

08009f58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009f58:	4808      	ldr	r0, [pc, #32]	; (8009f7c <prvPortStartFirstTask+0x24>)
 8009f5a:	6800      	ldr	r0, [r0, #0]
 8009f5c:	6800      	ldr	r0, [r0, #0]
 8009f5e:	f380 8808 	msr	MSP, r0
 8009f62:	f04f 0000 	mov.w	r0, #0
 8009f66:	f380 8814 	msr	CONTROL, r0
 8009f6a:	b662      	cpsie	i
 8009f6c:	b661      	cpsie	f
 8009f6e:	f3bf 8f4f 	dsb	sy
 8009f72:	f3bf 8f6f 	isb	sy
 8009f76:	df00      	svc	0
 8009f78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009f7a:	bf00      	nop
 8009f7c:	e000ed08 	.word	0xe000ed08

08009f80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b086      	sub	sp, #24
 8009f84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009f86:	4b46      	ldr	r3, [pc, #280]	; (800a0a0 <xPortStartScheduler+0x120>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a46      	ldr	r2, [pc, #280]	; (800a0a4 <xPortStartScheduler+0x124>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d10a      	bne.n	8009fa6 <xPortStartScheduler+0x26>
	__asm volatile
 8009f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f94:	f383 8811 	msr	BASEPRI, r3
 8009f98:	f3bf 8f6f 	isb	sy
 8009f9c:	f3bf 8f4f 	dsb	sy
 8009fa0:	613b      	str	r3, [r7, #16]
}
 8009fa2:	bf00      	nop
 8009fa4:	e7fe      	b.n	8009fa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009fa6:	4b3e      	ldr	r3, [pc, #248]	; (800a0a0 <xPortStartScheduler+0x120>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a3f      	ldr	r2, [pc, #252]	; (800a0a8 <xPortStartScheduler+0x128>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d10a      	bne.n	8009fc6 <xPortStartScheduler+0x46>
	__asm volatile
 8009fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb4:	f383 8811 	msr	BASEPRI, r3
 8009fb8:	f3bf 8f6f 	isb	sy
 8009fbc:	f3bf 8f4f 	dsb	sy
 8009fc0:	60fb      	str	r3, [r7, #12]
}
 8009fc2:	bf00      	nop
 8009fc4:	e7fe      	b.n	8009fc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009fc6:	4b39      	ldr	r3, [pc, #228]	; (800a0ac <xPortStartScheduler+0x12c>)
 8009fc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	781b      	ldrb	r3, [r3, #0]
 8009fce:	b2db      	uxtb	r3, r3
 8009fd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	22ff      	movs	r2, #255	; 0xff
 8009fd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	b2db      	uxtb	r3, r3
 8009fde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009fe0:	78fb      	ldrb	r3, [r7, #3]
 8009fe2:	b2db      	uxtb	r3, r3
 8009fe4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009fe8:	b2da      	uxtb	r2, r3
 8009fea:	4b31      	ldr	r3, [pc, #196]	; (800a0b0 <xPortStartScheduler+0x130>)
 8009fec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009fee:	4b31      	ldr	r3, [pc, #196]	; (800a0b4 <xPortStartScheduler+0x134>)
 8009ff0:	2207      	movs	r2, #7
 8009ff2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ff4:	e009      	b.n	800a00a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009ff6:	4b2f      	ldr	r3, [pc, #188]	; (800a0b4 <xPortStartScheduler+0x134>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	3b01      	subs	r3, #1
 8009ffc:	4a2d      	ldr	r2, [pc, #180]	; (800a0b4 <xPortStartScheduler+0x134>)
 8009ffe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a000:	78fb      	ldrb	r3, [r7, #3]
 800a002:	b2db      	uxtb	r3, r3
 800a004:	005b      	lsls	r3, r3, #1
 800a006:	b2db      	uxtb	r3, r3
 800a008:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a00a:	78fb      	ldrb	r3, [r7, #3]
 800a00c:	b2db      	uxtb	r3, r3
 800a00e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a012:	2b80      	cmp	r3, #128	; 0x80
 800a014:	d0ef      	beq.n	8009ff6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a016:	4b27      	ldr	r3, [pc, #156]	; (800a0b4 <xPortStartScheduler+0x134>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f1c3 0307 	rsb	r3, r3, #7
 800a01e:	2b04      	cmp	r3, #4
 800a020:	d00a      	beq.n	800a038 <xPortStartScheduler+0xb8>
	__asm volatile
 800a022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a026:	f383 8811 	msr	BASEPRI, r3
 800a02a:	f3bf 8f6f 	isb	sy
 800a02e:	f3bf 8f4f 	dsb	sy
 800a032:	60bb      	str	r3, [r7, #8]
}
 800a034:	bf00      	nop
 800a036:	e7fe      	b.n	800a036 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a038:	4b1e      	ldr	r3, [pc, #120]	; (800a0b4 <xPortStartScheduler+0x134>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	021b      	lsls	r3, r3, #8
 800a03e:	4a1d      	ldr	r2, [pc, #116]	; (800a0b4 <xPortStartScheduler+0x134>)
 800a040:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a042:	4b1c      	ldr	r3, [pc, #112]	; (800a0b4 <xPortStartScheduler+0x134>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a04a:	4a1a      	ldr	r2, [pc, #104]	; (800a0b4 <xPortStartScheduler+0x134>)
 800a04c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	b2da      	uxtb	r2, r3
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a056:	4b18      	ldr	r3, [pc, #96]	; (800a0b8 <xPortStartScheduler+0x138>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a17      	ldr	r2, [pc, #92]	; (800a0b8 <xPortStartScheduler+0x138>)
 800a05c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a060:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a062:	4b15      	ldr	r3, [pc, #84]	; (800a0b8 <xPortStartScheduler+0x138>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4a14      	ldr	r2, [pc, #80]	; (800a0b8 <xPortStartScheduler+0x138>)
 800a068:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a06c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a06e:	f000 f8dd 	bl	800a22c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a072:	4b12      	ldr	r3, [pc, #72]	; (800a0bc <xPortStartScheduler+0x13c>)
 800a074:	2200      	movs	r2, #0
 800a076:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a078:	f000 f8fc 	bl	800a274 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a07c:	4b10      	ldr	r3, [pc, #64]	; (800a0c0 <xPortStartScheduler+0x140>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a0f      	ldr	r2, [pc, #60]	; (800a0c0 <xPortStartScheduler+0x140>)
 800a082:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a086:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a088:	f7ff ff66 	bl	8009f58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a08c:	f7ff fa88 	bl	80095a0 <vTaskSwitchContext>
	prvTaskExitError();
 800a090:	f7ff ff22 	bl	8009ed8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a094:	2300      	movs	r3, #0
}
 800a096:	4618      	mov	r0, r3
 800a098:	3718      	adds	r7, #24
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	e000ed00 	.word	0xe000ed00
 800a0a4:	410fc271 	.word	0x410fc271
 800a0a8:	410fc270 	.word	0x410fc270
 800a0ac:	e000e400 	.word	0xe000e400
 800a0b0:	20000860 	.word	0x20000860
 800a0b4:	20000864 	.word	0x20000864
 800a0b8:	e000ed20 	.word	0xe000ed20
 800a0bc:	20000054 	.word	0x20000054
 800a0c0:	e000ef34 	.word	0xe000ef34

0800a0c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b083      	sub	sp, #12
 800a0c8:	af00      	add	r7, sp, #0
	__asm volatile
 800a0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ce:	f383 8811 	msr	BASEPRI, r3
 800a0d2:	f3bf 8f6f 	isb	sy
 800a0d6:	f3bf 8f4f 	dsb	sy
 800a0da:	607b      	str	r3, [r7, #4]
}
 800a0dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a0de:	4b0f      	ldr	r3, [pc, #60]	; (800a11c <vPortEnterCritical+0x58>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	4a0d      	ldr	r2, [pc, #52]	; (800a11c <vPortEnterCritical+0x58>)
 800a0e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a0e8:	4b0c      	ldr	r3, [pc, #48]	; (800a11c <vPortEnterCritical+0x58>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d10f      	bne.n	800a110 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a0f0:	4b0b      	ldr	r3, [pc, #44]	; (800a120 <vPortEnterCritical+0x5c>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	b2db      	uxtb	r3, r3
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d00a      	beq.n	800a110 <vPortEnterCritical+0x4c>
	__asm volatile
 800a0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0fe:	f383 8811 	msr	BASEPRI, r3
 800a102:	f3bf 8f6f 	isb	sy
 800a106:	f3bf 8f4f 	dsb	sy
 800a10a:	603b      	str	r3, [r7, #0]
}
 800a10c:	bf00      	nop
 800a10e:	e7fe      	b.n	800a10e <vPortEnterCritical+0x4a>
	}
}
 800a110:	bf00      	nop
 800a112:	370c      	adds	r7, #12
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr
 800a11c:	20000054 	.word	0x20000054
 800a120:	e000ed04 	.word	0xe000ed04

0800a124 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a124:	b480      	push	{r7}
 800a126:	b083      	sub	sp, #12
 800a128:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a12a:	4b12      	ldr	r3, [pc, #72]	; (800a174 <vPortExitCritical+0x50>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d10a      	bne.n	800a148 <vPortExitCritical+0x24>
	__asm volatile
 800a132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a136:	f383 8811 	msr	BASEPRI, r3
 800a13a:	f3bf 8f6f 	isb	sy
 800a13e:	f3bf 8f4f 	dsb	sy
 800a142:	607b      	str	r3, [r7, #4]
}
 800a144:	bf00      	nop
 800a146:	e7fe      	b.n	800a146 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a148:	4b0a      	ldr	r3, [pc, #40]	; (800a174 <vPortExitCritical+0x50>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	3b01      	subs	r3, #1
 800a14e:	4a09      	ldr	r2, [pc, #36]	; (800a174 <vPortExitCritical+0x50>)
 800a150:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a152:	4b08      	ldr	r3, [pc, #32]	; (800a174 <vPortExitCritical+0x50>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d105      	bne.n	800a166 <vPortExitCritical+0x42>
 800a15a:	2300      	movs	r3, #0
 800a15c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	f383 8811 	msr	BASEPRI, r3
}
 800a164:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a166:	bf00      	nop
 800a168:	370c      	adds	r7, #12
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr
 800a172:	bf00      	nop
 800a174:	20000054 	.word	0x20000054
	...

0800a180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a180:	f3ef 8009 	mrs	r0, PSP
 800a184:	f3bf 8f6f 	isb	sy
 800a188:	4b15      	ldr	r3, [pc, #84]	; (800a1e0 <pxCurrentTCBConst>)
 800a18a:	681a      	ldr	r2, [r3, #0]
 800a18c:	f01e 0f10 	tst.w	lr, #16
 800a190:	bf08      	it	eq
 800a192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a19a:	6010      	str	r0, [r2, #0]
 800a19c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a1a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a1a4:	f380 8811 	msr	BASEPRI, r0
 800a1a8:	f3bf 8f4f 	dsb	sy
 800a1ac:	f3bf 8f6f 	isb	sy
 800a1b0:	f7ff f9f6 	bl	80095a0 <vTaskSwitchContext>
 800a1b4:	f04f 0000 	mov.w	r0, #0
 800a1b8:	f380 8811 	msr	BASEPRI, r0
 800a1bc:	bc09      	pop	{r0, r3}
 800a1be:	6819      	ldr	r1, [r3, #0]
 800a1c0:	6808      	ldr	r0, [r1, #0]
 800a1c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1c6:	f01e 0f10 	tst.w	lr, #16
 800a1ca:	bf08      	it	eq
 800a1cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a1d0:	f380 8809 	msr	PSP, r0
 800a1d4:	f3bf 8f6f 	isb	sy
 800a1d8:	4770      	bx	lr
 800a1da:	bf00      	nop
 800a1dc:	f3af 8000 	nop.w

0800a1e0 <pxCurrentTCBConst>:
 800a1e0:	20000734 	.word	0x20000734
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a1e4:	bf00      	nop
 800a1e6:	bf00      	nop

0800a1e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
	__asm volatile
 800a1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f2:	f383 8811 	msr	BASEPRI, r3
 800a1f6:	f3bf 8f6f 	isb	sy
 800a1fa:	f3bf 8f4f 	dsb	sy
 800a1fe:	607b      	str	r3, [r7, #4]
}
 800a200:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a202:	f7ff f915 	bl	8009430 <xTaskIncrementTick>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d003      	beq.n	800a214 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a20c:	4b06      	ldr	r3, [pc, #24]	; (800a228 <SysTick_Handler+0x40>)
 800a20e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a212:	601a      	str	r2, [r3, #0]
 800a214:	2300      	movs	r3, #0
 800a216:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	f383 8811 	msr	BASEPRI, r3
}
 800a21e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a220:	bf00      	nop
 800a222:	3708      	adds	r7, #8
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}
 800a228:	e000ed04 	.word	0xe000ed04

0800a22c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a22c:	b480      	push	{r7}
 800a22e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a230:	4b0b      	ldr	r3, [pc, #44]	; (800a260 <vPortSetupTimerInterrupt+0x34>)
 800a232:	2200      	movs	r2, #0
 800a234:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a236:	4b0b      	ldr	r3, [pc, #44]	; (800a264 <vPortSetupTimerInterrupt+0x38>)
 800a238:	2200      	movs	r2, #0
 800a23a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a23c:	4b0a      	ldr	r3, [pc, #40]	; (800a268 <vPortSetupTimerInterrupt+0x3c>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4a0a      	ldr	r2, [pc, #40]	; (800a26c <vPortSetupTimerInterrupt+0x40>)
 800a242:	fba2 2303 	umull	r2, r3, r2, r3
 800a246:	099b      	lsrs	r3, r3, #6
 800a248:	4a09      	ldr	r2, [pc, #36]	; (800a270 <vPortSetupTimerInterrupt+0x44>)
 800a24a:	3b01      	subs	r3, #1
 800a24c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a24e:	4b04      	ldr	r3, [pc, #16]	; (800a260 <vPortSetupTimerInterrupt+0x34>)
 800a250:	2207      	movs	r2, #7
 800a252:	601a      	str	r2, [r3, #0]
}
 800a254:	bf00      	nop
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr
 800a25e:	bf00      	nop
 800a260:	e000e010 	.word	0xe000e010
 800a264:	e000e018 	.word	0xe000e018
 800a268:	20000048 	.word	0x20000048
 800a26c:	10624dd3 	.word	0x10624dd3
 800a270:	e000e014 	.word	0xe000e014

0800a274 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a274:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a284 <vPortEnableVFP+0x10>
 800a278:	6801      	ldr	r1, [r0, #0]
 800a27a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a27e:	6001      	str	r1, [r0, #0]
 800a280:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a282:	bf00      	nop
 800a284:	e000ed88 	.word	0xe000ed88

0800a288 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a288:	b480      	push	{r7}
 800a28a:	b085      	sub	sp, #20
 800a28c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a28e:	f3ef 8305 	mrs	r3, IPSR
 800a292:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2b0f      	cmp	r3, #15
 800a298:	d914      	bls.n	800a2c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a29a:	4a17      	ldr	r2, [pc, #92]	; (800a2f8 <vPortValidateInterruptPriority+0x70>)
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	4413      	add	r3, r2
 800a2a0:	781b      	ldrb	r3, [r3, #0]
 800a2a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a2a4:	4b15      	ldr	r3, [pc, #84]	; (800a2fc <vPortValidateInterruptPriority+0x74>)
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	7afa      	ldrb	r2, [r7, #11]
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d20a      	bcs.n	800a2c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b2:	f383 8811 	msr	BASEPRI, r3
 800a2b6:	f3bf 8f6f 	isb	sy
 800a2ba:	f3bf 8f4f 	dsb	sy
 800a2be:	607b      	str	r3, [r7, #4]
}
 800a2c0:	bf00      	nop
 800a2c2:	e7fe      	b.n	800a2c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a2c4:	4b0e      	ldr	r3, [pc, #56]	; (800a300 <vPortValidateInterruptPriority+0x78>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a2cc:	4b0d      	ldr	r3, [pc, #52]	; (800a304 <vPortValidateInterruptPriority+0x7c>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d90a      	bls.n	800a2ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d8:	f383 8811 	msr	BASEPRI, r3
 800a2dc:	f3bf 8f6f 	isb	sy
 800a2e0:	f3bf 8f4f 	dsb	sy
 800a2e4:	603b      	str	r3, [r7, #0]
}
 800a2e6:	bf00      	nop
 800a2e8:	e7fe      	b.n	800a2e8 <vPortValidateInterruptPriority+0x60>
	}
 800a2ea:	bf00      	nop
 800a2ec:	3714      	adds	r7, #20
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr
 800a2f6:	bf00      	nop
 800a2f8:	e000e3f0 	.word	0xe000e3f0
 800a2fc:	20000860 	.word	0x20000860
 800a300:	e000ed0c 	.word	0xe000ed0c
 800a304:	20000864 	.word	0x20000864

0800a308 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b08a      	sub	sp, #40	; 0x28
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a310:	2300      	movs	r3, #0
 800a312:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a314:	f7fe ffe2 	bl	80092dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a318:	4b5b      	ldr	r3, [pc, #364]	; (800a488 <pvPortMalloc+0x180>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d101      	bne.n	800a324 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a320:	f000 f920 	bl	800a564 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a324:	4b59      	ldr	r3, [pc, #356]	; (800a48c <pvPortMalloc+0x184>)
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	4013      	ands	r3, r2
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	f040 8093 	bne.w	800a458 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d01d      	beq.n	800a374 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a338:	2208      	movs	r2, #8
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	4413      	add	r3, r2
 800a33e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f003 0307 	and.w	r3, r3, #7
 800a346:	2b00      	cmp	r3, #0
 800a348:	d014      	beq.n	800a374 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f023 0307 	bic.w	r3, r3, #7
 800a350:	3308      	adds	r3, #8
 800a352:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f003 0307 	and.w	r3, r3, #7
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d00a      	beq.n	800a374 <pvPortMalloc+0x6c>
	__asm volatile
 800a35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a362:	f383 8811 	msr	BASEPRI, r3
 800a366:	f3bf 8f6f 	isb	sy
 800a36a:	f3bf 8f4f 	dsb	sy
 800a36e:	617b      	str	r3, [r7, #20]
}
 800a370:	bf00      	nop
 800a372:	e7fe      	b.n	800a372 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d06e      	beq.n	800a458 <pvPortMalloc+0x150>
 800a37a:	4b45      	ldr	r3, [pc, #276]	; (800a490 <pvPortMalloc+0x188>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	429a      	cmp	r2, r3
 800a382:	d869      	bhi.n	800a458 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a384:	4b43      	ldr	r3, [pc, #268]	; (800a494 <pvPortMalloc+0x18c>)
 800a386:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a388:	4b42      	ldr	r3, [pc, #264]	; (800a494 <pvPortMalloc+0x18c>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a38e:	e004      	b.n	800a39a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a392:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d903      	bls.n	800a3ac <pvPortMalloc+0xa4>
 800a3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d1f1      	bne.n	800a390 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a3ac:	4b36      	ldr	r3, [pc, #216]	; (800a488 <pvPortMalloc+0x180>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d050      	beq.n	800a458 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a3b6:	6a3b      	ldr	r3, [r7, #32]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	2208      	movs	r2, #8
 800a3bc:	4413      	add	r3, r2
 800a3be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	6a3b      	ldr	r3, [r7, #32]
 800a3c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ca:	685a      	ldr	r2, [r3, #4]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	1ad2      	subs	r2, r2, r3
 800a3d0:	2308      	movs	r3, #8
 800a3d2:	005b      	lsls	r3, r3, #1
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d91f      	bls.n	800a418 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a3d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	4413      	add	r3, r2
 800a3de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3e0:	69bb      	ldr	r3, [r7, #24]
 800a3e2:	f003 0307 	and.w	r3, r3, #7
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d00a      	beq.n	800a400 <pvPortMalloc+0xf8>
	__asm volatile
 800a3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ee:	f383 8811 	msr	BASEPRI, r3
 800a3f2:	f3bf 8f6f 	isb	sy
 800a3f6:	f3bf 8f4f 	dsb	sy
 800a3fa:	613b      	str	r3, [r7, #16]
}
 800a3fc:	bf00      	nop
 800a3fe:	e7fe      	b.n	800a3fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a402:	685a      	ldr	r2, [r3, #4]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	1ad2      	subs	r2, r2, r3
 800a408:	69bb      	ldr	r3, [r7, #24]
 800a40a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40e:	687a      	ldr	r2, [r7, #4]
 800a410:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a412:	69b8      	ldr	r0, [r7, #24]
 800a414:	f000 f908 	bl	800a628 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a418:	4b1d      	ldr	r3, [pc, #116]	; (800a490 <pvPortMalloc+0x188>)
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	1ad3      	subs	r3, r2, r3
 800a422:	4a1b      	ldr	r2, [pc, #108]	; (800a490 <pvPortMalloc+0x188>)
 800a424:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a426:	4b1a      	ldr	r3, [pc, #104]	; (800a490 <pvPortMalloc+0x188>)
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	4b1b      	ldr	r3, [pc, #108]	; (800a498 <pvPortMalloc+0x190>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	429a      	cmp	r2, r3
 800a430:	d203      	bcs.n	800a43a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a432:	4b17      	ldr	r3, [pc, #92]	; (800a490 <pvPortMalloc+0x188>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a18      	ldr	r2, [pc, #96]	; (800a498 <pvPortMalloc+0x190>)
 800a438:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43c:	685a      	ldr	r2, [r3, #4]
 800a43e:	4b13      	ldr	r3, [pc, #76]	; (800a48c <pvPortMalloc+0x184>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	431a      	orrs	r2, r3
 800a444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a446:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44a:	2200      	movs	r2, #0
 800a44c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a44e:	4b13      	ldr	r3, [pc, #76]	; (800a49c <pvPortMalloc+0x194>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	3301      	adds	r3, #1
 800a454:	4a11      	ldr	r2, [pc, #68]	; (800a49c <pvPortMalloc+0x194>)
 800a456:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a458:	f7fe ff4e 	bl	80092f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a45c:	69fb      	ldr	r3, [r7, #28]
 800a45e:	f003 0307 	and.w	r3, r3, #7
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00a      	beq.n	800a47c <pvPortMalloc+0x174>
	__asm volatile
 800a466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46a:	f383 8811 	msr	BASEPRI, r3
 800a46e:	f3bf 8f6f 	isb	sy
 800a472:	f3bf 8f4f 	dsb	sy
 800a476:	60fb      	str	r3, [r7, #12]
}
 800a478:	bf00      	nop
 800a47a:	e7fe      	b.n	800a47a <pvPortMalloc+0x172>
	return pvReturn;
 800a47c:	69fb      	ldr	r3, [r7, #28]
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3728      	adds	r7, #40	; 0x28
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
 800a486:	bf00      	nop
 800a488:	20004470 	.word	0x20004470
 800a48c:	20004484 	.word	0x20004484
 800a490:	20004474 	.word	0x20004474
 800a494:	20004468 	.word	0x20004468
 800a498:	20004478 	.word	0x20004478
 800a49c:	2000447c 	.word	0x2000447c

0800a4a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b086      	sub	sp, #24
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d04d      	beq.n	800a54e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a4b2:	2308      	movs	r3, #8
 800a4b4:	425b      	negs	r3, r3
 800a4b6:	697a      	ldr	r2, [r7, #20]
 800a4b8:	4413      	add	r3, r2
 800a4ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	685a      	ldr	r2, [r3, #4]
 800a4c4:	4b24      	ldr	r3, [pc, #144]	; (800a558 <vPortFree+0xb8>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4013      	ands	r3, r2
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d10a      	bne.n	800a4e4 <vPortFree+0x44>
	__asm volatile
 800a4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d2:	f383 8811 	msr	BASEPRI, r3
 800a4d6:	f3bf 8f6f 	isb	sy
 800a4da:	f3bf 8f4f 	dsb	sy
 800a4de:	60fb      	str	r3, [r7, #12]
}
 800a4e0:	bf00      	nop
 800a4e2:	e7fe      	b.n	800a4e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d00a      	beq.n	800a502 <vPortFree+0x62>
	__asm volatile
 800a4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f0:	f383 8811 	msr	BASEPRI, r3
 800a4f4:	f3bf 8f6f 	isb	sy
 800a4f8:	f3bf 8f4f 	dsb	sy
 800a4fc:	60bb      	str	r3, [r7, #8]
}
 800a4fe:	bf00      	nop
 800a500:	e7fe      	b.n	800a500 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	685a      	ldr	r2, [r3, #4]
 800a506:	4b14      	ldr	r3, [pc, #80]	; (800a558 <vPortFree+0xb8>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4013      	ands	r3, r2
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d01e      	beq.n	800a54e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d11a      	bne.n	800a54e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	685a      	ldr	r2, [r3, #4]
 800a51c:	4b0e      	ldr	r3, [pc, #56]	; (800a558 <vPortFree+0xb8>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	43db      	mvns	r3, r3
 800a522:	401a      	ands	r2, r3
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a528:	f7fe fed8 	bl	80092dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	685a      	ldr	r2, [r3, #4]
 800a530:	4b0a      	ldr	r3, [pc, #40]	; (800a55c <vPortFree+0xbc>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4413      	add	r3, r2
 800a536:	4a09      	ldr	r2, [pc, #36]	; (800a55c <vPortFree+0xbc>)
 800a538:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a53a:	6938      	ldr	r0, [r7, #16]
 800a53c:	f000 f874 	bl	800a628 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a540:	4b07      	ldr	r3, [pc, #28]	; (800a560 <vPortFree+0xc0>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	3301      	adds	r3, #1
 800a546:	4a06      	ldr	r2, [pc, #24]	; (800a560 <vPortFree+0xc0>)
 800a548:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a54a:	f7fe fed5 	bl	80092f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a54e:	bf00      	nop
 800a550:	3718      	adds	r7, #24
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
 800a556:	bf00      	nop
 800a558:	20004484 	.word	0x20004484
 800a55c:	20004474 	.word	0x20004474
 800a560:	20004480 	.word	0x20004480

0800a564 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a564:	b480      	push	{r7}
 800a566:	b085      	sub	sp, #20
 800a568:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a56a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a56e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a570:	4b27      	ldr	r3, [pc, #156]	; (800a610 <prvHeapInit+0xac>)
 800a572:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f003 0307 	and.w	r3, r3, #7
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d00c      	beq.n	800a598 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	3307      	adds	r3, #7
 800a582:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f023 0307 	bic.w	r3, r3, #7
 800a58a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a58c:	68ba      	ldr	r2, [r7, #8]
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	1ad3      	subs	r3, r2, r3
 800a592:	4a1f      	ldr	r2, [pc, #124]	; (800a610 <prvHeapInit+0xac>)
 800a594:	4413      	add	r3, r2
 800a596:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a59c:	4a1d      	ldr	r2, [pc, #116]	; (800a614 <prvHeapInit+0xb0>)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a5a2:	4b1c      	ldr	r3, [pc, #112]	; (800a614 <prvHeapInit+0xb0>)
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	68ba      	ldr	r2, [r7, #8]
 800a5ac:	4413      	add	r3, r2
 800a5ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a5b0:	2208      	movs	r2, #8
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	1a9b      	subs	r3, r3, r2
 800a5b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f023 0307 	bic.w	r3, r3, #7
 800a5be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	4a15      	ldr	r2, [pc, #84]	; (800a618 <prvHeapInit+0xb4>)
 800a5c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a5c6:	4b14      	ldr	r3, [pc, #80]	; (800a618 <prvHeapInit+0xb4>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a5ce:	4b12      	ldr	r3, [pc, #72]	; (800a618 <prvHeapInit+0xb4>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	68fa      	ldr	r2, [r7, #12]
 800a5de:	1ad2      	subs	r2, r2, r3
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a5e4:	4b0c      	ldr	r3, [pc, #48]	; (800a618 <prvHeapInit+0xb4>)
 800a5e6:	681a      	ldr	r2, [r3, #0]
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	4a0a      	ldr	r2, [pc, #40]	; (800a61c <prvHeapInit+0xb8>)
 800a5f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	4a09      	ldr	r2, [pc, #36]	; (800a620 <prvHeapInit+0xbc>)
 800a5fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a5fc:	4b09      	ldr	r3, [pc, #36]	; (800a624 <prvHeapInit+0xc0>)
 800a5fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a602:	601a      	str	r2, [r3, #0]
}
 800a604:	bf00      	nop
 800a606:	3714      	adds	r7, #20
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr
 800a610:	20000868 	.word	0x20000868
 800a614:	20004468 	.word	0x20004468
 800a618:	20004470 	.word	0x20004470
 800a61c:	20004478 	.word	0x20004478
 800a620:	20004474 	.word	0x20004474
 800a624:	20004484 	.word	0x20004484

0800a628 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a628:	b480      	push	{r7}
 800a62a:	b085      	sub	sp, #20
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a630:	4b28      	ldr	r3, [pc, #160]	; (800a6d4 <prvInsertBlockIntoFreeList+0xac>)
 800a632:	60fb      	str	r3, [r7, #12]
 800a634:	e002      	b.n	800a63c <prvInsertBlockIntoFreeList+0x14>
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	60fb      	str	r3, [r7, #12]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	429a      	cmp	r2, r3
 800a644:	d8f7      	bhi.n	800a636 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	68ba      	ldr	r2, [r7, #8]
 800a650:	4413      	add	r3, r2
 800a652:	687a      	ldr	r2, [r7, #4]
 800a654:	429a      	cmp	r2, r3
 800a656:	d108      	bne.n	800a66a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	685a      	ldr	r2, [r3, #4]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	685b      	ldr	r3, [r3, #4]
 800a660:	441a      	add	r2, r3
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	685b      	ldr	r3, [r3, #4]
 800a672:	68ba      	ldr	r2, [r7, #8]
 800a674:	441a      	add	r2, r3
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d118      	bne.n	800a6b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681a      	ldr	r2, [r3, #0]
 800a682:	4b15      	ldr	r3, [pc, #84]	; (800a6d8 <prvInsertBlockIntoFreeList+0xb0>)
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	429a      	cmp	r2, r3
 800a688:	d00d      	beq.n	800a6a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	685a      	ldr	r2, [r3, #4]
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	441a      	add	r2, r3
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	681a      	ldr	r2, [r3, #0]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	601a      	str	r2, [r3, #0]
 800a6a4:	e008      	b.n	800a6b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a6a6:	4b0c      	ldr	r3, [pc, #48]	; (800a6d8 <prvInsertBlockIntoFreeList+0xb0>)
 800a6a8:	681a      	ldr	r2, [r3, #0]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	601a      	str	r2, [r3, #0]
 800a6ae:	e003      	b.n	800a6b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a6b8:	68fa      	ldr	r2, [r7, #12]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d002      	beq.n	800a6c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6c6:	bf00      	nop
 800a6c8:	3714      	adds	r7, #20
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d0:	4770      	bx	lr
 800a6d2:	bf00      	nop
 800a6d4:	20004468 	.word	0x20004468
 800a6d8:	20004470 	.word	0x20004470

0800a6dc <__errno>:
 800a6dc:	4b01      	ldr	r3, [pc, #4]	; (800a6e4 <__errno+0x8>)
 800a6de:	6818      	ldr	r0, [r3, #0]
 800a6e0:	4770      	bx	lr
 800a6e2:	bf00      	nop
 800a6e4:	20000058 	.word	0x20000058

0800a6e8 <std>:
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	b510      	push	{r4, lr}
 800a6ec:	4604      	mov	r4, r0
 800a6ee:	e9c0 3300 	strd	r3, r3, [r0]
 800a6f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a6f6:	6083      	str	r3, [r0, #8]
 800a6f8:	8181      	strh	r1, [r0, #12]
 800a6fa:	6643      	str	r3, [r0, #100]	; 0x64
 800a6fc:	81c2      	strh	r2, [r0, #14]
 800a6fe:	6183      	str	r3, [r0, #24]
 800a700:	4619      	mov	r1, r3
 800a702:	2208      	movs	r2, #8
 800a704:	305c      	adds	r0, #92	; 0x5c
 800a706:	f000 f91a 	bl	800a93e <memset>
 800a70a:	4b05      	ldr	r3, [pc, #20]	; (800a720 <std+0x38>)
 800a70c:	6263      	str	r3, [r4, #36]	; 0x24
 800a70e:	4b05      	ldr	r3, [pc, #20]	; (800a724 <std+0x3c>)
 800a710:	62a3      	str	r3, [r4, #40]	; 0x28
 800a712:	4b05      	ldr	r3, [pc, #20]	; (800a728 <std+0x40>)
 800a714:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a716:	4b05      	ldr	r3, [pc, #20]	; (800a72c <std+0x44>)
 800a718:	6224      	str	r4, [r4, #32]
 800a71a:	6323      	str	r3, [r4, #48]	; 0x30
 800a71c:	bd10      	pop	{r4, pc}
 800a71e:	bf00      	nop
 800a720:	0800b59d 	.word	0x0800b59d
 800a724:	0800b5bf 	.word	0x0800b5bf
 800a728:	0800b5f7 	.word	0x0800b5f7
 800a72c:	0800b61b 	.word	0x0800b61b

0800a730 <_cleanup_r>:
 800a730:	4901      	ldr	r1, [pc, #4]	; (800a738 <_cleanup_r+0x8>)
 800a732:	f000 b8af 	b.w	800a894 <_fwalk_reent>
 800a736:	bf00      	nop
 800a738:	0800c609 	.word	0x0800c609

0800a73c <__sfmoreglue>:
 800a73c:	b570      	push	{r4, r5, r6, lr}
 800a73e:	2268      	movs	r2, #104	; 0x68
 800a740:	1e4d      	subs	r5, r1, #1
 800a742:	4355      	muls	r5, r2
 800a744:	460e      	mov	r6, r1
 800a746:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a74a:	f000 f921 	bl	800a990 <_malloc_r>
 800a74e:	4604      	mov	r4, r0
 800a750:	b140      	cbz	r0, 800a764 <__sfmoreglue+0x28>
 800a752:	2100      	movs	r1, #0
 800a754:	e9c0 1600 	strd	r1, r6, [r0]
 800a758:	300c      	adds	r0, #12
 800a75a:	60a0      	str	r0, [r4, #8]
 800a75c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a760:	f000 f8ed 	bl	800a93e <memset>
 800a764:	4620      	mov	r0, r4
 800a766:	bd70      	pop	{r4, r5, r6, pc}

0800a768 <__sfp_lock_acquire>:
 800a768:	4801      	ldr	r0, [pc, #4]	; (800a770 <__sfp_lock_acquire+0x8>)
 800a76a:	f000 b8d8 	b.w	800a91e <__retarget_lock_acquire_recursive>
 800a76e:	bf00      	nop
 800a770:	20004489 	.word	0x20004489

0800a774 <__sfp_lock_release>:
 800a774:	4801      	ldr	r0, [pc, #4]	; (800a77c <__sfp_lock_release+0x8>)
 800a776:	f000 b8d3 	b.w	800a920 <__retarget_lock_release_recursive>
 800a77a:	bf00      	nop
 800a77c:	20004489 	.word	0x20004489

0800a780 <__sinit_lock_acquire>:
 800a780:	4801      	ldr	r0, [pc, #4]	; (800a788 <__sinit_lock_acquire+0x8>)
 800a782:	f000 b8cc 	b.w	800a91e <__retarget_lock_acquire_recursive>
 800a786:	bf00      	nop
 800a788:	2000448a 	.word	0x2000448a

0800a78c <__sinit_lock_release>:
 800a78c:	4801      	ldr	r0, [pc, #4]	; (800a794 <__sinit_lock_release+0x8>)
 800a78e:	f000 b8c7 	b.w	800a920 <__retarget_lock_release_recursive>
 800a792:	bf00      	nop
 800a794:	2000448a 	.word	0x2000448a

0800a798 <__sinit>:
 800a798:	b510      	push	{r4, lr}
 800a79a:	4604      	mov	r4, r0
 800a79c:	f7ff fff0 	bl	800a780 <__sinit_lock_acquire>
 800a7a0:	69a3      	ldr	r3, [r4, #24]
 800a7a2:	b11b      	cbz	r3, 800a7ac <__sinit+0x14>
 800a7a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7a8:	f7ff bff0 	b.w	800a78c <__sinit_lock_release>
 800a7ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a7b0:	6523      	str	r3, [r4, #80]	; 0x50
 800a7b2:	4b13      	ldr	r3, [pc, #76]	; (800a800 <__sinit+0x68>)
 800a7b4:	4a13      	ldr	r2, [pc, #76]	; (800a804 <__sinit+0x6c>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	62a2      	str	r2, [r4, #40]	; 0x28
 800a7ba:	42a3      	cmp	r3, r4
 800a7bc:	bf04      	itt	eq
 800a7be:	2301      	moveq	r3, #1
 800a7c0:	61a3      	streq	r3, [r4, #24]
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	f000 f820 	bl	800a808 <__sfp>
 800a7c8:	6060      	str	r0, [r4, #4]
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	f000 f81c 	bl	800a808 <__sfp>
 800a7d0:	60a0      	str	r0, [r4, #8]
 800a7d2:	4620      	mov	r0, r4
 800a7d4:	f000 f818 	bl	800a808 <__sfp>
 800a7d8:	2200      	movs	r2, #0
 800a7da:	60e0      	str	r0, [r4, #12]
 800a7dc:	2104      	movs	r1, #4
 800a7de:	6860      	ldr	r0, [r4, #4]
 800a7e0:	f7ff ff82 	bl	800a6e8 <std>
 800a7e4:	68a0      	ldr	r0, [r4, #8]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	2109      	movs	r1, #9
 800a7ea:	f7ff ff7d 	bl	800a6e8 <std>
 800a7ee:	68e0      	ldr	r0, [r4, #12]
 800a7f0:	2202      	movs	r2, #2
 800a7f2:	2112      	movs	r1, #18
 800a7f4:	f7ff ff78 	bl	800a6e8 <std>
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	61a3      	str	r3, [r4, #24]
 800a7fc:	e7d2      	b.n	800a7a4 <__sinit+0xc>
 800a7fe:	bf00      	nop
 800a800:	0800f0d0 	.word	0x0800f0d0
 800a804:	0800a731 	.word	0x0800a731

0800a808 <__sfp>:
 800a808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a80a:	4607      	mov	r7, r0
 800a80c:	f7ff ffac 	bl	800a768 <__sfp_lock_acquire>
 800a810:	4b1e      	ldr	r3, [pc, #120]	; (800a88c <__sfp+0x84>)
 800a812:	681e      	ldr	r6, [r3, #0]
 800a814:	69b3      	ldr	r3, [r6, #24]
 800a816:	b913      	cbnz	r3, 800a81e <__sfp+0x16>
 800a818:	4630      	mov	r0, r6
 800a81a:	f7ff ffbd 	bl	800a798 <__sinit>
 800a81e:	3648      	adds	r6, #72	; 0x48
 800a820:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a824:	3b01      	subs	r3, #1
 800a826:	d503      	bpl.n	800a830 <__sfp+0x28>
 800a828:	6833      	ldr	r3, [r6, #0]
 800a82a:	b30b      	cbz	r3, 800a870 <__sfp+0x68>
 800a82c:	6836      	ldr	r6, [r6, #0]
 800a82e:	e7f7      	b.n	800a820 <__sfp+0x18>
 800a830:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a834:	b9d5      	cbnz	r5, 800a86c <__sfp+0x64>
 800a836:	4b16      	ldr	r3, [pc, #88]	; (800a890 <__sfp+0x88>)
 800a838:	60e3      	str	r3, [r4, #12]
 800a83a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a83e:	6665      	str	r5, [r4, #100]	; 0x64
 800a840:	f000 f86c 	bl	800a91c <__retarget_lock_init_recursive>
 800a844:	f7ff ff96 	bl	800a774 <__sfp_lock_release>
 800a848:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a84c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a850:	6025      	str	r5, [r4, #0]
 800a852:	61a5      	str	r5, [r4, #24]
 800a854:	2208      	movs	r2, #8
 800a856:	4629      	mov	r1, r5
 800a858:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a85c:	f000 f86f 	bl	800a93e <memset>
 800a860:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a864:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a868:	4620      	mov	r0, r4
 800a86a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a86c:	3468      	adds	r4, #104	; 0x68
 800a86e:	e7d9      	b.n	800a824 <__sfp+0x1c>
 800a870:	2104      	movs	r1, #4
 800a872:	4638      	mov	r0, r7
 800a874:	f7ff ff62 	bl	800a73c <__sfmoreglue>
 800a878:	4604      	mov	r4, r0
 800a87a:	6030      	str	r0, [r6, #0]
 800a87c:	2800      	cmp	r0, #0
 800a87e:	d1d5      	bne.n	800a82c <__sfp+0x24>
 800a880:	f7ff ff78 	bl	800a774 <__sfp_lock_release>
 800a884:	230c      	movs	r3, #12
 800a886:	603b      	str	r3, [r7, #0]
 800a888:	e7ee      	b.n	800a868 <__sfp+0x60>
 800a88a:	bf00      	nop
 800a88c:	0800f0d0 	.word	0x0800f0d0
 800a890:	ffff0001 	.word	0xffff0001

0800a894 <_fwalk_reent>:
 800a894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a898:	4606      	mov	r6, r0
 800a89a:	4688      	mov	r8, r1
 800a89c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a8a0:	2700      	movs	r7, #0
 800a8a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a8a6:	f1b9 0901 	subs.w	r9, r9, #1
 800a8aa:	d505      	bpl.n	800a8b8 <_fwalk_reent+0x24>
 800a8ac:	6824      	ldr	r4, [r4, #0]
 800a8ae:	2c00      	cmp	r4, #0
 800a8b0:	d1f7      	bne.n	800a8a2 <_fwalk_reent+0xe>
 800a8b2:	4638      	mov	r0, r7
 800a8b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8b8:	89ab      	ldrh	r3, [r5, #12]
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	d907      	bls.n	800a8ce <_fwalk_reent+0x3a>
 800a8be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a8c2:	3301      	adds	r3, #1
 800a8c4:	d003      	beq.n	800a8ce <_fwalk_reent+0x3a>
 800a8c6:	4629      	mov	r1, r5
 800a8c8:	4630      	mov	r0, r6
 800a8ca:	47c0      	blx	r8
 800a8cc:	4307      	orrs	r7, r0
 800a8ce:	3568      	adds	r5, #104	; 0x68
 800a8d0:	e7e9      	b.n	800a8a6 <_fwalk_reent+0x12>
	...

0800a8d4 <__libc_init_array>:
 800a8d4:	b570      	push	{r4, r5, r6, lr}
 800a8d6:	4d0d      	ldr	r5, [pc, #52]	; (800a90c <__libc_init_array+0x38>)
 800a8d8:	4c0d      	ldr	r4, [pc, #52]	; (800a910 <__libc_init_array+0x3c>)
 800a8da:	1b64      	subs	r4, r4, r5
 800a8dc:	10a4      	asrs	r4, r4, #2
 800a8de:	2600      	movs	r6, #0
 800a8e0:	42a6      	cmp	r6, r4
 800a8e2:	d109      	bne.n	800a8f8 <__libc_init_array+0x24>
 800a8e4:	4d0b      	ldr	r5, [pc, #44]	; (800a914 <__libc_init_array+0x40>)
 800a8e6:	4c0c      	ldr	r4, [pc, #48]	; (800a918 <__libc_init_array+0x44>)
 800a8e8:	f004 fb08 	bl	800eefc <_init>
 800a8ec:	1b64      	subs	r4, r4, r5
 800a8ee:	10a4      	asrs	r4, r4, #2
 800a8f0:	2600      	movs	r6, #0
 800a8f2:	42a6      	cmp	r6, r4
 800a8f4:	d105      	bne.n	800a902 <__libc_init_array+0x2e>
 800a8f6:	bd70      	pop	{r4, r5, r6, pc}
 800a8f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8fc:	4798      	blx	r3
 800a8fe:	3601      	adds	r6, #1
 800a900:	e7ee      	b.n	800a8e0 <__libc_init_array+0xc>
 800a902:	f855 3b04 	ldr.w	r3, [r5], #4
 800a906:	4798      	blx	r3
 800a908:	3601      	adds	r6, #1
 800a90a:	e7f2      	b.n	800a8f2 <__libc_init_array+0x1e>
 800a90c:	0800f6a0 	.word	0x0800f6a0
 800a910:	0800f6a0 	.word	0x0800f6a0
 800a914:	0800f6a0 	.word	0x0800f6a0
 800a918:	0800f6a4 	.word	0x0800f6a4

0800a91c <__retarget_lock_init_recursive>:
 800a91c:	4770      	bx	lr

0800a91e <__retarget_lock_acquire_recursive>:
 800a91e:	4770      	bx	lr

0800a920 <__retarget_lock_release_recursive>:
 800a920:	4770      	bx	lr

0800a922 <memcpy>:
 800a922:	440a      	add	r2, r1
 800a924:	4291      	cmp	r1, r2
 800a926:	f100 33ff 	add.w	r3, r0, #4294967295
 800a92a:	d100      	bne.n	800a92e <memcpy+0xc>
 800a92c:	4770      	bx	lr
 800a92e:	b510      	push	{r4, lr}
 800a930:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a934:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a938:	4291      	cmp	r1, r2
 800a93a:	d1f9      	bne.n	800a930 <memcpy+0xe>
 800a93c:	bd10      	pop	{r4, pc}

0800a93e <memset>:
 800a93e:	4402      	add	r2, r0
 800a940:	4603      	mov	r3, r0
 800a942:	4293      	cmp	r3, r2
 800a944:	d100      	bne.n	800a948 <memset+0xa>
 800a946:	4770      	bx	lr
 800a948:	f803 1b01 	strb.w	r1, [r3], #1
 800a94c:	e7f9      	b.n	800a942 <memset+0x4>
	...

0800a950 <sbrk_aligned>:
 800a950:	b570      	push	{r4, r5, r6, lr}
 800a952:	4e0e      	ldr	r6, [pc, #56]	; (800a98c <sbrk_aligned+0x3c>)
 800a954:	460c      	mov	r4, r1
 800a956:	6831      	ldr	r1, [r6, #0]
 800a958:	4605      	mov	r5, r0
 800a95a:	b911      	cbnz	r1, 800a962 <sbrk_aligned+0x12>
 800a95c:	f000 fdee 	bl	800b53c <_sbrk_r>
 800a960:	6030      	str	r0, [r6, #0]
 800a962:	4621      	mov	r1, r4
 800a964:	4628      	mov	r0, r5
 800a966:	f000 fde9 	bl	800b53c <_sbrk_r>
 800a96a:	1c43      	adds	r3, r0, #1
 800a96c:	d00a      	beq.n	800a984 <sbrk_aligned+0x34>
 800a96e:	1cc4      	adds	r4, r0, #3
 800a970:	f024 0403 	bic.w	r4, r4, #3
 800a974:	42a0      	cmp	r0, r4
 800a976:	d007      	beq.n	800a988 <sbrk_aligned+0x38>
 800a978:	1a21      	subs	r1, r4, r0
 800a97a:	4628      	mov	r0, r5
 800a97c:	f000 fdde 	bl	800b53c <_sbrk_r>
 800a980:	3001      	adds	r0, #1
 800a982:	d101      	bne.n	800a988 <sbrk_aligned+0x38>
 800a984:	f04f 34ff 	mov.w	r4, #4294967295
 800a988:	4620      	mov	r0, r4
 800a98a:	bd70      	pop	{r4, r5, r6, pc}
 800a98c:	20004490 	.word	0x20004490

0800a990 <_malloc_r>:
 800a990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a994:	1ccd      	adds	r5, r1, #3
 800a996:	f025 0503 	bic.w	r5, r5, #3
 800a99a:	3508      	adds	r5, #8
 800a99c:	2d0c      	cmp	r5, #12
 800a99e:	bf38      	it	cc
 800a9a0:	250c      	movcc	r5, #12
 800a9a2:	2d00      	cmp	r5, #0
 800a9a4:	4607      	mov	r7, r0
 800a9a6:	db01      	blt.n	800a9ac <_malloc_r+0x1c>
 800a9a8:	42a9      	cmp	r1, r5
 800a9aa:	d905      	bls.n	800a9b8 <_malloc_r+0x28>
 800a9ac:	230c      	movs	r3, #12
 800a9ae:	603b      	str	r3, [r7, #0]
 800a9b0:	2600      	movs	r6, #0
 800a9b2:	4630      	mov	r0, r6
 800a9b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9b8:	4e2e      	ldr	r6, [pc, #184]	; (800aa74 <_malloc_r+0xe4>)
 800a9ba:	f001 fee5 	bl	800c788 <__malloc_lock>
 800a9be:	6833      	ldr	r3, [r6, #0]
 800a9c0:	461c      	mov	r4, r3
 800a9c2:	bb34      	cbnz	r4, 800aa12 <_malloc_r+0x82>
 800a9c4:	4629      	mov	r1, r5
 800a9c6:	4638      	mov	r0, r7
 800a9c8:	f7ff ffc2 	bl	800a950 <sbrk_aligned>
 800a9cc:	1c43      	adds	r3, r0, #1
 800a9ce:	4604      	mov	r4, r0
 800a9d0:	d14d      	bne.n	800aa6e <_malloc_r+0xde>
 800a9d2:	6834      	ldr	r4, [r6, #0]
 800a9d4:	4626      	mov	r6, r4
 800a9d6:	2e00      	cmp	r6, #0
 800a9d8:	d140      	bne.n	800aa5c <_malloc_r+0xcc>
 800a9da:	6823      	ldr	r3, [r4, #0]
 800a9dc:	4631      	mov	r1, r6
 800a9de:	4638      	mov	r0, r7
 800a9e0:	eb04 0803 	add.w	r8, r4, r3
 800a9e4:	f000 fdaa 	bl	800b53c <_sbrk_r>
 800a9e8:	4580      	cmp	r8, r0
 800a9ea:	d13a      	bne.n	800aa62 <_malloc_r+0xd2>
 800a9ec:	6821      	ldr	r1, [r4, #0]
 800a9ee:	3503      	adds	r5, #3
 800a9f0:	1a6d      	subs	r5, r5, r1
 800a9f2:	f025 0503 	bic.w	r5, r5, #3
 800a9f6:	3508      	adds	r5, #8
 800a9f8:	2d0c      	cmp	r5, #12
 800a9fa:	bf38      	it	cc
 800a9fc:	250c      	movcc	r5, #12
 800a9fe:	4629      	mov	r1, r5
 800aa00:	4638      	mov	r0, r7
 800aa02:	f7ff ffa5 	bl	800a950 <sbrk_aligned>
 800aa06:	3001      	adds	r0, #1
 800aa08:	d02b      	beq.n	800aa62 <_malloc_r+0xd2>
 800aa0a:	6823      	ldr	r3, [r4, #0]
 800aa0c:	442b      	add	r3, r5
 800aa0e:	6023      	str	r3, [r4, #0]
 800aa10:	e00e      	b.n	800aa30 <_malloc_r+0xa0>
 800aa12:	6822      	ldr	r2, [r4, #0]
 800aa14:	1b52      	subs	r2, r2, r5
 800aa16:	d41e      	bmi.n	800aa56 <_malloc_r+0xc6>
 800aa18:	2a0b      	cmp	r2, #11
 800aa1a:	d916      	bls.n	800aa4a <_malloc_r+0xba>
 800aa1c:	1961      	adds	r1, r4, r5
 800aa1e:	42a3      	cmp	r3, r4
 800aa20:	6025      	str	r5, [r4, #0]
 800aa22:	bf18      	it	ne
 800aa24:	6059      	strne	r1, [r3, #4]
 800aa26:	6863      	ldr	r3, [r4, #4]
 800aa28:	bf08      	it	eq
 800aa2a:	6031      	streq	r1, [r6, #0]
 800aa2c:	5162      	str	r2, [r4, r5]
 800aa2e:	604b      	str	r3, [r1, #4]
 800aa30:	4638      	mov	r0, r7
 800aa32:	f104 060b 	add.w	r6, r4, #11
 800aa36:	f001 fead 	bl	800c794 <__malloc_unlock>
 800aa3a:	f026 0607 	bic.w	r6, r6, #7
 800aa3e:	1d23      	adds	r3, r4, #4
 800aa40:	1af2      	subs	r2, r6, r3
 800aa42:	d0b6      	beq.n	800a9b2 <_malloc_r+0x22>
 800aa44:	1b9b      	subs	r3, r3, r6
 800aa46:	50a3      	str	r3, [r4, r2]
 800aa48:	e7b3      	b.n	800a9b2 <_malloc_r+0x22>
 800aa4a:	6862      	ldr	r2, [r4, #4]
 800aa4c:	42a3      	cmp	r3, r4
 800aa4e:	bf0c      	ite	eq
 800aa50:	6032      	streq	r2, [r6, #0]
 800aa52:	605a      	strne	r2, [r3, #4]
 800aa54:	e7ec      	b.n	800aa30 <_malloc_r+0xa0>
 800aa56:	4623      	mov	r3, r4
 800aa58:	6864      	ldr	r4, [r4, #4]
 800aa5a:	e7b2      	b.n	800a9c2 <_malloc_r+0x32>
 800aa5c:	4634      	mov	r4, r6
 800aa5e:	6876      	ldr	r6, [r6, #4]
 800aa60:	e7b9      	b.n	800a9d6 <_malloc_r+0x46>
 800aa62:	230c      	movs	r3, #12
 800aa64:	603b      	str	r3, [r7, #0]
 800aa66:	4638      	mov	r0, r7
 800aa68:	f001 fe94 	bl	800c794 <__malloc_unlock>
 800aa6c:	e7a1      	b.n	800a9b2 <_malloc_r+0x22>
 800aa6e:	6025      	str	r5, [r4, #0]
 800aa70:	e7de      	b.n	800aa30 <_malloc_r+0xa0>
 800aa72:	bf00      	nop
 800aa74:	2000448c 	.word	0x2000448c

0800aa78 <__cvt>:
 800aa78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa7c:	ec55 4b10 	vmov	r4, r5, d0
 800aa80:	2d00      	cmp	r5, #0
 800aa82:	460e      	mov	r6, r1
 800aa84:	4619      	mov	r1, r3
 800aa86:	462b      	mov	r3, r5
 800aa88:	bfbb      	ittet	lt
 800aa8a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800aa8e:	461d      	movlt	r5, r3
 800aa90:	2300      	movge	r3, #0
 800aa92:	232d      	movlt	r3, #45	; 0x2d
 800aa94:	700b      	strb	r3, [r1, #0]
 800aa96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa98:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800aa9c:	4691      	mov	r9, r2
 800aa9e:	f023 0820 	bic.w	r8, r3, #32
 800aaa2:	bfbc      	itt	lt
 800aaa4:	4622      	movlt	r2, r4
 800aaa6:	4614      	movlt	r4, r2
 800aaa8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aaac:	d005      	beq.n	800aaba <__cvt+0x42>
 800aaae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800aab2:	d100      	bne.n	800aab6 <__cvt+0x3e>
 800aab4:	3601      	adds	r6, #1
 800aab6:	2102      	movs	r1, #2
 800aab8:	e000      	b.n	800aabc <__cvt+0x44>
 800aaba:	2103      	movs	r1, #3
 800aabc:	ab03      	add	r3, sp, #12
 800aabe:	9301      	str	r3, [sp, #4]
 800aac0:	ab02      	add	r3, sp, #8
 800aac2:	9300      	str	r3, [sp, #0]
 800aac4:	ec45 4b10 	vmov	d0, r4, r5
 800aac8:	4653      	mov	r3, sl
 800aaca:	4632      	mov	r2, r6
 800aacc:	f000 ff28 	bl	800b920 <_dtoa_r>
 800aad0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800aad4:	4607      	mov	r7, r0
 800aad6:	d102      	bne.n	800aade <__cvt+0x66>
 800aad8:	f019 0f01 	tst.w	r9, #1
 800aadc:	d022      	beq.n	800ab24 <__cvt+0xac>
 800aade:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aae2:	eb07 0906 	add.w	r9, r7, r6
 800aae6:	d110      	bne.n	800ab0a <__cvt+0x92>
 800aae8:	783b      	ldrb	r3, [r7, #0]
 800aaea:	2b30      	cmp	r3, #48	; 0x30
 800aaec:	d10a      	bne.n	800ab04 <__cvt+0x8c>
 800aaee:	2200      	movs	r2, #0
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	4620      	mov	r0, r4
 800aaf4:	4629      	mov	r1, r5
 800aaf6:	f7f5 fff7 	bl	8000ae8 <__aeabi_dcmpeq>
 800aafa:	b918      	cbnz	r0, 800ab04 <__cvt+0x8c>
 800aafc:	f1c6 0601 	rsb	r6, r6, #1
 800ab00:	f8ca 6000 	str.w	r6, [sl]
 800ab04:	f8da 3000 	ldr.w	r3, [sl]
 800ab08:	4499      	add	r9, r3
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	4620      	mov	r0, r4
 800ab10:	4629      	mov	r1, r5
 800ab12:	f7f5 ffe9 	bl	8000ae8 <__aeabi_dcmpeq>
 800ab16:	b108      	cbz	r0, 800ab1c <__cvt+0xa4>
 800ab18:	f8cd 900c 	str.w	r9, [sp, #12]
 800ab1c:	2230      	movs	r2, #48	; 0x30
 800ab1e:	9b03      	ldr	r3, [sp, #12]
 800ab20:	454b      	cmp	r3, r9
 800ab22:	d307      	bcc.n	800ab34 <__cvt+0xbc>
 800ab24:	9b03      	ldr	r3, [sp, #12]
 800ab26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab28:	1bdb      	subs	r3, r3, r7
 800ab2a:	4638      	mov	r0, r7
 800ab2c:	6013      	str	r3, [r2, #0]
 800ab2e:	b004      	add	sp, #16
 800ab30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab34:	1c59      	adds	r1, r3, #1
 800ab36:	9103      	str	r1, [sp, #12]
 800ab38:	701a      	strb	r2, [r3, #0]
 800ab3a:	e7f0      	b.n	800ab1e <__cvt+0xa6>

0800ab3c <__exponent>:
 800ab3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab3e:	4603      	mov	r3, r0
 800ab40:	2900      	cmp	r1, #0
 800ab42:	bfb8      	it	lt
 800ab44:	4249      	neglt	r1, r1
 800ab46:	f803 2b02 	strb.w	r2, [r3], #2
 800ab4a:	bfb4      	ite	lt
 800ab4c:	222d      	movlt	r2, #45	; 0x2d
 800ab4e:	222b      	movge	r2, #43	; 0x2b
 800ab50:	2909      	cmp	r1, #9
 800ab52:	7042      	strb	r2, [r0, #1]
 800ab54:	dd2a      	ble.n	800abac <__exponent+0x70>
 800ab56:	f10d 0407 	add.w	r4, sp, #7
 800ab5a:	46a4      	mov	ip, r4
 800ab5c:	270a      	movs	r7, #10
 800ab5e:	46a6      	mov	lr, r4
 800ab60:	460a      	mov	r2, r1
 800ab62:	fb91 f6f7 	sdiv	r6, r1, r7
 800ab66:	fb07 1516 	mls	r5, r7, r6, r1
 800ab6a:	3530      	adds	r5, #48	; 0x30
 800ab6c:	2a63      	cmp	r2, #99	; 0x63
 800ab6e:	f104 34ff 	add.w	r4, r4, #4294967295
 800ab72:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ab76:	4631      	mov	r1, r6
 800ab78:	dcf1      	bgt.n	800ab5e <__exponent+0x22>
 800ab7a:	3130      	adds	r1, #48	; 0x30
 800ab7c:	f1ae 0502 	sub.w	r5, lr, #2
 800ab80:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ab84:	1c44      	adds	r4, r0, #1
 800ab86:	4629      	mov	r1, r5
 800ab88:	4561      	cmp	r1, ip
 800ab8a:	d30a      	bcc.n	800aba2 <__exponent+0x66>
 800ab8c:	f10d 0209 	add.w	r2, sp, #9
 800ab90:	eba2 020e 	sub.w	r2, r2, lr
 800ab94:	4565      	cmp	r5, ip
 800ab96:	bf88      	it	hi
 800ab98:	2200      	movhi	r2, #0
 800ab9a:	4413      	add	r3, r2
 800ab9c:	1a18      	subs	r0, r3, r0
 800ab9e:	b003      	add	sp, #12
 800aba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aba6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800abaa:	e7ed      	b.n	800ab88 <__exponent+0x4c>
 800abac:	2330      	movs	r3, #48	; 0x30
 800abae:	3130      	adds	r1, #48	; 0x30
 800abb0:	7083      	strb	r3, [r0, #2]
 800abb2:	70c1      	strb	r1, [r0, #3]
 800abb4:	1d03      	adds	r3, r0, #4
 800abb6:	e7f1      	b.n	800ab9c <__exponent+0x60>

0800abb8 <_printf_float>:
 800abb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abbc:	ed2d 8b02 	vpush	{d8}
 800abc0:	b08d      	sub	sp, #52	; 0x34
 800abc2:	460c      	mov	r4, r1
 800abc4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800abc8:	4616      	mov	r6, r2
 800abca:	461f      	mov	r7, r3
 800abcc:	4605      	mov	r5, r0
 800abce:	f001 fd57 	bl	800c680 <_localeconv_r>
 800abd2:	f8d0 a000 	ldr.w	sl, [r0]
 800abd6:	4650      	mov	r0, sl
 800abd8:	f7f5 fb0a 	bl	80001f0 <strlen>
 800abdc:	2300      	movs	r3, #0
 800abde:	930a      	str	r3, [sp, #40]	; 0x28
 800abe0:	6823      	ldr	r3, [r4, #0]
 800abe2:	9305      	str	r3, [sp, #20]
 800abe4:	f8d8 3000 	ldr.w	r3, [r8]
 800abe8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800abec:	3307      	adds	r3, #7
 800abee:	f023 0307 	bic.w	r3, r3, #7
 800abf2:	f103 0208 	add.w	r2, r3, #8
 800abf6:	f8c8 2000 	str.w	r2, [r8]
 800abfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abfe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ac02:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ac06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ac0a:	9307      	str	r3, [sp, #28]
 800ac0c:	f8cd 8018 	str.w	r8, [sp, #24]
 800ac10:	ee08 0a10 	vmov	s16, r0
 800ac14:	4b9f      	ldr	r3, [pc, #636]	; (800ae94 <_printf_float+0x2dc>)
 800ac16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ac1e:	f7f5 ff95 	bl	8000b4c <__aeabi_dcmpun>
 800ac22:	bb88      	cbnz	r0, 800ac88 <_printf_float+0xd0>
 800ac24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac28:	4b9a      	ldr	r3, [pc, #616]	; (800ae94 <_printf_float+0x2dc>)
 800ac2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ac2e:	f7f5 ff6f 	bl	8000b10 <__aeabi_dcmple>
 800ac32:	bb48      	cbnz	r0, 800ac88 <_printf_float+0xd0>
 800ac34:	2200      	movs	r2, #0
 800ac36:	2300      	movs	r3, #0
 800ac38:	4640      	mov	r0, r8
 800ac3a:	4649      	mov	r1, r9
 800ac3c:	f7f5 ff5e 	bl	8000afc <__aeabi_dcmplt>
 800ac40:	b110      	cbz	r0, 800ac48 <_printf_float+0x90>
 800ac42:	232d      	movs	r3, #45	; 0x2d
 800ac44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac48:	4b93      	ldr	r3, [pc, #588]	; (800ae98 <_printf_float+0x2e0>)
 800ac4a:	4894      	ldr	r0, [pc, #592]	; (800ae9c <_printf_float+0x2e4>)
 800ac4c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ac50:	bf94      	ite	ls
 800ac52:	4698      	movls	r8, r3
 800ac54:	4680      	movhi	r8, r0
 800ac56:	2303      	movs	r3, #3
 800ac58:	6123      	str	r3, [r4, #16]
 800ac5a:	9b05      	ldr	r3, [sp, #20]
 800ac5c:	f023 0204 	bic.w	r2, r3, #4
 800ac60:	6022      	str	r2, [r4, #0]
 800ac62:	f04f 0900 	mov.w	r9, #0
 800ac66:	9700      	str	r7, [sp, #0]
 800ac68:	4633      	mov	r3, r6
 800ac6a:	aa0b      	add	r2, sp, #44	; 0x2c
 800ac6c:	4621      	mov	r1, r4
 800ac6e:	4628      	mov	r0, r5
 800ac70:	f000 f9d8 	bl	800b024 <_printf_common>
 800ac74:	3001      	adds	r0, #1
 800ac76:	f040 8090 	bne.w	800ad9a <_printf_float+0x1e2>
 800ac7a:	f04f 30ff 	mov.w	r0, #4294967295
 800ac7e:	b00d      	add	sp, #52	; 0x34
 800ac80:	ecbd 8b02 	vpop	{d8}
 800ac84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac88:	4642      	mov	r2, r8
 800ac8a:	464b      	mov	r3, r9
 800ac8c:	4640      	mov	r0, r8
 800ac8e:	4649      	mov	r1, r9
 800ac90:	f7f5 ff5c 	bl	8000b4c <__aeabi_dcmpun>
 800ac94:	b140      	cbz	r0, 800aca8 <_printf_float+0xf0>
 800ac96:	464b      	mov	r3, r9
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	bfbc      	itt	lt
 800ac9c:	232d      	movlt	r3, #45	; 0x2d
 800ac9e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aca2:	487f      	ldr	r0, [pc, #508]	; (800aea0 <_printf_float+0x2e8>)
 800aca4:	4b7f      	ldr	r3, [pc, #508]	; (800aea4 <_printf_float+0x2ec>)
 800aca6:	e7d1      	b.n	800ac4c <_printf_float+0x94>
 800aca8:	6863      	ldr	r3, [r4, #4]
 800acaa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800acae:	9206      	str	r2, [sp, #24]
 800acb0:	1c5a      	adds	r2, r3, #1
 800acb2:	d13f      	bne.n	800ad34 <_printf_float+0x17c>
 800acb4:	2306      	movs	r3, #6
 800acb6:	6063      	str	r3, [r4, #4]
 800acb8:	9b05      	ldr	r3, [sp, #20]
 800acba:	6861      	ldr	r1, [r4, #4]
 800acbc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800acc0:	2300      	movs	r3, #0
 800acc2:	9303      	str	r3, [sp, #12]
 800acc4:	ab0a      	add	r3, sp, #40	; 0x28
 800acc6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800acca:	ab09      	add	r3, sp, #36	; 0x24
 800accc:	ec49 8b10 	vmov	d0, r8, r9
 800acd0:	9300      	str	r3, [sp, #0]
 800acd2:	6022      	str	r2, [r4, #0]
 800acd4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800acd8:	4628      	mov	r0, r5
 800acda:	f7ff fecd 	bl	800aa78 <__cvt>
 800acde:	9b06      	ldr	r3, [sp, #24]
 800ace0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ace2:	2b47      	cmp	r3, #71	; 0x47
 800ace4:	4680      	mov	r8, r0
 800ace6:	d108      	bne.n	800acfa <_printf_float+0x142>
 800ace8:	1cc8      	adds	r0, r1, #3
 800acea:	db02      	blt.n	800acf2 <_printf_float+0x13a>
 800acec:	6863      	ldr	r3, [r4, #4]
 800acee:	4299      	cmp	r1, r3
 800acf0:	dd41      	ble.n	800ad76 <_printf_float+0x1be>
 800acf2:	f1ab 0b02 	sub.w	fp, fp, #2
 800acf6:	fa5f fb8b 	uxtb.w	fp, fp
 800acfa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800acfe:	d820      	bhi.n	800ad42 <_printf_float+0x18a>
 800ad00:	3901      	subs	r1, #1
 800ad02:	465a      	mov	r2, fp
 800ad04:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ad08:	9109      	str	r1, [sp, #36]	; 0x24
 800ad0a:	f7ff ff17 	bl	800ab3c <__exponent>
 800ad0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad10:	1813      	adds	r3, r2, r0
 800ad12:	2a01      	cmp	r2, #1
 800ad14:	4681      	mov	r9, r0
 800ad16:	6123      	str	r3, [r4, #16]
 800ad18:	dc02      	bgt.n	800ad20 <_printf_float+0x168>
 800ad1a:	6822      	ldr	r2, [r4, #0]
 800ad1c:	07d2      	lsls	r2, r2, #31
 800ad1e:	d501      	bpl.n	800ad24 <_printf_float+0x16c>
 800ad20:	3301      	adds	r3, #1
 800ad22:	6123      	str	r3, [r4, #16]
 800ad24:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d09c      	beq.n	800ac66 <_printf_float+0xae>
 800ad2c:	232d      	movs	r3, #45	; 0x2d
 800ad2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad32:	e798      	b.n	800ac66 <_printf_float+0xae>
 800ad34:	9a06      	ldr	r2, [sp, #24]
 800ad36:	2a47      	cmp	r2, #71	; 0x47
 800ad38:	d1be      	bne.n	800acb8 <_printf_float+0x100>
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d1bc      	bne.n	800acb8 <_printf_float+0x100>
 800ad3e:	2301      	movs	r3, #1
 800ad40:	e7b9      	b.n	800acb6 <_printf_float+0xfe>
 800ad42:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ad46:	d118      	bne.n	800ad7a <_printf_float+0x1c2>
 800ad48:	2900      	cmp	r1, #0
 800ad4a:	6863      	ldr	r3, [r4, #4]
 800ad4c:	dd0b      	ble.n	800ad66 <_printf_float+0x1ae>
 800ad4e:	6121      	str	r1, [r4, #16]
 800ad50:	b913      	cbnz	r3, 800ad58 <_printf_float+0x1a0>
 800ad52:	6822      	ldr	r2, [r4, #0]
 800ad54:	07d0      	lsls	r0, r2, #31
 800ad56:	d502      	bpl.n	800ad5e <_printf_float+0x1a6>
 800ad58:	3301      	adds	r3, #1
 800ad5a:	440b      	add	r3, r1
 800ad5c:	6123      	str	r3, [r4, #16]
 800ad5e:	65a1      	str	r1, [r4, #88]	; 0x58
 800ad60:	f04f 0900 	mov.w	r9, #0
 800ad64:	e7de      	b.n	800ad24 <_printf_float+0x16c>
 800ad66:	b913      	cbnz	r3, 800ad6e <_printf_float+0x1b6>
 800ad68:	6822      	ldr	r2, [r4, #0]
 800ad6a:	07d2      	lsls	r2, r2, #31
 800ad6c:	d501      	bpl.n	800ad72 <_printf_float+0x1ba>
 800ad6e:	3302      	adds	r3, #2
 800ad70:	e7f4      	b.n	800ad5c <_printf_float+0x1a4>
 800ad72:	2301      	movs	r3, #1
 800ad74:	e7f2      	b.n	800ad5c <_printf_float+0x1a4>
 800ad76:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ad7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad7c:	4299      	cmp	r1, r3
 800ad7e:	db05      	blt.n	800ad8c <_printf_float+0x1d4>
 800ad80:	6823      	ldr	r3, [r4, #0]
 800ad82:	6121      	str	r1, [r4, #16]
 800ad84:	07d8      	lsls	r0, r3, #31
 800ad86:	d5ea      	bpl.n	800ad5e <_printf_float+0x1a6>
 800ad88:	1c4b      	adds	r3, r1, #1
 800ad8a:	e7e7      	b.n	800ad5c <_printf_float+0x1a4>
 800ad8c:	2900      	cmp	r1, #0
 800ad8e:	bfd4      	ite	le
 800ad90:	f1c1 0202 	rsble	r2, r1, #2
 800ad94:	2201      	movgt	r2, #1
 800ad96:	4413      	add	r3, r2
 800ad98:	e7e0      	b.n	800ad5c <_printf_float+0x1a4>
 800ad9a:	6823      	ldr	r3, [r4, #0]
 800ad9c:	055a      	lsls	r2, r3, #21
 800ad9e:	d407      	bmi.n	800adb0 <_printf_float+0x1f8>
 800ada0:	6923      	ldr	r3, [r4, #16]
 800ada2:	4642      	mov	r2, r8
 800ada4:	4631      	mov	r1, r6
 800ada6:	4628      	mov	r0, r5
 800ada8:	47b8      	blx	r7
 800adaa:	3001      	adds	r0, #1
 800adac:	d12c      	bne.n	800ae08 <_printf_float+0x250>
 800adae:	e764      	b.n	800ac7a <_printf_float+0xc2>
 800adb0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800adb4:	f240 80e0 	bls.w	800af78 <_printf_float+0x3c0>
 800adb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800adbc:	2200      	movs	r2, #0
 800adbe:	2300      	movs	r3, #0
 800adc0:	f7f5 fe92 	bl	8000ae8 <__aeabi_dcmpeq>
 800adc4:	2800      	cmp	r0, #0
 800adc6:	d034      	beq.n	800ae32 <_printf_float+0x27a>
 800adc8:	4a37      	ldr	r2, [pc, #220]	; (800aea8 <_printf_float+0x2f0>)
 800adca:	2301      	movs	r3, #1
 800adcc:	4631      	mov	r1, r6
 800adce:	4628      	mov	r0, r5
 800add0:	47b8      	blx	r7
 800add2:	3001      	adds	r0, #1
 800add4:	f43f af51 	beq.w	800ac7a <_printf_float+0xc2>
 800add8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800addc:	429a      	cmp	r2, r3
 800adde:	db02      	blt.n	800ade6 <_printf_float+0x22e>
 800ade0:	6823      	ldr	r3, [r4, #0]
 800ade2:	07d8      	lsls	r0, r3, #31
 800ade4:	d510      	bpl.n	800ae08 <_printf_float+0x250>
 800ade6:	ee18 3a10 	vmov	r3, s16
 800adea:	4652      	mov	r2, sl
 800adec:	4631      	mov	r1, r6
 800adee:	4628      	mov	r0, r5
 800adf0:	47b8      	blx	r7
 800adf2:	3001      	adds	r0, #1
 800adf4:	f43f af41 	beq.w	800ac7a <_printf_float+0xc2>
 800adf8:	f04f 0800 	mov.w	r8, #0
 800adfc:	f104 091a 	add.w	r9, r4, #26
 800ae00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae02:	3b01      	subs	r3, #1
 800ae04:	4543      	cmp	r3, r8
 800ae06:	dc09      	bgt.n	800ae1c <_printf_float+0x264>
 800ae08:	6823      	ldr	r3, [r4, #0]
 800ae0a:	079b      	lsls	r3, r3, #30
 800ae0c:	f100 8105 	bmi.w	800b01a <_printf_float+0x462>
 800ae10:	68e0      	ldr	r0, [r4, #12]
 800ae12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae14:	4298      	cmp	r0, r3
 800ae16:	bfb8      	it	lt
 800ae18:	4618      	movlt	r0, r3
 800ae1a:	e730      	b.n	800ac7e <_printf_float+0xc6>
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	464a      	mov	r2, r9
 800ae20:	4631      	mov	r1, r6
 800ae22:	4628      	mov	r0, r5
 800ae24:	47b8      	blx	r7
 800ae26:	3001      	adds	r0, #1
 800ae28:	f43f af27 	beq.w	800ac7a <_printf_float+0xc2>
 800ae2c:	f108 0801 	add.w	r8, r8, #1
 800ae30:	e7e6      	b.n	800ae00 <_printf_float+0x248>
 800ae32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	dc39      	bgt.n	800aeac <_printf_float+0x2f4>
 800ae38:	4a1b      	ldr	r2, [pc, #108]	; (800aea8 <_printf_float+0x2f0>)
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	4631      	mov	r1, r6
 800ae3e:	4628      	mov	r0, r5
 800ae40:	47b8      	blx	r7
 800ae42:	3001      	adds	r0, #1
 800ae44:	f43f af19 	beq.w	800ac7a <_printf_float+0xc2>
 800ae48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae4c:	4313      	orrs	r3, r2
 800ae4e:	d102      	bne.n	800ae56 <_printf_float+0x29e>
 800ae50:	6823      	ldr	r3, [r4, #0]
 800ae52:	07d9      	lsls	r1, r3, #31
 800ae54:	d5d8      	bpl.n	800ae08 <_printf_float+0x250>
 800ae56:	ee18 3a10 	vmov	r3, s16
 800ae5a:	4652      	mov	r2, sl
 800ae5c:	4631      	mov	r1, r6
 800ae5e:	4628      	mov	r0, r5
 800ae60:	47b8      	blx	r7
 800ae62:	3001      	adds	r0, #1
 800ae64:	f43f af09 	beq.w	800ac7a <_printf_float+0xc2>
 800ae68:	f04f 0900 	mov.w	r9, #0
 800ae6c:	f104 0a1a 	add.w	sl, r4, #26
 800ae70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae72:	425b      	negs	r3, r3
 800ae74:	454b      	cmp	r3, r9
 800ae76:	dc01      	bgt.n	800ae7c <_printf_float+0x2c4>
 800ae78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae7a:	e792      	b.n	800ada2 <_printf_float+0x1ea>
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	4652      	mov	r2, sl
 800ae80:	4631      	mov	r1, r6
 800ae82:	4628      	mov	r0, r5
 800ae84:	47b8      	blx	r7
 800ae86:	3001      	adds	r0, #1
 800ae88:	f43f aef7 	beq.w	800ac7a <_printf_float+0xc2>
 800ae8c:	f109 0901 	add.w	r9, r9, #1
 800ae90:	e7ee      	b.n	800ae70 <_printf_float+0x2b8>
 800ae92:	bf00      	nop
 800ae94:	7fefffff 	.word	0x7fefffff
 800ae98:	0800f0d4 	.word	0x0800f0d4
 800ae9c:	0800f0d8 	.word	0x0800f0d8
 800aea0:	0800f0e0 	.word	0x0800f0e0
 800aea4:	0800f0dc 	.word	0x0800f0dc
 800aea8:	0800f0e4 	.word	0x0800f0e4
 800aeac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aeae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	bfa8      	it	ge
 800aeb4:	461a      	movge	r2, r3
 800aeb6:	2a00      	cmp	r2, #0
 800aeb8:	4691      	mov	r9, r2
 800aeba:	dc37      	bgt.n	800af2c <_printf_float+0x374>
 800aebc:	f04f 0b00 	mov.w	fp, #0
 800aec0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aec4:	f104 021a 	add.w	r2, r4, #26
 800aec8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aeca:	9305      	str	r3, [sp, #20]
 800aecc:	eba3 0309 	sub.w	r3, r3, r9
 800aed0:	455b      	cmp	r3, fp
 800aed2:	dc33      	bgt.n	800af3c <_printf_float+0x384>
 800aed4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aed8:	429a      	cmp	r2, r3
 800aeda:	db3b      	blt.n	800af54 <_printf_float+0x39c>
 800aedc:	6823      	ldr	r3, [r4, #0]
 800aede:	07da      	lsls	r2, r3, #31
 800aee0:	d438      	bmi.n	800af54 <_printf_float+0x39c>
 800aee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aee4:	9a05      	ldr	r2, [sp, #20]
 800aee6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aee8:	1a9a      	subs	r2, r3, r2
 800aeea:	eba3 0901 	sub.w	r9, r3, r1
 800aeee:	4591      	cmp	r9, r2
 800aef0:	bfa8      	it	ge
 800aef2:	4691      	movge	r9, r2
 800aef4:	f1b9 0f00 	cmp.w	r9, #0
 800aef8:	dc35      	bgt.n	800af66 <_printf_float+0x3ae>
 800aefa:	f04f 0800 	mov.w	r8, #0
 800aefe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af02:	f104 0a1a 	add.w	sl, r4, #26
 800af06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af0a:	1a9b      	subs	r3, r3, r2
 800af0c:	eba3 0309 	sub.w	r3, r3, r9
 800af10:	4543      	cmp	r3, r8
 800af12:	f77f af79 	ble.w	800ae08 <_printf_float+0x250>
 800af16:	2301      	movs	r3, #1
 800af18:	4652      	mov	r2, sl
 800af1a:	4631      	mov	r1, r6
 800af1c:	4628      	mov	r0, r5
 800af1e:	47b8      	blx	r7
 800af20:	3001      	adds	r0, #1
 800af22:	f43f aeaa 	beq.w	800ac7a <_printf_float+0xc2>
 800af26:	f108 0801 	add.w	r8, r8, #1
 800af2a:	e7ec      	b.n	800af06 <_printf_float+0x34e>
 800af2c:	4613      	mov	r3, r2
 800af2e:	4631      	mov	r1, r6
 800af30:	4642      	mov	r2, r8
 800af32:	4628      	mov	r0, r5
 800af34:	47b8      	blx	r7
 800af36:	3001      	adds	r0, #1
 800af38:	d1c0      	bne.n	800aebc <_printf_float+0x304>
 800af3a:	e69e      	b.n	800ac7a <_printf_float+0xc2>
 800af3c:	2301      	movs	r3, #1
 800af3e:	4631      	mov	r1, r6
 800af40:	4628      	mov	r0, r5
 800af42:	9205      	str	r2, [sp, #20]
 800af44:	47b8      	blx	r7
 800af46:	3001      	adds	r0, #1
 800af48:	f43f ae97 	beq.w	800ac7a <_printf_float+0xc2>
 800af4c:	9a05      	ldr	r2, [sp, #20]
 800af4e:	f10b 0b01 	add.w	fp, fp, #1
 800af52:	e7b9      	b.n	800aec8 <_printf_float+0x310>
 800af54:	ee18 3a10 	vmov	r3, s16
 800af58:	4652      	mov	r2, sl
 800af5a:	4631      	mov	r1, r6
 800af5c:	4628      	mov	r0, r5
 800af5e:	47b8      	blx	r7
 800af60:	3001      	adds	r0, #1
 800af62:	d1be      	bne.n	800aee2 <_printf_float+0x32a>
 800af64:	e689      	b.n	800ac7a <_printf_float+0xc2>
 800af66:	9a05      	ldr	r2, [sp, #20]
 800af68:	464b      	mov	r3, r9
 800af6a:	4442      	add	r2, r8
 800af6c:	4631      	mov	r1, r6
 800af6e:	4628      	mov	r0, r5
 800af70:	47b8      	blx	r7
 800af72:	3001      	adds	r0, #1
 800af74:	d1c1      	bne.n	800aefa <_printf_float+0x342>
 800af76:	e680      	b.n	800ac7a <_printf_float+0xc2>
 800af78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af7a:	2a01      	cmp	r2, #1
 800af7c:	dc01      	bgt.n	800af82 <_printf_float+0x3ca>
 800af7e:	07db      	lsls	r3, r3, #31
 800af80:	d538      	bpl.n	800aff4 <_printf_float+0x43c>
 800af82:	2301      	movs	r3, #1
 800af84:	4642      	mov	r2, r8
 800af86:	4631      	mov	r1, r6
 800af88:	4628      	mov	r0, r5
 800af8a:	47b8      	blx	r7
 800af8c:	3001      	adds	r0, #1
 800af8e:	f43f ae74 	beq.w	800ac7a <_printf_float+0xc2>
 800af92:	ee18 3a10 	vmov	r3, s16
 800af96:	4652      	mov	r2, sl
 800af98:	4631      	mov	r1, r6
 800af9a:	4628      	mov	r0, r5
 800af9c:	47b8      	blx	r7
 800af9e:	3001      	adds	r0, #1
 800afa0:	f43f ae6b 	beq.w	800ac7a <_printf_float+0xc2>
 800afa4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800afa8:	2200      	movs	r2, #0
 800afaa:	2300      	movs	r3, #0
 800afac:	f7f5 fd9c 	bl	8000ae8 <__aeabi_dcmpeq>
 800afb0:	b9d8      	cbnz	r0, 800afea <_printf_float+0x432>
 800afb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afb4:	f108 0201 	add.w	r2, r8, #1
 800afb8:	3b01      	subs	r3, #1
 800afba:	4631      	mov	r1, r6
 800afbc:	4628      	mov	r0, r5
 800afbe:	47b8      	blx	r7
 800afc0:	3001      	adds	r0, #1
 800afc2:	d10e      	bne.n	800afe2 <_printf_float+0x42a>
 800afc4:	e659      	b.n	800ac7a <_printf_float+0xc2>
 800afc6:	2301      	movs	r3, #1
 800afc8:	4652      	mov	r2, sl
 800afca:	4631      	mov	r1, r6
 800afcc:	4628      	mov	r0, r5
 800afce:	47b8      	blx	r7
 800afd0:	3001      	adds	r0, #1
 800afd2:	f43f ae52 	beq.w	800ac7a <_printf_float+0xc2>
 800afd6:	f108 0801 	add.w	r8, r8, #1
 800afda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afdc:	3b01      	subs	r3, #1
 800afde:	4543      	cmp	r3, r8
 800afe0:	dcf1      	bgt.n	800afc6 <_printf_float+0x40e>
 800afe2:	464b      	mov	r3, r9
 800afe4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800afe8:	e6dc      	b.n	800ada4 <_printf_float+0x1ec>
 800afea:	f04f 0800 	mov.w	r8, #0
 800afee:	f104 0a1a 	add.w	sl, r4, #26
 800aff2:	e7f2      	b.n	800afda <_printf_float+0x422>
 800aff4:	2301      	movs	r3, #1
 800aff6:	4642      	mov	r2, r8
 800aff8:	e7df      	b.n	800afba <_printf_float+0x402>
 800affa:	2301      	movs	r3, #1
 800affc:	464a      	mov	r2, r9
 800affe:	4631      	mov	r1, r6
 800b000:	4628      	mov	r0, r5
 800b002:	47b8      	blx	r7
 800b004:	3001      	adds	r0, #1
 800b006:	f43f ae38 	beq.w	800ac7a <_printf_float+0xc2>
 800b00a:	f108 0801 	add.w	r8, r8, #1
 800b00e:	68e3      	ldr	r3, [r4, #12]
 800b010:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b012:	1a5b      	subs	r3, r3, r1
 800b014:	4543      	cmp	r3, r8
 800b016:	dcf0      	bgt.n	800affa <_printf_float+0x442>
 800b018:	e6fa      	b.n	800ae10 <_printf_float+0x258>
 800b01a:	f04f 0800 	mov.w	r8, #0
 800b01e:	f104 0919 	add.w	r9, r4, #25
 800b022:	e7f4      	b.n	800b00e <_printf_float+0x456>

0800b024 <_printf_common>:
 800b024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b028:	4616      	mov	r6, r2
 800b02a:	4699      	mov	r9, r3
 800b02c:	688a      	ldr	r2, [r1, #8]
 800b02e:	690b      	ldr	r3, [r1, #16]
 800b030:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b034:	4293      	cmp	r3, r2
 800b036:	bfb8      	it	lt
 800b038:	4613      	movlt	r3, r2
 800b03a:	6033      	str	r3, [r6, #0]
 800b03c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b040:	4607      	mov	r7, r0
 800b042:	460c      	mov	r4, r1
 800b044:	b10a      	cbz	r2, 800b04a <_printf_common+0x26>
 800b046:	3301      	adds	r3, #1
 800b048:	6033      	str	r3, [r6, #0]
 800b04a:	6823      	ldr	r3, [r4, #0]
 800b04c:	0699      	lsls	r1, r3, #26
 800b04e:	bf42      	ittt	mi
 800b050:	6833      	ldrmi	r3, [r6, #0]
 800b052:	3302      	addmi	r3, #2
 800b054:	6033      	strmi	r3, [r6, #0]
 800b056:	6825      	ldr	r5, [r4, #0]
 800b058:	f015 0506 	ands.w	r5, r5, #6
 800b05c:	d106      	bne.n	800b06c <_printf_common+0x48>
 800b05e:	f104 0a19 	add.w	sl, r4, #25
 800b062:	68e3      	ldr	r3, [r4, #12]
 800b064:	6832      	ldr	r2, [r6, #0]
 800b066:	1a9b      	subs	r3, r3, r2
 800b068:	42ab      	cmp	r3, r5
 800b06a:	dc26      	bgt.n	800b0ba <_printf_common+0x96>
 800b06c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b070:	1e13      	subs	r3, r2, #0
 800b072:	6822      	ldr	r2, [r4, #0]
 800b074:	bf18      	it	ne
 800b076:	2301      	movne	r3, #1
 800b078:	0692      	lsls	r2, r2, #26
 800b07a:	d42b      	bmi.n	800b0d4 <_printf_common+0xb0>
 800b07c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b080:	4649      	mov	r1, r9
 800b082:	4638      	mov	r0, r7
 800b084:	47c0      	blx	r8
 800b086:	3001      	adds	r0, #1
 800b088:	d01e      	beq.n	800b0c8 <_printf_common+0xa4>
 800b08a:	6823      	ldr	r3, [r4, #0]
 800b08c:	68e5      	ldr	r5, [r4, #12]
 800b08e:	6832      	ldr	r2, [r6, #0]
 800b090:	f003 0306 	and.w	r3, r3, #6
 800b094:	2b04      	cmp	r3, #4
 800b096:	bf08      	it	eq
 800b098:	1aad      	subeq	r5, r5, r2
 800b09a:	68a3      	ldr	r3, [r4, #8]
 800b09c:	6922      	ldr	r2, [r4, #16]
 800b09e:	bf0c      	ite	eq
 800b0a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0a4:	2500      	movne	r5, #0
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	bfc4      	itt	gt
 800b0aa:	1a9b      	subgt	r3, r3, r2
 800b0ac:	18ed      	addgt	r5, r5, r3
 800b0ae:	2600      	movs	r6, #0
 800b0b0:	341a      	adds	r4, #26
 800b0b2:	42b5      	cmp	r5, r6
 800b0b4:	d11a      	bne.n	800b0ec <_printf_common+0xc8>
 800b0b6:	2000      	movs	r0, #0
 800b0b8:	e008      	b.n	800b0cc <_printf_common+0xa8>
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	4652      	mov	r2, sl
 800b0be:	4649      	mov	r1, r9
 800b0c0:	4638      	mov	r0, r7
 800b0c2:	47c0      	blx	r8
 800b0c4:	3001      	adds	r0, #1
 800b0c6:	d103      	bne.n	800b0d0 <_printf_common+0xac>
 800b0c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b0cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0d0:	3501      	adds	r5, #1
 800b0d2:	e7c6      	b.n	800b062 <_printf_common+0x3e>
 800b0d4:	18e1      	adds	r1, r4, r3
 800b0d6:	1c5a      	adds	r2, r3, #1
 800b0d8:	2030      	movs	r0, #48	; 0x30
 800b0da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b0de:	4422      	add	r2, r4
 800b0e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b0e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b0e8:	3302      	adds	r3, #2
 800b0ea:	e7c7      	b.n	800b07c <_printf_common+0x58>
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	4622      	mov	r2, r4
 800b0f0:	4649      	mov	r1, r9
 800b0f2:	4638      	mov	r0, r7
 800b0f4:	47c0      	blx	r8
 800b0f6:	3001      	adds	r0, #1
 800b0f8:	d0e6      	beq.n	800b0c8 <_printf_common+0xa4>
 800b0fa:	3601      	adds	r6, #1
 800b0fc:	e7d9      	b.n	800b0b2 <_printf_common+0x8e>
	...

0800b100 <_printf_i>:
 800b100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b104:	7e0f      	ldrb	r7, [r1, #24]
 800b106:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b108:	2f78      	cmp	r7, #120	; 0x78
 800b10a:	4691      	mov	r9, r2
 800b10c:	4680      	mov	r8, r0
 800b10e:	460c      	mov	r4, r1
 800b110:	469a      	mov	sl, r3
 800b112:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b116:	d807      	bhi.n	800b128 <_printf_i+0x28>
 800b118:	2f62      	cmp	r7, #98	; 0x62
 800b11a:	d80a      	bhi.n	800b132 <_printf_i+0x32>
 800b11c:	2f00      	cmp	r7, #0
 800b11e:	f000 80d8 	beq.w	800b2d2 <_printf_i+0x1d2>
 800b122:	2f58      	cmp	r7, #88	; 0x58
 800b124:	f000 80a3 	beq.w	800b26e <_printf_i+0x16e>
 800b128:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b12c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b130:	e03a      	b.n	800b1a8 <_printf_i+0xa8>
 800b132:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b136:	2b15      	cmp	r3, #21
 800b138:	d8f6      	bhi.n	800b128 <_printf_i+0x28>
 800b13a:	a101      	add	r1, pc, #4	; (adr r1, 800b140 <_printf_i+0x40>)
 800b13c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b140:	0800b199 	.word	0x0800b199
 800b144:	0800b1ad 	.word	0x0800b1ad
 800b148:	0800b129 	.word	0x0800b129
 800b14c:	0800b129 	.word	0x0800b129
 800b150:	0800b129 	.word	0x0800b129
 800b154:	0800b129 	.word	0x0800b129
 800b158:	0800b1ad 	.word	0x0800b1ad
 800b15c:	0800b129 	.word	0x0800b129
 800b160:	0800b129 	.word	0x0800b129
 800b164:	0800b129 	.word	0x0800b129
 800b168:	0800b129 	.word	0x0800b129
 800b16c:	0800b2b9 	.word	0x0800b2b9
 800b170:	0800b1dd 	.word	0x0800b1dd
 800b174:	0800b29b 	.word	0x0800b29b
 800b178:	0800b129 	.word	0x0800b129
 800b17c:	0800b129 	.word	0x0800b129
 800b180:	0800b2db 	.word	0x0800b2db
 800b184:	0800b129 	.word	0x0800b129
 800b188:	0800b1dd 	.word	0x0800b1dd
 800b18c:	0800b129 	.word	0x0800b129
 800b190:	0800b129 	.word	0x0800b129
 800b194:	0800b2a3 	.word	0x0800b2a3
 800b198:	682b      	ldr	r3, [r5, #0]
 800b19a:	1d1a      	adds	r2, r3, #4
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	602a      	str	r2, [r5, #0]
 800b1a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	e0a3      	b.n	800b2f4 <_printf_i+0x1f4>
 800b1ac:	6820      	ldr	r0, [r4, #0]
 800b1ae:	6829      	ldr	r1, [r5, #0]
 800b1b0:	0606      	lsls	r6, r0, #24
 800b1b2:	f101 0304 	add.w	r3, r1, #4
 800b1b6:	d50a      	bpl.n	800b1ce <_printf_i+0xce>
 800b1b8:	680e      	ldr	r6, [r1, #0]
 800b1ba:	602b      	str	r3, [r5, #0]
 800b1bc:	2e00      	cmp	r6, #0
 800b1be:	da03      	bge.n	800b1c8 <_printf_i+0xc8>
 800b1c0:	232d      	movs	r3, #45	; 0x2d
 800b1c2:	4276      	negs	r6, r6
 800b1c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1c8:	485e      	ldr	r0, [pc, #376]	; (800b344 <_printf_i+0x244>)
 800b1ca:	230a      	movs	r3, #10
 800b1cc:	e019      	b.n	800b202 <_printf_i+0x102>
 800b1ce:	680e      	ldr	r6, [r1, #0]
 800b1d0:	602b      	str	r3, [r5, #0]
 800b1d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b1d6:	bf18      	it	ne
 800b1d8:	b236      	sxthne	r6, r6
 800b1da:	e7ef      	b.n	800b1bc <_printf_i+0xbc>
 800b1dc:	682b      	ldr	r3, [r5, #0]
 800b1de:	6820      	ldr	r0, [r4, #0]
 800b1e0:	1d19      	adds	r1, r3, #4
 800b1e2:	6029      	str	r1, [r5, #0]
 800b1e4:	0601      	lsls	r1, r0, #24
 800b1e6:	d501      	bpl.n	800b1ec <_printf_i+0xec>
 800b1e8:	681e      	ldr	r6, [r3, #0]
 800b1ea:	e002      	b.n	800b1f2 <_printf_i+0xf2>
 800b1ec:	0646      	lsls	r6, r0, #25
 800b1ee:	d5fb      	bpl.n	800b1e8 <_printf_i+0xe8>
 800b1f0:	881e      	ldrh	r6, [r3, #0]
 800b1f2:	4854      	ldr	r0, [pc, #336]	; (800b344 <_printf_i+0x244>)
 800b1f4:	2f6f      	cmp	r7, #111	; 0x6f
 800b1f6:	bf0c      	ite	eq
 800b1f8:	2308      	moveq	r3, #8
 800b1fa:	230a      	movne	r3, #10
 800b1fc:	2100      	movs	r1, #0
 800b1fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b202:	6865      	ldr	r5, [r4, #4]
 800b204:	60a5      	str	r5, [r4, #8]
 800b206:	2d00      	cmp	r5, #0
 800b208:	bfa2      	ittt	ge
 800b20a:	6821      	ldrge	r1, [r4, #0]
 800b20c:	f021 0104 	bicge.w	r1, r1, #4
 800b210:	6021      	strge	r1, [r4, #0]
 800b212:	b90e      	cbnz	r6, 800b218 <_printf_i+0x118>
 800b214:	2d00      	cmp	r5, #0
 800b216:	d04d      	beq.n	800b2b4 <_printf_i+0x1b4>
 800b218:	4615      	mov	r5, r2
 800b21a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b21e:	fb03 6711 	mls	r7, r3, r1, r6
 800b222:	5dc7      	ldrb	r7, [r0, r7]
 800b224:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b228:	4637      	mov	r7, r6
 800b22a:	42bb      	cmp	r3, r7
 800b22c:	460e      	mov	r6, r1
 800b22e:	d9f4      	bls.n	800b21a <_printf_i+0x11a>
 800b230:	2b08      	cmp	r3, #8
 800b232:	d10b      	bne.n	800b24c <_printf_i+0x14c>
 800b234:	6823      	ldr	r3, [r4, #0]
 800b236:	07de      	lsls	r6, r3, #31
 800b238:	d508      	bpl.n	800b24c <_printf_i+0x14c>
 800b23a:	6923      	ldr	r3, [r4, #16]
 800b23c:	6861      	ldr	r1, [r4, #4]
 800b23e:	4299      	cmp	r1, r3
 800b240:	bfde      	ittt	le
 800b242:	2330      	movle	r3, #48	; 0x30
 800b244:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b248:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b24c:	1b52      	subs	r2, r2, r5
 800b24e:	6122      	str	r2, [r4, #16]
 800b250:	f8cd a000 	str.w	sl, [sp]
 800b254:	464b      	mov	r3, r9
 800b256:	aa03      	add	r2, sp, #12
 800b258:	4621      	mov	r1, r4
 800b25a:	4640      	mov	r0, r8
 800b25c:	f7ff fee2 	bl	800b024 <_printf_common>
 800b260:	3001      	adds	r0, #1
 800b262:	d14c      	bne.n	800b2fe <_printf_i+0x1fe>
 800b264:	f04f 30ff 	mov.w	r0, #4294967295
 800b268:	b004      	add	sp, #16
 800b26a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b26e:	4835      	ldr	r0, [pc, #212]	; (800b344 <_printf_i+0x244>)
 800b270:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b274:	6829      	ldr	r1, [r5, #0]
 800b276:	6823      	ldr	r3, [r4, #0]
 800b278:	f851 6b04 	ldr.w	r6, [r1], #4
 800b27c:	6029      	str	r1, [r5, #0]
 800b27e:	061d      	lsls	r5, r3, #24
 800b280:	d514      	bpl.n	800b2ac <_printf_i+0x1ac>
 800b282:	07df      	lsls	r7, r3, #31
 800b284:	bf44      	itt	mi
 800b286:	f043 0320 	orrmi.w	r3, r3, #32
 800b28a:	6023      	strmi	r3, [r4, #0]
 800b28c:	b91e      	cbnz	r6, 800b296 <_printf_i+0x196>
 800b28e:	6823      	ldr	r3, [r4, #0]
 800b290:	f023 0320 	bic.w	r3, r3, #32
 800b294:	6023      	str	r3, [r4, #0]
 800b296:	2310      	movs	r3, #16
 800b298:	e7b0      	b.n	800b1fc <_printf_i+0xfc>
 800b29a:	6823      	ldr	r3, [r4, #0]
 800b29c:	f043 0320 	orr.w	r3, r3, #32
 800b2a0:	6023      	str	r3, [r4, #0]
 800b2a2:	2378      	movs	r3, #120	; 0x78
 800b2a4:	4828      	ldr	r0, [pc, #160]	; (800b348 <_printf_i+0x248>)
 800b2a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b2aa:	e7e3      	b.n	800b274 <_printf_i+0x174>
 800b2ac:	0659      	lsls	r1, r3, #25
 800b2ae:	bf48      	it	mi
 800b2b0:	b2b6      	uxthmi	r6, r6
 800b2b2:	e7e6      	b.n	800b282 <_printf_i+0x182>
 800b2b4:	4615      	mov	r5, r2
 800b2b6:	e7bb      	b.n	800b230 <_printf_i+0x130>
 800b2b8:	682b      	ldr	r3, [r5, #0]
 800b2ba:	6826      	ldr	r6, [r4, #0]
 800b2bc:	6961      	ldr	r1, [r4, #20]
 800b2be:	1d18      	adds	r0, r3, #4
 800b2c0:	6028      	str	r0, [r5, #0]
 800b2c2:	0635      	lsls	r5, r6, #24
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	d501      	bpl.n	800b2cc <_printf_i+0x1cc>
 800b2c8:	6019      	str	r1, [r3, #0]
 800b2ca:	e002      	b.n	800b2d2 <_printf_i+0x1d2>
 800b2cc:	0670      	lsls	r0, r6, #25
 800b2ce:	d5fb      	bpl.n	800b2c8 <_printf_i+0x1c8>
 800b2d0:	8019      	strh	r1, [r3, #0]
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	6123      	str	r3, [r4, #16]
 800b2d6:	4615      	mov	r5, r2
 800b2d8:	e7ba      	b.n	800b250 <_printf_i+0x150>
 800b2da:	682b      	ldr	r3, [r5, #0]
 800b2dc:	1d1a      	adds	r2, r3, #4
 800b2de:	602a      	str	r2, [r5, #0]
 800b2e0:	681d      	ldr	r5, [r3, #0]
 800b2e2:	6862      	ldr	r2, [r4, #4]
 800b2e4:	2100      	movs	r1, #0
 800b2e6:	4628      	mov	r0, r5
 800b2e8:	f7f4 ff8a 	bl	8000200 <memchr>
 800b2ec:	b108      	cbz	r0, 800b2f2 <_printf_i+0x1f2>
 800b2ee:	1b40      	subs	r0, r0, r5
 800b2f0:	6060      	str	r0, [r4, #4]
 800b2f2:	6863      	ldr	r3, [r4, #4]
 800b2f4:	6123      	str	r3, [r4, #16]
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2fc:	e7a8      	b.n	800b250 <_printf_i+0x150>
 800b2fe:	6923      	ldr	r3, [r4, #16]
 800b300:	462a      	mov	r2, r5
 800b302:	4649      	mov	r1, r9
 800b304:	4640      	mov	r0, r8
 800b306:	47d0      	blx	sl
 800b308:	3001      	adds	r0, #1
 800b30a:	d0ab      	beq.n	800b264 <_printf_i+0x164>
 800b30c:	6823      	ldr	r3, [r4, #0]
 800b30e:	079b      	lsls	r3, r3, #30
 800b310:	d413      	bmi.n	800b33a <_printf_i+0x23a>
 800b312:	68e0      	ldr	r0, [r4, #12]
 800b314:	9b03      	ldr	r3, [sp, #12]
 800b316:	4298      	cmp	r0, r3
 800b318:	bfb8      	it	lt
 800b31a:	4618      	movlt	r0, r3
 800b31c:	e7a4      	b.n	800b268 <_printf_i+0x168>
 800b31e:	2301      	movs	r3, #1
 800b320:	4632      	mov	r2, r6
 800b322:	4649      	mov	r1, r9
 800b324:	4640      	mov	r0, r8
 800b326:	47d0      	blx	sl
 800b328:	3001      	adds	r0, #1
 800b32a:	d09b      	beq.n	800b264 <_printf_i+0x164>
 800b32c:	3501      	adds	r5, #1
 800b32e:	68e3      	ldr	r3, [r4, #12]
 800b330:	9903      	ldr	r1, [sp, #12]
 800b332:	1a5b      	subs	r3, r3, r1
 800b334:	42ab      	cmp	r3, r5
 800b336:	dcf2      	bgt.n	800b31e <_printf_i+0x21e>
 800b338:	e7eb      	b.n	800b312 <_printf_i+0x212>
 800b33a:	2500      	movs	r5, #0
 800b33c:	f104 0619 	add.w	r6, r4, #25
 800b340:	e7f5      	b.n	800b32e <_printf_i+0x22e>
 800b342:	bf00      	nop
 800b344:	0800f0e6 	.word	0x0800f0e6
 800b348:	0800f0f7 	.word	0x0800f0f7

0800b34c <iprintf>:
 800b34c:	b40f      	push	{r0, r1, r2, r3}
 800b34e:	4b0a      	ldr	r3, [pc, #40]	; (800b378 <iprintf+0x2c>)
 800b350:	b513      	push	{r0, r1, r4, lr}
 800b352:	681c      	ldr	r4, [r3, #0]
 800b354:	b124      	cbz	r4, 800b360 <iprintf+0x14>
 800b356:	69a3      	ldr	r3, [r4, #24]
 800b358:	b913      	cbnz	r3, 800b360 <iprintf+0x14>
 800b35a:	4620      	mov	r0, r4
 800b35c:	f7ff fa1c 	bl	800a798 <__sinit>
 800b360:	ab05      	add	r3, sp, #20
 800b362:	9a04      	ldr	r2, [sp, #16]
 800b364:	68a1      	ldr	r1, [r4, #8]
 800b366:	9301      	str	r3, [sp, #4]
 800b368:	4620      	mov	r0, r4
 800b36a:	f001 ff85 	bl	800d278 <_vfiprintf_r>
 800b36e:	b002      	add	sp, #8
 800b370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b374:	b004      	add	sp, #16
 800b376:	4770      	bx	lr
 800b378:	20000058 	.word	0x20000058

0800b37c <_puts_r>:
 800b37c:	b570      	push	{r4, r5, r6, lr}
 800b37e:	460e      	mov	r6, r1
 800b380:	4605      	mov	r5, r0
 800b382:	b118      	cbz	r0, 800b38c <_puts_r+0x10>
 800b384:	6983      	ldr	r3, [r0, #24]
 800b386:	b90b      	cbnz	r3, 800b38c <_puts_r+0x10>
 800b388:	f7ff fa06 	bl	800a798 <__sinit>
 800b38c:	69ab      	ldr	r3, [r5, #24]
 800b38e:	68ac      	ldr	r4, [r5, #8]
 800b390:	b913      	cbnz	r3, 800b398 <_puts_r+0x1c>
 800b392:	4628      	mov	r0, r5
 800b394:	f7ff fa00 	bl	800a798 <__sinit>
 800b398:	4b2c      	ldr	r3, [pc, #176]	; (800b44c <_puts_r+0xd0>)
 800b39a:	429c      	cmp	r4, r3
 800b39c:	d120      	bne.n	800b3e0 <_puts_r+0x64>
 800b39e:	686c      	ldr	r4, [r5, #4]
 800b3a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b3a2:	07db      	lsls	r3, r3, #31
 800b3a4:	d405      	bmi.n	800b3b2 <_puts_r+0x36>
 800b3a6:	89a3      	ldrh	r3, [r4, #12]
 800b3a8:	0598      	lsls	r0, r3, #22
 800b3aa:	d402      	bmi.n	800b3b2 <_puts_r+0x36>
 800b3ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3ae:	f7ff fab6 	bl	800a91e <__retarget_lock_acquire_recursive>
 800b3b2:	89a3      	ldrh	r3, [r4, #12]
 800b3b4:	0719      	lsls	r1, r3, #28
 800b3b6:	d51d      	bpl.n	800b3f4 <_puts_r+0x78>
 800b3b8:	6923      	ldr	r3, [r4, #16]
 800b3ba:	b1db      	cbz	r3, 800b3f4 <_puts_r+0x78>
 800b3bc:	3e01      	subs	r6, #1
 800b3be:	68a3      	ldr	r3, [r4, #8]
 800b3c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b3c4:	3b01      	subs	r3, #1
 800b3c6:	60a3      	str	r3, [r4, #8]
 800b3c8:	bb39      	cbnz	r1, 800b41a <_puts_r+0x9e>
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	da38      	bge.n	800b440 <_puts_r+0xc4>
 800b3ce:	4622      	mov	r2, r4
 800b3d0:	210a      	movs	r1, #10
 800b3d2:	4628      	mov	r0, r5
 800b3d4:	f000 f934 	bl	800b640 <__swbuf_r>
 800b3d8:	3001      	adds	r0, #1
 800b3da:	d011      	beq.n	800b400 <_puts_r+0x84>
 800b3dc:	250a      	movs	r5, #10
 800b3de:	e011      	b.n	800b404 <_puts_r+0x88>
 800b3e0:	4b1b      	ldr	r3, [pc, #108]	; (800b450 <_puts_r+0xd4>)
 800b3e2:	429c      	cmp	r4, r3
 800b3e4:	d101      	bne.n	800b3ea <_puts_r+0x6e>
 800b3e6:	68ac      	ldr	r4, [r5, #8]
 800b3e8:	e7da      	b.n	800b3a0 <_puts_r+0x24>
 800b3ea:	4b1a      	ldr	r3, [pc, #104]	; (800b454 <_puts_r+0xd8>)
 800b3ec:	429c      	cmp	r4, r3
 800b3ee:	bf08      	it	eq
 800b3f0:	68ec      	ldreq	r4, [r5, #12]
 800b3f2:	e7d5      	b.n	800b3a0 <_puts_r+0x24>
 800b3f4:	4621      	mov	r1, r4
 800b3f6:	4628      	mov	r0, r5
 800b3f8:	f000 f986 	bl	800b708 <__swsetup_r>
 800b3fc:	2800      	cmp	r0, #0
 800b3fe:	d0dd      	beq.n	800b3bc <_puts_r+0x40>
 800b400:	f04f 35ff 	mov.w	r5, #4294967295
 800b404:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b406:	07da      	lsls	r2, r3, #31
 800b408:	d405      	bmi.n	800b416 <_puts_r+0x9a>
 800b40a:	89a3      	ldrh	r3, [r4, #12]
 800b40c:	059b      	lsls	r3, r3, #22
 800b40e:	d402      	bmi.n	800b416 <_puts_r+0x9a>
 800b410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b412:	f7ff fa85 	bl	800a920 <__retarget_lock_release_recursive>
 800b416:	4628      	mov	r0, r5
 800b418:	bd70      	pop	{r4, r5, r6, pc}
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	da04      	bge.n	800b428 <_puts_r+0xac>
 800b41e:	69a2      	ldr	r2, [r4, #24]
 800b420:	429a      	cmp	r2, r3
 800b422:	dc06      	bgt.n	800b432 <_puts_r+0xb6>
 800b424:	290a      	cmp	r1, #10
 800b426:	d004      	beq.n	800b432 <_puts_r+0xb6>
 800b428:	6823      	ldr	r3, [r4, #0]
 800b42a:	1c5a      	adds	r2, r3, #1
 800b42c:	6022      	str	r2, [r4, #0]
 800b42e:	7019      	strb	r1, [r3, #0]
 800b430:	e7c5      	b.n	800b3be <_puts_r+0x42>
 800b432:	4622      	mov	r2, r4
 800b434:	4628      	mov	r0, r5
 800b436:	f000 f903 	bl	800b640 <__swbuf_r>
 800b43a:	3001      	adds	r0, #1
 800b43c:	d1bf      	bne.n	800b3be <_puts_r+0x42>
 800b43e:	e7df      	b.n	800b400 <_puts_r+0x84>
 800b440:	6823      	ldr	r3, [r4, #0]
 800b442:	250a      	movs	r5, #10
 800b444:	1c5a      	adds	r2, r3, #1
 800b446:	6022      	str	r2, [r4, #0]
 800b448:	701d      	strb	r5, [r3, #0]
 800b44a:	e7db      	b.n	800b404 <_puts_r+0x88>
 800b44c:	0800f090 	.word	0x0800f090
 800b450:	0800f0b0 	.word	0x0800f0b0
 800b454:	0800f070 	.word	0x0800f070

0800b458 <puts>:
 800b458:	4b02      	ldr	r3, [pc, #8]	; (800b464 <puts+0xc>)
 800b45a:	4601      	mov	r1, r0
 800b45c:	6818      	ldr	r0, [r3, #0]
 800b45e:	f7ff bf8d 	b.w	800b37c <_puts_r>
 800b462:	bf00      	nop
 800b464:	20000058 	.word	0x20000058

0800b468 <cleanup_glue>:
 800b468:	b538      	push	{r3, r4, r5, lr}
 800b46a:	460c      	mov	r4, r1
 800b46c:	6809      	ldr	r1, [r1, #0]
 800b46e:	4605      	mov	r5, r0
 800b470:	b109      	cbz	r1, 800b476 <cleanup_glue+0xe>
 800b472:	f7ff fff9 	bl	800b468 <cleanup_glue>
 800b476:	4621      	mov	r1, r4
 800b478:	4628      	mov	r0, r5
 800b47a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b47e:	f001 bd29 	b.w	800ced4 <_free_r>
	...

0800b484 <_reclaim_reent>:
 800b484:	4b2c      	ldr	r3, [pc, #176]	; (800b538 <_reclaim_reent+0xb4>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	4283      	cmp	r3, r0
 800b48a:	b570      	push	{r4, r5, r6, lr}
 800b48c:	4604      	mov	r4, r0
 800b48e:	d051      	beq.n	800b534 <_reclaim_reent+0xb0>
 800b490:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b492:	b143      	cbz	r3, 800b4a6 <_reclaim_reent+0x22>
 800b494:	68db      	ldr	r3, [r3, #12]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d14a      	bne.n	800b530 <_reclaim_reent+0xac>
 800b49a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b49c:	6819      	ldr	r1, [r3, #0]
 800b49e:	b111      	cbz	r1, 800b4a6 <_reclaim_reent+0x22>
 800b4a0:	4620      	mov	r0, r4
 800b4a2:	f001 fd17 	bl	800ced4 <_free_r>
 800b4a6:	6961      	ldr	r1, [r4, #20]
 800b4a8:	b111      	cbz	r1, 800b4b0 <_reclaim_reent+0x2c>
 800b4aa:	4620      	mov	r0, r4
 800b4ac:	f001 fd12 	bl	800ced4 <_free_r>
 800b4b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b4b2:	b111      	cbz	r1, 800b4ba <_reclaim_reent+0x36>
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	f001 fd0d 	bl	800ced4 <_free_r>
 800b4ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b4bc:	b111      	cbz	r1, 800b4c4 <_reclaim_reent+0x40>
 800b4be:	4620      	mov	r0, r4
 800b4c0:	f001 fd08 	bl	800ced4 <_free_r>
 800b4c4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b4c6:	b111      	cbz	r1, 800b4ce <_reclaim_reent+0x4a>
 800b4c8:	4620      	mov	r0, r4
 800b4ca:	f001 fd03 	bl	800ced4 <_free_r>
 800b4ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b4d0:	b111      	cbz	r1, 800b4d8 <_reclaim_reent+0x54>
 800b4d2:	4620      	mov	r0, r4
 800b4d4:	f001 fcfe 	bl	800ced4 <_free_r>
 800b4d8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b4da:	b111      	cbz	r1, 800b4e2 <_reclaim_reent+0x5e>
 800b4dc:	4620      	mov	r0, r4
 800b4de:	f001 fcf9 	bl	800ced4 <_free_r>
 800b4e2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b4e4:	b111      	cbz	r1, 800b4ec <_reclaim_reent+0x68>
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	f001 fcf4 	bl	800ced4 <_free_r>
 800b4ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4ee:	b111      	cbz	r1, 800b4f6 <_reclaim_reent+0x72>
 800b4f0:	4620      	mov	r0, r4
 800b4f2:	f001 fcef 	bl	800ced4 <_free_r>
 800b4f6:	69a3      	ldr	r3, [r4, #24]
 800b4f8:	b1e3      	cbz	r3, 800b534 <_reclaim_reent+0xb0>
 800b4fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	4798      	blx	r3
 800b500:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b502:	b1b9      	cbz	r1, 800b534 <_reclaim_reent+0xb0>
 800b504:	4620      	mov	r0, r4
 800b506:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b50a:	f7ff bfad 	b.w	800b468 <cleanup_glue>
 800b50e:	5949      	ldr	r1, [r1, r5]
 800b510:	b941      	cbnz	r1, 800b524 <_reclaim_reent+0xa0>
 800b512:	3504      	adds	r5, #4
 800b514:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b516:	2d80      	cmp	r5, #128	; 0x80
 800b518:	68d9      	ldr	r1, [r3, #12]
 800b51a:	d1f8      	bne.n	800b50e <_reclaim_reent+0x8a>
 800b51c:	4620      	mov	r0, r4
 800b51e:	f001 fcd9 	bl	800ced4 <_free_r>
 800b522:	e7ba      	b.n	800b49a <_reclaim_reent+0x16>
 800b524:	680e      	ldr	r6, [r1, #0]
 800b526:	4620      	mov	r0, r4
 800b528:	f001 fcd4 	bl	800ced4 <_free_r>
 800b52c:	4631      	mov	r1, r6
 800b52e:	e7ef      	b.n	800b510 <_reclaim_reent+0x8c>
 800b530:	2500      	movs	r5, #0
 800b532:	e7ef      	b.n	800b514 <_reclaim_reent+0x90>
 800b534:	bd70      	pop	{r4, r5, r6, pc}
 800b536:	bf00      	nop
 800b538:	20000058 	.word	0x20000058

0800b53c <_sbrk_r>:
 800b53c:	b538      	push	{r3, r4, r5, lr}
 800b53e:	4d06      	ldr	r5, [pc, #24]	; (800b558 <_sbrk_r+0x1c>)
 800b540:	2300      	movs	r3, #0
 800b542:	4604      	mov	r4, r0
 800b544:	4608      	mov	r0, r1
 800b546:	602b      	str	r3, [r5, #0]
 800b548:	f7f8 fb14 	bl	8003b74 <_sbrk>
 800b54c:	1c43      	adds	r3, r0, #1
 800b54e:	d102      	bne.n	800b556 <_sbrk_r+0x1a>
 800b550:	682b      	ldr	r3, [r5, #0]
 800b552:	b103      	cbz	r3, 800b556 <_sbrk_r+0x1a>
 800b554:	6023      	str	r3, [r4, #0]
 800b556:	bd38      	pop	{r3, r4, r5, pc}
 800b558:	20004494 	.word	0x20004494

0800b55c <siprintf>:
 800b55c:	b40e      	push	{r1, r2, r3}
 800b55e:	b500      	push	{lr}
 800b560:	b09c      	sub	sp, #112	; 0x70
 800b562:	ab1d      	add	r3, sp, #116	; 0x74
 800b564:	9002      	str	r0, [sp, #8]
 800b566:	9006      	str	r0, [sp, #24]
 800b568:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b56c:	4809      	ldr	r0, [pc, #36]	; (800b594 <siprintf+0x38>)
 800b56e:	9107      	str	r1, [sp, #28]
 800b570:	9104      	str	r1, [sp, #16]
 800b572:	4909      	ldr	r1, [pc, #36]	; (800b598 <siprintf+0x3c>)
 800b574:	f853 2b04 	ldr.w	r2, [r3], #4
 800b578:	9105      	str	r1, [sp, #20]
 800b57a:	6800      	ldr	r0, [r0, #0]
 800b57c:	9301      	str	r3, [sp, #4]
 800b57e:	a902      	add	r1, sp, #8
 800b580:	f001 fd50 	bl	800d024 <_svfiprintf_r>
 800b584:	9b02      	ldr	r3, [sp, #8]
 800b586:	2200      	movs	r2, #0
 800b588:	701a      	strb	r2, [r3, #0]
 800b58a:	b01c      	add	sp, #112	; 0x70
 800b58c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b590:	b003      	add	sp, #12
 800b592:	4770      	bx	lr
 800b594:	20000058 	.word	0x20000058
 800b598:	ffff0208 	.word	0xffff0208

0800b59c <__sread>:
 800b59c:	b510      	push	{r4, lr}
 800b59e:	460c      	mov	r4, r1
 800b5a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5a4:	f001 ff98 	bl	800d4d8 <_read_r>
 800b5a8:	2800      	cmp	r0, #0
 800b5aa:	bfab      	itete	ge
 800b5ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b5ae:	89a3      	ldrhlt	r3, [r4, #12]
 800b5b0:	181b      	addge	r3, r3, r0
 800b5b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b5b6:	bfac      	ite	ge
 800b5b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b5ba:	81a3      	strhlt	r3, [r4, #12]
 800b5bc:	bd10      	pop	{r4, pc}

0800b5be <__swrite>:
 800b5be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5c2:	461f      	mov	r7, r3
 800b5c4:	898b      	ldrh	r3, [r1, #12]
 800b5c6:	05db      	lsls	r3, r3, #23
 800b5c8:	4605      	mov	r5, r0
 800b5ca:	460c      	mov	r4, r1
 800b5cc:	4616      	mov	r6, r2
 800b5ce:	d505      	bpl.n	800b5dc <__swrite+0x1e>
 800b5d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5d4:	2302      	movs	r3, #2
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	f001 f856 	bl	800c688 <_lseek_r>
 800b5dc:	89a3      	ldrh	r3, [r4, #12]
 800b5de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b5e6:	81a3      	strh	r3, [r4, #12]
 800b5e8:	4632      	mov	r2, r6
 800b5ea:	463b      	mov	r3, r7
 800b5ec:	4628      	mov	r0, r5
 800b5ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5f2:	f000 b877 	b.w	800b6e4 <_write_r>

0800b5f6 <__sseek>:
 800b5f6:	b510      	push	{r4, lr}
 800b5f8:	460c      	mov	r4, r1
 800b5fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5fe:	f001 f843 	bl	800c688 <_lseek_r>
 800b602:	1c43      	adds	r3, r0, #1
 800b604:	89a3      	ldrh	r3, [r4, #12]
 800b606:	bf15      	itete	ne
 800b608:	6560      	strne	r0, [r4, #84]	; 0x54
 800b60a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b60e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b612:	81a3      	strheq	r3, [r4, #12]
 800b614:	bf18      	it	ne
 800b616:	81a3      	strhne	r3, [r4, #12]
 800b618:	bd10      	pop	{r4, pc}

0800b61a <__sclose>:
 800b61a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b61e:	f000 b8e1 	b.w	800b7e4 <_close_r>

0800b622 <strcat>:
 800b622:	b510      	push	{r4, lr}
 800b624:	4602      	mov	r2, r0
 800b626:	7814      	ldrb	r4, [r2, #0]
 800b628:	4613      	mov	r3, r2
 800b62a:	3201      	adds	r2, #1
 800b62c:	2c00      	cmp	r4, #0
 800b62e:	d1fa      	bne.n	800b626 <strcat+0x4>
 800b630:	3b01      	subs	r3, #1
 800b632:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b636:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b63a:	2a00      	cmp	r2, #0
 800b63c:	d1f9      	bne.n	800b632 <strcat+0x10>
 800b63e:	bd10      	pop	{r4, pc}

0800b640 <__swbuf_r>:
 800b640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b642:	460e      	mov	r6, r1
 800b644:	4614      	mov	r4, r2
 800b646:	4605      	mov	r5, r0
 800b648:	b118      	cbz	r0, 800b652 <__swbuf_r+0x12>
 800b64a:	6983      	ldr	r3, [r0, #24]
 800b64c:	b90b      	cbnz	r3, 800b652 <__swbuf_r+0x12>
 800b64e:	f7ff f8a3 	bl	800a798 <__sinit>
 800b652:	4b21      	ldr	r3, [pc, #132]	; (800b6d8 <__swbuf_r+0x98>)
 800b654:	429c      	cmp	r4, r3
 800b656:	d12b      	bne.n	800b6b0 <__swbuf_r+0x70>
 800b658:	686c      	ldr	r4, [r5, #4]
 800b65a:	69a3      	ldr	r3, [r4, #24]
 800b65c:	60a3      	str	r3, [r4, #8]
 800b65e:	89a3      	ldrh	r3, [r4, #12]
 800b660:	071a      	lsls	r2, r3, #28
 800b662:	d52f      	bpl.n	800b6c4 <__swbuf_r+0x84>
 800b664:	6923      	ldr	r3, [r4, #16]
 800b666:	b36b      	cbz	r3, 800b6c4 <__swbuf_r+0x84>
 800b668:	6923      	ldr	r3, [r4, #16]
 800b66a:	6820      	ldr	r0, [r4, #0]
 800b66c:	1ac0      	subs	r0, r0, r3
 800b66e:	6963      	ldr	r3, [r4, #20]
 800b670:	b2f6      	uxtb	r6, r6
 800b672:	4283      	cmp	r3, r0
 800b674:	4637      	mov	r7, r6
 800b676:	dc04      	bgt.n	800b682 <__swbuf_r+0x42>
 800b678:	4621      	mov	r1, r4
 800b67a:	4628      	mov	r0, r5
 800b67c:	f000 ffc4 	bl	800c608 <_fflush_r>
 800b680:	bb30      	cbnz	r0, 800b6d0 <__swbuf_r+0x90>
 800b682:	68a3      	ldr	r3, [r4, #8]
 800b684:	3b01      	subs	r3, #1
 800b686:	60a3      	str	r3, [r4, #8]
 800b688:	6823      	ldr	r3, [r4, #0]
 800b68a:	1c5a      	adds	r2, r3, #1
 800b68c:	6022      	str	r2, [r4, #0]
 800b68e:	701e      	strb	r6, [r3, #0]
 800b690:	6963      	ldr	r3, [r4, #20]
 800b692:	3001      	adds	r0, #1
 800b694:	4283      	cmp	r3, r0
 800b696:	d004      	beq.n	800b6a2 <__swbuf_r+0x62>
 800b698:	89a3      	ldrh	r3, [r4, #12]
 800b69a:	07db      	lsls	r3, r3, #31
 800b69c:	d506      	bpl.n	800b6ac <__swbuf_r+0x6c>
 800b69e:	2e0a      	cmp	r6, #10
 800b6a0:	d104      	bne.n	800b6ac <__swbuf_r+0x6c>
 800b6a2:	4621      	mov	r1, r4
 800b6a4:	4628      	mov	r0, r5
 800b6a6:	f000 ffaf 	bl	800c608 <_fflush_r>
 800b6aa:	b988      	cbnz	r0, 800b6d0 <__swbuf_r+0x90>
 800b6ac:	4638      	mov	r0, r7
 800b6ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6b0:	4b0a      	ldr	r3, [pc, #40]	; (800b6dc <__swbuf_r+0x9c>)
 800b6b2:	429c      	cmp	r4, r3
 800b6b4:	d101      	bne.n	800b6ba <__swbuf_r+0x7a>
 800b6b6:	68ac      	ldr	r4, [r5, #8]
 800b6b8:	e7cf      	b.n	800b65a <__swbuf_r+0x1a>
 800b6ba:	4b09      	ldr	r3, [pc, #36]	; (800b6e0 <__swbuf_r+0xa0>)
 800b6bc:	429c      	cmp	r4, r3
 800b6be:	bf08      	it	eq
 800b6c0:	68ec      	ldreq	r4, [r5, #12]
 800b6c2:	e7ca      	b.n	800b65a <__swbuf_r+0x1a>
 800b6c4:	4621      	mov	r1, r4
 800b6c6:	4628      	mov	r0, r5
 800b6c8:	f000 f81e 	bl	800b708 <__swsetup_r>
 800b6cc:	2800      	cmp	r0, #0
 800b6ce:	d0cb      	beq.n	800b668 <__swbuf_r+0x28>
 800b6d0:	f04f 37ff 	mov.w	r7, #4294967295
 800b6d4:	e7ea      	b.n	800b6ac <__swbuf_r+0x6c>
 800b6d6:	bf00      	nop
 800b6d8:	0800f090 	.word	0x0800f090
 800b6dc:	0800f0b0 	.word	0x0800f0b0
 800b6e0:	0800f070 	.word	0x0800f070

0800b6e4 <_write_r>:
 800b6e4:	b538      	push	{r3, r4, r5, lr}
 800b6e6:	4d07      	ldr	r5, [pc, #28]	; (800b704 <_write_r+0x20>)
 800b6e8:	4604      	mov	r4, r0
 800b6ea:	4608      	mov	r0, r1
 800b6ec:	4611      	mov	r1, r2
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	602a      	str	r2, [r5, #0]
 800b6f2:	461a      	mov	r2, r3
 800b6f4:	f7f6 fc12 	bl	8001f1c <_write>
 800b6f8:	1c43      	adds	r3, r0, #1
 800b6fa:	d102      	bne.n	800b702 <_write_r+0x1e>
 800b6fc:	682b      	ldr	r3, [r5, #0]
 800b6fe:	b103      	cbz	r3, 800b702 <_write_r+0x1e>
 800b700:	6023      	str	r3, [r4, #0]
 800b702:	bd38      	pop	{r3, r4, r5, pc}
 800b704:	20004494 	.word	0x20004494

0800b708 <__swsetup_r>:
 800b708:	4b32      	ldr	r3, [pc, #200]	; (800b7d4 <__swsetup_r+0xcc>)
 800b70a:	b570      	push	{r4, r5, r6, lr}
 800b70c:	681d      	ldr	r5, [r3, #0]
 800b70e:	4606      	mov	r6, r0
 800b710:	460c      	mov	r4, r1
 800b712:	b125      	cbz	r5, 800b71e <__swsetup_r+0x16>
 800b714:	69ab      	ldr	r3, [r5, #24]
 800b716:	b913      	cbnz	r3, 800b71e <__swsetup_r+0x16>
 800b718:	4628      	mov	r0, r5
 800b71a:	f7ff f83d 	bl	800a798 <__sinit>
 800b71e:	4b2e      	ldr	r3, [pc, #184]	; (800b7d8 <__swsetup_r+0xd0>)
 800b720:	429c      	cmp	r4, r3
 800b722:	d10f      	bne.n	800b744 <__swsetup_r+0x3c>
 800b724:	686c      	ldr	r4, [r5, #4]
 800b726:	89a3      	ldrh	r3, [r4, #12]
 800b728:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b72c:	0719      	lsls	r1, r3, #28
 800b72e:	d42c      	bmi.n	800b78a <__swsetup_r+0x82>
 800b730:	06dd      	lsls	r5, r3, #27
 800b732:	d411      	bmi.n	800b758 <__swsetup_r+0x50>
 800b734:	2309      	movs	r3, #9
 800b736:	6033      	str	r3, [r6, #0]
 800b738:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b73c:	81a3      	strh	r3, [r4, #12]
 800b73e:	f04f 30ff 	mov.w	r0, #4294967295
 800b742:	e03e      	b.n	800b7c2 <__swsetup_r+0xba>
 800b744:	4b25      	ldr	r3, [pc, #148]	; (800b7dc <__swsetup_r+0xd4>)
 800b746:	429c      	cmp	r4, r3
 800b748:	d101      	bne.n	800b74e <__swsetup_r+0x46>
 800b74a:	68ac      	ldr	r4, [r5, #8]
 800b74c:	e7eb      	b.n	800b726 <__swsetup_r+0x1e>
 800b74e:	4b24      	ldr	r3, [pc, #144]	; (800b7e0 <__swsetup_r+0xd8>)
 800b750:	429c      	cmp	r4, r3
 800b752:	bf08      	it	eq
 800b754:	68ec      	ldreq	r4, [r5, #12]
 800b756:	e7e6      	b.n	800b726 <__swsetup_r+0x1e>
 800b758:	0758      	lsls	r0, r3, #29
 800b75a:	d512      	bpl.n	800b782 <__swsetup_r+0x7a>
 800b75c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b75e:	b141      	cbz	r1, 800b772 <__swsetup_r+0x6a>
 800b760:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b764:	4299      	cmp	r1, r3
 800b766:	d002      	beq.n	800b76e <__swsetup_r+0x66>
 800b768:	4630      	mov	r0, r6
 800b76a:	f001 fbb3 	bl	800ced4 <_free_r>
 800b76e:	2300      	movs	r3, #0
 800b770:	6363      	str	r3, [r4, #52]	; 0x34
 800b772:	89a3      	ldrh	r3, [r4, #12]
 800b774:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b778:	81a3      	strh	r3, [r4, #12]
 800b77a:	2300      	movs	r3, #0
 800b77c:	6063      	str	r3, [r4, #4]
 800b77e:	6923      	ldr	r3, [r4, #16]
 800b780:	6023      	str	r3, [r4, #0]
 800b782:	89a3      	ldrh	r3, [r4, #12]
 800b784:	f043 0308 	orr.w	r3, r3, #8
 800b788:	81a3      	strh	r3, [r4, #12]
 800b78a:	6923      	ldr	r3, [r4, #16]
 800b78c:	b94b      	cbnz	r3, 800b7a2 <__swsetup_r+0x9a>
 800b78e:	89a3      	ldrh	r3, [r4, #12]
 800b790:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b798:	d003      	beq.n	800b7a2 <__swsetup_r+0x9a>
 800b79a:	4621      	mov	r1, r4
 800b79c:	4630      	mov	r0, r6
 800b79e:	f000 ffab 	bl	800c6f8 <__smakebuf_r>
 800b7a2:	89a0      	ldrh	r0, [r4, #12]
 800b7a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7a8:	f010 0301 	ands.w	r3, r0, #1
 800b7ac:	d00a      	beq.n	800b7c4 <__swsetup_r+0xbc>
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	60a3      	str	r3, [r4, #8]
 800b7b2:	6963      	ldr	r3, [r4, #20]
 800b7b4:	425b      	negs	r3, r3
 800b7b6:	61a3      	str	r3, [r4, #24]
 800b7b8:	6923      	ldr	r3, [r4, #16]
 800b7ba:	b943      	cbnz	r3, 800b7ce <__swsetup_r+0xc6>
 800b7bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b7c0:	d1ba      	bne.n	800b738 <__swsetup_r+0x30>
 800b7c2:	bd70      	pop	{r4, r5, r6, pc}
 800b7c4:	0781      	lsls	r1, r0, #30
 800b7c6:	bf58      	it	pl
 800b7c8:	6963      	ldrpl	r3, [r4, #20]
 800b7ca:	60a3      	str	r3, [r4, #8]
 800b7cc:	e7f4      	b.n	800b7b8 <__swsetup_r+0xb0>
 800b7ce:	2000      	movs	r0, #0
 800b7d0:	e7f7      	b.n	800b7c2 <__swsetup_r+0xba>
 800b7d2:	bf00      	nop
 800b7d4:	20000058 	.word	0x20000058
 800b7d8:	0800f090 	.word	0x0800f090
 800b7dc:	0800f0b0 	.word	0x0800f0b0
 800b7e0:	0800f070 	.word	0x0800f070

0800b7e4 <_close_r>:
 800b7e4:	b538      	push	{r3, r4, r5, lr}
 800b7e6:	4d06      	ldr	r5, [pc, #24]	; (800b800 <_close_r+0x1c>)
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	4604      	mov	r4, r0
 800b7ec:	4608      	mov	r0, r1
 800b7ee:	602b      	str	r3, [r5, #0]
 800b7f0:	f7f8 f98b 	bl	8003b0a <_close>
 800b7f4:	1c43      	adds	r3, r0, #1
 800b7f6:	d102      	bne.n	800b7fe <_close_r+0x1a>
 800b7f8:	682b      	ldr	r3, [r5, #0]
 800b7fa:	b103      	cbz	r3, 800b7fe <_close_r+0x1a>
 800b7fc:	6023      	str	r3, [r4, #0]
 800b7fe:	bd38      	pop	{r3, r4, r5, pc}
 800b800:	20004494 	.word	0x20004494

0800b804 <quorem>:
 800b804:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b808:	6903      	ldr	r3, [r0, #16]
 800b80a:	690c      	ldr	r4, [r1, #16]
 800b80c:	42a3      	cmp	r3, r4
 800b80e:	4607      	mov	r7, r0
 800b810:	f2c0 8081 	blt.w	800b916 <quorem+0x112>
 800b814:	3c01      	subs	r4, #1
 800b816:	f101 0814 	add.w	r8, r1, #20
 800b81a:	f100 0514 	add.w	r5, r0, #20
 800b81e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b822:	9301      	str	r3, [sp, #4]
 800b824:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b828:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b82c:	3301      	adds	r3, #1
 800b82e:	429a      	cmp	r2, r3
 800b830:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b834:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b838:	fbb2 f6f3 	udiv	r6, r2, r3
 800b83c:	d331      	bcc.n	800b8a2 <quorem+0x9e>
 800b83e:	f04f 0e00 	mov.w	lr, #0
 800b842:	4640      	mov	r0, r8
 800b844:	46ac      	mov	ip, r5
 800b846:	46f2      	mov	sl, lr
 800b848:	f850 2b04 	ldr.w	r2, [r0], #4
 800b84c:	b293      	uxth	r3, r2
 800b84e:	fb06 e303 	mla	r3, r6, r3, lr
 800b852:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b856:	b29b      	uxth	r3, r3
 800b858:	ebaa 0303 	sub.w	r3, sl, r3
 800b85c:	f8dc a000 	ldr.w	sl, [ip]
 800b860:	0c12      	lsrs	r2, r2, #16
 800b862:	fa13 f38a 	uxtah	r3, r3, sl
 800b866:	fb06 e202 	mla	r2, r6, r2, lr
 800b86a:	9300      	str	r3, [sp, #0]
 800b86c:	9b00      	ldr	r3, [sp, #0]
 800b86e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b872:	b292      	uxth	r2, r2
 800b874:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b878:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b87c:	f8bd 3000 	ldrh.w	r3, [sp]
 800b880:	4581      	cmp	r9, r0
 800b882:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b886:	f84c 3b04 	str.w	r3, [ip], #4
 800b88a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b88e:	d2db      	bcs.n	800b848 <quorem+0x44>
 800b890:	f855 300b 	ldr.w	r3, [r5, fp]
 800b894:	b92b      	cbnz	r3, 800b8a2 <quorem+0x9e>
 800b896:	9b01      	ldr	r3, [sp, #4]
 800b898:	3b04      	subs	r3, #4
 800b89a:	429d      	cmp	r5, r3
 800b89c:	461a      	mov	r2, r3
 800b89e:	d32e      	bcc.n	800b8fe <quorem+0xfa>
 800b8a0:	613c      	str	r4, [r7, #16]
 800b8a2:	4638      	mov	r0, r7
 800b8a4:	f001 f9fe 	bl	800cca4 <__mcmp>
 800b8a8:	2800      	cmp	r0, #0
 800b8aa:	db24      	blt.n	800b8f6 <quorem+0xf2>
 800b8ac:	3601      	adds	r6, #1
 800b8ae:	4628      	mov	r0, r5
 800b8b0:	f04f 0c00 	mov.w	ip, #0
 800b8b4:	f858 2b04 	ldr.w	r2, [r8], #4
 800b8b8:	f8d0 e000 	ldr.w	lr, [r0]
 800b8bc:	b293      	uxth	r3, r2
 800b8be:	ebac 0303 	sub.w	r3, ip, r3
 800b8c2:	0c12      	lsrs	r2, r2, #16
 800b8c4:	fa13 f38e 	uxtah	r3, r3, lr
 800b8c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b8cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b8d0:	b29b      	uxth	r3, r3
 800b8d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b8d6:	45c1      	cmp	r9, r8
 800b8d8:	f840 3b04 	str.w	r3, [r0], #4
 800b8dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b8e0:	d2e8      	bcs.n	800b8b4 <quorem+0xb0>
 800b8e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b8e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b8ea:	b922      	cbnz	r2, 800b8f6 <quorem+0xf2>
 800b8ec:	3b04      	subs	r3, #4
 800b8ee:	429d      	cmp	r5, r3
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	d30a      	bcc.n	800b90a <quorem+0x106>
 800b8f4:	613c      	str	r4, [r7, #16]
 800b8f6:	4630      	mov	r0, r6
 800b8f8:	b003      	add	sp, #12
 800b8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8fe:	6812      	ldr	r2, [r2, #0]
 800b900:	3b04      	subs	r3, #4
 800b902:	2a00      	cmp	r2, #0
 800b904:	d1cc      	bne.n	800b8a0 <quorem+0x9c>
 800b906:	3c01      	subs	r4, #1
 800b908:	e7c7      	b.n	800b89a <quorem+0x96>
 800b90a:	6812      	ldr	r2, [r2, #0]
 800b90c:	3b04      	subs	r3, #4
 800b90e:	2a00      	cmp	r2, #0
 800b910:	d1f0      	bne.n	800b8f4 <quorem+0xf0>
 800b912:	3c01      	subs	r4, #1
 800b914:	e7eb      	b.n	800b8ee <quorem+0xea>
 800b916:	2000      	movs	r0, #0
 800b918:	e7ee      	b.n	800b8f8 <quorem+0xf4>
 800b91a:	0000      	movs	r0, r0
 800b91c:	0000      	movs	r0, r0
	...

0800b920 <_dtoa_r>:
 800b920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b924:	ed2d 8b04 	vpush	{d8-d9}
 800b928:	ec57 6b10 	vmov	r6, r7, d0
 800b92c:	b093      	sub	sp, #76	; 0x4c
 800b92e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b930:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b934:	9106      	str	r1, [sp, #24]
 800b936:	ee10 aa10 	vmov	sl, s0
 800b93a:	4604      	mov	r4, r0
 800b93c:	9209      	str	r2, [sp, #36]	; 0x24
 800b93e:	930c      	str	r3, [sp, #48]	; 0x30
 800b940:	46bb      	mov	fp, r7
 800b942:	b975      	cbnz	r5, 800b962 <_dtoa_r+0x42>
 800b944:	2010      	movs	r0, #16
 800b946:	f000 ff17 	bl	800c778 <malloc>
 800b94a:	4602      	mov	r2, r0
 800b94c:	6260      	str	r0, [r4, #36]	; 0x24
 800b94e:	b920      	cbnz	r0, 800b95a <_dtoa_r+0x3a>
 800b950:	4ba7      	ldr	r3, [pc, #668]	; (800bbf0 <_dtoa_r+0x2d0>)
 800b952:	21ea      	movs	r1, #234	; 0xea
 800b954:	48a7      	ldr	r0, [pc, #668]	; (800bbf4 <_dtoa_r+0x2d4>)
 800b956:	f001 fdd1 	bl	800d4fc <__assert_func>
 800b95a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b95e:	6005      	str	r5, [r0, #0]
 800b960:	60c5      	str	r5, [r0, #12]
 800b962:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b964:	6819      	ldr	r1, [r3, #0]
 800b966:	b151      	cbz	r1, 800b97e <_dtoa_r+0x5e>
 800b968:	685a      	ldr	r2, [r3, #4]
 800b96a:	604a      	str	r2, [r1, #4]
 800b96c:	2301      	movs	r3, #1
 800b96e:	4093      	lsls	r3, r2
 800b970:	608b      	str	r3, [r1, #8]
 800b972:	4620      	mov	r0, r4
 800b974:	f000 ff54 	bl	800c820 <_Bfree>
 800b978:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b97a:	2200      	movs	r2, #0
 800b97c:	601a      	str	r2, [r3, #0]
 800b97e:	1e3b      	subs	r3, r7, #0
 800b980:	bfaa      	itet	ge
 800b982:	2300      	movge	r3, #0
 800b984:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b988:	f8c8 3000 	strge.w	r3, [r8]
 800b98c:	4b9a      	ldr	r3, [pc, #616]	; (800bbf8 <_dtoa_r+0x2d8>)
 800b98e:	bfbc      	itt	lt
 800b990:	2201      	movlt	r2, #1
 800b992:	f8c8 2000 	strlt.w	r2, [r8]
 800b996:	ea33 030b 	bics.w	r3, r3, fp
 800b99a:	d11b      	bne.n	800b9d4 <_dtoa_r+0xb4>
 800b99c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b99e:	f242 730f 	movw	r3, #9999	; 0x270f
 800b9a2:	6013      	str	r3, [r2, #0]
 800b9a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b9a8:	4333      	orrs	r3, r6
 800b9aa:	f000 8592 	beq.w	800c4d2 <_dtoa_r+0xbb2>
 800b9ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9b0:	b963      	cbnz	r3, 800b9cc <_dtoa_r+0xac>
 800b9b2:	4b92      	ldr	r3, [pc, #584]	; (800bbfc <_dtoa_r+0x2dc>)
 800b9b4:	e022      	b.n	800b9fc <_dtoa_r+0xdc>
 800b9b6:	4b92      	ldr	r3, [pc, #584]	; (800bc00 <_dtoa_r+0x2e0>)
 800b9b8:	9301      	str	r3, [sp, #4]
 800b9ba:	3308      	adds	r3, #8
 800b9bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b9be:	6013      	str	r3, [r2, #0]
 800b9c0:	9801      	ldr	r0, [sp, #4]
 800b9c2:	b013      	add	sp, #76	; 0x4c
 800b9c4:	ecbd 8b04 	vpop	{d8-d9}
 800b9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9cc:	4b8b      	ldr	r3, [pc, #556]	; (800bbfc <_dtoa_r+0x2dc>)
 800b9ce:	9301      	str	r3, [sp, #4]
 800b9d0:	3303      	adds	r3, #3
 800b9d2:	e7f3      	b.n	800b9bc <_dtoa_r+0x9c>
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	4650      	mov	r0, sl
 800b9da:	4659      	mov	r1, fp
 800b9dc:	f7f5 f884 	bl	8000ae8 <__aeabi_dcmpeq>
 800b9e0:	ec4b ab19 	vmov	d9, sl, fp
 800b9e4:	4680      	mov	r8, r0
 800b9e6:	b158      	cbz	r0, 800ba00 <_dtoa_r+0xe0>
 800b9e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	6013      	str	r3, [r2, #0]
 800b9ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	f000 856b 	beq.w	800c4cc <_dtoa_r+0xbac>
 800b9f6:	4883      	ldr	r0, [pc, #524]	; (800bc04 <_dtoa_r+0x2e4>)
 800b9f8:	6018      	str	r0, [r3, #0]
 800b9fa:	1e43      	subs	r3, r0, #1
 800b9fc:	9301      	str	r3, [sp, #4]
 800b9fe:	e7df      	b.n	800b9c0 <_dtoa_r+0xa0>
 800ba00:	ec4b ab10 	vmov	d0, sl, fp
 800ba04:	aa10      	add	r2, sp, #64	; 0x40
 800ba06:	a911      	add	r1, sp, #68	; 0x44
 800ba08:	4620      	mov	r0, r4
 800ba0a:	f001 f9f1 	bl	800cdf0 <__d2b>
 800ba0e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ba12:	ee08 0a10 	vmov	s16, r0
 800ba16:	2d00      	cmp	r5, #0
 800ba18:	f000 8084 	beq.w	800bb24 <_dtoa_r+0x204>
 800ba1c:	ee19 3a90 	vmov	r3, s19
 800ba20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba24:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ba28:	4656      	mov	r6, sl
 800ba2a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ba2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ba32:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ba36:	4b74      	ldr	r3, [pc, #464]	; (800bc08 <_dtoa_r+0x2e8>)
 800ba38:	2200      	movs	r2, #0
 800ba3a:	4630      	mov	r0, r6
 800ba3c:	4639      	mov	r1, r7
 800ba3e:	f7f4 fc33 	bl	80002a8 <__aeabi_dsub>
 800ba42:	a365      	add	r3, pc, #404	; (adr r3, 800bbd8 <_dtoa_r+0x2b8>)
 800ba44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba48:	f7f4 fde6 	bl	8000618 <__aeabi_dmul>
 800ba4c:	a364      	add	r3, pc, #400	; (adr r3, 800bbe0 <_dtoa_r+0x2c0>)
 800ba4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba52:	f7f4 fc2b 	bl	80002ac <__adddf3>
 800ba56:	4606      	mov	r6, r0
 800ba58:	4628      	mov	r0, r5
 800ba5a:	460f      	mov	r7, r1
 800ba5c:	f7f4 fd72 	bl	8000544 <__aeabi_i2d>
 800ba60:	a361      	add	r3, pc, #388	; (adr r3, 800bbe8 <_dtoa_r+0x2c8>)
 800ba62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba66:	f7f4 fdd7 	bl	8000618 <__aeabi_dmul>
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	460b      	mov	r3, r1
 800ba6e:	4630      	mov	r0, r6
 800ba70:	4639      	mov	r1, r7
 800ba72:	f7f4 fc1b 	bl	80002ac <__adddf3>
 800ba76:	4606      	mov	r6, r0
 800ba78:	460f      	mov	r7, r1
 800ba7a:	f7f5 f87d 	bl	8000b78 <__aeabi_d2iz>
 800ba7e:	2200      	movs	r2, #0
 800ba80:	9000      	str	r0, [sp, #0]
 800ba82:	2300      	movs	r3, #0
 800ba84:	4630      	mov	r0, r6
 800ba86:	4639      	mov	r1, r7
 800ba88:	f7f5 f838 	bl	8000afc <__aeabi_dcmplt>
 800ba8c:	b150      	cbz	r0, 800baa4 <_dtoa_r+0x184>
 800ba8e:	9800      	ldr	r0, [sp, #0]
 800ba90:	f7f4 fd58 	bl	8000544 <__aeabi_i2d>
 800ba94:	4632      	mov	r2, r6
 800ba96:	463b      	mov	r3, r7
 800ba98:	f7f5 f826 	bl	8000ae8 <__aeabi_dcmpeq>
 800ba9c:	b910      	cbnz	r0, 800baa4 <_dtoa_r+0x184>
 800ba9e:	9b00      	ldr	r3, [sp, #0]
 800baa0:	3b01      	subs	r3, #1
 800baa2:	9300      	str	r3, [sp, #0]
 800baa4:	9b00      	ldr	r3, [sp, #0]
 800baa6:	2b16      	cmp	r3, #22
 800baa8:	d85a      	bhi.n	800bb60 <_dtoa_r+0x240>
 800baaa:	9a00      	ldr	r2, [sp, #0]
 800baac:	4b57      	ldr	r3, [pc, #348]	; (800bc0c <_dtoa_r+0x2ec>)
 800baae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab6:	ec51 0b19 	vmov	r0, r1, d9
 800baba:	f7f5 f81f 	bl	8000afc <__aeabi_dcmplt>
 800babe:	2800      	cmp	r0, #0
 800bac0:	d050      	beq.n	800bb64 <_dtoa_r+0x244>
 800bac2:	9b00      	ldr	r3, [sp, #0]
 800bac4:	3b01      	subs	r3, #1
 800bac6:	9300      	str	r3, [sp, #0]
 800bac8:	2300      	movs	r3, #0
 800baca:	930b      	str	r3, [sp, #44]	; 0x2c
 800bacc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bace:	1b5d      	subs	r5, r3, r5
 800bad0:	1e6b      	subs	r3, r5, #1
 800bad2:	9305      	str	r3, [sp, #20]
 800bad4:	bf45      	ittet	mi
 800bad6:	f1c5 0301 	rsbmi	r3, r5, #1
 800bada:	9304      	strmi	r3, [sp, #16]
 800badc:	2300      	movpl	r3, #0
 800bade:	2300      	movmi	r3, #0
 800bae0:	bf4c      	ite	mi
 800bae2:	9305      	strmi	r3, [sp, #20]
 800bae4:	9304      	strpl	r3, [sp, #16]
 800bae6:	9b00      	ldr	r3, [sp, #0]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	db3d      	blt.n	800bb68 <_dtoa_r+0x248>
 800baec:	9b05      	ldr	r3, [sp, #20]
 800baee:	9a00      	ldr	r2, [sp, #0]
 800baf0:	920a      	str	r2, [sp, #40]	; 0x28
 800baf2:	4413      	add	r3, r2
 800baf4:	9305      	str	r3, [sp, #20]
 800baf6:	2300      	movs	r3, #0
 800baf8:	9307      	str	r3, [sp, #28]
 800bafa:	9b06      	ldr	r3, [sp, #24]
 800bafc:	2b09      	cmp	r3, #9
 800bafe:	f200 8089 	bhi.w	800bc14 <_dtoa_r+0x2f4>
 800bb02:	2b05      	cmp	r3, #5
 800bb04:	bfc4      	itt	gt
 800bb06:	3b04      	subgt	r3, #4
 800bb08:	9306      	strgt	r3, [sp, #24]
 800bb0a:	9b06      	ldr	r3, [sp, #24]
 800bb0c:	f1a3 0302 	sub.w	r3, r3, #2
 800bb10:	bfcc      	ite	gt
 800bb12:	2500      	movgt	r5, #0
 800bb14:	2501      	movle	r5, #1
 800bb16:	2b03      	cmp	r3, #3
 800bb18:	f200 8087 	bhi.w	800bc2a <_dtoa_r+0x30a>
 800bb1c:	e8df f003 	tbb	[pc, r3]
 800bb20:	59383a2d 	.word	0x59383a2d
 800bb24:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bb28:	441d      	add	r5, r3
 800bb2a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bb2e:	2b20      	cmp	r3, #32
 800bb30:	bfc1      	itttt	gt
 800bb32:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bb36:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bb3a:	fa0b f303 	lslgt.w	r3, fp, r3
 800bb3e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bb42:	bfda      	itte	le
 800bb44:	f1c3 0320 	rsble	r3, r3, #32
 800bb48:	fa06 f003 	lslle.w	r0, r6, r3
 800bb4c:	4318      	orrgt	r0, r3
 800bb4e:	f7f4 fce9 	bl	8000524 <__aeabi_ui2d>
 800bb52:	2301      	movs	r3, #1
 800bb54:	4606      	mov	r6, r0
 800bb56:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bb5a:	3d01      	subs	r5, #1
 800bb5c:	930e      	str	r3, [sp, #56]	; 0x38
 800bb5e:	e76a      	b.n	800ba36 <_dtoa_r+0x116>
 800bb60:	2301      	movs	r3, #1
 800bb62:	e7b2      	b.n	800baca <_dtoa_r+0x1aa>
 800bb64:	900b      	str	r0, [sp, #44]	; 0x2c
 800bb66:	e7b1      	b.n	800bacc <_dtoa_r+0x1ac>
 800bb68:	9b04      	ldr	r3, [sp, #16]
 800bb6a:	9a00      	ldr	r2, [sp, #0]
 800bb6c:	1a9b      	subs	r3, r3, r2
 800bb6e:	9304      	str	r3, [sp, #16]
 800bb70:	4253      	negs	r3, r2
 800bb72:	9307      	str	r3, [sp, #28]
 800bb74:	2300      	movs	r3, #0
 800bb76:	930a      	str	r3, [sp, #40]	; 0x28
 800bb78:	e7bf      	b.n	800bafa <_dtoa_r+0x1da>
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	9308      	str	r3, [sp, #32]
 800bb7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	dc55      	bgt.n	800bc30 <_dtoa_r+0x310>
 800bb84:	2301      	movs	r3, #1
 800bb86:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bb8a:	461a      	mov	r2, r3
 800bb8c:	9209      	str	r2, [sp, #36]	; 0x24
 800bb8e:	e00c      	b.n	800bbaa <_dtoa_r+0x28a>
 800bb90:	2301      	movs	r3, #1
 800bb92:	e7f3      	b.n	800bb7c <_dtoa_r+0x25c>
 800bb94:	2300      	movs	r3, #0
 800bb96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb98:	9308      	str	r3, [sp, #32]
 800bb9a:	9b00      	ldr	r3, [sp, #0]
 800bb9c:	4413      	add	r3, r2
 800bb9e:	9302      	str	r3, [sp, #8]
 800bba0:	3301      	adds	r3, #1
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	9303      	str	r3, [sp, #12]
 800bba6:	bfb8      	it	lt
 800bba8:	2301      	movlt	r3, #1
 800bbaa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bbac:	2200      	movs	r2, #0
 800bbae:	6042      	str	r2, [r0, #4]
 800bbb0:	2204      	movs	r2, #4
 800bbb2:	f102 0614 	add.w	r6, r2, #20
 800bbb6:	429e      	cmp	r6, r3
 800bbb8:	6841      	ldr	r1, [r0, #4]
 800bbba:	d93d      	bls.n	800bc38 <_dtoa_r+0x318>
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	f000 fdef 	bl	800c7a0 <_Balloc>
 800bbc2:	9001      	str	r0, [sp, #4]
 800bbc4:	2800      	cmp	r0, #0
 800bbc6:	d13b      	bne.n	800bc40 <_dtoa_r+0x320>
 800bbc8:	4b11      	ldr	r3, [pc, #68]	; (800bc10 <_dtoa_r+0x2f0>)
 800bbca:	4602      	mov	r2, r0
 800bbcc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bbd0:	e6c0      	b.n	800b954 <_dtoa_r+0x34>
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	e7df      	b.n	800bb96 <_dtoa_r+0x276>
 800bbd6:	bf00      	nop
 800bbd8:	636f4361 	.word	0x636f4361
 800bbdc:	3fd287a7 	.word	0x3fd287a7
 800bbe0:	8b60c8b3 	.word	0x8b60c8b3
 800bbe4:	3fc68a28 	.word	0x3fc68a28
 800bbe8:	509f79fb 	.word	0x509f79fb
 800bbec:	3fd34413 	.word	0x3fd34413
 800bbf0:	0800f115 	.word	0x0800f115
 800bbf4:	0800f12c 	.word	0x0800f12c
 800bbf8:	7ff00000 	.word	0x7ff00000
 800bbfc:	0800f111 	.word	0x0800f111
 800bc00:	0800f108 	.word	0x0800f108
 800bc04:	0800f0e5 	.word	0x0800f0e5
 800bc08:	3ff80000 	.word	0x3ff80000
 800bc0c:	0800f220 	.word	0x0800f220
 800bc10:	0800f187 	.word	0x0800f187
 800bc14:	2501      	movs	r5, #1
 800bc16:	2300      	movs	r3, #0
 800bc18:	9306      	str	r3, [sp, #24]
 800bc1a:	9508      	str	r5, [sp, #32]
 800bc1c:	f04f 33ff 	mov.w	r3, #4294967295
 800bc20:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bc24:	2200      	movs	r2, #0
 800bc26:	2312      	movs	r3, #18
 800bc28:	e7b0      	b.n	800bb8c <_dtoa_r+0x26c>
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	9308      	str	r3, [sp, #32]
 800bc2e:	e7f5      	b.n	800bc1c <_dtoa_r+0x2fc>
 800bc30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc32:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bc36:	e7b8      	b.n	800bbaa <_dtoa_r+0x28a>
 800bc38:	3101      	adds	r1, #1
 800bc3a:	6041      	str	r1, [r0, #4]
 800bc3c:	0052      	lsls	r2, r2, #1
 800bc3e:	e7b8      	b.n	800bbb2 <_dtoa_r+0x292>
 800bc40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc42:	9a01      	ldr	r2, [sp, #4]
 800bc44:	601a      	str	r2, [r3, #0]
 800bc46:	9b03      	ldr	r3, [sp, #12]
 800bc48:	2b0e      	cmp	r3, #14
 800bc4a:	f200 809d 	bhi.w	800bd88 <_dtoa_r+0x468>
 800bc4e:	2d00      	cmp	r5, #0
 800bc50:	f000 809a 	beq.w	800bd88 <_dtoa_r+0x468>
 800bc54:	9b00      	ldr	r3, [sp, #0]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	dd32      	ble.n	800bcc0 <_dtoa_r+0x3a0>
 800bc5a:	4ab7      	ldr	r2, [pc, #732]	; (800bf38 <_dtoa_r+0x618>)
 800bc5c:	f003 030f 	and.w	r3, r3, #15
 800bc60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bc64:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc68:	9b00      	ldr	r3, [sp, #0]
 800bc6a:	05d8      	lsls	r0, r3, #23
 800bc6c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bc70:	d516      	bpl.n	800bca0 <_dtoa_r+0x380>
 800bc72:	4bb2      	ldr	r3, [pc, #712]	; (800bf3c <_dtoa_r+0x61c>)
 800bc74:	ec51 0b19 	vmov	r0, r1, d9
 800bc78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bc7c:	f7f4 fdf6 	bl	800086c <__aeabi_ddiv>
 800bc80:	f007 070f 	and.w	r7, r7, #15
 800bc84:	4682      	mov	sl, r0
 800bc86:	468b      	mov	fp, r1
 800bc88:	2503      	movs	r5, #3
 800bc8a:	4eac      	ldr	r6, [pc, #688]	; (800bf3c <_dtoa_r+0x61c>)
 800bc8c:	b957      	cbnz	r7, 800bca4 <_dtoa_r+0x384>
 800bc8e:	4642      	mov	r2, r8
 800bc90:	464b      	mov	r3, r9
 800bc92:	4650      	mov	r0, sl
 800bc94:	4659      	mov	r1, fp
 800bc96:	f7f4 fde9 	bl	800086c <__aeabi_ddiv>
 800bc9a:	4682      	mov	sl, r0
 800bc9c:	468b      	mov	fp, r1
 800bc9e:	e028      	b.n	800bcf2 <_dtoa_r+0x3d2>
 800bca0:	2502      	movs	r5, #2
 800bca2:	e7f2      	b.n	800bc8a <_dtoa_r+0x36a>
 800bca4:	07f9      	lsls	r1, r7, #31
 800bca6:	d508      	bpl.n	800bcba <_dtoa_r+0x39a>
 800bca8:	4640      	mov	r0, r8
 800bcaa:	4649      	mov	r1, r9
 800bcac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bcb0:	f7f4 fcb2 	bl	8000618 <__aeabi_dmul>
 800bcb4:	3501      	adds	r5, #1
 800bcb6:	4680      	mov	r8, r0
 800bcb8:	4689      	mov	r9, r1
 800bcba:	107f      	asrs	r7, r7, #1
 800bcbc:	3608      	adds	r6, #8
 800bcbe:	e7e5      	b.n	800bc8c <_dtoa_r+0x36c>
 800bcc0:	f000 809b 	beq.w	800bdfa <_dtoa_r+0x4da>
 800bcc4:	9b00      	ldr	r3, [sp, #0]
 800bcc6:	4f9d      	ldr	r7, [pc, #628]	; (800bf3c <_dtoa_r+0x61c>)
 800bcc8:	425e      	negs	r6, r3
 800bcca:	4b9b      	ldr	r3, [pc, #620]	; (800bf38 <_dtoa_r+0x618>)
 800bccc:	f006 020f 	and.w	r2, r6, #15
 800bcd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bcd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd8:	ec51 0b19 	vmov	r0, r1, d9
 800bcdc:	f7f4 fc9c 	bl	8000618 <__aeabi_dmul>
 800bce0:	1136      	asrs	r6, r6, #4
 800bce2:	4682      	mov	sl, r0
 800bce4:	468b      	mov	fp, r1
 800bce6:	2300      	movs	r3, #0
 800bce8:	2502      	movs	r5, #2
 800bcea:	2e00      	cmp	r6, #0
 800bcec:	d17a      	bne.n	800bde4 <_dtoa_r+0x4c4>
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d1d3      	bne.n	800bc9a <_dtoa_r+0x37a>
 800bcf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	f000 8082 	beq.w	800bdfe <_dtoa_r+0x4de>
 800bcfa:	4b91      	ldr	r3, [pc, #580]	; (800bf40 <_dtoa_r+0x620>)
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	4650      	mov	r0, sl
 800bd00:	4659      	mov	r1, fp
 800bd02:	f7f4 fefb 	bl	8000afc <__aeabi_dcmplt>
 800bd06:	2800      	cmp	r0, #0
 800bd08:	d079      	beq.n	800bdfe <_dtoa_r+0x4de>
 800bd0a:	9b03      	ldr	r3, [sp, #12]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d076      	beq.n	800bdfe <_dtoa_r+0x4de>
 800bd10:	9b02      	ldr	r3, [sp, #8]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	dd36      	ble.n	800bd84 <_dtoa_r+0x464>
 800bd16:	9b00      	ldr	r3, [sp, #0]
 800bd18:	4650      	mov	r0, sl
 800bd1a:	4659      	mov	r1, fp
 800bd1c:	1e5f      	subs	r7, r3, #1
 800bd1e:	2200      	movs	r2, #0
 800bd20:	4b88      	ldr	r3, [pc, #544]	; (800bf44 <_dtoa_r+0x624>)
 800bd22:	f7f4 fc79 	bl	8000618 <__aeabi_dmul>
 800bd26:	9e02      	ldr	r6, [sp, #8]
 800bd28:	4682      	mov	sl, r0
 800bd2a:	468b      	mov	fp, r1
 800bd2c:	3501      	adds	r5, #1
 800bd2e:	4628      	mov	r0, r5
 800bd30:	f7f4 fc08 	bl	8000544 <__aeabi_i2d>
 800bd34:	4652      	mov	r2, sl
 800bd36:	465b      	mov	r3, fp
 800bd38:	f7f4 fc6e 	bl	8000618 <__aeabi_dmul>
 800bd3c:	4b82      	ldr	r3, [pc, #520]	; (800bf48 <_dtoa_r+0x628>)
 800bd3e:	2200      	movs	r2, #0
 800bd40:	f7f4 fab4 	bl	80002ac <__adddf3>
 800bd44:	46d0      	mov	r8, sl
 800bd46:	46d9      	mov	r9, fp
 800bd48:	4682      	mov	sl, r0
 800bd4a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bd4e:	2e00      	cmp	r6, #0
 800bd50:	d158      	bne.n	800be04 <_dtoa_r+0x4e4>
 800bd52:	4b7e      	ldr	r3, [pc, #504]	; (800bf4c <_dtoa_r+0x62c>)
 800bd54:	2200      	movs	r2, #0
 800bd56:	4640      	mov	r0, r8
 800bd58:	4649      	mov	r1, r9
 800bd5a:	f7f4 faa5 	bl	80002a8 <__aeabi_dsub>
 800bd5e:	4652      	mov	r2, sl
 800bd60:	465b      	mov	r3, fp
 800bd62:	4680      	mov	r8, r0
 800bd64:	4689      	mov	r9, r1
 800bd66:	f7f4 fee7 	bl	8000b38 <__aeabi_dcmpgt>
 800bd6a:	2800      	cmp	r0, #0
 800bd6c:	f040 8295 	bne.w	800c29a <_dtoa_r+0x97a>
 800bd70:	4652      	mov	r2, sl
 800bd72:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bd76:	4640      	mov	r0, r8
 800bd78:	4649      	mov	r1, r9
 800bd7a:	f7f4 febf 	bl	8000afc <__aeabi_dcmplt>
 800bd7e:	2800      	cmp	r0, #0
 800bd80:	f040 8289 	bne.w	800c296 <_dtoa_r+0x976>
 800bd84:	ec5b ab19 	vmov	sl, fp, d9
 800bd88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	f2c0 8148 	blt.w	800c020 <_dtoa_r+0x700>
 800bd90:	9a00      	ldr	r2, [sp, #0]
 800bd92:	2a0e      	cmp	r2, #14
 800bd94:	f300 8144 	bgt.w	800c020 <_dtoa_r+0x700>
 800bd98:	4b67      	ldr	r3, [pc, #412]	; (800bf38 <_dtoa_r+0x618>)
 800bd9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bda2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	f280 80d5 	bge.w	800bf54 <_dtoa_r+0x634>
 800bdaa:	9b03      	ldr	r3, [sp, #12]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	f300 80d1 	bgt.w	800bf54 <_dtoa_r+0x634>
 800bdb2:	f040 826f 	bne.w	800c294 <_dtoa_r+0x974>
 800bdb6:	4b65      	ldr	r3, [pc, #404]	; (800bf4c <_dtoa_r+0x62c>)
 800bdb8:	2200      	movs	r2, #0
 800bdba:	4640      	mov	r0, r8
 800bdbc:	4649      	mov	r1, r9
 800bdbe:	f7f4 fc2b 	bl	8000618 <__aeabi_dmul>
 800bdc2:	4652      	mov	r2, sl
 800bdc4:	465b      	mov	r3, fp
 800bdc6:	f7f4 fead 	bl	8000b24 <__aeabi_dcmpge>
 800bdca:	9e03      	ldr	r6, [sp, #12]
 800bdcc:	4637      	mov	r7, r6
 800bdce:	2800      	cmp	r0, #0
 800bdd0:	f040 8245 	bne.w	800c25e <_dtoa_r+0x93e>
 800bdd4:	9d01      	ldr	r5, [sp, #4]
 800bdd6:	2331      	movs	r3, #49	; 0x31
 800bdd8:	f805 3b01 	strb.w	r3, [r5], #1
 800bddc:	9b00      	ldr	r3, [sp, #0]
 800bdde:	3301      	adds	r3, #1
 800bde0:	9300      	str	r3, [sp, #0]
 800bde2:	e240      	b.n	800c266 <_dtoa_r+0x946>
 800bde4:	07f2      	lsls	r2, r6, #31
 800bde6:	d505      	bpl.n	800bdf4 <_dtoa_r+0x4d4>
 800bde8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdec:	f7f4 fc14 	bl	8000618 <__aeabi_dmul>
 800bdf0:	3501      	adds	r5, #1
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	1076      	asrs	r6, r6, #1
 800bdf6:	3708      	adds	r7, #8
 800bdf8:	e777      	b.n	800bcea <_dtoa_r+0x3ca>
 800bdfa:	2502      	movs	r5, #2
 800bdfc:	e779      	b.n	800bcf2 <_dtoa_r+0x3d2>
 800bdfe:	9f00      	ldr	r7, [sp, #0]
 800be00:	9e03      	ldr	r6, [sp, #12]
 800be02:	e794      	b.n	800bd2e <_dtoa_r+0x40e>
 800be04:	9901      	ldr	r1, [sp, #4]
 800be06:	4b4c      	ldr	r3, [pc, #304]	; (800bf38 <_dtoa_r+0x618>)
 800be08:	4431      	add	r1, r6
 800be0a:	910d      	str	r1, [sp, #52]	; 0x34
 800be0c:	9908      	ldr	r1, [sp, #32]
 800be0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800be12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800be16:	2900      	cmp	r1, #0
 800be18:	d043      	beq.n	800bea2 <_dtoa_r+0x582>
 800be1a:	494d      	ldr	r1, [pc, #308]	; (800bf50 <_dtoa_r+0x630>)
 800be1c:	2000      	movs	r0, #0
 800be1e:	f7f4 fd25 	bl	800086c <__aeabi_ddiv>
 800be22:	4652      	mov	r2, sl
 800be24:	465b      	mov	r3, fp
 800be26:	f7f4 fa3f 	bl	80002a8 <__aeabi_dsub>
 800be2a:	9d01      	ldr	r5, [sp, #4]
 800be2c:	4682      	mov	sl, r0
 800be2e:	468b      	mov	fp, r1
 800be30:	4649      	mov	r1, r9
 800be32:	4640      	mov	r0, r8
 800be34:	f7f4 fea0 	bl	8000b78 <__aeabi_d2iz>
 800be38:	4606      	mov	r6, r0
 800be3a:	f7f4 fb83 	bl	8000544 <__aeabi_i2d>
 800be3e:	4602      	mov	r2, r0
 800be40:	460b      	mov	r3, r1
 800be42:	4640      	mov	r0, r8
 800be44:	4649      	mov	r1, r9
 800be46:	f7f4 fa2f 	bl	80002a8 <__aeabi_dsub>
 800be4a:	3630      	adds	r6, #48	; 0x30
 800be4c:	f805 6b01 	strb.w	r6, [r5], #1
 800be50:	4652      	mov	r2, sl
 800be52:	465b      	mov	r3, fp
 800be54:	4680      	mov	r8, r0
 800be56:	4689      	mov	r9, r1
 800be58:	f7f4 fe50 	bl	8000afc <__aeabi_dcmplt>
 800be5c:	2800      	cmp	r0, #0
 800be5e:	d163      	bne.n	800bf28 <_dtoa_r+0x608>
 800be60:	4642      	mov	r2, r8
 800be62:	464b      	mov	r3, r9
 800be64:	4936      	ldr	r1, [pc, #216]	; (800bf40 <_dtoa_r+0x620>)
 800be66:	2000      	movs	r0, #0
 800be68:	f7f4 fa1e 	bl	80002a8 <__aeabi_dsub>
 800be6c:	4652      	mov	r2, sl
 800be6e:	465b      	mov	r3, fp
 800be70:	f7f4 fe44 	bl	8000afc <__aeabi_dcmplt>
 800be74:	2800      	cmp	r0, #0
 800be76:	f040 80b5 	bne.w	800bfe4 <_dtoa_r+0x6c4>
 800be7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be7c:	429d      	cmp	r5, r3
 800be7e:	d081      	beq.n	800bd84 <_dtoa_r+0x464>
 800be80:	4b30      	ldr	r3, [pc, #192]	; (800bf44 <_dtoa_r+0x624>)
 800be82:	2200      	movs	r2, #0
 800be84:	4650      	mov	r0, sl
 800be86:	4659      	mov	r1, fp
 800be88:	f7f4 fbc6 	bl	8000618 <__aeabi_dmul>
 800be8c:	4b2d      	ldr	r3, [pc, #180]	; (800bf44 <_dtoa_r+0x624>)
 800be8e:	4682      	mov	sl, r0
 800be90:	468b      	mov	fp, r1
 800be92:	4640      	mov	r0, r8
 800be94:	4649      	mov	r1, r9
 800be96:	2200      	movs	r2, #0
 800be98:	f7f4 fbbe 	bl	8000618 <__aeabi_dmul>
 800be9c:	4680      	mov	r8, r0
 800be9e:	4689      	mov	r9, r1
 800bea0:	e7c6      	b.n	800be30 <_dtoa_r+0x510>
 800bea2:	4650      	mov	r0, sl
 800bea4:	4659      	mov	r1, fp
 800bea6:	f7f4 fbb7 	bl	8000618 <__aeabi_dmul>
 800beaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800beac:	9d01      	ldr	r5, [sp, #4]
 800beae:	930f      	str	r3, [sp, #60]	; 0x3c
 800beb0:	4682      	mov	sl, r0
 800beb2:	468b      	mov	fp, r1
 800beb4:	4649      	mov	r1, r9
 800beb6:	4640      	mov	r0, r8
 800beb8:	f7f4 fe5e 	bl	8000b78 <__aeabi_d2iz>
 800bebc:	4606      	mov	r6, r0
 800bebe:	f7f4 fb41 	bl	8000544 <__aeabi_i2d>
 800bec2:	3630      	adds	r6, #48	; 0x30
 800bec4:	4602      	mov	r2, r0
 800bec6:	460b      	mov	r3, r1
 800bec8:	4640      	mov	r0, r8
 800beca:	4649      	mov	r1, r9
 800becc:	f7f4 f9ec 	bl	80002a8 <__aeabi_dsub>
 800bed0:	f805 6b01 	strb.w	r6, [r5], #1
 800bed4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bed6:	429d      	cmp	r5, r3
 800bed8:	4680      	mov	r8, r0
 800beda:	4689      	mov	r9, r1
 800bedc:	f04f 0200 	mov.w	r2, #0
 800bee0:	d124      	bne.n	800bf2c <_dtoa_r+0x60c>
 800bee2:	4b1b      	ldr	r3, [pc, #108]	; (800bf50 <_dtoa_r+0x630>)
 800bee4:	4650      	mov	r0, sl
 800bee6:	4659      	mov	r1, fp
 800bee8:	f7f4 f9e0 	bl	80002ac <__adddf3>
 800beec:	4602      	mov	r2, r0
 800beee:	460b      	mov	r3, r1
 800bef0:	4640      	mov	r0, r8
 800bef2:	4649      	mov	r1, r9
 800bef4:	f7f4 fe20 	bl	8000b38 <__aeabi_dcmpgt>
 800bef8:	2800      	cmp	r0, #0
 800befa:	d173      	bne.n	800bfe4 <_dtoa_r+0x6c4>
 800befc:	4652      	mov	r2, sl
 800befe:	465b      	mov	r3, fp
 800bf00:	4913      	ldr	r1, [pc, #76]	; (800bf50 <_dtoa_r+0x630>)
 800bf02:	2000      	movs	r0, #0
 800bf04:	f7f4 f9d0 	bl	80002a8 <__aeabi_dsub>
 800bf08:	4602      	mov	r2, r0
 800bf0a:	460b      	mov	r3, r1
 800bf0c:	4640      	mov	r0, r8
 800bf0e:	4649      	mov	r1, r9
 800bf10:	f7f4 fdf4 	bl	8000afc <__aeabi_dcmplt>
 800bf14:	2800      	cmp	r0, #0
 800bf16:	f43f af35 	beq.w	800bd84 <_dtoa_r+0x464>
 800bf1a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bf1c:	1e6b      	subs	r3, r5, #1
 800bf1e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bf20:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bf24:	2b30      	cmp	r3, #48	; 0x30
 800bf26:	d0f8      	beq.n	800bf1a <_dtoa_r+0x5fa>
 800bf28:	9700      	str	r7, [sp, #0]
 800bf2a:	e049      	b.n	800bfc0 <_dtoa_r+0x6a0>
 800bf2c:	4b05      	ldr	r3, [pc, #20]	; (800bf44 <_dtoa_r+0x624>)
 800bf2e:	f7f4 fb73 	bl	8000618 <__aeabi_dmul>
 800bf32:	4680      	mov	r8, r0
 800bf34:	4689      	mov	r9, r1
 800bf36:	e7bd      	b.n	800beb4 <_dtoa_r+0x594>
 800bf38:	0800f220 	.word	0x0800f220
 800bf3c:	0800f1f8 	.word	0x0800f1f8
 800bf40:	3ff00000 	.word	0x3ff00000
 800bf44:	40240000 	.word	0x40240000
 800bf48:	401c0000 	.word	0x401c0000
 800bf4c:	40140000 	.word	0x40140000
 800bf50:	3fe00000 	.word	0x3fe00000
 800bf54:	9d01      	ldr	r5, [sp, #4]
 800bf56:	4656      	mov	r6, sl
 800bf58:	465f      	mov	r7, fp
 800bf5a:	4642      	mov	r2, r8
 800bf5c:	464b      	mov	r3, r9
 800bf5e:	4630      	mov	r0, r6
 800bf60:	4639      	mov	r1, r7
 800bf62:	f7f4 fc83 	bl	800086c <__aeabi_ddiv>
 800bf66:	f7f4 fe07 	bl	8000b78 <__aeabi_d2iz>
 800bf6a:	4682      	mov	sl, r0
 800bf6c:	f7f4 faea 	bl	8000544 <__aeabi_i2d>
 800bf70:	4642      	mov	r2, r8
 800bf72:	464b      	mov	r3, r9
 800bf74:	f7f4 fb50 	bl	8000618 <__aeabi_dmul>
 800bf78:	4602      	mov	r2, r0
 800bf7a:	460b      	mov	r3, r1
 800bf7c:	4630      	mov	r0, r6
 800bf7e:	4639      	mov	r1, r7
 800bf80:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bf84:	f7f4 f990 	bl	80002a8 <__aeabi_dsub>
 800bf88:	f805 6b01 	strb.w	r6, [r5], #1
 800bf8c:	9e01      	ldr	r6, [sp, #4]
 800bf8e:	9f03      	ldr	r7, [sp, #12]
 800bf90:	1bae      	subs	r6, r5, r6
 800bf92:	42b7      	cmp	r7, r6
 800bf94:	4602      	mov	r2, r0
 800bf96:	460b      	mov	r3, r1
 800bf98:	d135      	bne.n	800c006 <_dtoa_r+0x6e6>
 800bf9a:	f7f4 f987 	bl	80002ac <__adddf3>
 800bf9e:	4642      	mov	r2, r8
 800bfa0:	464b      	mov	r3, r9
 800bfa2:	4606      	mov	r6, r0
 800bfa4:	460f      	mov	r7, r1
 800bfa6:	f7f4 fdc7 	bl	8000b38 <__aeabi_dcmpgt>
 800bfaa:	b9d0      	cbnz	r0, 800bfe2 <_dtoa_r+0x6c2>
 800bfac:	4642      	mov	r2, r8
 800bfae:	464b      	mov	r3, r9
 800bfb0:	4630      	mov	r0, r6
 800bfb2:	4639      	mov	r1, r7
 800bfb4:	f7f4 fd98 	bl	8000ae8 <__aeabi_dcmpeq>
 800bfb8:	b110      	cbz	r0, 800bfc0 <_dtoa_r+0x6a0>
 800bfba:	f01a 0f01 	tst.w	sl, #1
 800bfbe:	d110      	bne.n	800bfe2 <_dtoa_r+0x6c2>
 800bfc0:	4620      	mov	r0, r4
 800bfc2:	ee18 1a10 	vmov	r1, s16
 800bfc6:	f000 fc2b 	bl	800c820 <_Bfree>
 800bfca:	2300      	movs	r3, #0
 800bfcc:	9800      	ldr	r0, [sp, #0]
 800bfce:	702b      	strb	r3, [r5, #0]
 800bfd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bfd2:	3001      	adds	r0, #1
 800bfd4:	6018      	str	r0, [r3, #0]
 800bfd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	f43f acf1 	beq.w	800b9c0 <_dtoa_r+0xa0>
 800bfde:	601d      	str	r5, [r3, #0]
 800bfe0:	e4ee      	b.n	800b9c0 <_dtoa_r+0xa0>
 800bfe2:	9f00      	ldr	r7, [sp, #0]
 800bfe4:	462b      	mov	r3, r5
 800bfe6:	461d      	mov	r5, r3
 800bfe8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bfec:	2a39      	cmp	r2, #57	; 0x39
 800bfee:	d106      	bne.n	800bffe <_dtoa_r+0x6de>
 800bff0:	9a01      	ldr	r2, [sp, #4]
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d1f7      	bne.n	800bfe6 <_dtoa_r+0x6c6>
 800bff6:	9901      	ldr	r1, [sp, #4]
 800bff8:	2230      	movs	r2, #48	; 0x30
 800bffa:	3701      	adds	r7, #1
 800bffc:	700a      	strb	r2, [r1, #0]
 800bffe:	781a      	ldrb	r2, [r3, #0]
 800c000:	3201      	adds	r2, #1
 800c002:	701a      	strb	r2, [r3, #0]
 800c004:	e790      	b.n	800bf28 <_dtoa_r+0x608>
 800c006:	4ba6      	ldr	r3, [pc, #664]	; (800c2a0 <_dtoa_r+0x980>)
 800c008:	2200      	movs	r2, #0
 800c00a:	f7f4 fb05 	bl	8000618 <__aeabi_dmul>
 800c00e:	2200      	movs	r2, #0
 800c010:	2300      	movs	r3, #0
 800c012:	4606      	mov	r6, r0
 800c014:	460f      	mov	r7, r1
 800c016:	f7f4 fd67 	bl	8000ae8 <__aeabi_dcmpeq>
 800c01a:	2800      	cmp	r0, #0
 800c01c:	d09d      	beq.n	800bf5a <_dtoa_r+0x63a>
 800c01e:	e7cf      	b.n	800bfc0 <_dtoa_r+0x6a0>
 800c020:	9a08      	ldr	r2, [sp, #32]
 800c022:	2a00      	cmp	r2, #0
 800c024:	f000 80d7 	beq.w	800c1d6 <_dtoa_r+0x8b6>
 800c028:	9a06      	ldr	r2, [sp, #24]
 800c02a:	2a01      	cmp	r2, #1
 800c02c:	f300 80ba 	bgt.w	800c1a4 <_dtoa_r+0x884>
 800c030:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c032:	2a00      	cmp	r2, #0
 800c034:	f000 80b2 	beq.w	800c19c <_dtoa_r+0x87c>
 800c038:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c03c:	9e07      	ldr	r6, [sp, #28]
 800c03e:	9d04      	ldr	r5, [sp, #16]
 800c040:	9a04      	ldr	r2, [sp, #16]
 800c042:	441a      	add	r2, r3
 800c044:	9204      	str	r2, [sp, #16]
 800c046:	9a05      	ldr	r2, [sp, #20]
 800c048:	2101      	movs	r1, #1
 800c04a:	441a      	add	r2, r3
 800c04c:	4620      	mov	r0, r4
 800c04e:	9205      	str	r2, [sp, #20]
 800c050:	f000 fc9e 	bl	800c990 <__i2b>
 800c054:	4607      	mov	r7, r0
 800c056:	2d00      	cmp	r5, #0
 800c058:	dd0c      	ble.n	800c074 <_dtoa_r+0x754>
 800c05a:	9b05      	ldr	r3, [sp, #20]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	dd09      	ble.n	800c074 <_dtoa_r+0x754>
 800c060:	42ab      	cmp	r3, r5
 800c062:	9a04      	ldr	r2, [sp, #16]
 800c064:	bfa8      	it	ge
 800c066:	462b      	movge	r3, r5
 800c068:	1ad2      	subs	r2, r2, r3
 800c06a:	9204      	str	r2, [sp, #16]
 800c06c:	9a05      	ldr	r2, [sp, #20]
 800c06e:	1aed      	subs	r5, r5, r3
 800c070:	1ad3      	subs	r3, r2, r3
 800c072:	9305      	str	r3, [sp, #20]
 800c074:	9b07      	ldr	r3, [sp, #28]
 800c076:	b31b      	cbz	r3, 800c0c0 <_dtoa_r+0x7a0>
 800c078:	9b08      	ldr	r3, [sp, #32]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	f000 80af 	beq.w	800c1de <_dtoa_r+0x8be>
 800c080:	2e00      	cmp	r6, #0
 800c082:	dd13      	ble.n	800c0ac <_dtoa_r+0x78c>
 800c084:	4639      	mov	r1, r7
 800c086:	4632      	mov	r2, r6
 800c088:	4620      	mov	r0, r4
 800c08a:	f000 fd41 	bl	800cb10 <__pow5mult>
 800c08e:	ee18 2a10 	vmov	r2, s16
 800c092:	4601      	mov	r1, r0
 800c094:	4607      	mov	r7, r0
 800c096:	4620      	mov	r0, r4
 800c098:	f000 fc90 	bl	800c9bc <__multiply>
 800c09c:	ee18 1a10 	vmov	r1, s16
 800c0a0:	4680      	mov	r8, r0
 800c0a2:	4620      	mov	r0, r4
 800c0a4:	f000 fbbc 	bl	800c820 <_Bfree>
 800c0a8:	ee08 8a10 	vmov	s16, r8
 800c0ac:	9b07      	ldr	r3, [sp, #28]
 800c0ae:	1b9a      	subs	r2, r3, r6
 800c0b0:	d006      	beq.n	800c0c0 <_dtoa_r+0x7a0>
 800c0b2:	ee18 1a10 	vmov	r1, s16
 800c0b6:	4620      	mov	r0, r4
 800c0b8:	f000 fd2a 	bl	800cb10 <__pow5mult>
 800c0bc:	ee08 0a10 	vmov	s16, r0
 800c0c0:	2101      	movs	r1, #1
 800c0c2:	4620      	mov	r0, r4
 800c0c4:	f000 fc64 	bl	800c990 <__i2b>
 800c0c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	4606      	mov	r6, r0
 800c0ce:	f340 8088 	ble.w	800c1e2 <_dtoa_r+0x8c2>
 800c0d2:	461a      	mov	r2, r3
 800c0d4:	4601      	mov	r1, r0
 800c0d6:	4620      	mov	r0, r4
 800c0d8:	f000 fd1a 	bl	800cb10 <__pow5mult>
 800c0dc:	9b06      	ldr	r3, [sp, #24]
 800c0de:	2b01      	cmp	r3, #1
 800c0e0:	4606      	mov	r6, r0
 800c0e2:	f340 8081 	ble.w	800c1e8 <_dtoa_r+0x8c8>
 800c0e6:	f04f 0800 	mov.w	r8, #0
 800c0ea:	6933      	ldr	r3, [r6, #16]
 800c0ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c0f0:	6918      	ldr	r0, [r3, #16]
 800c0f2:	f000 fbfd 	bl	800c8f0 <__hi0bits>
 800c0f6:	f1c0 0020 	rsb	r0, r0, #32
 800c0fa:	9b05      	ldr	r3, [sp, #20]
 800c0fc:	4418      	add	r0, r3
 800c0fe:	f010 001f 	ands.w	r0, r0, #31
 800c102:	f000 8092 	beq.w	800c22a <_dtoa_r+0x90a>
 800c106:	f1c0 0320 	rsb	r3, r0, #32
 800c10a:	2b04      	cmp	r3, #4
 800c10c:	f340 808a 	ble.w	800c224 <_dtoa_r+0x904>
 800c110:	f1c0 001c 	rsb	r0, r0, #28
 800c114:	9b04      	ldr	r3, [sp, #16]
 800c116:	4403      	add	r3, r0
 800c118:	9304      	str	r3, [sp, #16]
 800c11a:	9b05      	ldr	r3, [sp, #20]
 800c11c:	4403      	add	r3, r0
 800c11e:	4405      	add	r5, r0
 800c120:	9305      	str	r3, [sp, #20]
 800c122:	9b04      	ldr	r3, [sp, #16]
 800c124:	2b00      	cmp	r3, #0
 800c126:	dd07      	ble.n	800c138 <_dtoa_r+0x818>
 800c128:	ee18 1a10 	vmov	r1, s16
 800c12c:	461a      	mov	r2, r3
 800c12e:	4620      	mov	r0, r4
 800c130:	f000 fd48 	bl	800cbc4 <__lshift>
 800c134:	ee08 0a10 	vmov	s16, r0
 800c138:	9b05      	ldr	r3, [sp, #20]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	dd05      	ble.n	800c14a <_dtoa_r+0x82a>
 800c13e:	4631      	mov	r1, r6
 800c140:	461a      	mov	r2, r3
 800c142:	4620      	mov	r0, r4
 800c144:	f000 fd3e 	bl	800cbc4 <__lshift>
 800c148:	4606      	mov	r6, r0
 800c14a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d06e      	beq.n	800c22e <_dtoa_r+0x90e>
 800c150:	ee18 0a10 	vmov	r0, s16
 800c154:	4631      	mov	r1, r6
 800c156:	f000 fda5 	bl	800cca4 <__mcmp>
 800c15a:	2800      	cmp	r0, #0
 800c15c:	da67      	bge.n	800c22e <_dtoa_r+0x90e>
 800c15e:	9b00      	ldr	r3, [sp, #0]
 800c160:	3b01      	subs	r3, #1
 800c162:	ee18 1a10 	vmov	r1, s16
 800c166:	9300      	str	r3, [sp, #0]
 800c168:	220a      	movs	r2, #10
 800c16a:	2300      	movs	r3, #0
 800c16c:	4620      	mov	r0, r4
 800c16e:	f000 fb79 	bl	800c864 <__multadd>
 800c172:	9b08      	ldr	r3, [sp, #32]
 800c174:	ee08 0a10 	vmov	s16, r0
 800c178:	2b00      	cmp	r3, #0
 800c17a:	f000 81b1 	beq.w	800c4e0 <_dtoa_r+0xbc0>
 800c17e:	2300      	movs	r3, #0
 800c180:	4639      	mov	r1, r7
 800c182:	220a      	movs	r2, #10
 800c184:	4620      	mov	r0, r4
 800c186:	f000 fb6d 	bl	800c864 <__multadd>
 800c18a:	9b02      	ldr	r3, [sp, #8]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	4607      	mov	r7, r0
 800c190:	f300 808e 	bgt.w	800c2b0 <_dtoa_r+0x990>
 800c194:	9b06      	ldr	r3, [sp, #24]
 800c196:	2b02      	cmp	r3, #2
 800c198:	dc51      	bgt.n	800c23e <_dtoa_r+0x91e>
 800c19a:	e089      	b.n	800c2b0 <_dtoa_r+0x990>
 800c19c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c19e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c1a2:	e74b      	b.n	800c03c <_dtoa_r+0x71c>
 800c1a4:	9b03      	ldr	r3, [sp, #12]
 800c1a6:	1e5e      	subs	r6, r3, #1
 800c1a8:	9b07      	ldr	r3, [sp, #28]
 800c1aa:	42b3      	cmp	r3, r6
 800c1ac:	bfbf      	itttt	lt
 800c1ae:	9b07      	ldrlt	r3, [sp, #28]
 800c1b0:	9607      	strlt	r6, [sp, #28]
 800c1b2:	1af2      	sublt	r2, r6, r3
 800c1b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c1b6:	bfb6      	itet	lt
 800c1b8:	189b      	addlt	r3, r3, r2
 800c1ba:	1b9e      	subge	r6, r3, r6
 800c1bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c1be:	9b03      	ldr	r3, [sp, #12]
 800c1c0:	bfb8      	it	lt
 800c1c2:	2600      	movlt	r6, #0
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	bfb7      	itett	lt
 800c1c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c1cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c1d0:	1a9d      	sublt	r5, r3, r2
 800c1d2:	2300      	movlt	r3, #0
 800c1d4:	e734      	b.n	800c040 <_dtoa_r+0x720>
 800c1d6:	9e07      	ldr	r6, [sp, #28]
 800c1d8:	9d04      	ldr	r5, [sp, #16]
 800c1da:	9f08      	ldr	r7, [sp, #32]
 800c1dc:	e73b      	b.n	800c056 <_dtoa_r+0x736>
 800c1de:	9a07      	ldr	r2, [sp, #28]
 800c1e0:	e767      	b.n	800c0b2 <_dtoa_r+0x792>
 800c1e2:	9b06      	ldr	r3, [sp, #24]
 800c1e4:	2b01      	cmp	r3, #1
 800c1e6:	dc18      	bgt.n	800c21a <_dtoa_r+0x8fa>
 800c1e8:	f1ba 0f00 	cmp.w	sl, #0
 800c1ec:	d115      	bne.n	800c21a <_dtoa_r+0x8fa>
 800c1ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c1f2:	b993      	cbnz	r3, 800c21a <_dtoa_r+0x8fa>
 800c1f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c1f8:	0d1b      	lsrs	r3, r3, #20
 800c1fa:	051b      	lsls	r3, r3, #20
 800c1fc:	b183      	cbz	r3, 800c220 <_dtoa_r+0x900>
 800c1fe:	9b04      	ldr	r3, [sp, #16]
 800c200:	3301      	adds	r3, #1
 800c202:	9304      	str	r3, [sp, #16]
 800c204:	9b05      	ldr	r3, [sp, #20]
 800c206:	3301      	adds	r3, #1
 800c208:	9305      	str	r3, [sp, #20]
 800c20a:	f04f 0801 	mov.w	r8, #1
 800c20e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c210:	2b00      	cmp	r3, #0
 800c212:	f47f af6a 	bne.w	800c0ea <_dtoa_r+0x7ca>
 800c216:	2001      	movs	r0, #1
 800c218:	e76f      	b.n	800c0fa <_dtoa_r+0x7da>
 800c21a:	f04f 0800 	mov.w	r8, #0
 800c21e:	e7f6      	b.n	800c20e <_dtoa_r+0x8ee>
 800c220:	4698      	mov	r8, r3
 800c222:	e7f4      	b.n	800c20e <_dtoa_r+0x8ee>
 800c224:	f43f af7d 	beq.w	800c122 <_dtoa_r+0x802>
 800c228:	4618      	mov	r0, r3
 800c22a:	301c      	adds	r0, #28
 800c22c:	e772      	b.n	800c114 <_dtoa_r+0x7f4>
 800c22e:	9b03      	ldr	r3, [sp, #12]
 800c230:	2b00      	cmp	r3, #0
 800c232:	dc37      	bgt.n	800c2a4 <_dtoa_r+0x984>
 800c234:	9b06      	ldr	r3, [sp, #24]
 800c236:	2b02      	cmp	r3, #2
 800c238:	dd34      	ble.n	800c2a4 <_dtoa_r+0x984>
 800c23a:	9b03      	ldr	r3, [sp, #12]
 800c23c:	9302      	str	r3, [sp, #8]
 800c23e:	9b02      	ldr	r3, [sp, #8]
 800c240:	b96b      	cbnz	r3, 800c25e <_dtoa_r+0x93e>
 800c242:	4631      	mov	r1, r6
 800c244:	2205      	movs	r2, #5
 800c246:	4620      	mov	r0, r4
 800c248:	f000 fb0c 	bl	800c864 <__multadd>
 800c24c:	4601      	mov	r1, r0
 800c24e:	4606      	mov	r6, r0
 800c250:	ee18 0a10 	vmov	r0, s16
 800c254:	f000 fd26 	bl	800cca4 <__mcmp>
 800c258:	2800      	cmp	r0, #0
 800c25a:	f73f adbb 	bgt.w	800bdd4 <_dtoa_r+0x4b4>
 800c25e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c260:	9d01      	ldr	r5, [sp, #4]
 800c262:	43db      	mvns	r3, r3
 800c264:	9300      	str	r3, [sp, #0]
 800c266:	f04f 0800 	mov.w	r8, #0
 800c26a:	4631      	mov	r1, r6
 800c26c:	4620      	mov	r0, r4
 800c26e:	f000 fad7 	bl	800c820 <_Bfree>
 800c272:	2f00      	cmp	r7, #0
 800c274:	f43f aea4 	beq.w	800bfc0 <_dtoa_r+0x6a0>
 800c278:	f1b8 0f00 	cmp.w	r8, #0
 800c27c:	d005      	beq.n	800c28a <_dtoa_r+0x96a>
 800c27e:	45b8      	cmp	r8, r7
 800c280:	d003      	beq.n	800c28a <_dtoa_r+0x96a>
 800c282:	4641      	mov	r1, r8
 800c284:	4620      	mov	r0, r4
 800c286:	f000 facb 	bl	800c820 <_Bfree>
 800c28a:	4639      	mov	r1, r7
 800c28c:	4620      	mov	r0, r4
 800c28e:	f000 fac7 	bl	800c820 <_Bfree>
 800c292:	e695      	b.n	800bfc0 <_dtoa_r+0x6a0>
 800c294:	2600      	movs	r6, #0
 800c296:	4637      	mov	r7, r6
 800c298:	e7e1      	b.n	800c25e <_dtoa_r+0x93e>
 800c29a:	9700      	str	r7, [sp, #0]
 800c29c:	4637      	mov	r7, r6
 800c29e:	e599      	b.n	800bdd4 <_dtoa_r+0x4b4>
 800c2a0:	40240000 	.word	0x40240000
 800c2a4:	9b08      	ldr	r3, [sp, #32]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	f000 80ca 	beq.w	800c440 <_dtoa_r+0xb20>
 800c2ac:	9b03      	ldr	r3, [sp, #12]
 800c2ae:	9302      	str	r3, [sp, #8]
 800c2b0:	2d00      	cmp	r5, #0
 800c2b2:	dd05      	ble.n	800c2c0 <_dtoa_r+0x9a0>
 800c2b4:	4639      	mov	r1, r7
 800c2b6:	462a      	mov	r2, r5
 800c2b8:	4620      	mov	r0, r4
 800c2ba:	f000 fc83 	bl	800cbc4 <__lshift>
 800c2be:	4607      	mov	r7, r0
 800c2c0:	f1b8 0f00 	cmp.w	r8, #0
 800c2c4:	d05b      	beq.n	800c37e <_dtoa_r+0xa5e>
 800c2c6:	6879      	ldr	r1, [r7, #4]
 800c2c8:	4620      	mov	r0, r4
 800c2ca:	f000 fa69 	bl	800c7a0 <_Balloc>
 800c2ce:	4605      	mov	r5, r0
 800c2d0:	b928      	cbnz	r0, 800c2de <_dtoa_r+0x9be>
 800c2d2:	4b87      	ldr	r3, [pc, #540]	; (800c4f0 <_dtoa_r+0xbd0>)
 800c2d4:	4602      	mov	r2, r0
 800c2d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c2da:	f7ff bb3b 	b.w	800b954 <_dtoa_r+0x34>
 800c2de:	693a      	ldr	r2, [r7, #16]
 800c2e0:	3202      	adds	r2, #2
 800c2e2:	0092      	lsls	r2, r2, #2
 800c2e4:	f107 010c 	add.w	r1, r7, #12
 800c2e8:	300c      	adds	r0, #12
 800c2ea:	f7fe fb1a 	bl	800a922 <memcpy>
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	4629      	mov	r1, r5
 800c2f2:	4620      	mov	r0, r4
 800c2f4:	f000 fc66 	bl	800cbc4 <__lshift>
 800c2f8:	9b01      	ldr	r3, [sp, #4]
 800c2fa:	f103 0901 	add.w	r9, r3, #1
 800c2fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c302:	4413      	add	r3, r2
 800c304:	9305      	str	r3, [sp, #20]
 800c306:	f00a 0301 	and.w	r3, sl, #1
 800c30a:	46b8      	mov	r8, r7
 800c30c:	9304      	str	r3, [sp, #16]
 800c30e:	4607      	mov	r7, r0
 800c310:	4631      	mov	r1, r6
 800c312:	ee18 0a10 	vmov	r0, s16
 800c316:	f7ff fa75 	bl	800b804 <quorem>
 800c31a:	4641      	mov	r1, r8
 800c31c:	9002      	str	r0, [sp, #8]
 800c31e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c322:	ee18 0a10 	vmov	r0, s16
 800c326:	f000 fcbd 	bl	800cca4 <__mcmp>
 800c32a:	463a      	mov	r2, r7
 800c32c:	9003      	str	r0, [sp, #12]
 800c32e:	4631      	mov	r1, r6
 800c330:	4620      	mov	r0, r4
 800c332:	f000 fcd3 	bl	800ccdc <__mdiff>
 800c336:	68c2      	ldr	r2, [r0, #12]
 800c338:	f109 3bff 	add.w	fp, r9, #4294967295
 800c33c:	4605      	mov	r5, r0
 800c33e:	bb02      	cbnz	r2, 800c382 <_dtoa_r+0xa62>
 800c340:	4601      	mov	r1, r0
 800c342:	ee18 0a10 	vmov	r0, s16
 800c346:	f000 fcad 	bl	800cca4 <__mcmp>
 800c34a:	4602      	mov	r2, r0
 800c34c:	4629      	mov	r1, r5
 800c34e:	4620      	mov	r0, r4
 800c350:	9207      	str	r2, [sp, #28]
 800c352:	f000 fa65 	bl	800c820 <_Bfree>
 800c356:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c35a:	ea43 0102 	orr.w	r1, r3, r2
 800c35e:	9b04      	ldr	r3, [sp, #16]
 800c360:	430b      	orrs	r3, r1
 800c362:	464d      	mov	r5, r9
 800c364:	d10f      	bne.n	800c386 <_dtoa_r+0xa66>
 800c366:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c36a:	d02a      	beq.n	800c3c2 <_dtoa_r+0xaa2>
 800c36c:	9b03      	ldr	r3, [sp, #12]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	dd02      	ble.n	800c378 <_dtoa_r+0xa58>
 800c372:	9b02      	ldr	r3, [sp, #8]
 800c374:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c378:	f88b a000 	strb.w	sl, [fp]
 800c37c:	e775      	b.n	800c26a <_dtoa_r+0x94a>
 800c37e:	4638      	mov	r0, r7
 800c380:	e7ba      	b.n	800c2f8 <_dtoa_r+0x9d8>
 800c382:	2201      	movs	r2, #1
 800c384:	e7e2      	b.n	800c34c <_dtoa_r+0xa2c>
 800c386:	9b03      	ldr	r3, [sp, #12]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	db04      	blt.n	800c396 <_dtoa_r+0xa76>
 800c38c:	9906      	ldr	r1, [sp, #24]
 800c38e:	430b      	orrs	r3, r1
 800c390:	9904      	ldr	r1, [sp, #16]
 800c392:	430b      	orrs	r3, r1
 800c394:	d122      	bne.n	800c3dc <_dtoa_r+0xabc>
 800c396:	2a00      	cmp	r2, #0
 800c398:	ddee      	ble.n	800c378 <_dtoa_r+0xa58>
 800c39a:	ee18 1a10 	vmov	r1, s16
 800c39e:	2201      	movs	r2, #1
 800c3a0:	4620      	mov	r0, r4
 800c3a2:	f000 fc0f 	bl	800cbc4 <__lshift>
 800c3a6:	4631      	mov	r1, r6
 800c3a8:	ee08 0a10 	vmov	s16, r0
 800c3ac:	f000 fc7a 	bl	800cca4 <__mcmp>
 800c3b0:	2800      	cmp	r0, #0
 800c3b2:	dc03      	bgt.n	800c3bc <_dtoa_r+0xa9c>
 800c3b4:	d1e0      	bne.n	800c378 <_dtoa_r+0xa58>
 800c3b6:	f01a 0f01 	tst.w	sl, #1
 800c3ba:	d0dd      	beq.n	800c378 <_dtoa_r+0xa58>
 800c3bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c3c0:	d1d7      	bne.n	800c372 <_dtoa_r+0xa52>
 800c3c2:	2339      	movs	r3, #57	; 0x39
 800c3c4:	f88b 3000 	strb.w	r3, [fp]
 800c3c8:	462b      	mov	r3, r5
 800c3ca:	461d      	mov	r5, r3
 800c3cc:	3b01      	subs	r3, #1
 800c3ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c3d2:	2a39      	cmp	r2, #57	; 0x39
 800c3d4:	d071      	beq.n	800c4ba <_dtoa_r+0xb9a>
 800c3d6:	3201      	adds	r2, #1
 800c3d8:	701a      	strb	r2, [r3, #0]
 800c3da:	e746      	b.n	800c26a <_dtoa_r+0x94a>
 800c3dc:	2a00      	cmp	r2, #0
 800c3de:	dd07      	ble.n	800c3f0 <_dtoa_r+0xad0>
 800c3e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c3e4:	d0ed      	beq.n	800c3c2 <_dtoa_r+0xaa2>
 800c3e6:	f10a 0301 	add.w	r3, sl, #1
 800c3ea:	f88b 3000 	strb.w	r3, [fp]
 800c3ee:	e73c      	b.n	800c26a <_dtoa_r+0x94a>
 800c3f0:	9b05      	ldr	r3, [sp, #20]
 800c3f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c3f6:	4599      	cmp	r9, r3
 800c3f8:	d047      	beq.n	800c48a <_dtoa_r+0xb6a>
 800c3fa:	ee18 1a10 	vmov	r1, s16
 800c3fe:	2300      	movs	r3, #0
 800c400:	220a      	movs	r2, #10
 800c402:	4620      	mov	r0, r4
 800c404:	f000 fa2e 	bl	800c864 <__multadd>
 800c408:	45b8      	cmp	r8, r7
 800c40a:	ee08 0a10 	vmov	s16, r0
 800c40e:	f04f 0300 	mov.w	r3, #0
 800c412:	f04f 020a 	mov.w	r2, #10
 800c416:	4641      	mov	r1, r8
 800c418:	4620      	mov	r0, r4
 800c41a:	d106      	bne.n	800c42a <_dtoa_r+0xb0a>
 800c41c:	f000 fa22 	bl	800c864 <__multadd>
 800c420:	4680      	mov	r8, r0
 800c422:	4607      	mov	r7, r0
 800c424:	f109 0901 	add.w	r9, r9, #1
 800c428:	e772      	b.n	800c310 <_dtoa_r+0x9f0>
 800c42a:	f000 fa1b 	bl	800c864 <__multadd>
 800c42e:	4639      	mov	r1, r7
 800c430:	4680      	mov	r8, r0
 800c432:	2300      	movs	r3, #0
 800c434:	220a      	movs	r2, #10
 800c436:	4620      	mov	r0, r4
 800c438:	f000 fa14 	bl	800c864 <__multadd>
 800c43c:	4607      	mov	r7, r0
 800c43e:	e7f1      	b.n	800c424 <_dtoa_r+0xb04>
 800c440:	9b03      	ldr	r3, [sp, #12]
 800c442:	9302      	str	r3, [sp, #8]
 800c444:	9d01      	ldr	r5, [sp, #4]
 800c446:	ee18 0a10 	vmov	r0, s16
 800c44a:	4631      	mov	r1, r6
 800c44c:	f7ff f9da 	bl	800b804 <quorem>
 800c450:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c454:	9b01      	ldr	r3, [sp, #4]
 800c456:	f805 ab01 	strb.w	sl, [r5], #1
 800c45a:	1aea      	subs	r2, r5, r3
 800c45c:	9b02      	ldr	r3, [sp, #8]
 800c45e:	4293      	cmp	r3, r2
 800c460:	dd09      	ble.n	800c476 <_dtoa_r+0xb56>
 800c462:	ee18 1a10 	vmov	r1, s16
 800c466:	2300      	movs	r3, #0
 800c468:	220a      	movs	r2, #10
 800c46a:	4620      	mov	r0, r4
 800c46c:	f000 f9fa 	bl	800c864 <__multadd>
 800c470:	ee08 0a10 	vmov	s16, r0
 800c474:	e7e7      	b.n	800c446 <_dtoa_r+0xb26>
 800c476:	9b02      	ldr	r3, [sp, #8]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	bfc8      	it	gt
 800c47c:	461d      	movgt	r5, r3
 800c47e:	9b01      	ldr	r3, [sp, #4]
 800c480:	bfd8      	it	le
 800c482:	2501      	movle	r5, #1
 800c484:	441d      	add	r5, r3
 800c486:	f04f 0800 	mov.w	r8, #0
 800c48a:	ee18 1a10 	vmov	r1, s16
 800c48e:	2201      	movs	r2, #1
 800c490:	4620      	mov	r0, r4
 800c492:	f000 fb97 	bl	800cbc4 <__lshift>
 800c496:	4631      	mov	r1, r6
 800c498:	ee08 0a10 	vmov	s16, r0
 800c49c:	f000 fc02 	bl	800cca4 <__mcmp>
 800c4a0:	2800      	cmp	r0, #0
 800c4a2:	dc91      	bgt.n	800c3c8 <_dtoa_r+0xaa8>
 800c4a4:	d102      	bne.n	800c4ac <_dtoa_r+0xb8c>
 800c4a6:	f01a 0f01 	tst.w	sl, #1
 800c4aa:	d18d      	bne.n	800c3c8 <_dtoa_r+0xaa8>
 800c4ac:	462b      	mov	r3, r5
 800c4ae:	461d      	mov	r5, r3
 800c4b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c4b4:	2a30      	cmp	r2, #48	; 0x30
 800c4b6:	d0fa      	beq.n	800c4ae <_dtoa_r+0xb8e>
 800c4b8:	e6d7      	b.n	800c26a <_dtoa_r+0x94a>
 800c4ba:	9a01      	ldr	r2, [sp, #4]
 800c4bc:	429a      	cmp	r2, r3
 800c4be:	d184      	bne.n	800c3ca <_dtoa_r+0xaaa>
 800c4c0:	9b00      	ldr	r3, [sp, #0]
 800c4c2:	3301      	adds	r3, #1
 800c4c4:	9300      	str	r3, [sp, #0]
 800c4c6:	2331      	movs	r3, #49	; 0x31
 800c4c8:	7013      	strb	r3, [r2, #0]
 800c4ca:	e6ce      	b.n	800c26a <_dtoa_r+0x94a>
 800c4cc:	4b09      	ldr	r3, [pc, #36]	; (800c4f4 <_dtoa_r+0xbd4>)
 800c4ce:	f7ff ba95 	b.w	800b9fc <_dtoa_r+0xdc>
 800c4d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	f47f aa6e 	bne.w	800b9b6 <_dtoa_r+0x96>
 800c4da:	4b07      	ldr	r3, [pc, #28]	; (800c4f8 <_dtoa_r+0xbd8>)
 800c4dc:	f7ff ba8e 	b.w	800b9fc <_dtoa_r+0xdc>
 800c4e0:	9b02      	ldr	r3, [sp, #8]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	dcae      	bgt.n	800c444 <_dtoa_r+0xb24>
 800c4e6:	9b06      	ldr	r3, [sp, #24]
 800c4e8:	2b02      	cmp	r3, #2
 800c4ea:	f73f aea8 	bgt.w	800c23e <_dtoa_r+0x91e>
 800c4ee:	e7a9      	b.n	800c444 <_dtoa_r+0xb24>
 800c4f0:	0800f187 	.word	0x0800f187
 800c4f4:	0800f0e4 	.word	0x0800f0e4
 800c4f8:	0800f108 	.word	0x0800f108

0800c4fc <__sflush_r>:
 800c4fc:	898a      	ldrh	r2, [r1, #12]
 800c4fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c502:	4605      	mov	r5, r0
 800c504:	0710      	lsls	r0, r2, #28
 800c506:	460c      	mov	r4, r1
 800c508:	d458      	bmi.n	800c5bc <__sflush_r+0xc0>
 800c50a:	684b      	ldr	r3, [r1, #4]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	dc05      	bgt.n	800c51c <__sflush_r+0x20>
 800c510:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c512:	2b00      	cmp	r3, #0
 800c514:	dc02      	bgt.n	800c51c <__sflush_r+0x20>
 800c516:	2000      	movs	r0, #0
 800c518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c51c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c51e:	2e00      	cmp	r6, #0
 800c520:	d0f9      	beq.n	800c516 <__sflush_r+0x1a>
 800c522:	2300      	movs	r3, #0
 800c524:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c528:	682f      	ldr	r7, [r5, #0]
 800c52a:	602b      	str	r3, [r5, #0]
 800c52c:	d032      	beq.n	800c594 <__sflush_r+0x98>
 800c52e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c530:	89a3      	ldrh	r3, [r4, #12]
 800c532:	075a      	lsls	r2, r3, #29
 800c534:	d505      	bpl.n	800c542 <__sflush_r+0x46>
 800c536:	6863      	ldr	r3, [r4, #4]
 800c538:	1ac0      	subs	r0, r0, r3
 800c53a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c53c:	b10b      	cbz	r3, 800c542 <__sflush_r+0x46>
 800c53e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c540:	1ac0      	subs	r0, r0, r3
 800c542:	2300      	movs	r3, #0
 800c544:	4602      	mov	r2, r0
 800c546:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c548:	6a21      	ldr	r1, [r4, #32]
 800c54a:	4628      	mov	r0, r5
 800c54c:	47b0      	blx	r6
 800c54e:	1c43      	adds	r3, r0, #1
 800c550:	89a3      	ldrh	r3, [r4, #12]
 800c552:	d106      	bne.n	800c562 <__sflush_r+0x66>
 800c554:	6829      	ldr	r1, [r5, #0]
 800c556:	291d      	cmp	r1, #29
 800c558:	d82c      	bhi.n	800c5b4 <__sflush_r+0xb8>
 800c55a:	4a2a      	ldr	r2, [pc, #168]	; (800c604 <__sflush_r+0x108>)
 800c55c:	40ca      	lsrs	r2, r1
 800c55e:	07d6      	lsls	r6, r2, #31
 800c560:	d528      	bpl.n	800c5b4 <__sflush_r+0xb8>
 800c562:	2200      	movs	r2, #0
 800c564:	6062      	str	r2, [r4, #4]
 800c566:	04d9      	lsls	r1, r3, #19
 800c568:	6922      	ldr	r2, [r4, #16]
 800c56a:	6022      	str	r2, [r4, #0]
 800c56c:	d504      	bpl.n	800c578 <__sflush_r+0x7c>
 800c56e:	1c42      	adds	r2, r0, #1
 800c570:	d101      	bne.n	800c576 <__sflush_r+0x7a>
 800c572:	682b      	ldr	r3, [r5, #0]
 800c574:	b903      	cbnz	r3, 800c578 <__sflush_r+0x7c>
 800c576:	6560      	str	r0, [r4, #84]	; 0x54
 800c578:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c57a:	602f      	str	r7, [r5, #0]
 800c57c:	2900      	cmp	r1, #0
 800c57e:	d0ca      	beq.n	800c516 <__sflush_r+0x1a>
 800c580:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c584:	4299      	cmp	r1, r3
 800c586:	d002      	beq.n	800c58e <__sflush_r+0x92>
 800c588:	4628      	mov	r0, r5
 800c58a:	f000 fca3 	bl	800ced4 <_free_r>
 800c58e:	2000      	movs	r0, #0
 800c590:	6360      	str	r0, [r4, #52]	; 0x34
 800c592:	e7c1      	b.n	800c518 <__sflush_r+0x1c>
 800c594:	6a21      	ldr	r1, [r4, #32]
 800c596:	2301      	movs	r3, #1
 800c598:	4628      	mov	r0, r5
 800c59a:	47b0      	blx	r6
 800c59c:	1c41      	adds	r1, r0, #1
 800c59e:	d1c7      	bne.n	800c530 <__sflush_r+0x34>
 800c5a0:	682b      	ldr	r3, [r5, #0]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d0c4      	beq.n	800c530 <__sflush_r+0x34>
 800c5a6:	2b1d      	cmp	r3, #29
 800c5a8:	d001      	beq.n	800c5ae <__sflush_r+0xb2>
 800c5aa:	2b16      	cmp	r3, #22
 800c5ac:	d101      	bne.n	800c5b2 <__sflush_r+0xb6>
 800c5ae:	602f      	str	r7, [r5, #0]
 800c5b0:	e7b1      	b.n	800c516 <__sflush_r+0x1a>
 800c5b2:	89a3      	ldrh	r3, [r4, #12]
 800c5b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5b8:	81a3      	strh	r3, [r4, #12]
 800c5ba:	e7ad      	b.n	800c518 <__sflush_r+0x1c>
 800c5bc:	690f      	ldr	r7, [r1, #16]
 800c5be:	2f00      	cmp	r7, #0
 800c5c0:	d0a9      	beq.n	800c516 <__sflush_r+0x1a>
 800c5c2:	0793      	lsls	r3, r2, #30
 800c5c4:	680e      	ldr	r6, [r1, #0]
 800c5c6:	bf08      	it	eq
 800c5c8:	694b      	ldreq	r3, [r1, #20]
 800c5ca:	600f      	str	r7, [r1, #0]
 800c5cc:	bf18      	it	ne
 800c5ce:	2300      	movne	r3, #0
 800c5d0:	eba6 0807 	sub.w	r8, r6, r7
 800c5d4:	608b      	str	r3, [r1, #8]
 800c5d6:	f1b8 0f00 	cmp.w	r8, #0
 800c5da:	dd9c      	ble.n	800c516 <__sflush_r+0x1a>
 800c5dc:	6a21      	ldr	r1, [r4, #32]
 800c5de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c5e0:	4643      	mov	r3, r8
 800c5e2:	463a      	mov	r2, r7
 800c5e4:	4628      	mov	r0, r5
 800c5e6:	47b0      	blx	r6
 800c5e8:	2800      	cmp	r0, #0
 800c5ea:	dc06      	bgt.n	800c5fa <__sflush_r+0xfe>
 800c5ec:	89a3      	ldrh	r3, [r4, #12]
 800c5ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5f2:	81a3      	strh	r3, [r4, #12]
 800c5f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5f8:	e78e      	b.n	800c518 <__sflush_r+0x1c>
 800c5fa:	4407      	add	r7, r0
 800c5fc:	eba8 0800 	sub.w	r8, r8, r0
 800c600:	e7e9      	b.n	800c5d6 <__sflush_r+0xda>
 800c602:	bf00      	nop
 800c604:	20400001 	.word	0x20400001

0800c608 <_fflush_r>:
 800c608:	b538      	push	{r3, r4, r5, lr}
 800c60a:	690b      	ldr	r3, [r1, #16]
 800c60c:	4605      	mov	r5, r0
 800c60e:	460c      	mov	r4, r1
 800c610:	b913      	cbnz	r3, 800c618 <_fflush_r+0x10>
 800c612:	2500      	movs	r5, #0
 800c614:	4628      	mov	r0, r5
 800c616:	bd38      	pop	{r3, r4, r5, pc}
 800c618:	b118      	cbz	r0, 800c622 <_fflush_r+0x1a>
 800c61a:	6983      	ldr	r3, [r0, #24]
 800c61c:	b90b      	cbnz	r3, 800c622 <_fflush_r+0x1a>
 800c61e:	f7fe f8bb 	bl	800a798 <__sinit>
 800c622:	4b14      	ldr	r3, [pc, #80]	; (800c674 <_fflush_r+0x6c>)
 800c624:	429c      	cmp	r4, r3
 800c626:	d11b      	bne.n	800c660 <_fflush_r+0x58>
 800c628:	686c      	ldr	r4, [r5, #4]
 800c62a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d0ef      	beq.n	800c612 <_fflush_r+0xa>
 800c632:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c634:	07d0      	lsls	r0, r2, #31
 800c636:	d404      	bmi.n	800c642 <_fflush_r+0x3a>
 800c638:	0599      	lsls	r1, r3, #22
 800c63a:	d402      	bmi.n	800c642 <_fflush_r+0x3a>
 800c63c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c63e:	f7fe f96e 	bl	800a91e <__retarget_lock_acquire_recursive>
 800c642:	4628      	mov	r0, r5
 800c644:	4621      	mov	r1, r4
 800c646:	f7ff ff59 	bl	800c4fc <__sflush_r>
 800c64a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c64c:	07da      	lsls	r2, r3, #31
 800c64e:	4605      	mov	r5, r0
 800c650:	d4e0      	bmi.n	800c614 <_fflush_r+0xc>
 800c652:	89a3      	ldrh	r3, [r4, #12]
 800c654:	059b      	lsls	r3, r3, #22
 800c656:	d4dd      	bmi.n	800c614 <_fflush_r+0xc>
 800c658:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c65a:	f7fe f961 	bl	800a920 <__retarget_lock_release_recursive>
 800c65e:	e7d9      	b.n	800c614 <_fflush_r+0xc>
 800c660:	4b05      	ldr	r3, [pc, #20]	; (800c678 <_fflush_r+0x70>)
 800c662:	429c      	cmp	r4, r3
 800c664:	d101      	bne.n	800c66a <_fflush_r+0x62>
 800c666:	68ac      	ldr	r4, [r5, #8]
 800c668:	e7df      	b.n	800c62a <_fflush_r+0x22>
 800c66a:	4b04      	ldr	r3, [pc, #16]	; (800c67c <_fflush_r+0x74>)
 800c66c:	429c      	cmp	r4, r3
 800c66e:	bf08      	it	eq
 800c670:	68ec      	ldreq	r4, [r5, #12]
 800c672:	e7da      	b.n	800c62a <_fflush_r+0x22>
 800c674:	0800f090 	.word	0x0800f090
 800c678:	0800f0b0 	.word	0x0800f0b0
 800c67c:	0800f070 	.word	0x0800f070

0800c680 <_localeconv_r>:
 800c680:	4800      	ldr	r0, [pc, #0]	; (800c684 <_localeconv_r+0x4>)
 800c682:	4770      	bx	lr
 800c684:	200001ac 	.word	0x200001ac

0800c688 <_lseek_r>:
 800c688:	b538      	push	{r3, r4, r5, lr}
 800c68a:	4d07      	ldr	r5, [pc, #28]	; (800c6a8 <_lseek_r+0x20>)
 800c68c:	4604      	mov	r4, r0
 800c68e:	4608      	mov	r0, r1
 800c690:	4611      	mov	r1, r2
 800c692:	2200      	movs	r2, #0
 800c694:	602a      	str	r2, [r5, #0]
 800c696:	461a      	mov	r2, r3
 800c698:	f7f7 fa5e 	bl	8003b58 <_lseek>
 800c69c:	1c43      	adds	r3, r0, #1
 800c69e:	d102      	bne.n	800c6a6 <_lseek_r+0x1e>
 800c6a0:	682b      	ldr	r3, [r5, #0]
 800c6a2:	b103      	cbz	r3, 800c6a6 <_lseek_r+0x1e>
 800c6a4:	6023      	str	r3, [r4, #0]
 800c6a6:	bd38      	pop	{r3, r4, r5, pc}
 800c6a8:	20004494 	.word	0x20004494

0800c6ac <__swhatbuf_r>:
 800c6ac:	b570      	push	{r4, r5, r6, lr}
 800c6ae:	460e      	mov	r6, r1
 800c6b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6b4:	2900      	cmp	r1, #0
 800c6b6:	b096      	sub	sp, #88	; 0x58
 800c6b8:	4614      	mov	r4, r2
 800c6ba:	461d      	mov	r5, r3
 800c6bc:	da08      	bge.n	800c6d0 <__swhatbuf_r+0x24>
 800c6be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	602a      	str	r2, [r5, #0]
 800c6c6:	061a      	lsls	r2, r3, #24
 800c6c8:	d410      	bmi.n	800c6ec <__swhatbuf_r+0x40>
 800c6ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6ce:	e00e      	b.n	800c6ee <__swhatbuf_r+0x42>
 800c6d0:	466a      	mov	r2, sp
 800c6d2:	f000 ff43 	bl	800d55c <_fstat_r>
 800c6d6:	2800      	cmp	r0, #0
 800c6d8:	dbf1      	blt.n	800c6be <__swhatbuf_r+0x12>
 800c6da:	9a01      	ldr	r2, [sp, #4]
 800c6dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c6e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c6e4:	425a      	negs	r2, r3
 800c6e6:	415a      	adcs	r2, r3
 800c6e8:	602a      	str	r2, [r5, #0]
 800c6ea:	e7ee      	b.n	800c6ca <__swhatbuf_r+0x1e>
 800c6ec:	2340      	movs	r3, #64	; 0x40
 800c6ee:	2000      	movs	r0, #0
 800c6f0:	6023      	str	r3, [r4, #0]
 800c6f2:	b016      	add	sp, #88	; 0x58
 800c6f4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c6f8 <__smakebuf_r>:
 800c6f8:	898b      	ldrh	r3, [r1, #12]
 800c6fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c6fc:	079d      	lsls	r5, r3, #30
 800c6fe:	4606      	mov	r6, r0
 800c700:	460c      	mov	r4, r1
 800c702:	d507      	bpl.n	800c714 <__smakebuf_r+0x1c>
 800c704:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c708:	6023      	str	r3, [r4, #0]
 800c70a:	6123      	str	r3, [r4, #16]
 800c70c:	2301      	movs	r3, #1
 800c70e:	6163      	str	r3, [r4, #20]
 800c710:	b002      	add	sp, #8
 800c712:	bd70      	pop	{r4, r5, r6, pc}
 800c714:	ab01      	add	r3, sp, #4
 800c716:	466a      	mov	r2, sp
 800c718:	f7ff ffc8 	bl	800c6ac <__swhatbuf_r>
 800c71c:	9900      	ldr	r1, [sp, #0]
 800c71e:	4605      	mov	r5, r0
 800c720:	4630      	mov	r0, r6
 800c722:	f7fe f935 	bl	800a990 <_malloc_r>
 800c726:	b948      	cbnz	r0, 800c73c <__smakebuf_r+0x44>
 800c728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c72c:	059a      	lsls	r2, r3, #22
 800c72e:	d4ef      	bmi.n	800c710 <__smakebuf_r+0x18>
 800c730:	f023 0303 	bic.w	r3, r3, #3
 800c734:	f043 0302 	orr.w	r3, r3, #2
 800c738:	81a3      	strh	r3, [r4, #12]
 800c73a:	e7e3      	b.n	800c704 <__smakebuf_r+0xc>
 800c73c:	4b0d      	ldr	r3, [pc, #52]	; (800c774 <__smakebuf_r+0x7c>)
 800c73e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c740:	89a3      	ldrh	r3, [r4, #12]
 800c742:	6020      	str	r0, [r4, #0]
 800c744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c748:	81a3      	strh	r3, [r4, #12]
 800c74a:	9b00      	ldr	r3, [sp, #0]
 800c74c:	6163      	str	r3, [r4, #20]
 800c74e:	9b01      	ldr	r3, [sp, #4]
 800c750:	6120      	str	r0, [r4, #16]
 800c752:	b15b      	cbz	r3, 800c76c <__smakebuf_r+0x74>
 800c754:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c758:	4630      	mov	r0, r6
 800c75a:	f000 ff11 	bl	800d580 <_isatty_r>
 800c75e:	b128      	cbz	r0, 800c76c <__smakebuf_r+0x74>
 800c760:	89a3      	ldrh	r3, [r4, #12]
 800c762:	f023 0303 	bic.w	r3, r3, #3
 800c766:	f043 0301 	orr.w	r3, r3, #1
 800c76a:	81a3      	strh	r3, [r4, #12]
 800c76c:	89a0      	ldrh	r0, [r4, #12]
 800c76e:	4305      	orrs	r5, r0
 800c770:	81a5      	strh	r5, [r4, #12]
 800c772:	e7cd      	b.n	800c710 <__smakebuf_r+0x18>
 800c774:	0800a731 	.word	0x0800a731

0800c778 <malloc>:
 800c778:	4b02      	ldr	r3, [pc, #8]	; (800c784 <malloc+0xc>)
 800c77a:	4601      	mov	r1, r0
 800c77c:	6818      	ldr	r0, [r3, #0]
 800c77e:	f7fe b907 	b.w	800a990 <_malloc_r>
 800c782:	bf00      	nop
 800c784:	20000058 	.word	0x20000058

0800c788 <__malloc_lock>:
 800c788:	4801      	ldr	r0, [pc, #4]	; (800c790 <__malloc_lock+0x8>)
 800c78a:	f7fe b8c8 	b.w	800a91e <__retarget_lock_acquire_recursive>
 800c78e:	bf00      	nop
 800c790:	20004488 	.word	0x20004488

0800c794 <__malloc_unlock>:
 800c794:	4801      	ldr	r0, [pc, #4]	; (800c79c <__malloc_unlock+0x8>)
 800c796:	f7fe b8c3 	b.w	800a920 <__retarget_lock_release_recursive>
 800c79a:	bf00      	nop
 800c79c:	20004488 	.word	0x20004488

0800c7a0 <_Balloc>:
 800c7a0:	b570      	push	{r4, r5, r6, lr}
 800c7a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c7a4:	4604      	mov	r4, r0
 800c7a6:	460d      	mov	r5, r1
 800c7a8:	b976      	cbnz	r6, 800c7c8 <_Balloc+0x28>
 800c7aa:	2010      	movs	r0, #16
 800c7ac:	f7ff ffe4 	bl	800c778 <malloc>
 800c7b0:	4602      	mov	r2, r0
 800c7b2:	6260      	str	r0, [r4, #36]	; 0x24
 800c7b4:	b920      	cbnz	r0, 800c7c0 <_Balloc+0x20>
 800c7b6:	4b18      	ldr	r3, [pc, #96]	; (800c818 <_Balloc+0x78>)
 800c7b8:	4818      	ldr	r0, [pc, #96]	; (800c81c <_Balloc+0x7c>)
 800c7ba:	2166      	movs	r1, #102	; 0x66
 800c7bc:	f000 fe9e 	bl	800d4fc <__assert_func>
 800c7c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c7c4:	6006      	str	r6, [r0, #0]
 800c7c6:	60c6      	str	r6, [r0, #12]
 800c7c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c7ca:	68f3      	ldr	r3, [r6, #12]
 800c7cc:	b183      	cbz	r3, 800c7f0 <_Balloc+0x50>
 800c7ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7d0:	68db      	ldr	r3, [r3, #12]
 800c7d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c7d6:	b9b8      	cbnz	r0, 800c808 <_Balloc+0x68>
 800c7d8:	2101      	movs	r1, #1
 800c7da:	fa01 f605 	lsl.w	r6, r1, r5
 800c7de:	1d72      	adds	r2, r6, #5
 800c7e0:	0092      	lsls	r2, r2, #2
 800c7e2:	4620      	mov	r0, r4
 800c7e4:	f000 fb60 	bl	800cea8 <_calloc_r>
 800c7e8:	b160      	cbz	r0, 800c804 <_Balloc+0x64>
 800c7ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c7ee:	e00e      	b.n	800c80e <_Balloc+0x6e>
 800c7f0:	2221      	movs	r2, #33	; 0x21
 800c7f2:	2104      	movs	r1, #4
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	f000 fb57 	bl	800cea8 <_calloc_r>
 800c7fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7fc:	60f0      	str	r0, [r6, #12]
 800c7fe:	68db      	ldr	r3, [r3, #12]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d1e4      	bne.n	800c7ce <_Balloc+0x2e>
 800c804:	2000      	movs	r0, #0
 800c806:	bd70      	pop	{r4, r5, r6, pc}
 800c808:	6802      	ldr	r2, [r0, #0]
 800c80a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c80e:	2300      	movs	r3, #0
 800c810:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c814:	e7f7      	b.n	800c806 <_Balloc+0x66>
 800c816:	bf00      	nop
 800c818:	0800f115 	.word	0x0800f115
 800c81c:	0800f198 	.word	0x0800f198

0800c820 <_Bfree>:
 800c820:	b570      	push	{r4, r5, r6, lr}
 800c822:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c824:	4605      	mov	r5, r0
 800c826:	460c      	mov	r4, r1
 800c828:	b976      	cbnz	r6, 800c848 <_Bfree+0x28>
 800c82a:	2010      	movs	r0, #16
 800c82c:	f7ff ffa4 	bl	800c778 <malloc>
 800c830:	4602      	mov	r2, r0
 800c832:	6268      	str	r0, [r5, #36]	; 0x24
 800c834:	b920      	cbnz	r0, 800c840 <_Bfree+0x20>
 800c836:	4b09      	ldr	r3, [pc, #36]	; (800c85c <_Bfree+0x3c>)
 800c838:	4809      	ldr	r0, [pc, #36]	; (800c860 <_Bfree+0x40>)
 800c83a:	218a      	movs	r1, #138	; 0x8a
 800c83c:	f000 fe5e 	bl	800d4fc <__assert_func>
 800c840:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c844:	6006      	str	r6, [r0, #0]
 800c846:	60c6      	str	r6, [r0, #12]
 800c848:	b13c      	cbz	r4, 800c85a <_Bfree+0x3a>
 800c84a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c84c:	6862      	ldr	r2, [r4, #4]
 800c84e:	68db      	ldr	r3, [r3, #12]
 800c850:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c854:	6021      	str	r1, [r4, #0]
 800c856:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c85a:	bd70      	pop	{r4, r5, r6, pc}
 800c85c:	0800f115 	.word	0x0800f115
 800c860:	0800f198 	.word	0x0800f198

0800c864 <__multadd>:
 800c864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c868:	690d      	ldr	r5, [r1, #16]
 800c86a:	4607      	mov	r7, r0
 800c86c:	460c      	mov	r4, r1
 800c86e:	461e      	mov	r6, r3
 800c870:	f101 0c14 	add.w	ip, r1, #20
 800c874:	2000      	movs	r0, #0
 800c876:	f8dc 3000 	ldr.w	r3, [ip]
 800c87a:	b299      	uxth	r1, r3
 800c87c:	fb02 6101 	mla	r1, r2, r1, r6
 800c880:	0c1e      	lsrs	r6, r3, #16
 800c882:	0c0b      	lsrs	r3, r1, #16
 800c884:	fb02 3306 	mla	r3, r2, r6, r3
 800c888:	b289      	uxth	r1, r1
 800c88a:	3001      	adds	r0, #1
 800c88c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c890:	4285      	cmp	r5, r0
 800c892:	f84c 1b04 	str.w	r1, [ip], #4
 800c896:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c89a:	dcec      	bgt.n	800c876 <__multadd+0x12>
 800c89c:	b30e      	cbz	r6, 800c8e2 <__multadd+0x7e>
 800c89e:	68a3      	ldr	r3, [r4, #8]
 800c8a0:	42ab      	cmp	r3, r5
 800c8a2:	dc19      	bgt.n	800c8d8 <__multadd+0x74>
 800c8a4:	6861      	ldr	r1, [r4, #4]
 800c8a6:	4638      	mov	r0, r7
 800c8a8:	3101      	adds	r1, #1
 800c8aa:	f7ff ff79 	bl	800c7a0 <_Balloc>
 800c8ae:	4680      	mov	r8, r0
 800c8b0:	b928      	cbnz	r0, 800c8be <__multadd+0x5a>
 800c8b2:	4602      	mov	r2, r0
 800c8b4:	4b0c      	ldr	r3, [pc, #48]	; (800c8e8 <__multadd+0x84>)
 800c8b6:	480d      	ldr	r0, [pc, #52]	; (800c8ec <__multadd+0x88>)
 800c8b8:	21b5      	movs	r1, #181	; 0xb5
 800c8ba:	f000 fe1f 	bl	800d4fc <__assert_func>
 800c8be:	6922      	ldr	r2, [r4, #16]
 800c8c0:	3202      	adds	r2, #2
 800c8c2:	f104 010c 	add.w	r1, r4, #12
 800c8c6:	0092      	lsls	r2, r2, #2
 800c8c8:	300c      	adds	r0, #12
 800c8ca:	f7fe f82a 	bl	800a922 <memcpy>
 800c8ce:	4621      	mov	r1, r4
 800c8d0:	4638      	mov	r0, r7
 800c8d2:	f7ff ffa5 	bl	800c820 <_Bfree>
 800c8d6:	4644      	mov	r4, r8
 800c8d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c8dc:	3501      	adds	r5, #1
 800c8de:	615e      	str	r6, [r3, #20]
 800c8e0:	6125      	str	r5, [r4, #16]
 800c8e2:	4620      	mov	r0, r4
 800c8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8e8:	0800f187 	.word	0x0800f187
 800c8ec:	0800f198 	.word	0x0800f198

0800c8f0 <__hi0bits>:
 800c8f0:	0c03      	lsrs	r3, r0, #16
 800c8f2:	041b      	lsls	r3, r3, #16
 800c8f4:	b9d3      	cbnz	r3, 800c92c <__hi0bits+0x3c>
 800c8f6:	0400      	lsls	r0, r0, #16
 800c8f8:	2310      	movs	r3, #16
 800c8fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c8fe:	bf04      	itt	eq
 800c900:	0200      	lsleq	r0, r0, #8
 800c902:	3308      	addeq	r3, #8
 800c904:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c908:	bf04      	itt	eq
 800c90a:	0100      	lsleq	r0, r0, #4
 800c90c:	3304      	addeq	r3, #4
 800c90e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c912:	bf04      	itt	eq
 800c914:	0080      	lsleq	r0, r0, #2
 800c916:	3302      	addeq	r3, #2
 800c918:	2800      	cmp	r0, #0
 800c91a:	db05      	blt.n	800c928 <__hi0bits+0x38>
 800c91c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c920:	f103 0301 	add.w	r3, r3, #1
 800c924:	bf08      	it	eq
 800c926:	2320      	moveq	r3, #32
 800c928:	4618      	mov	r0, r3
 800c92a:	4770      	bx	lr
 800c92c:	2300      	movs	r3, #0
 800c92e:	e7e4      	b.n	800c8fa <__hi0bits+0xa>

0800c930 <__lo0bits>:
 800c930:	6803      	ldr	r3, [r0, #0]
 800c932:	f013 0207 	ands.w	r2, r3, #7
 800c936:	4601      	mov	r1, r0
 800c938:	d00b      	beq.n	800c952 <__lo0bits+0x22>
 800c93a:	07da      	lsls	r2, r3, #31
 800c93c:	d423      	bmi.n	800c986 <__lo0bits+0x56>
 800c93e:	0798      	lsls	r0, r3, #30
 800c940:	bf49      	itett	mi
 800c942:	085b      	lsrmi	r3, r3, #1
 800c944:	089b      	lsrpl	r3, r3, #2
 800c946:	2001      	movmi	r0, #1
 800c948:	600b      	strmi	r3, [r1, #0]
 800c94a:	bf5c      	itt	pl
 800c94c:	600b      	strpl	r3, [r1, #0]
 800c94e:	2002      	movpl	r0, #2
 800c950:	4770      	bx	lr
 800c952:	b298      	uxth	r0, r3
 800c954:	b9a8      	cbnz	r0, 800c982 <__lo0bits+0x52>
 800c956:	0c1b      	lsrs	r3, r3, #16
 800c958:	2010      	movs	r0, #16
 800c95a:	b2da      	uxtb	r2, r3
 800c95c:	b90a      	cbnz	r2, 800c962 <__lo0bits+0x32>
 800c95e:	3008      	adds	r0, #8
 800c960:	0a1b      	lsrs	r3, r3, #8
 800c962:	071a      	lsls	r2, r3, #28
 800c964:	bf04      	itt	eq
 800c966:	091b      	lsreq	r3, r3, #4
 800c968:	3004      	addeq	r0, #4
 800c96a:	079a      	lsls	r2, r3, #30
 800c96c:	bf04      	itt	eq
 800c96e:	089b      	lsreq	r3, r3, #2
 800c970:	3002      	addeq	r0, #2
 800c972:	07da      	lsls	r2, r3, #31
 800c974:	d403      	bmi.n	800c97e <__lo0bits+0x4e>
 800c976:	085b      	lsrs	r3, r3, #1
 800c978:	f100 0001 	add.w	r0, r0, #1
 800c97c:	d005      	beq.n	800c98a <__lo0bits+0x5a>
 800c97e:	600b      	str	r3, [r1, #0]
 800c980:	4770      	bx	lr
 800c982:	4610      	mov	r0, r2
 800c984:	e7e9      	b.n	800c95a <__lo0bits+0x2a>
 800c986:	2000      	movs	r0, #0
 800c988:	4770      	bx	lr
 800c98a:	2020      	movs	r0, #32
 800c98c:	4770      	bx	lr
	...

0800c990 <__i2b>:
 800c990:	b510      	push	{r4, lr}
 800c992:	460c      	mov	r4, r1
 800c994:	2101      	movs	r1, #1
 800c996:	f7ff ff03 	bl	800c7a0 <_Balloc>
 800c99a:	4602      	mov	r2, r0
 800c99c:	b928      	cbnz	r0, 800c9aa <__i2b+0x1a>
 800c99e:	4b05      	ldr	r3, [pc, #20]	; (800c9b4 <__i2b+0x24>)
 800c9a0:	4805      	ldr	r0, [pc, #20]	; (800c9b8 <__i2b+0x28>)
 800c9a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c9a6:	f000 fda9 	bl	800d4fc <__assert_func>
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	6144      	str	r4, [r0, #20]
 800c9ae:	6103      	str	r3, [r0, #16]
 800c9b0:	bd10      	pop	{r4, pc}
 800c9b2:	bf00      	nop
 800c9b4:	0800f187 	.word	0x0800f187
 800c9b8:	0800f198 	.word	0x0800f198

0800c9bc <__multiply>:
 800c9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9c0:	4691      	mov	r9, r2
 800c9c2:	690a      	ldr	r2, [r1, #16]
 800c9c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c9c8:	429a      	cmp	r2, r3
 800c9ca:	bfb8      	it	lt
 800c9cc:	460b      	movlt	r3, r1
 800c9ce:	460c      	mov	r4, r1
 800c9d0:	bfbc      	itt	lt
 800c9d2:	464c      	movlt	r4, r9
 800c9d4:	4699      	movlt	r9, r3
 800c9d6:	6927      	ldr	r7, [r4, #16]
 800c9d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c9dc:	68a3      	ldr	r3, [r4, #8]
 800c9de:	6861      	ldr	r1, [r4, #4]
 800c9e0:	eb07 060a 	add.w	r6, r7, sl
 800c9e4:	42b3      	cmp	r3, r6
 800c9e6:	b085      	sub	sp, #20
 800c9e8:	bfb8      	it	lt
 800c9ea:	3101      	addlt	r1, #1
 800c9ec:	f7ff fed8 	bl	800c7a0 <_Balloc>
 800c9f0:	b930      	cbnz	r0, 800ca00 <__multiply+0x44>
 800c9f2:	4602      	mov	r2, r0
 800c9f4:	4b44      	ldr	r3, [pc, #272]	; (800cb08 <__multiply+0x14c>)
 800c9f6:	4845      	ldr	r0, [pc, #276]	; (800cb0c <__multiply+0x150>)
 800c9f8:	f240 115d 	movw	r1, #349	; 0x15d
 800c9fc:	f000 fd7e 	bl	800d4fc <__assert_func>
 800ca00:	f100 0514 	add.w	r5, r0, #20
 800ca04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ca08:	462b      	mov	r3, r5
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	4543      	cmp	r3, r8
 800ca0e:	d321      	bcc.n	800ca54 <__multiply+0x98>
 800ca10:	f104 0314 	add.w	r3, r4, #20
 800ca14:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ca18:	f109 0314 	add.w	r3, r9, #20
 800ca1c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ca20:	9202      	str	r2, [sp, #8]
 800ca22:	1b3a      	subs	r2, r7, r4
 800ca24:	3a15      	subs	r2, #21
 800ca26:	f022 0203 	bic.w	r2, r2, #3
 800ca2a:	3204      	adds	r2, #4
 800ca2c:	f104 0115 	add.w	r1, r4, #21
 800ca30:	428f      	cmp	r7, r1
 800ca32:	bf38      	it	cc
 800ca34:	2204      	movcc	r2, #4
 800ca36:	9201      	str	r2, [sp, #4]
 800ca38:	9a02      	ldr	r2, [sp, #8]
 800ca3a:	9303      	str	r3, [sp, #12]
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	d80c      	bhi.n	800ca5a <__multiply+0x9e>
 800ca40:	2e00      	cmp	r6, #0
 800ca42:	dd03      	ble.n	800ca4c <__multiply+0x90>
 800ca44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d05a      	beq.n	800cb02 <__multiply+0x146>
 800ca4c:	6106      	str	r6, [r0, #16]
 800ca4e:	b005      	add	sp, #20
 800ca50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca54:	f843 2b04 	str.w	r2, [r3], #4
 800ca58:	e7d8      	b.n	800ca0c <__multiply+0x50>
 800ca5a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ca5e:	f1ba 0f00 	cmp.w	sl, #0
 800ca62:	d024      	beq.n	800caae <__multiply+0xf2>
 800ca64:	f104 0e14 	add.w	lr, r4, #20
 800ca68:	46a9      	mov	r9, r5
 800ca6a:	f04f 0c00 	mov.w	ip, #0
 800ca6e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ca72:	f8d9 1000 	ldr.w	r1, [r9]
 800ca76:	fa1f fb82 	uxth.w	fp, r2
 800ca7a:	b289      	uxth	r1, r1
 800ca7c:	fb0a 110b 	mla	r1, sl, fp, r1
 800ca80:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ca84:	f8d9 2000 	ldr.w	r2, [r9]
 800ca88:	4461      	add	r1, ip
 800ca8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ca8e:	fb0a c20b 	mla	r2, sl, fp, ip
 800ca92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ca96:	b289      	uxth	r1, r1
 800ca98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ca9c:	4577      	cmp	r7, lr
 800ca9e:	f849 1b04 	str.w	r1, [r9], #4
 800caa2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800caa6:	d8e2      	bhi.n	800ca6e <__multiply+0xb2>
 800caa8:	9a01      	ldr	r2, [sp, #4]
 800caaa:	f845 c002 	str.w	ip, [r5, r2]
 800caae:	9a03      	ldr	r2, [sp, #12]
 800cab0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cab4:	3304      	adds	r3, #4
 800cab6:	f1b9 0f00 	cmp.w	r9, #0
 800caba:	d020      	beq.n	800cafe <__multiply+0x142>
 800cabc:	6829      	ldr	r1, [r5, #0]
 800cabe:	f104 0c14 	add.w	ip, r4, #20
 800cac2:	46ae      	mov	lr, r5
 800cac4:	f04f 0a00 	mov.w	sl, #0
 800cac8:	f8bc b000 	ldrh.w	fp, [ip]
 800cacc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cad0:	fb09 220b 	mla	r2, r9, fp, r2
 800cad4:	4492      	add	sl, r2
 800cad6:	b289      	uxth	r1, r1
 800cad8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cadc:	f84e 1b04 	str.w	r1, [lr], #4
 800cae0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cae4:	f8be 1000 	ldrh.w	r1, [lr]
 800cae8:	0c12      	lsrs	r2, r2, #16
 800caea:	fb09 1102 	mla	r1, r9, r2, r1
 800caee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800caf2:	4567      	cmp	r7, ip
 800caf4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800caf8:	d8e6      	bhi.n	800cac8 <__multiply+0x10c>
 800cafa:	9a01      	ldr	r2, [sp, #4]
 800cafc:	50a9      	str	r1, [r5, r2]
 800cafe:	3504      	adds	r5, #4
 800cb00:	e79a      	b.n	800ca38 <__multiply+0x7c>
 800cb02:	3e01      	subs	r6, #1
 800cb04:	e79c      	b.n	800ca40 <__multiply+0x84>
 800cb06:	bf00      	nop
 800cb08:	0800f187 	.word	0x0800f187
 800cb0c:	0800f198 	.word	0x0800f198

0800cb10 <__pow5mult>:
 800cb10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb14:	4615      	mov	r5, r2
 800cb16:	f012 0203 	ands.w	r2, r2, #3
 800cb1a:	4606      	mov	r6, r0
 800cb1c:	460f      	mov	r7, r1
 800cb1e:	d007      	beq.n	800cb30 <__pow5mult+0x20>
 800cb20:	4c25      	ldr	r4, [pc, #148]	; (800cbb8 <__pow5mult+0xa8>)
 800cb22:	3a01      	subs	r2, #1
 800cb24:	2300      	movs	r3, #0
 800cb26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cb2a:	f7ff fe9b 	bl	800c864 <__multadd>
 800cb2e:	4607      	mov	r7, r0
 800cb30:	10ad      	asrs	r5, r5, #2
 800cb32:	d03d      	beq.n	800cbb0 <__pow5mult+0xa0>
 800cb34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cb36:	b97c      	cbnz	r4, 800cb58 <__pow5mult+0x48>
 800cb38:	2010      	movs	r0, #16
 800cb3a:	f7ff fe1d 	bl	800c778 <malloc>
 800cb3e:	4602      	mov	r2, r0
 800cb40:	6270      	str	r0, [r6, #36]	; 0x24
 800cb42:	b928      	cbnz	r0, 800cb50 <__pow5mult+0x40>
 800cb44:	4b1d      	ldr	r3, [pc, #116]	; (800cbbc <__pow5mult+0xac>)
 800cb46:	481e      	ldr	r0, [pc, #120]	; (800cbc0 <__pow5mult+0xb0>)
 800cb48:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cb4c:	f000 fcd6 	bl	800d4fc <__assert_func>
 800cb50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cb54:	6004      	str	r4, [r0, #0]
 800cb56:	60c4      	str	r4, [r0, #12]
 800cb58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cb5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cb60:	b94c      	cbnz	r4, 800cb76 <__pow5mult+0x66>
 800cb62:	f240 2171 	movw	r1, #625	; 0x271
 800cb66:	4630      	mov	r0, r6
 800cb68:	f7ff ff12 	bl	800c990 <__i2b>
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	f8c8 0008 	str.w	r0, [r8, #8]
 800cb72:	4604      	mov	r4, r0
 800cb74:	6003      	str	r3, [r0, #0]
 800cb76:	f04f 0900 	mov.w	r9, #0
 800cb7a:	07eb      	lsls	r3, r5, #31
 800cb7c:	d50a      	bpl.n	800cb94 <__pow5mult+0x84>
 800cb7e:	4639      	mov	r1, r7
 800cb80:	4622      	mov	r2, r4
 800cb82:	4630      	mov	r0, r6
 800cb84:	f7ff ff1a 	bl	800c9bc <__multiply>
 800cb88:	4639      	mov	r1, r7
 800cb8a:	4680      	mov	r8, r0
 800cb8c:	4630      	mov	r0, r6
 800cb8e:	f7ff fe47 	bl	800c820 <_Bfree>
 800cb92:	4647      	mov	r7, r8
 800cb94:	106d      	asrs	r5, r5, #1
 800cb96:	d00b      	beq.n	800cbb0 <__pow5mult+0xa0>
 800cb98:	6820      	ldr	r0, [r4, #0]
 800cb9a:	b938      	cbnz	r0, 800cbac <__pow5mult+0x9c>
 800cb9c:	4622      	mov	r2, r4
 800cb9e:	4621      	mov	r1, r4
 800cba0:	4630      	mov	r0, r6
 800cba2:	f7ff ff0b 	bl	800c9bc <__multiply>
 800cba6:	6020      	str	r0, [r4, #0]
 800cba8:	f8c0 9000 	str.w	r9, [r0]
 800cbac:	4604      	mov	r4, r0
 800cbae:	e7e4      	b.n	800cb7a <__pow5mult+0x6a>
 800cbb0:	4638      	mov	r0, r7
 800cbb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbb6:	bf00      	nop
 800cbb8:	0800f2e8 	.word	0x0800f2e8
 800cbbc:	0800f115 	.word	0x0800f115
 800cbc0:	0800f198 	.word	0x0800f198

0800cbc4 <__lshift>:
 800cbc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbc8:	460c      	mov	r4, r1
 800cbca:	6849      	ldr	r1, [r1, #4]
 800cbcc:	6923      	ldr	r3, [r4, #16]
 800cbce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cbd2:	68a3      	ldr	r3, [r4, #8]
 800cbd4:	4607      	mov	r7, r0
 800cbd6:	4691      	mov	r9, r2
 800cbd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cbdc:	f108 0601 	add.w	r6, r8, #1
 800cbe0:	42b3      	cmp	r3, r6
 800cbe2:	db0b      	blt.n	800cbfc <__lshift+0x38>
 800cbe4:	4638      	mov	r0, r7
 800cbe6:	f7ff fddb 	bl	800c7a0 <_Balloc>
 800cbea:	4605      	mov	r5, r0
 800cbec:	b948      	cbnz	r0, 800cc02 <__lshift+0x3e>
 800cbee:	4602      	mov	r2, r0
 800cbf0:	4b2a      	ldr	r3, [pc, #168]	; (800cc9c <__lshift+0xd8>)
 800cbf2:	482b      	ldr	r0, [pc, #172]	; (800cca0 <__lshift+0xdc>)
 800cbf4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cbf8:	f000 fc80 	bl	800d4fc <__assert_func>
 800cbfc:	3101      	adds	r1, #1
 800cbfe:	005b      	lsls	r3, r3, #1
 800cc00:	e7ee      	b.n	800cbe0 <__lshift+0x1c>
 800cc02:	2300      	movs	r3, #0
 800cc04:	f100 0114 	add.w	r1, r0, #20
 800cc08:	f100 0210 	add.w	r2, r0, #16
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	4553      	cmp	r3, sl
 800cc10:	db37      	blt.n	800cc82 <__lshift+0xbe>
 800cc12:	6920      	ldr	r0, [r4, #16]
 800cc14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cc18:	f104 0314 	add.w	r3, r4, #20
 800cc1c:	f019 091f 	ands.w	r9, r9, #31
 800cc20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cc24:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cc28:	d02f      	beq.n	800cc8a <__lshift+0xc6>
 800cc2a:	f1c9 0e20 	rsb	lr, r9, #32
 800cc2e:	468a      	mov	sl, r1
 800cc30:	f04f 0c00 	mov.w	ip, #0
 800cc34:	681a      	ldr	r2, [r3, #0]
 800cc36:	fa02 f209 	lsl.w	r2, r2, r9
 800cc3a:	ea42 020c 	orr.w	r2, r2, ip
 800cc3e:	f84a 2b04 	str.w	r2, [sl], #4
 800cc42:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc46:	4298      	cmp	r0, r3
 800cc48:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cc4c:	d8f2      	bhi.n	800cc34 <__lshift+0x70>
 800cc4e:	1b03      	subs	r3, r0, r4
 800cc50:	3b15      	subs	r3, #21
 800cc52:	f023 0303 	bic.w	r3, r3, #3
 800cc56:	3304      	adds	r3, #4
 800cc58:	f104 0215 	add.w	r2, r4, #21
 800cc5c:	4290      	cmp	r0, r2
 800cc5e:	bf38      	it	cc
 800cc60:	2304      	movcc	r3, #4
 800cc62:	f841 c003 	str.w	ip, [r1, r3]
 800cc66:	f1bc 0f00 	cmp.w	ip, #0
 800cc6a:	d001      	beq.n	800cc70 <__lshift+0xac>
 800cc6c:	f108 0602 	add.w	r6, r8, #2
 800cc70:	3e01      	subs	r6, #1
 800cc72:	4638      	mov	r0, r7
 800cc74:	612e      	str	r6, [r5, #16]
 800cc76:	4621      	mov	r1, r4
 800cc78:	f7ff fdd2 	bl	800c820 <_Bfree>
 800cc7c:	4628      	mov	r0, r5
 800cc7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc82:	f842 0f04 	str.w	r0, [r2, #4]!
 800cc86:	3301      	adds	r3, #1
 800cc88:	e7c1      	b.n	800cc0e <__lshift+0x4a>
 800cc8a:	3904      	subs	r1, #4
 800cc8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc90:	f841 2f04 	str.w	r2, [r1, #4]!
 800cc94:	4298      	cmp	r0, r3
 800cc96:	d8f9      	bhi.n	800cc8c <__lshift+0xc8>
 800cc98:	e7ea      	b.n	800cc70 <__lshift+0xac>
 800cc9a:	bf00      	nop
 800cc9c:	0800f187 	.word	0x0800f187
 800cca0:	0800f198 	.word	0x0800f198

0800cca4 <__mcmp>:
 800cca4:	b530      	push	{r4, r5, lr}
 800cca6:	6902      	ldr	r2, [r0, #16]
 800cca8:	690c      	ldr	r4, [r1, #16]
 800ccaa:	1b12      	subs	r2, r2, r4
 800ccac:	d10e      	bne.n	800cccc <__mcmp+0x28>
 800ccae:	f100 0314 	add.w	r3, r0, #20
 800ccb2:	3114      	adds	r1, #20
 800ccb4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ccb8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ccbc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ccc0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ccc4:	42a5      	cmp	r5, r4
 800ccc6:	d003      	beq.n	800ccd0 <__mcmp+0x2c>
 800ccc8:	d305      	bcc.n	800ccd6 <__mcmp+0x32>
 800ccca:	2201      	movs	r2, #1
 800cccc:	4610      	mov	r0, r2
 800ccce:	bd30      	pop	{r4, r5, pc}
 800ccd0:	4283      	cmp	r3, r0
 800ccd2:	d3f3      	bcc.n	800ccbc <__mcmp+0x18>
 800ccd4:	e7fa      	b.n	800cccc <__mcmp+0x28>
 800ccd6:	f04f 32ff 	mov.w	r2, #4294967295
 800ccda:	e7f7      	b.n	800cccc <__mcmp+0x28>

0800ccdc <__mdiff>:
 800ccdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cce0:	460c      	mov	r4, r1
 800cce2:	4606      	mov	r6, r0
 800cce4:	4611      	mov	r1, r2
 800cce6:	4620      	mov	r0, r4
 800cce8:	4690      	mov	r8, r2
 800ccea:	f7ff ffdb 	bl	800cca4 <__mcmp>
 800ccee:	1e05      	subs	r5, r0, #0
 800ccf0:	d110      	bne.n	800cd14 <__mdiff+0x38>
 800ccf2:	4629      	mov	r1, r5
 800ccf4:	4630      	mov	r0, r6
 800ccf6:	f7ff fd53 	bl	800c7a0 <_Balloc>
 800ccfa:	b930      	cbnz	r0, 800cd0a <__mdiff+0x2e>
 800ccfc:	4b3a      	ldr	r3, [pc, #232]	; (800cde8 <__mdiff+0x10c>)
 800ccfe:	4602      	mov	r2, r0
 800cd00:	f240 2132 	movw	r1, #562	; 0x232
 800cd04:	4839      	ldr	r0, [pc, #228]	; (800cdec <__mdiff+0x110>)
 800cd06:	f000 fbf9 	bl	800d4fc <__assert_func>
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cd10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd14:	bfa4      	itt	ge
 800cd16:	4643      	movge	r3, r8
 800cd18:	46a0      	movge	r8, r4
 800cd1a:	4630      	mov	r0, r6
 800cd1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cd20:	bfa6      	itte	ge
 800cd22:	461c      	movge	r4, r3
 800cd24:	2500      	movge	r5, #0
 800cd26:	2501      	movlt	r5, #1
 800cd28:	f7ff fd3a 	bl	800c7a0 <_Balloc>
 800cd2c:	b920      	cbnz	r0, 800cd38 <__mdiff+0x5c>
 800cd2e:	4b2e      	ldr	r3, [pc, #184]	; (800cde8 <__mdiff+0x10c>)
 800cd30:	4602      	mov	r2, r0
 800cd32:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cd36:	e7e5      	b.n	800cd04 <__mdiff+0x28>
 800cd38:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cd3c:	6926      	ldr	r6, [r4, #16]
 800cd3e:	60c5      	str	r5, [r0, #12]
 800cd40:	f104 0914 	add.w	r9, r4, #20
 800cd44:	f108 0514 	add.w	r5, r8, #20
 800cd48:	f100 0e14 	add.w	lr, r0, #20
 800cd4c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cd50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cd54:	f108 0210 	add.w	r2, r8, #16
 800cd58:	46f2      	mov	sl, lr
 800cd5a:	2100      	movs	r1, #0
 800cd5c:	f859 3b04 	ldr.w	r3, [r9], #4
 800cd60:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cd64:	fa1f f883 	uxth.w	r8, r3
 800cd68:	fa11 f18b 	uxtah	r1, r1, fp
 800cd6c:	0c1b      	lsrs	r3, r3, #16
 800cd6e:	eba1 0808 	sub.w	r8, r1, r8
 800cd72:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cd76:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cd7a:	fa1f f888 	uxth.w	r8, r8
 800cd7e:	1419      	asrs	r1, r3, #16
 800cd80:	454e      	cmp	r6, r9
 800cd82:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cd86:	f84a 3b04 	str.w	r3, [sl], #4
 800cd8a:	d8e7      	bhi.n	800cd5c <__mdiff+0x80>
 800cd8c:	1b33      	subs	r3, r6, r4
 800cd8e:	3b15      	subs	r3, #21
 800cd90:	f023 0303 	bic.w	r3, r3, #3
 800cd94:	3304      	adds	r3, #4
 800cd96:	3415      	adds	r4, #21
 800cd98:	42a6      	cmp	r6, r4
 800cd9a:	bf38      	it	cc
 800cd9c:	2304      	movcc	r3, #4
 800cd9e:	441d      	add	r5, r3
 800cda0:	4473      	add	r3, lr
 800cda2:	469e      	mov	lr, r3
 800cda4:	462e      	mov	r6, r5
 800cda6:	4566      	cmp	r6, ip
 800cda8:	d30e      	bcc.n	800cdc8 <__mdiff+0xec>
 800cdaa:	f10c 0203 	add.w	r2, ip, #3
 800cdae:	1b52      	subs	r2, r2, r5
 800cdb0:	f022 0203 	bic.w	r2, r2, #3
 800cdb4:	3d03      	subs	r5, #3
 800cdb6:	45ac      	cmp	ip, r5
 800cdb8:	bf38      	it	cc
 800cdba:	2200      	movcc	r2, #0
 800cdbc:	441a      	add	r2, r3
 800cdbe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cdc2:	b17b      	cbz	r3, 800cde4 <__mdiff+0x108>
 800cdc4:	6107      	str	r7, [r0, #16]
 800cdc6:	e7a3      	b.n	800cd10 <__mdiff+0x34>
 800cdc8:	f856 8b04 	ldr.w	r8, [r6], #4
 800cdcc:	fa11 f288 	uxtah	r2, r1, r8
 800cdd0:	1414      	asrs	r4, r2, #16
 800cdd2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cdd6:	b292      	uxth	r2, r2
 800cdd8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cddc:	f84e 2b04 	str.w	r2, [lr], #4
 800cde0:	1421      	asrs	r1, r4, #16
 800cde2:	e7e0      	b.n	800cda6 <__mdiff+0xca>
 800cde4:	3f01      	subs	r7, #1
 800cde6:	e7ea      	b.n	800cdbe <__mdiff+0xe2>
 800cde8:	0800f187 	.word	0x0800f187
 800cdec:	0800f198 	.word	0x0800f198

0800cdf0 <__d2b>:
 800cdf0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cdf4:	4689      	mov	r9, r1
 800cdf6:	2101      	movs	r1, #1
 800cdf8:	ec57 6b10 	vmov	r6, r7, d0
 800cdfc:	4690      	mov	r8, r2
 800cdfe:	f7ff fccf 	bl	800c7a0 <_Balloc>
 800ce02:	4604      	mov	r4, r0
 800ce04:	b930      	cbnz	r0, 800ce14 <__d2b+0x24>
 800ce06:	4602      	mov	r2, r0
 800ce08:	4b25      	ldr	r3, [pc, #148]	; (800cea0 <__d2b+0xb0>)
 800ce0a:	4826      	ldr	r0, [pc, #152]	; (800cea4 <__d2b+0xb4>)
 800ce0c:	f240 310a 	movw	r1, #778	; 0x30a
 800ce10:	f000 fb74 	bl	800d4fc <__assert_func>
 800ce14:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ce18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ce1c:	bb35      	cbnz	r5, 800ce6c <__d2b+0x7c>
 800ce1e:	2e00      	cmp	r6, #0
 800ce20:	9301      	str	r3, [sp, #4]
 800ce22:	d028      	beq.n	800ce76 <__d2b+0x86>
 800ce24:	4668      	mov	r0, sp
 800ce26:	9600      	str	r6, [sp, #0]
 800ce28:	f7ff fd82 	bl	800c930 <__lo0bits>
 800ce2c:	9900      	ldr	r1, [sp, #0]
 800ce2e:	b300      	cbz	r0, 800ce72 <__d2b+0x82>
 800ce30:	9a01      	ldr	r2, [sp, #4]
 800ce32:	f1c0 0320 	rsb	r3, r0, #32
 800ce36:	fa02 f303 	lsl.w	r3, r2, r3
 800ce3a:	430b      	orrs	r3, r1
 800ce3c:	40c2      	lsrs	r2, r0
 800ce3e:	6163      	str	r3, [r4, #20]
 800ce40:	9201      	str	r2, [sp, #4]
 800ce42:	9b01      	ldr	r3, [sp, #4]
 800ce44:	61a3      	str	r3, [r4, #24]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	bf14      	ite	ne
 800ce4a:	2202      	movne	r2, #2
 800ce4c:	2201      	moveq	r2, #1
 800ce4e:	6122      	str	r2, [r4, #16]
 800ce50:	b1d5      	cbz	r5, 800ce88 <__d2b+0x98>
 800ce52:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ce56:	4405      	add	r5, r0
 800ce58:	f8c9 5000 	str.w	r5, [r9]
 800ce5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ce60:	f8c8 0000 	str.w	r0, [r8]
 800ce64:	4620      	mov	r0, r4
 800ce66:	b003      	add	sp, #12
 800ce68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ce70:	e7d5      	b.n	800ce1e <__d2b+0x2e>
 800ce72:	6161      	str	r1, [r4, #20]
 800ce74:	e7e5      	b.n	800ce42 <__d2b+0x52>
 800ce76:	a801      	add	r0, sp, #4
 800ce78:	f7ff fd5a 	bl	800c930 <__lo0bits>
 800ce7c:	9b01      	ldr	r3, [sp, #4]
 800ce7e:	6163      	str	r3, [r4, #20]
 800ce80:	2201      	movs	r2, #1
 800ce82:	6122      	str	r2, [r4, #16]
 800ce84:	3020      	adds	r0, #32
 800ce86:	e7e3      	b.n	800ce50 <__d2b+0x60>
 800ce88:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ce8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ce90:	f8c9 0000 	str.w	r0, [r9]
 800ce94:	6918      	ldr	r0, [r3, #16]
 800ce96:	f7ff fd2b 	bl	800c8f0 <__hi0bits>
 800ce9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ce9e:	e7df      	b.n	800ce60 <__d2b+0x70>
 800cea0:	0800f187 	.word	0x0800f187
 800cea4:	0800f198 	.word	0x0800f198

0800cea8 <_calloc_r>:
 800cea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ceaa:	fba1 2402 	umull	r2, r4, r1, r2
 800ceae:	b94c      	cbnz	r4, 800cec4 <_calloc_r+0x1c>
 800ceb0:	4611      	mov	r1, r2
 800ceb2:	9201      	str	r2, [sp, #4]
 800ceb4:	f7fd fd6c 	bl	800a990 <_malloc_r>
 800ceb8:	9a01      	ldr	r2, [sp, #4]
 800ceba:	4605      	mov	r5, r0
 800cebc:	b930      	cbnz	r0, 800cecc <_calloc_r+0x24>
 800cebe:	4628      	mov	r0, r5
 800cec0:	b003      	add	sp, #12
 800cec2:	bd30      	pop	{r4, r5, pc}
 800cec4:	220c      	movs	r2, #12
 800cec6:	6002      	str	r2, [r0, #0]
 800cec8:	2500      	movs	r5, #0
 800ceca:	e7f8      	b.n	800cebe <_calloc_r+0x16>
 800cecc:	4621      	mov	r1, r4
 800cece:	f7fd fd36 	bl	800a93e <memset>
 800ced2:	e7f4      	b.n	800cebe <_calloc_r+0x16>

0800ced4 <_free_r>:
 800ced4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ced6:	2900      	cmp	r1, #0
 800ced8:	d044      	beq.n	800cf64 <_free_r+0x90>
 800ceda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cede:	9001      	str	r0, [sp, #4]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	f1a1 0404 	sub.w	r4, r1, #4
 800cee6:	bfb8      	it	lt
 800cee8:	18e4      	addlt	r4, r4, r3
 800ceea:	f7ff fc4d 	bl	800c788 <__malloc_lock>
 800ceee:	4a1e      	ldr	r2, [pc, #120]	; (800cf68 <_free_r+0x94>)
 800cef0:	9801      	ldr	r0, [sp, #4]
 800cef2:	6813      	ldr	r3, [r2, #0]
 800cef4:	b933      	cbnz	r3, 800cf04 <_free_r+0x30>
 800cef6:	6063      	str	r3, [r4, #4]
 800cef8:	6014      	str	r4, [r2, #0]
 800cefa:	b003      	add	sp, #12
 800cefc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf00:	f7ff bc48 	b.w	800c794 <__malloc_unlock>
 800cf04:	42a3      	cmp	r3, r4
 800cf06:	d908      	bls.n	800cf1a <_free_r+0x46>
 800cf08:	6825      	ldr	r5, [r4, #0]
 800cf0a:	1961      	adds	r1, r4, r5
 800cf0c:	428b      	cmp	r3, r1
 800cf0e:	bf01      	itttt	eq
 800cf10:	6819      	ldreq	r1, [r3, #0]
 800cf12:	685b      	ldreq	r3, [r3, #4]
 800cf14:	1949      	addeq	r1, r1, r5
 800cf16:	6021      	streq	r1, [r4, #0]
 800cf18:	e7ed      	b.n	800cef6 <_free_r+0x22>
 800cf1a:	461a      	mov	r2, r3
 800cf1c:	685b      	ldr	r3, [r3, #4]
 800cf1e:	b10b      	cbz	r3, 800cf24 <_free_r+0x50>
 800cf20:	42a3      	cmp	r3, r4
 800cf22:	d9fa      	bls.n	800cf1a <_free_r+0x46>
 800cf24:	6811      	ldr	r1, [r2, #0]
 800cf26:	1855      	adds	r5, r2, r1
 800cf28:	42a5      	cmp	r5, r4
 800cf2a:	d10b      	bne.n	800cf44 <_free_r+0x70>
 800cf2c:	6824      	ldr	r4, [r4, #0]
 800cf2e:	4421      	add	r1, r4
 800cf30:	1854      	adds	r4, r2, r1
 800cf32:	42a3      	cmp	r3, r4
 800cf34:	6011      	str	r1, [r2, #0]
 800cf36:	d1e0      	bne.n	800cefa <_free_r+0x26>
 800cf38:	681c      	ldr	r4, [r3, #0]
 800cf3a:	685b      	ldr	r3, [r3, #4]
 800cf3c:	6053      	str	r3, [r2, #4]
 800cf3e:	4421      	add	r1, r4
 800cf40:	6011      	str	r1, [r2, #0]
 800cf42:	e7da      	b.n	800cefa <_free_r+0x26>
 800cf44:	d902      	bls.n	800cf4c <_free_r+0x78>
 800cf46:	230c      	movs	r3, #12
 800cf48:	6003      	str	r3, [r0, #0]
 800cf4a:	e7d6      	b.n	800cefa <_free_r+0x26>
 800cf4c:	6825      	ldr	r5, [r4, #0]
 800cf4e:	1961      	adds	r1, r4, r5
 800cf50:	428b      	cmp	r3, r1
 800cf52:	bf04      	itt	eq
 800cf54:	6819      	ldreq	r1, [r3, #0]
 800cf56:	685b      	ldreq	r3, [r3, #4]
 800cf58:	6063      	str	r3, [r4, #4]
 800cf5a:	bf04      	itt	eq
 800cf5c:	1949      	addeq	r1, r1, r5
 800cf5e:	6021      	streq	r1, [r4, #0]
 800cf60:	6054      	str	r4, [r2, #4]
 800cf62:	e7ca      	b.n	800cefa <_free_r+0x26>
 800cf64:	b003      	add	sp, #12
 800cf66:	bd30      	pop	{r4, r5, pc}
 800cf68:	2000448c 	.word	0x2000448c

0800cf6c <__ssputs_r>:
 800cf6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf70:	688e      	ldr	r6, [r1, #8]
 800cf72:	429e      	cmp	r6, r3
 800cf74:	4682      	mov	sl, r0
 800cf76:	460c      	mov	r4, r1
 800cf78:	4690      	mov	r8, r2
 800cf7a:	461f      	mov	r7, r3
 800cf7c:	d838      	bhi.n	800cff0 <__ssputs_r+0x84>
 800cf7e:	898a      	ldrh	r2, [r1, #12]
 800cf80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cf84:	d032      	beq.n	800cfec <__ssputs_r+0x80>
 800cf86:	6825      	ldr	r5, [r4, #0]
 800cf88:	6909      	ldr	r1, [r1, #16]
 800cf8a:	eba5 0901 	sub.w	r9, r5, r1
 800cf8e:	6965      	ldr	r5, [r4, #20]
 800cf90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf98:	3301      	adds	r3, #1
 800cf9a:	444b      	add	r3, r9
 800cf9c:	106d      	asrs	r5, r5, #1
 800cf9e:	429d      	cmp	r5, r3
 800cfa0:	bf38      	it	cc
 800cfa2:	461d      	movcc	r5, r3
 800cfa4:	0553      	lsls	r3, r2, #21
 800cfa6:	d531      	bpl.n	800d00c <__ssputs_r+0xa0>
 800cfa8:	4629      	mov	r1, r5
 800cfaa:	f7fd fcf1 	bl	800a990 <_malloc_r>
 800cfae:	4606      	mov	r6, r0
 800cfb0:	b950      	cbnz	r0, 800cfc8 <__ssputs_r+0x5c>
 800cfb2:	230c      	movs	r3, #12
 800cfb4:	f8ca 3000 	str.w	r3, [sl]
 800cfb8:	89a3      	ldrh	r3, [r4, #12]
 800cfba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfbe:	81a3      	strh	r3, [r4, #12]
 800cfc0:	f04f 30ff 	mov.w	r0, #4294967295
 800cfc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfc8:	6921      	ldr	r1, [r4, #16]
 800cfca:	464a      	mov	r2, r9
 800cfcc:	f7fd fca9 	bl	800a922 <memcpy>
 800cfd0:	89a3      	ldrh	r3, [r4, #12]
 800cfd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cfd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfda:	81a3      	strh	r3, [r4, #12]
 800cfdc:	6126      	str	r6, [r4, #16]
 800cfde:	6165      	str	r5, [r4, #20]
 800cfe0:	444e      	add	r6, r9
 800cfe2:	eba5 0509 	sub.w	r5, r5, r9
 800cfe6:	6026      	str	r6, [r4, #0]
 800cfe8:	60a5      	str	r5, [r4, #8]
 800cfea:	463e      	mov	r6, r7
 800cfec:	42be      	cmp	r6, r7
 800cfee:	d900      	bls.n	800cff2 <__ssputs_r+0x86>
 800cff0:	463e      	mov	r6, r7
 800cff2:	6820      	ldr	r0, [r4, #0]
 800cff4:	4632      	mov	r2, r6
 800cff6:	4641      	mov	r1, r8
 800cff8:	f000 fae4 	bl	800d5c4 <memmove>
 800cffc:	68a3      	ldr	r3, [r4, #8]
 800cffe:	1b9b      	subs	r3, r3, r6
 800d000:	60a3      	str	r3, [r4, #8]
 800d002:	6823      	ldr	r3, [r4, #0]
 800d004:	4433      	add	r3, r6
 800d006:	6023      	str	r3, [r4, #0]
 800d008:	2000      	movs	r0, #0
 800d00a:	e7db      	b.n	800cfc4 <__ssputs_r+0x58>
 800d00c:	462a      	mov	r2, r5
 800d00e:	f000 faf3 	bl	800d5f8 <_realloc_r>
 800d012:	4606      	mov	r6, r0
 800d014:	2800      	cmp	r0, #0
 800d016:	d1e1      	bne.n	800cfdc <__ssputs_r+0x70>
 800d018:	6921      	ldr	r1, [r4, #16]
 800d01a:	4650      	mov	r0, sl
 800d01c:	f7ff ff5a 	bl	800ced4 <_free_r>
 800d020:	e7c7      	b.n	800cfb2 <__ssputs_r+0x46>
	...

0800d024 <_svfiprintf_r>:
 800d024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d028:	4698      	mov	r8, r3
 800d02a:	898b      	ldrh	r3, [r1, #12]
 800d02c:	061b      	lsls	r3, r3, #24
 800d02e:	b09d      	sub	sp, #116	; 0x74
 800d030:	4607      	mov	r7, r0
 800d032:	460d      	mov	r5, r1
 800d034:	4614      	mov	r4, r2
 800d036:	d50e      	bpl.n	800d056 <_svfiprintf_r+0x32>
 800d038:	690b      	ldr	r3, [r1, #16]
 800d03a:	b963      	cbnz	r3, 800d056 <_svfiprintf_r+0x32>
 800d03c:	2140      	movs	r1, #64	; 0x40
 800d03e:	f7fd fca7 	bl	800a990 <_malloc_r>
 800d042:	6028      	str	r0, [r5, #0]
 800d044:	6128      	str	r0, [r5, #16]
 800d046:	b920      	cbnz	r0, 800d052 <_svfiprintf_r+0x2e>
 800d048:	230c      	movs	r3, #12
 800d04a:	603b      	str	r3, [r7, #0]
 800d04c:	f04f 30ff 	mov.w	r0, #4294967295
 800d050:	e0d1      	b.n	800d1f6 <_svfiprintf_r+0x1d2>
 800d052:	2340      	movs	r3, #64	; 0x40
 800d054:	616b      	str	r3, [r5, #20]
 800d056:	2300      	movs	r3, #0
 800d058:	9309      	str	r3, [sp, #36]	; 0x24
 800d05a:	2320      	movs	r3, #32
 800d05c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d060:	f8cd 800c 	str.w	r8, [sp, #12]
 800d064:	2330      	movs	r3, #48	; 0x30
 800d066:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d210 <_svfiprintf_r+0x1ec>
 800d06a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d06e:	f04f 0901 	mov.w	r9, #1
 800d072:	4623      	mov	r3, r4
 800d074:	469a      	mov	sl, r3
 800d076:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d07a:	b10a      	cbz	r2, 800d080 <_svfiprintf_r+0x5c>
 800d07c:	2a25      	cmp	r2, #37	; 0x25
 800d07e:	d1f9      	bne.n	800d074 <_svfiprintf_r+0x50>
 800d080:	ebba 0b04 	subs.w	fp, sl, r4
 800d084:	d00b      	beq.n	800d09e <_svfiprintf_r+0x7a>
 800d086:	465b      	mov	r3, fp
 800d088:	4622      	mov	r2, r4
 800d08a:	4629      	mov	r1, r5
 800d08c:	4638      	mov	r0, r7
 800d08e:	f7ff ff6d 	bl	800cf6c <__ssputs_r>
 800d092:	3001      	adds	r0, #1
 800d094:	f000 80aa 	beq.w	800d1ec <_svfiprintf_r+0x1c8>
 800d098:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d09a:	445a      	add	r2, fp
 800d09c:	9209      	str	r2, [sp, #36]	; 0x24
 800d09e:	f89a 3000 	ldrb.w	r3, [sl]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	f000 80a2 	beq.w	800d1ec <_svfiprintf_r+0x1c8>
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	f04f 32ff 	mov.w	r2, #4294967295
 800d0ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d0b2:	f10a 0a01 	add.w	sl, sl, #1
 800d0b6:	9304      	str	r3, [sp, #16]
 800d0b8:	9307      	str	r3, [sp, #28]
 800d0ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d0be:	931a      	str	r3, [sp, #104]	; 0x68
 800d0c0:	4654      	mov	r4, sl
 800d0c2:	2205      	movs	r2, #5
 800d0c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0c8:	4851      	ldr	r0, [pc, #324]	; (800d210 <_svfiprintf_r+0x1ec>)
 800d0ca:	f7f3 f899 	bl	8000200 <memchr>
 800d0ce:	9a04      	ldr	r2, [sp, #16]
 800d0d0:	b9d8      	cbnz	r0, 800d10a <_svfiprintf_r+0xe6>
 800d0d2:	06d0      	lsls	r0, r2, #27
 800d0d4:	bf44      	itt	mi
 800d0d6:	2320      	movmi	r3, #32
 800d0d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0dc:	0711      	lsls	r1, r2, #28
 800d0de:	bf44      	itt	mi
 800d0e0:	232b      	movmi	r3, #43	; 0x2b
 800d0e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0e6:	f89a 3000 	ldrb.w	r3, [sl]
 800d0ea:	2b2a      	cmp	r3, #42	; 0x2a
 800d0ec:	d015      	beq.n	800d11a <_svfiprintf_r+0xf6>
 800d0ee:	9a07      	ldr	r2, [sp, #28]
 800d0f0:	4654      	mov	r4, sl
 800d0f2:	2000      	movs	r0, #0
 800d0f4:	f04f 0c0a 	mov.w	ip, #10
 800d0f8:	4621      	mov	r1, r4
 800d0fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0fe:	3b30      	subs	r3, #48	; 0x30
 800d100:	2b09      	cmp	r3, #9
 800d102:	d94e      	bls.n	800d1a2 <_svfiprintf_r+0x17e>
 800d104:	b1b0      	cbz	r0, 800d134 <_svfiprintf_r+0x110>
 800d106:	9207      	str	r2, [sp, #28]
 800d108:	e014      	b.n	800d134 <_svfiprintf_r+0x110>
 800d10a:	eba0 0308 	sub.w	r3, r0, r8
 800d10e:	fa09 f303 	lsl.w	r3, r9, r3
 800d112:	4313      	orrs	r3, r2
 800d114:	9304      	str	r3, [sp, #16]
 800d116:	46a2      	mov	sl, r4
 800d118:	e7d2      	b.n	800d0c0 <_svfiprintf_r+0x9c>
 800d11a:	9b03      	ldr	r3, [sp, #12]
 800d11c:	1d19      	adds	r1, r3, #4
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	9103      	str	r1, [sp, #12]
 800d122:	2b00      	cmp	r3, #0
 800d124:	bfbb      	ittet	lt
 800d126:	425b      	neglt	r3, r3
 800d128:	f042 0202 	orrlt.w	r2, r2, #2
 800d12c:	9307      	strge	r3, [sp, #28]
 800d12e:	9307      	strlt	r3, [sp, #28]
 800d130:	bfb8      	it	lt
 800d132:	9204      	strlt	r2, [sp, #16]
 800d134:	7823      	ldrb	r3, [r4, #0]
 800d136:	2b2e      	cmp	r3, #46	; 0x2e
 800d138:	d10c      	bne.n	800d154 <_svfiprintf_r+0x130>
 800d13a:	7863      	ldrb	r3, [r4, #1]
 800d13c:	2b2a      	cmp	r3, #42	; 0x2a
 800d13e:	d135      	bne.n	800d1ac <_svfiprintf_r+0x188>
 800d140:	9b03      	ldr	r3, [sp, #12]
 800d142:	1d1a      	adds	r2, r3, #4
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	9203      	str	r2, [sp, #12]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	bfb8      	it	lt
 800d14c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d150:	3402      	adds	r4, #2
 800d152:	9305      	str	r3, [sp, #20]
 800d154:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d220 <_svfiprintf_r+0x1fc>
 800d158:	7821      	ldrb	r1, [r4, #0]
 800d15a:	2203      	movs	r2, #3
 800d15c:	4650      	mov	r0, sl
 800d15e:	f7f3 f84f 	bl	8000200 <memchr>
 800d162:	b140      	cbz	r0, 800d176 <_svfiprintf_r+0x152>
 800d164:	2340      	movs	r3, #64	; 0x40
 800d166:	eba0 000a 	sub.w	r0, r0, sl
 800d16a:	fa03 f000 	lsl.w	r0, r3, r0
 800d16e:	9b04      	ldr	r3, [sp, #16]
 800d170:	4303      	orrs	r3, r0
 800d172:	3401      	adds	r4, #1
 800d174:	9304      	str	r3, [sp, #16]
 800d176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d17a:	4826      	ldr	r0, [pc, #152]	; (800d214 <_svfiprintf_r+0x1f0>)
 800d17c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d180:	2206      	movs	r2, #6
 800d182:	f7f3 f83d 	bl	8000200 <memchr>
 800d186:	2800      	cmp	r0, #0
 800d188:	d038      	beq.n	800d1fc <_svfiprintf_r+0x1d8>
 800d18a:	4b23      	ldr	r3, [pc, #140]	; (800d218 <_svfiprintf_r+0x1f4>)
 800d18c:	bb1b      	cbnz	r3, 800d1d6 <_svfiprintf_r+0x1b2>
 800d18e:	9b03      	ldr	r3, [sp, #12]
 800d190:	3307      	adds	r3, #7
 800d192:	f023 0307 	bic.w	r3, r3, #7
 800d196:	3308      	adds	r3, #8
 800d198:	9303      	str	r3, [sp, #12]
 800d19a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d19c:	4433      	add	r3, r6
 800d19e:	9309      	str	r3, [sp, #36]	; 0x24
 800d1a0:	e767      	b.n	800d072 <_svfiprintf_r+0x4e>
 800d1a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d1a6:	460c      	mov	r4, r1
 800d1a8:	2001      	movs	r0, #1
 800d1aa:	e7a5      	b.n	800d0f8 <_svfiprintf_r+0xd4>
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	3401      	adds	r4, #1
 800d1b0:	9305      	str	r3, [sp, #20]
 800d1b2:	4619      	mov	r1, r3
 800d1b4:	f04f 0c0a 	mov.w	ip, #10
 800d1b8:	4620      	mov	r0, r4
 800d1ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1be:	3a30      	subs	r2, #48	; 0x30
 800d1c0:	2a09      	cmp	r2, #9
 800d1c2:	d903      	bls.n	800d1cc <_svfiprintf_r+0x1a8>
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d0c5      	beq.n	800d154 <_svfiprintf_r+0x130>
 800d1c8:	9105      	str	r1, [sp, #20]
 800d1ca:	e7c3      	b.n	800d154 <_svfiprintf_r+0x130>
 800d1cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1d0:	4604      	mov	r4, r0
 800d1d2:	2301      	movs	r3, #1
 800d1d4:	e7f0      	b.n	800d1b8 <_svfiprintf_r+0x194>
 800d1d6:	ab03      	add	r3, sp, #12
 800d1d8:	9300      	str	r3, [sp, #0]
 800d1da:	462a      	mov	r2, r5
 800d1dc:	4b0f      	ldr	r3, [pc, #60]	; (800d21c <_svfiprintf_r+0x1f8>)
 800d1de:	a904      	add	r1, sp, #16
 800d1e0:	4638      	mov	r0, r7
 800d1e2:	f7fd fce9 	bl	800abb8 <_printf_float>
 800d1e6:	1c42      	adds	r2, r0, #1
 800d1e8:	4606      	mov	r6, r0
 800d1ea:	d1d6      	bne.n	800d19a <_svfiprintf_r+0x176>
 800d1ec:	89ab      	ldrh	r3, [r5, #12]
 800d1ee:	065b      	lsls	r3, r3, #25
 800d1f0:	f53f af2c 	bmi.w	800d04c <_svfiprintf_r+0x28>
 800d1f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1f6:	b01d      	add	sp, #116	; 0x74
 800d1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1fc:	ab03      	add	r3, sp, #12
 800d1fe:	9300      	str	r3, [sp, #0]
 800d200:	462a      	mov	r2, r5
 800d202:	4b06      	ldr	r3, [pc, #24]	; (800d21c <_svfiprintf_r+0x1f8>)
 800d204:	a904      	add	r1, sp, #16
 800d206:	4638      	mov	r0, r7
 800d208:	f7fd ff7a 	bl	800b100 <_printf_i>
 800d20c:	e7eb      	b.n	800d1e6 <_svfiprintf_r+0x1c2>
 800d20e:	bf00      	nop
 800d210:	0800f2f4 	.word	0x0800f2f4
 800d214:	0800f2fe 	.word	0x0800f2fe
 800d218:	0800abb9 	.word	0x0800abb9
 800d21c:	0800cf6d 	.word	0x0800cf6d
 800d220:	0800f2fa 	.word	0x0800f2fa

0800d224 <__sfputc_r>:
 800d224:	6893      	ldr	r3, [r2, #8]
 800d226:	3b01      	subs	r3, #1
 800d228:	2b00      	cmp	r3, #0
 800d22a:	b410      	push	{r4}
 800d22c:	6093      	str	r3, [r2, #8]
 800d22e:	da08      	bge.n	800d242 <__sfputc_r+0x1e>
 800d230:	6994      	ldr	r4, [r2, #24]
 800d232:	42a3      	cmp	r3, r4
 800d234:	db01      	blt.n	800d23a <__sfputc_r+0x16>
 800d236:	290a      	cmp	r1, #10
 800d238:	d103      	bne.n	800d242 <__sfputc_r+0x1e>
 800d23a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d23e:	f7fe b9ff 	b.w	800b640 <__swbuf_r>
 800d242:	6813      	ldr	r3, [r2, #0]
 800d244:	1c58      	adds	r0, r3, #1
 800d246:	6010      	str	r0, [r2, #0]
 800d248:	7019      	strb	r1, [r3, #0]
 800d24a:	4608      	mov	r0, r1
 800d24c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d250:	4770      	bx	lr

0800d252 <__sfputs_r>:
 800d252:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d254:	4606      	mov	r6, r0
 800d256:	460f      	mov	r7, r1
 800d258:	4614      	mov	r4, r2
 800d25a:	18d5      	adds	r5, r2, r3
 800d25c:	42ac      	cmp	r4, r5
 800d25e:	d101      	bne.n	800d264 <__sfputs_r+0x12>
 800d260:	2000      	movs	r0, #0
 800d262:	e007      	b.n	800d274 <__sfputs_r+0x22>
 800d264:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d268:	463a      	mov	r2, r7
 800d26a:	4630      	mov	r0, r6
 800d26c:	f7ff ffda 	bl	800d224 <__sfputc_r>
 800d270:	1c43      	adds	r3, r0, #1
 800d272:	d1f3      	bne.n	800d25c <__sfputs_r+0xa>
 800d274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d278 <_vfiprintf_r>:
 800d278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d27c:	460d      	mov	r5, r1
 800d27e:	b09d      	sub	sp, #116	; 0x74
 800d280:	4614      	mov	r4, r2
 800d282:	4698      	mov	r8, r3
 800d284:	4606      	mov	r6, r0
 800d286:	b118      	cbz	r0, 800d290 <_vfiprintf_r+0x18>
 800d288:	6983      	ldr	r3, [r0, #24]
 800d28a:	b90b      	cbnz	r3, 800d290 <_vfiprintf_r+0x18>
 800d28c:	f7fd fa84 	bl	800a798 <__sinit>
 800d290:	4b89      	ldr	r3, [pc, #548]	; (800d4b8 <_vfiprintf_r+0x240>)
 800d292:	429d      	cmp	r5, r3
 800d294:	d11b      	bne.n	800d2ce <_vfiprintf_r+0x56>
 800d296:	6875      	ldr	r5, [r6, #4]
 800d298:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d29a:	07d9      	lsls	r1, r3, #31
 800d29c:	d405      	bmi.n	800d2aa <_vfiprintf_r+0x32>
 800d29e:	89ab      	ldrh	r3, [r5, #12]
 800d2a0:	059a      	lsls	r2, r3, #22
 800d2a2:	d402      	bmi.n	800d2aa <_vfiprintf_r+0x32>
 800d2a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2a6:	f7fd fb3a 	bl	800a91e <__retarget_lock_acquire_recursive>
 800d2aa:	89ab      	ldrh	r3, [r5, #12]
 800d2ac:	071b      	lsls	r3, r3, #28
 800d2ae:	d501      	bpl.n	800d2b4 <_vfiprintf_r+0x3c>
 800d2b0:	692b      	ldr	r3, [r5, #16]
 800d2b2:	b9eb      	cbnz	r3, 800d2f0 <_vfiprintf_r+0x78>
 800d2b4:	4629      	mov	r1, r5
 800d2b6:	4630      	mov	r0, r6
 800d2b8:	f7fe fa26 	bl	800b708 <__swsetup_r>
 800d2bc:	b1c0      	cbz	r0, 800d2f0 <_vfiprintf_r+0x78>
 800d2be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2c0:	07dc      	lsls	r4, r3, #31
 800d2c2:	d50e      	bpl.n	800d2e2 <_vfiprintf_r+0x6a>
 800d2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d2c8:	b01d      	add	sp, #116	; 0x74
 800d2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2ce:	4b7b      	ldr	r3, [pc, #492]	; (800d4bc <_vfiprintf_r+0x244>)
 800d2d0:	429d      	cmp	r5, r3
 800d2d2:	d101      	bne.n	800d2d8 <_vfiprintf_r+0x60>
 800d2d4:	68b5      	ldr	r5, [r6, #8]
 800d2d6:	e7df      	b.n	800d298 <_vfiprintf_r+0x20>
 800d2d8:	4b79      	ldr	r3, [pc, #484]	; (800d4c0 <_vfiprintf_r+0x248>)
 800d2da:	429d      	cmp	r5, r3
 800d2dc:	bf08      	it	eq
 800d2de:	68f5      	ldreq	r5, [r6, #12]
 800d2e0:	e7da      	b.n	800d298 <_vfiprintf_r+0x20>
 800d2e2:	89ab      	ldrh	r3, [r5, #12]
 800d2e4:	0598      	lsls	r0, r3, #22
 800d2e6:	d4ed      	bmi.n	800d2c4 <_vfiprintf_r+0x4c>
 800d2e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2ea:	f7fd fb19 	bl	800a920 <__retarget_lock_release_recursive>
 800d2ee:	e7e9      	b.n	800d2c4 <_vfiprintf_r+0x4c>
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	9309      	str	r3, [sp, #36]	; 0x24
 800d2f4:	2320      	movs	r3, #32
 800d2f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d2fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2fe:	2330      	movs	r3, #48	; 0x30
 800d300:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d4c4 <_vfiprintf_r+0x24c>
 800d304:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d308:	f04f 0901 	mov.w	r9, #1
 800d30c:	4623      	mov	r3, r4
 800d30e:	469a      	mov	sl, r3
 800d310:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d314:	b10a      	cbz	r2, 800d31a <_vfiprintf_r+0xa2>
 800d316:	2a25      	cmp	r2, #37	; 0x25
 800d318:	d1f9      	bne.n	800d30e <_vfiprintf_r+0x96>
 800d31a:	ebba 0b04 	subs.w	fp, sl, r4
 800d31e:	d00b      	beq.n	800d338 <_vfiprintf_r+0xc0>
 800d320:	465b      	mov	r3, fp
 800d322:	4622      	mov	r2, r4
 800d324:	4629      	mov	r1, r5
 800d326:	4630      	mov	r0, r6
 800d328:	f7ff ff93 	bl	800d252 <__sfputs_r>
 800d32c:	3001      	adds	r0, #1
 800d32e:	f000 80aa 	beq.w	800d486 <_vfiprintf_r+0x20e>
 800d332:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d334:	445a      	add	r2, fp
 800d336:	9209      	str	r2, [sp, #36]	; 0x24
 800d338:	f89a 3000 	ldrb.w	r3, [sl]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	f000 80a2 	beq.w	800d486 <_vfiprintf_r+0x20e>
 800d342:	2300      	movs	r3, #0
 800d344:	f04f 32ff 	mov.w	r2, #4294967295
 800d348:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d34c:	f10a 0a01 	add.w	sl, sl, #1
 800d350:	9304      	str	r3, [sp, #16]
 800d352:	9307      	str	r3, [sp, #28]
 800d354:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d358:	931a      	str	r3, [sp, #104]	; 0x68
 800d35a:	4654      	mov	r4, sl
 800d35c:	2205      	movs	r2, #5
 800d35e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d362:	4858      	ldr	r0, [pc, #352]	; (800d4c4 <_vfiprintf_r+0x24c>)
 800d364:	f7f2 ff4c 	bl	8000200 <memchr>
 800d368:	9a04      	ldr	r2, [sp, #16]
 800d36a:	b9d8      	cbnz	r0, 800d3a4 <_vfiprintf_r+0x12c>
 800d36c:	06d1      	lsls	r1, r2, #27
 800d36e:	bf44      	itt	mi
 800d370:	2320      	movmi	r3, #32
 800d372:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d376:	0713      	lsls	r3, r2, #28
 800d378:	bf44      	itt	mi
 800d37a:	232b      	movmi	r3, #43	; 0x2b
 800d37c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d380:	f89a 3000 	ldrb.w	r3, [sl]
 800d384:	2b2a      	cmp	r3, #42	; 0x2a
 800d386:	d015      	beq.n	800d3b4 <_vfiprintf_r+0x13c>
 800d388:	9a07      	ldr	r2, [sp, #28]
 800d38a:	4654      	mov	r4, sl
 800d38c:	2000      	movs	r0, #0
 800d38e:	f04f 0c0a 	mov.w	ip, #10
 800d392:	4621      	mov	r1, r4
 800d394:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d398:	3b30      	subs	r3, #48	; 0x30
 800d39a:	2b09      	cmp	r3, #9
 800d39c:	d94e      	bls.n	800d43c <_vfiprintf_r+0x1c4>
 800d39e:	b1b0      	cbz	r0, 800d3ce <_vfiprintf_r+0x156>
 800d3a0:	9207      	str	r2, [sp, #28]
 800d3a2:	e014      	b.n	800d3ce <_vfiprintf_r+0x156>
 800d3a4:	eba0 0308 	sub.w	r3, r0, r8
 800d3a8:	fa09 f303 	lsl.w	r3, r9, r3
 800d3ac:	4313      	orrs	r3, r2
 800d3ae:	9304      	str	r3, [sp, #16]
 800d3b0:	46a2      	mov	sl, r4
 800d3b2:	e7d2      	b.n	800d35a <_vfiprintf_r+0xe2>
 800d3b4:	9b03      	ldr	r3, [sp, #12]
 800d3b6:	1d19      	adds	r1, r3, #4
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	9103      	str	r1, [sp, #12]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	bfbb      	ittet	lt
 800d3c0:	425b      	neglt	r3, r3
 800d3c2:	f042 0202 	orrlt.w	r2, r2, #2
 800d3c6:	9307      	strge	r3, [sp, #28]
 800d3c8:	9307      	strlt	r3, [sp, #28]
 800d3ca:	bfb8      	it	lt
 800d3cc:	9204      	strlt	r2, [sp, #16]
 800d3ce:	7823      	ldrb	r3, [r4, #0]
 800d3d0:	2b2e      	cmp	r3, #46	; 0x2e
 800d3d2:	d10c      	bne.n	800d3ee <_vfiprintf_r+0x176>
 800d3d4:	7863      	ldrb	r3, [r4, #1]
 800d3d6:	2b2a      	cmp	r3, #42	; 0x2a
 800d3d8:	d135      	bne.n	800d446 <_vfiprintf_r+0x1ce>
 800d3da:	9b03      	ldr	r3, [sp, #12]
 800d3dc:	1d1a      	adds	r2, r3, #4
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	9203      	str	r2, [sp, #12]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	bfb8      	it	lt
 800d3e6:	f04f 33ff 	movlt.w	r3, #4294967295
 800d3ea:	3402      	adds	r4, #2
 800d3ec:	9305      	str	r3, [sp, #20]
 800d3ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d4d4 <_vfiprintf_r+0x25c>
 800d3f2:	7821      	ldrb	r1, [r4, #0]
 800d3f4:	2203      	movs	r2, #3
 800d3f6:	4650      	mov	r0, sl
 800d3f8:	f7f2 ff02 	bl	8000200 <memchr>
 800d3fc:	b140      	cbz	r0, 800d410 <_vfiprintf_r+0x198>
 800d3fe:	2340      	movs	r3, #64	; 0x40
 800d400:	eba0 000a 	sub.w	r0, r0, sl
 800d404:	fa03 f000 	lsl.w	r0, r3, r0
 800d408:	9b04      	ldr	r3, [sp, #16]
 800d40a:	4303      	orrs	r3, r0
 800d40c:	3401      	adds	r4, #1
 800d40e:	9304      	str	r3, [sp, #16]
 800d410:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d414:	482c      	ldr	r0, [pc, #176]	; (800d4c8 <_vfiprintf_r+0x250>)
 800d416:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d41a:	2206      	movs	r2, #6
 800d41c:	f7f2 fef0 	bl	8000200 <memchr>
 800d420:	2800      	cmp	r0, #0
 800d422:	d03f      	beq.n	800d4a4 <_vfiprintf_r+0x22c>
 800d424:	4b29      	ldr	r3, [pc, #164]	; (800d4cc <_vfiprintf_r+0x254>)
 800d426:	bb1b      	cbnz	r3, 800d470 <_vfiprintf_r+0x1f8>
 800d428:	9b03      	ldr	r3, [sp, #12]
 800d42a:	3307      	adds	r3, #7
 800d42c:	f023 0307 	bic.w	r3, r3, #7
 800d430:	3308      	adds	r3, #8
 800d432:	9303      	str	r3, [sp, #12]
 800d434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d436:	443b      	add	r3, r7
 800d438:	9309      	str	r3, [sp, #36]	; 0x24
 800d43a:	e767      	b.n	800d30c <_vfiprintf_r+0x94>
 800d43c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d440:	460c      	mov	r4, r1
 800d442:	2001      	movs	r0, #1
 800d444:	e7a5      	b.n	800d392 <_vfiprintf_r+0x11a>
 800d446:	2300      	movs	r3, #0
 800d448:	3401      	adds	r4, #1
 800d44a:	9305      	str	r3, [sp, #20]
 800d44c:	4619      	mov	r1, r3
 800d44e:	f04f 0c0a 	mov.w	ip, #10
 800d452:	4620      	mov	r0, r4
 800d454:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d458:	3a30      	subs	r2, #48	; 0x30
 800d45a:	2a09      	cmp	r2, #9
 800d45c:	d903      	bls.n	800d466 <_vfiprintf_r+0x1ee>
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d0c5      	beq.n	800d3ee <_vfiprintf_r+0x176>
 800d462:	9105      	str	r1, [sp, #20]
 800d464:	e7c3      	b.n	800d3ee <_vfiprintf_r+0x176>
 800d466:	fb0c 2101 	mla	r1, ip, r1, r2
 800d46a:	4604      	mov	r4, r0
 800d46c:	2301      	movs	r3, #1
 800d46e:	e7f0      	b.n	800d452 <_vfiprintf_r+0x1da>
 800d470:	ab03      	add	r3, sp, #12
 800d472:	9300      	str	r3, [sp, #0]
 800d474:	462a      	mov	r2, r5
 800d476:	4b16      	ldr	r3, [pc, #88]	; (800d4d0 <_vfiprintf_r+0x258>)
 800d478:	a904      	add	r1, sp, #16
 800d47a:	4630      	mov	r0, r6
 800d47c:	f7fd fb9c 	bl	800abb8 <_printf_float>
 800d480:	4607      	mov	r7, r0
 800d482:	1c78      	adds	r0, r7, #1
 800d484:	d1d6      	bne.n	800d434 <_vfiprintf_r+0x1bc>
 800d486:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d488:	07d9      	lsls	r1, r3, #31
 800d48a:	d405      	bmi.n	800d498 <_vfiprintf_r+0x220>
 800d48c:	89ab      	ldrh	r3, [r5, #12]
 800d48e:	059a      	lsls	r2, r3, #22
 800d490:	d402      	bmi.n	800d498 <_vfiprintf_r+0x220>
 800d492:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d494:	f7fd fa44 	bl	800a920 <__retarget_lock_release_recursive>
 800d498:	89ab      	ldrh	r3, [r5, #12]
 800d49a:	065b      	lsls	r3, r3, #25
 800d49c:	f53f af12 	bmi.w	800d2c4 <_vfiprintf_r+0x4c>
 800d4a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d4a2:	e711      	b.n	800d2c8 <_vfiprintf_r+0x50>
 800d4a4:	ab03      	add	r3, sp, #12
 800d4a6:	9300      	str	r3, [sp, #0]
 800d4a8:	462a      	mov	r2, r5
 800d4aa:	4b09      	ldr	r3, [pc, #36]	; (800d4d0 <_vfiprintf_r+0x258>)
 800d4ac:	a904      	add	r1, sp, #16
 800d4ae:	4630      	mov	r0, r6
 800d4b0:	f7fd fe26 	bl	800b100 <_printf_i>
 800d4b4:	e7e4      	b.n	800d480 <_vfiprintf_r+0x208>
 800d4b6:	bf00      	nop
 800d4b8:	0800f090 	.word	0x0800f090
 800d4bc:	0800f0b0 	.word	0x0800f0b0
 800d4c0:	0800f070 	.word	0x0800f070
 800d4c4:	0800f2f4 	.word	0x0800f2f4
 800d4c8:	0800f2fe 	.word	0x0800f2fe
 800d4cc:	0800abb9 	.word	0x0800abb9
 800d4d0:	0800d253 	.word	0x0800d253
 800d4d4:	0800f2fa 	.word	0x0800f2fa

0800d4d8 <_read_r>:
 800d4d8:	b538      	push	{r3, r4, r5, lr}
 800d4da:	4d07      	ldr	r5, [pc, #28]	; (800d4f8 <_read_r+0x20>)
 800d4dc:	4604      	mov	r4, r0
 800d4de:	4608      	mov	r0, r1
 800d4e0:	4611      	mov	r1, r2
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	602a      	str	r2, [r5, #0]
 800d4e6:	461a      	mov	r2, r3
 800d4e8:	f7f6 faf2 	bl	8003ad0 <_read>
 800d4ec:	1c43      	adds	r3, r0, #1
 800d4ee:	d102      	bne.n	800d4f6 <_read_r+0x1e>
 800d4f0:	682b      	ldr	r3, [r5, #0]
 800d4f2:	b103      	cbz	r3, 800d4f6 <_read_r+0x1e>
 800d4f4:	6023      	str	r3, [r4, #0]
 800d4f6:	bd38      	pop	{r3, r4, r5, pc}
 800d4f8:	20004494 	.word	0x20004494

0800d4fc <__assert_func>:
 800d4fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d4fe:	4614      	mov	r4, r2
 800d500:	461a      	mov	r2, r3
 800d502:	4b09      	ldr	r3, [pc, #36]	; (800d528 <__assert_func+0x2c>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	4605      	mov	r5, r0
 800d508:	68d8      	ldr	r0, [r3, #12]
 800d50a:	b14c      	cbz	r4, 800d520 <__assert_func+0x24>
 800d50c:	4b07      	ldr	r3, [pc, #28]	; (800d52c <__assert_func+0x30>)
 800d50e:	9100      	str	r1, [sp, #0]
 800d510:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d514:	4906      	ldr	r1, [pc, #24]	; (800d530 <__assert_func+0x34>)
 800d516:	462b      	mov	r3, r5
 800d518:	f000 f80e 	bl	800d538 <fiprintf>
 800d51c:	f000 f8a8 	bl	800d670 <abort>
 800d520:	4b04      	ldr	r3, [pc, #16]	; (800d534 <__assert_func+0x38>)
 800d522:	461c      	mov	r4, r3
 800d524:	e7f3      	b.n	800d50e <__assert_func+0x12>
 800d526:	bf00      	nop
 800d528:	20000058 	.word	0x20000058
 800d52c:	0800f305 	.word	0x0800f305
 800d530:	0800f312 	.word	0x0800f312
 800d534:	0800f340 	.word	0x0800f340

0800d538 <fiprintf>:
 800d538:	b40e      	push	{r1, r2, r3}
 800d53a:	b503      	push	{r0, r1, lr}
 800d53c:	4601      	mov	r1, r0
 800d53e:	ab03      	add	r3, sp, #12
 800d540:	4805      	ldr	r0, [pc, #20]	; (800d558 <fiprintf+0x20>)
 800d542:	f853 2b04 	ldr.w	r2, [r3], #4
 800d546:	6800      	ldr	r0, [r0, #0]
 800d548:	9301      	str	r3, [sp, #4]
 800d54a:	f7ff fe95 	bl	800d278 <_vfiprintf_r>
 800d54e:	b002      	add	sp, #8
 800d550:	f85d eb04 	ldr.w	lr, [sp], #4
 800d554:	b003      	add	sp, #12
 800d556:	4770      	bx	lr
 800d558:	20000058 	.word	0x20000058

0800d55c <_fstat_r>:
 800d55c:	b538      	push	{r3, r4, r5, lr}
 800d55e:	4d07      	ldr	r5, [pc, #28]	; (800d57c <_fstat_r+0x20>)
 800d560:	2300      	movs	r3, #0
 800d562:	4604      	mov	r4, r0
 800d564:	4608      	mov	r0, r1
 800d566:	4611      	mov	r1, r2
 800d568:	602b      	str	r3, [r5, #0]
 800d56a:	f7f6 fada 	bl	8003b22 <_fstat>
 800d56e:	1c43      	adds	r3, r0, #1
 800d570:	d102      	bne.n	800d578 <_fstat_r+0x1c>
 800d572:	682b      	ldr	r3, [r5, #0]
 800d574:	b103      	cbz	r3, 800d578 <_fstat_r+0x1c>
 800d576:	6023      	str	r3, [r4, #0]
 800d578:	bd38      	pop	{r3, r4, r5, pc}
 800d57a:	bf00      	nop
 800d57c:	20004494 	.word	0x20004494

0800d580 <_isatty_r>:
 800d580:	b538      	push	{r3, r4, r5, lr}
 800d582:	4d06      	ldr	r5, [pc, #24]	; (800d59c <_isatty_r+0x1c>)
 800d584:	2300      	movs	r3, #0
 800d586:	4604      	mov	r4, r0
 800d588:	4608      	mov	r0, r1
 800d58a:	602b      	str	r3, [r5, #0]
 800d58c:	f7f6 fad9 	bl	8003b42 <_isatty>
 800d590:	1c43      	adds	r3, r0, #1
 800d592:	d102      	bne.n	800d59a <_isatty_r+0x1a>
 800d594:	682b      	ldr	r3, [r5, #0]
 800d596:	b103      	cbz	r3, 800d59a <_isatty_r+0x1a>
 800d598:	6023      	str	r3, [r4, #0]
 800d59a:	bd38      	pop	{r3, r4, r5, pc}
 800d59c:	20004494 	.word	0x20004494

0800d5a0 <__ascii_mbtowc>:
 800d5a0:	b082      	sub	sp, #8
 800d5a2:	b901      	cbnz	r1, 800d5a6 <__ascii_mbtowc+0x6>
 800d5a4:	a901      	add	r1, sp, #4
 800d5a6:	b142      	cbz	r2, 800d5ba <__ascii_mbtowc+0x1a>
 800d5a8:	b14b      	cbz	r3, 800d5be <__ascii_mbtowc+0x1e>
 800d5aa:	7813      	ldrb	r3, [r2, #0]
 800d5ac:	600b      	str	r3, [r1, #0]
 800d5ae:	7812      	ldrb	r2, [r2, #0]
 800d5b0:	1e10      	subs	r0, r2, #0
 800d5b2:	bf18      	it	ne
 800d5b4:	2001      	movne	r0, #1
 800d5b6:	b002      	add	sp, #8
 800d5b8:	4770      	bx	lr
 800d5ba:	4610      	mov	r0, r2
 800d5bc:	e7fb      	b.n	800d5b6 <__ascii_mbtowc+0x16>
 800d5be:	f06f 0001 	mvn.w	r0, #1
 800d5c2:	e7f8      	b.n	800d5b6 <__ascii_mbtowc+0x16>

0800d5c4 <memmove>:
 800d5c4:	4288      	cmp	r0, r1
 800d5c6:	b510      	push	{r4, lr}
 800d5c8:	eb01 0402 	add.w	r4, r1, r2
 800d5cc:	d902      	bls.n	800d5d4 <memmove+0x10>
 800d5ce:	4284      	cmp	r4, r0
 800d5d0:	4623      	mov	r3, r4
 800d5d2:	d807      	bhi.n	800d5e4 <memmove+0x20>
 800d5d4:	1e43      	subs	r3, r0, #1
 800d5d6:	42a1      	cmp	r1, r4
 800d5d8:	d008      	beq.n	800d5ec <memmove+0x28>
 800d5da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d5de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d5e2:	e7f8      	b.n	800d5d6 <memmove+0x12>
 800d5e4:	4402      	add	r2, r0
 800d5e6:	4601      	mov	r1, r0
 800d5e8:	428a      	cmp	r2, r1
 800d5ea:	d100      	bne.n	800d5ee <memmove+0x2a>
 800d5ec:	bd10      	pop	{r4, pc}
 800d5ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d5f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d5f6:	e7f7      	b.n	800d5e8 <memmove+0x24>

0800d5f8 <_realloc_r>:
 800d5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5fc:	4680      	mov	r8, r0
 800d5fe:	4614      	mov	r4, r2
 800d600:	460e      	mov	r6, r1
 800d602:	b921      	cbnz	r1, 800d60e <_realloc_r+0x16>
 800d604:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d608:	4611      	mov	r1, r2
 800d60a:	f7fd b9c1 	b.w	800a990 <_malloc_r>
 800d60e:	b92a      	cbnz	r2, 800d61c <_realloc_r+0x24>
 800d610:	f7ff fc60 	bl	800ced4 <_free_r>
 800d614:	4625      	mov	r5, r4
 800d616:	4628      	mov	r0, r5
 800d618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d61c:	f000 f82f 	bl	800d67e <_malloc_usable_size_r>
 800d620:	4284      	cmp	r4, r0
 800d622:	4607      	mov	r7, r0
 800d624:	d802      	bhi.n	800d62c <_realloc_r+0x34>
 800d626:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d62a:	d812      	bhi.n	800d652 <_realloc_r+0x5a>
 800d62c:	4621      	mov	r1, r4
 800d62e:	4640      	mov	r0, r8
 800d630:	f7fd f9ae 	bl	800a990 <_malloc_r>
 800d634:	4605      	mov	r5, r0
 800d636:	2800      	cmp	r0, #0
 800d638:	d0ed      	beq.n	800d616 <_realloc_r+0x1e>
 800d63a:	42bc      	cmp	r4, r7
 800d63c:	4622      	mov	r2, r4
 800d63e:	4631      	mov	r1, r6
 800d640:	bf28      	it	cs
 800d642:	463a      	movcs	r2, r7
 800d644:	f7fd f96d 	bl	800a922 <memcpy>
 800d648:	4631      	mov	r1, r6
 800d64a:	4640      	mov	r0, r8
 800d64c:	f7ff fc42 	bl	800ced4 <_free_r>
 800d650:	e7e1      	b.n	800d616 <_realloc_r+0x1e>
 800d652:	4635      	mov	r5, r6
 800d654:	e7df      	b.n	800d616 <_realloc_r+0x1e>

0800d656 <__ascii_wctomb>:
 800d656:	b149      	cbz	r1, 800d66c <__ascii_wctomb+0x16>
 800d658:	2aff      	cmp	r2, #255	; 0xff
 800d65a:	bf85      	ittet	hi
 800d65c:	238a      	movhi	r3, #138	; 0x8a
 800d65e:	6003      	strhi	r3, [r0, #0]
 800d660:	700a      	strbls	r2, [r1, #0]
 800d662:	f04f 30ff 	movhi.w	r0, #4294967295
 800d666:	bf98      	it	ls
 800d668:	2001      	movls	r0, #1
 800d66a:	4770      	bx	lr
 800d66c:	4608      	mov	r0, r1
 800d66e:	4770      	bx	lr

0800d670 <abort>:
 800d670:	b508      	push	{r3, lr}
 800d672:	2006      	movs	r0, #6
 800d674:	f000 f834 	bl	800d6e0 <raise>
 800d678:	2001      	movs	r0, #1
 800d67a:	f7f6 fa1f 	bl	8003abc <_exit>

0800d67e <_malloc_usable_size_r>:
 800d67e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d682:	1f18      	subs	r0, r3, #4
 800d684:	2b00      	cmp	r3, #0
 800d686:	bfbc      	itt	lt
 800d688:	580b      	ldrlt	r3, [r1, r0]
 800d68a:	18c0      	addlt	r0, r0, r3
 800d68c:	4770      	bx	lr

0800d68e <_raise_r>:
 800d68e:	291f      	cmp	r1, #31
 800d690:	b538      	push	{r3, r4, r5, lr}
 800d692:	4604      	mov	r4, r0
 800d694:	460d      	mov	r5, r1
 800d696:	d904      	bls.n	800d6a2 <_raise_r+0x14>
 800d698:	2316      	movs	r3, #22
 800d69a:	6003      	str	r3, [r0, #0]
 800d69c:	f04f 30ff 	mov.w	r0, #4294967295
 800d6a0:	bd38      	pop	{r3, r4, r5, pc}
 800d6a2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d6a4:	b112      	cbz	r2, 800d6ac <_raise_r+0x1e>
 800d6a6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d6aa:	b94b      	cbnz	r3, 800d6c0 <_raise_r+0x32>
 800d6ac:	4620      	mov	r0, r4
 800d6ae:	f000 f831 	bl	800d714 <_getpid_r>
 800d6b2:	462a      	mov	r2, r5
 800d6b4:	4601      	mov	r1, r0
 800d6b6:	4620      	mov	r0, r4
 800d6b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6bc:	f000 b818 	b.w	800d6f0 <_kill_r>
 800d6c0:	2b01      	cmp	r3, #1
 800d6c2:	d00a      	beq.n	800d6da <_raise_r+0x4c>
 800d6c4:	1c59      	adds	r1, r3, #1
 800d6c6:	d103      	bne.n	800d6d0 <_raise_r+0x42>
 800d6c8:	2316      	movs	r3, #22
 800d6ca:	6003      	str	r3, [r0, #0]
 800d6cc:	2001      	movs	r0, #1
 800d6ce:	e7e7      	b.n	800d6a0 <_raise_r+0x12>
 800d6d0:	2400      	movs	r4, #0
 800d6d2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d6d6:	4628      	mov	r0, r5
 800d6d8:	4798      	blx	r3
 800d6da:	2000      	movs	r0, #0
 800d6dc:	e7e0      	b.n	800d6a0 <_raise_r+0x12>
	...

0800d6e0 <raise>:
 800d6e0:	4b02      	ldr	r3, [pc, #8]	; (800d6ec <raise+0xc>)
 800d6e2:	4601      	mov	r1, r0
 800d6e4:	6818      	ldr	r0, [r3, #0]
 800d6e6:	f7ff bfd2 	b.w	800d68e <_raise_r>
 800d6ea:	bf00      	nop
 800d6ec:	20000058 	.word	0x20000058

0800d6f0 <_kill_r>:
 800d6f0:	b538      	push	{r3, r4, r5, lr}
 800d6f2:	4d07      	ldr	r5, [pc, #28]	; (800d710 <_kill_r+0x20>)
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	4604      	mov	r4, r0
 800d6f8:	4608      	mov	r0, r1
 800d6fa:	4611      	mov	r1, r2
 800d6fc:	602b      	str	r3, [r5, #0]
 800d6fe:	f7f6 f9cd 	bl	8003a9c <_kill>
 800d702:	1c43      	adds	r3, r0, #1
 800d704:	d102      	bne.n	800d70c <_kill_r+0x1c>
 800d706:	682b      	ldr	r3, [r5, #0]
 800d708:	b103      	cbz	r3, 800d70c <_kill_r+0x1c>
 800d70a:	6023      	str	r3, [r4, #0]
 800d70c:	bd38      	pop	{r3, r4, r5, pc}
 800d70e:	bf00      	nop
 800d710:	20004494 	.word	0x20004494

0800d714 <_getpid_r>:
 800d714:	f7f6 b9ba 	b.w	8003a8c <_getpid>

0800d718 <cos>:
 800d718:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d71a:	ec53 2b10 	vmov	r2, r3, d0
 800d71e:	4826      	ldr	r0, [pc, #152]	; (800d7b8 <cos+0xa0>)
 800d720:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d724:	4281      	cmp	r1, r0
 800d726:	dc06      	bgt.n	800d736 <cos+0x1e>
 800d728:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800d7b0 <cos+0x98>
 800d72c:	b005      	add	sp, #20
 800d72e:	f85d eb04 	ldr.w	lr, [sp], #4
 800d732:	f000 bc59 	b.w	800dfe8 <__kernel_cos>
 800d736:	4821      	ldr	r0, [pc, #132]	; (800d7bc <cos+0xa4>)
 800d738:	4281      	cmp	r1, r0
 800d73a:	dd09      	ble.n	800d750 <cos+0x38>
 800d73c:	ee10 0a10 	vmov	r0, s0
 800d740:	4619      	mov	r1, r3
 800d742:	f7f2 fdb1 	bl	80002a8 <__aeabi_dsub>
 800d746:	ec41 0b10 	vmov	d0, r0, r1
 800d74a:	b005      	add	sp, #20
 800d74c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d750:	4668      	mov	r0, sp
 800d752:	f000 f989 	bl	800da68 <__ieee754_rem_pio2>
 800d756:	f000 0003 	and.w	r0, r0, #3
 800d75a:	2801      	cmp	r0, #1
 800d75c:	d00b      	beq.n	800d776 <cos+0x5e>
 800d75e:	2802      	cmp	r0, #2
 800d760:	d016      	beq.n	800d790 <cos+0x78>
 800d762:	b9e0      	cbnz	r0, 800d79e <cos+0x86>
 800d764:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d768:	ed9d 0b00 	vldr	d0, [sp]
 800d76c:	f000 fc3c 	bl	800dfe8 <__kernel_cos>
 800d770:	ec51 0b10 	vmov	r0, r1, d0
 800d774:	e7e7      	b.n	800d746 <cos+0x2e>
 800d776:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d77a:	ed9d 0b00 	vldr	d0, [sp]
 800d77e:	f001 f84b 	bl	800e818 <__kernel_sin>
 800d782:	ec53 2b10 	vmov	r2, r3, d0
 800d786:	ee10 0a10 	vmov	r0, s0
 800d78a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d78e:	e7da      	b.n	800d746 <cos+0x2e>
 800d790:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d794:	ed9d 0b00 	vldr	d0, [sp]
 800d798:	f000 fc26 	bl	800dfe8 <__kernel_cos>
 800d79c:	e7f1      	b.n	800d782 <cos+0x6a>
 800d79e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d7a2:	ed9d 0b00 	vldr	d0, [sp]
 800d7a6:	2001      	movs	r0, #1
 800d7a8:	f001 f836 	bl	800e818 <__kernel_sin>
 800d7ac:	e7e0      	b.n	800d770 <cos+0x58>
 800d7ae:	bf00      	nop
	...
 800d7b8:	3fe921fb 	.word	0x3fe921fb
 800d7bc:	7fefffff 	.word	0x7fefffff

0800d7c0 <sin>:
 800d7c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d7c2:	ec53 2b10 	vmov	r2, r3, d0
 800d7c6:	4828      	ldr	r0, [pc, #160]	; (800d868 <sin+0xa8>)
 800d7c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d7cc:	4281      	cmp	r1, r0
 800d7ce:	dc07      	bgt.n	800d7e0 <sin+0x20>
 800d7d0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800d860 <sin+0xa0>
 800d7d4:	2000      	movs	r0, #0
 800d7d6:	b005      	add	sp, #20
 800d7d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7dc:	f001 b81c 	b.w	800e818 <__kernel_sin>
 800d7e0:	4822      	ldr	r0, [pc, #136]	; (800d86c <sin+0xac>)
 800d7e2:	4281      	cmp	r1, r0
 800d7e4:	dd09      	ble.n	800d7fa <sin+0x3a>
 800d7e6:	ee10 0a10 	vmov	r0, s0
 800d7ea:	4619      	mov	r1, r3
 800d7ec:	f7f2 fd5c 	bl	80002a8 <__aeabi_dsub>
 800d7f0:	ec41 0b10 	vmov	d0, r0, r1
 800d7f4:	b005      	add	sp, #20
 800d7f6:	f85d fb04 	ldr.w	pc, [sp], #4
 800d7fa:	4668      	mov	r0, sp
 800d7fc:	f000 f934 	bl	800da68 <__ieee754_rem_pio2>
 800d800:	f000 0003 	and.w	r0, r0, #3
 800d804:	2801      	cmp	r0, #1
 800d806:	d00c      	beq.n	800d822 <sin+0x62>
 800d808:	2802      	cmp	r0, #2
 800d80a:	d011      	beq.n	800d830 <sin+0x70>
 800d80c:	b9f0      	cbnz	r0, 800d84c <sin+0x8c>
 800d80e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d812:	ed9d 0b00 	vldr	d0, [sp]
 800d816:	2001      	movs	r0, #1
 800d818:	f000 fffe 	bl	800e818 <__kernel_sin>
 800d81c:	ec51 0b10 	vmov	r0, r1, d0
 800d820:	e7e6      	b.n	800d7f0 <sin+0x30>
 800d822:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d826:	ed9d 0b00 	vldr	d0, [sp]
 800d82a:	f000 fbdd 	bl	800dfe8 <__kernel_cos>
 800d82e:	e7f5      	b.n	800d81c <sin+0x5c>
 800d830:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d834:	ed9d 0b00 	vldr	d0, [sp]
 800d838:	2001      	movs	r0, #1
 800d83a:	f000 ffed 	bl	800e818 <__kernel_sin>
 800d83e:	ec53 2b10 	vmov	r2, r3, d0
 800d842:	ee10 0a10 	vmov	r0, s0
 800d846:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d84a:	e7d1      	b.n	800d7f0 <sin+0x30>
 800d84c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d850:	ed9d 0b00 	vldr	d0, [sp]
 800d854:	f000 fbc8 	bl	800dfe8 <__kernel_cos>
 800d858:	e7f1      	b.n	800d83e <sin+0x7e>
 800d85a:	bf00      	nop
 800d85c:	f3af 8000 	nop.w
	...
 800d868:	3fe921fb 	.word	0x3fe921fb
 800d86c:	7fefffff 	.word	0x7fefffff

0800d870 <atan2>:
 800d870:	f000 b82e 	b.w	800d8d0 <__ieee754_atan2>

0800d874 <sqrt>:
 800d874:	b538      	push	{r3, r4, r5, lr}
 800d876:	ed2d 8b02 	vpush	{d8}
 800d87a:	ec55 4b10 	vmov	r4, r5, d0
 800d87e:	f000 faff 	bl	800de80 <__ieee754_sqrt>
 800d882:	4622      	mov	r2, r4
 800d884:	462b      	mov	r3, r5
 800d886:	4620      	mov	r0, r4
 800d888:	4629      	mov	r1, r5
 800d88a:	eeb0 8a40 	vmov.f32	s16, s0
 800d88e:	eef0 8a60 	vmov.f32	s17, s1
 800d892:	f7f3 f95b 	bl	8000b4c <__aeabi_dcmpun>
 800d896:	b990      	cbnz	r0, 800d8be <sqrt+0x4a>
 800d898:	2200      	movs	r2, #0
 800d89a:	2300      	movs	r3, #0
 800d89c:	4620      	mov	r0, r4
 800d89e:	4629      	mov	r1, r5
 800d8a0:	f7f3 f92c 	bl	8000afc <__aeabi_dcmplt>
 800d8a4:	b158      	cbz	r0, 800d8be <sqrt+0x4a>
 800d8a6:	f7fc ff19 	bl	800a6dc <__errno>
 800d8aa:	2321      	movs	r3, #33	; 0x21
 800d8ac:	6003      	str	r3, [r0, #0]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	4610      	mov	r0, r2
 800d8b4:	4619      	mov	r1, r3
 800d8b6:	f7f2 ffd9 	bl	800086c <__aeabi_ddiv>
 800d8ba:	ec41 0b18 	vmov	d8, r0, r1
 800d8be:	eeb0 0a48 	vmov.f32	s0, s16
 800d8c2:	eef0 0a68 	vmov.f32	s1, s17
 800d8c6:	ecbd 8b02 	vpop	{d8}
 800d8ca:	bd38      	pop	{r3, r4, r5, pc}
 800d8cc:	0000      	movs	r0, r0
	...

0800d8d0 <__ieee754_atan2>:
 800d8d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8d4:	ec57 6b11 	vmov	r6, r7, d1
 800d8d8:	4273      	negs	r3, r6
 800d8da:	f8df e184 	ldr.w	lr, [pc, #388]	; 800da60 <__ieee754_atan2+0x190>
 800d8de:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800d8e2:	4333      	orrs	r3, r6
 800d8e4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d8e8:	4573      	cmp	r3, lr
 800d8ea:	ec51 0b10 	vmov	r0, r1, d0
 800d8ee:	ee11 8a10 	vmov	r8, s2
 800d8f2:	d80a      	bhi.n	800d90a <__ieee754_atan2+0x3a>
 800d8f4:	4244      	negs	r4, r0
 800d8f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d8fa:	4304      	orrs	r4, r0
 800d8fc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800d900:	4574      	cmp	r4, lr
 800d902:	ee10 9a10 	vmov	r9, s0
 800d906:	468c      	mov	ip, r1
 800d908:	d907      	bls.n	800d91a <__ieee754_atan2+0x4a>
 800d90a:	4632      	mov	r2, r6
 800d90c:	463b      	mov	r3, r7
 800d90e:	f7f2 fccd 	bl	80002ac <__adddf3>
 800d912:	ec41 0b10 	vmov	d0, r0, r1
 800d916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d91a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800d91e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d922:	4334      	orrs	r4, r6
 800d924:	d103      	bne.n	800d92e <__ieee754_atan2+0x5e>
 800d926:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d92a:	f001 b835 	b.w	800e998 <atan>
 800d92e:	17bc      	asrs	r4, r7, #30
 800d930:	f004 0402 	and.w	r4, r4, #2
 800d934:	ea53 0909 	orrs.w	r9, r3, r9
 800d938:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800d93c:	d107      	bne.n	800d94e <__ieee754_atan2+0x7e>
 800d93e:	2c02      	cmp	r4, #2
 800d940:	d060      	beq.n	800da04 <__ieee754_atan2+0x134>
 800d942:	2c03      	cmp	r4, #3
 800d944:	d1e5      	bne.n	800d912 <__ieee754_atan2+0x42>
 800d946:	a142      	add	r1, pc, #264	; (adr r1, 800da50 <__ieee754_atan2+0x180>)
 800d948:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d94c:	e7e1      	b.n	800d912 <__ieee754_atan2+0x42>
 800d94e:	ea52 0808 	orrs.w	r8, r2, r8
 800d952:	d106      	bne.n	800d962 <__ieee754_atan2+0x92>
 800d954:	f1bc 0f00 	cmp.w	ip, #0
 800d958:	da5f      	bge.n	800da1a <__ieee754_atan2+0x14a>
 800d95a:	a13f      	add	r1, pc, #252	; (adr r1, 800da58 <__ieee754_atan2+0x188>)
 800d95c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d960:	e7d7      	b.n	800d912 <__ieee754_atan2+0x42>
 800d962:	4572      	cmp	r2, lr
 800d964:	d10f      	bne.n	800d986 <__ieee754_atan2+0xb6>
 800d966:	4293      	cmp	r3, r2
 800d968:	f104 34ff 	add.w	r4, r4, #4294967295
 800d96c:	d107      	bne.n	800d97e <__ieee754_atan2+0xae>
 800d96e:	2c02      	cmp	r4, #2
 800d970:	d84c      	bhi.n	800da0c <__ieee754_atan2+0x13c>
 800d972:	4b35      	ldr	r3, [pc, #212]	; (800da48 <__ieee754_atan2+0x178>)
 800d974:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800d978:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d97c:	e7c9      	b.n	800d912 <__ieee754_atan2+0x42>
 800d97e:	2c02      	cmp	r4, #2
 800d980:	d848      	bhi.n	800da14 <__ieee754_atan2+0x144>
 800d982:	4b32      	ldr	r3, [pc, #200]	; (800da4c <__ieee754_atan2+0x17c>)
 800d984:	e7f6      	b.n	800d974 <__ieee754_atan2+0xa4>
 800d986:	4573      	cmp	r3, lr
 800d988:	d0e4      	beq.n	800d954 <__ieee754_atan2+0x84>
 800d98a:	1a9b      	subs	r3, r3, r2
 800d98c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800d990:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d994:	da1e      	bge.n	800d9d4 <__ieee754_atan2+0x104>
 800d996:	2f00      	cmp	r7, #0
 800d998:	da01      	bge.n	800d99e <__ieee754_atan2+0xce>
 800d99a:	323c      	adds	r2, #60	; 0x3c
 800d99c:	db1e      	blt.n	800d9dc <__ieee754_atan2+0x10c>
 800d99e:	4632      	mov	r2, r6
 800d9a0:	463b      	mov	r3, r7
 800d9a2:	f7f2 ff63 	bl	800086c <__aeabi_ddiv>
 800d9a6:	ec41 0b10 	vmov	d0, r0, r1
 800d9aa:	f001 f995 	bl	800ecd8 <fabs>
 800d9ae:	f000 fff3 	bl	800e998 <atan>
 800d9b2:	ec51 0b10 	vmov	r0, r1, d0
 800d9b6:	2c01      	cmp	r4, #1
 800d9b8:	d013      	beq.n	800d9e2 <__ieee754_atan2+0x112>
 800d9ba:	2c02      	cmp	r4, #2
 800d9bc:	d015      	beq.n	800d9ea <__ieee754_atan2+0x11a>
 800d9be:	2c00      	cmp	r4, #0
 800d9c0:	d0a7      	beq.n	800d912 <__ieee754_atan2+0x42>
 800d9c2:	a319      	add	r3, pc, #100	; (adr r3, 800da28 <__ieee754_atan2+0x158>)
 800d9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c8:	f7f2 fc6e 	bl	80002a8 <__aeabi_dsub>
 800d9cc:	a318      	add	r3, pc, #96	; (adr r3, 800da30 <__ieee754_atan2+0x160>)
 800d9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9d2:	e014      	b.n	800d9fe <__ieee754_atan2+0x12e>
 800d9d4:	a118      	add	r1, pc, #96	; (adr r1, 800da38 <__ieee754_atan2+0x168>)
 800d9d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9da:	e7ec      	b.n	800d9b6 <__ieee754_atan2+0xe6>
 800d9dc:	2000      	movs	r0, #0
 800d9de:	2100      	movs	r1, #0
 800d9e0:	e7e9      	b.n	800d9b6 <__ieee754_atan2+0xe6>
 800d9e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d9e6:	4619      	mov	r1, r3
 800d9e8:	e793      	b.n	800d912 <__ieee754_atan2+0x42>
 800d9ea:	a30f      	add	r3, pc, #60	; (adr r3, 800da28 <__ieee754_atan2+0x158>)
 800d9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f0:	f7f2 fc5a 	bl	80002a8 <__aeabi_dsub>
 800d9f4:	4602      	mov	r2, r0
 800d9f6:	460b      	mov	r3, r1
 800d9f8:	a10d      	add	r1, pc, #52	; (adr r1, 800da30 <__ieee754_atan2+0x160>)
 800d9fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9fe:	f7f2 fc53 	bl	80002a8 <__aeabi_dsub>
 800da02:	e786      	b.n	800d912 <__ieee754_atan2+0x42>
 800da04:	a10a      	add	r1, pc, #40	; (adr r1, 800da30 <__ieee754_atan2+0x160>)
 800da06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da0a:	e782      	b.n	800d912 <__ieee754_atan2+0x42>
 800da0c:	a10c      	add	r1, pc, #48	; (adr r1, 800da40 <__ieee754_atan2+0x170>)
 800da0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da12:	e77e      	b.n	800d912 <__ieee754_atan2+0x42>
 800da14:	2000      	movs	r0, #0
 800da16:	2100      	movs	r1, #0
 800da18:	e77b      	b.n	800d912 <__ieee754_atan2+0x42>
 800da1a:	a107      	add	r1, pc, #28	; (adr r1, 800da38 <__ieee754_atan2+0x168>)
 800da1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da20:	e777      	b.n	800d912 <__ieee754_atan2+0x42>
 800da22:	bf00      	nop
 800da24:	f3af 8000 	nop.w
 800da28:	33145c07 	.word	0x33145c07
 800da2c:	3ca1a626 	.word	0x3ca1a626
 800da30:	54442d18 	.word	0x54442d18
 800da34:	400921fb 	.word	0x400921fb
 800da38:	54442d18 	.word	0x54442d18
 800da3c:	3ff921fb 	.word	0x3ff921fb
 800da40:	54442d18 	.word	0x54442d18
 800da44:	3fe921fb 	.word	0x3fe921fb
 800da48:	0800f450 	.word	0x0800f450
 800da4c:	0800f468 	.word	0x0800f468
 800da50:	54442d18 	.word	0x54442d18
 800da54:	c00921fb 	.word	0xc00921fb
 800da58:	54442d18 	.word	0x54442d18
 800da5c:	bff921fb 	.word	0xbff921fb
 800da60:	7ff00000 	.word	0x7ff00000
 800da64:	00000000 	.word	0x00000000

0800da68 <__ieee754_rem_pio2>:
 800da68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da6c:	ed2d 8b02 	vpush	{d8}
 800da70:	ec55 4b10 	vmov	r4, r5, d0
 800da74:	4bca      	ldr	r3, [pc, #808]	; (800dda0 <__ieee754_rem_pio2+0x338>)
 800da76:	b08b      	sub	sp, #44	; 0x2c
 800da78:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800da7c:	4598      	cmp	r8, r3
 800da7e:	4682      	mov	sl, r0
 800da80:	9502      	str	r5, [sp, #8]
 800da82:	dc08      	bgt.n	800da96 <__ieee754_rem_pio2+0x2e>
 800da84:	2200      	movs	r2, #0
 800da86:	2300      	movs	r3, #0
 800da88:	ed80 0b00 	vstr	d0, [r0]
 800da8c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800da90:	f04f 0b00 	mov.w	fp, #0
 800da94:	e028      	b.n	800dae8 <__ieee754_rem_pio2+0x80>
 800da96:	4bc3      	ldr	r3, [pc, #780]	; (800dda4 <__ieee754_rem_pio2+0x33c>)
 800da98:	4598      	cmp	r8, r3
 800da9a:	dc78      	bgt.n	800db8e <__ieee754_rem_pio2+0x126>
 800da9c:	9b02      	ldr	r3, [sp, #8]
 800da9e:	4ec2      	ldr	r6, [pc, #776]	; (800dda8 <__ieee754_rem_pio2+0x340>)
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	ee10 0a10 	vmov	r0, s0
 800daa6:	a3b0      	add	r3, pc, #704	; (adr r3, 800dd68 <__ieee754_rem_pio2+0x300>)
 800daa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daac:	4629      	mov	r1, r5
 800daae:	dd39      	ble.n	800db24 <__ieee754_rem_pio2+0xbc>
 800dab0:	f7f2 fbfa 	bl	80002a8 <__aeabi_dsub>
 800dab4:	45b0      	cmp	r8, r6
 800dab6:	4604      	mov	r4, r0
 800dab8:	460d      	mov	r5, r1
 800daba:	d01b      	beq.n	800daf4 <__ieee754_rem_pio2+0x8c>
 800dabc:	a3ac      	add	r3, pc, #688	; (adr r3, 800dd70 <__ieee754_rem_pio2+0x308>)
 800dabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dac2:	f7f2 fbf1 	bl	80002a8 <__aeabi_dsub>
 800dac6:	4602      	mov	r2, r0
 800dac8:	460b      	mov	r3, r1
 800daca:	e9ca 2300 	strd	r2, r3, [sl]
 800dace:	4620      	mov	r0, r4
 800dad0:	4629      	mov	r1, r5
 800dad2:	f7f2 fbe9 	bl	80002a8 <__aeabi_dsub>
 800dad6:	a3a6      	add	r3, pc, #664	; (adr r3, 800dd70 <__ieee754_rem_pio2+0x308>)
 800dad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dadc:	f7f2 fbe4 	bl	80002a8 <__aeabi_dsub>
 800dae0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dae4:	f04f 0b01 	mov.w	fp, #1
 800dae8:	4658      	mov	r0, fp
 800daea:	b00b      	add	sp, #44	; 0x2c
 800daec:	ecbd 8b02 	vpop	{d8}
 800daf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daf4:	a3a0      	add	r3, pc, #640	; (adr r3, 800dd78 <__ieee754_rem_pio2+0x310>)
 800daf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dafa:	f7f2 fbd5 	bl	80002a8 <__aeabi_dsub>
 800dafe:	a3a0      	add	r3, pc, #640	; (adr r3, 800dd80 <__ieee754_rem_pio2+0x318>)
 800db00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db04:	4604      	mov	r4, r0
 800db06:	460d      	mov	r5, r1
 800db08:	f7f2 fbce 	bl	80002a8 <__aeabi_dsub>
 800db0c:	4602      	mov	r2, r0
 800db0e:	460b      	mov	r3, r1
 800db10:	e9ca 2300 	strd	r2, r3, [sl]
 800db14:	4620      	mov	r0, r4
 800db16:	4629      	mov	r1, r5
 800db18:	f7f2 fbc6 	bl	80002a8 <__aeabi_dsub>
 800db1c:	a398      	add	r3, pc, #608	; (adr r3, 800dd80 <__ieee754_rem_pio2+0x318>)
 800db1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db22:	e7db      	b.n	800dadc <__ieee754_rem_pio2+0x74>
 800db24:	f7f2 fbc2 	bl	80002ac <__adddf3>
 800db28:	45b0      	cmp	r8, r6
 800db2a:	4604      	mov	r4, r0
 800db2c:	460d      	mov	r5, r1
 800db2e:	d016      	beq.n	800db5e <__ieee754_rem_pio2+0xf6>
 800db30:	a38f      	add	r3, pc, #572	; (adr r3, 800dd70 <__ieee754_rem_pio2+0x308>)
 800db32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db36:	f7f2 fbb9 	bl	80002ac <__adddf3>
 800db3a:	4602      	mov	r2, r0
 800db3c:	460b      	mov	r3, r1
 800db3e:	e9ca 2300 	strd	r2, r3, [sl]
 800db42:	4620      	mov	r0, r4
 800db44:	4629      	mov	r1, r5
 800db46:	f7f2 fbaf 	bl	80002a8 <__aeabi_dsub>
 800db4a:	a389      	add	r3, pc, #548	; (adr r3, 800dd70 <__ieee754_rem_pio2+0x308>)
 800db4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db50:	f7f2 fbac 	bl	80002ac <__adddf3>
 800db54:	f04f 3bff 	mov.w	fp, #4294967295
 800db58:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800db5c:	e7c4      	b.n	800dae8 <__ieee754_rem_pio2+0x80>
 800db5e:	a386      	add	r3, pc, #536	; (adr r3, 800dd78 <__ieee754_rem_pio2+0x310>)
 800db60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db64:	f7f2 fba2 	bl	80002ac <__adddf3>
 800db68:	a385      	add	r3, pc, #532	; (adr r3, 800dd80 <__ieee754_rem_pio2+0x318>)
 800db6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db6e:	4604      	mov	r4, r0
 800db70:	460d      	mov	r5, r1
 800db72:	f7f2 fb9b 	bl	80002ac <__adddf3>
 800db76:	4602      	mov	r2, r0
 800db78:	460b      	mov	r3, r1
 800db7a:	e9ca 2300 	strd	r2, r3, [sl]
 800db7e:	4620      	mov	r0, r4
 800db80:	4629      	mov	r1, r5
 800db82:	f7f2 fb91 	bl	80002a8 <__aeabi_dsub>
 800db86:	a37e      	add	r3, pc, #504	; (adr r3, 800dd80 <__ieee754_rem_pio2+0x318>)
 800db88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db8c:	e7e0      	b.n	800db50 <__ieee754_rem_pio2+0xe8>
 800db8e:	4b87      	ldr	r3, [pc, #540]	; (800ddac <__ieee754_rem_pio2+0x344>)
 800db90:	4598      	cmp	r8, r3
 800db92:	f300 80d9 	bgt.w	800dd48 <__ieee754_rem_pio2+0x2e0>
 800db96:	f001 f89f 	bl	800ecd8 <fabs>
 800db9a:	ec55 4b10 	vmov	r4, r5, d0
 800db9e:	ee10 0a10 	vmov	r0, s0
 800dba2:	a379      	add	r3, pc, #484	; (adr r3, 800dd88 <__ieee754_rem_pio2+0x320>)
 800dba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba8:	4629      	mov	r1, r5
 800dbaa:	f7f2 fd35 	bl	8000618 <__aeabi_dmul>
 800dbae:	4b80      	ldr	r3, [pc, #512]	; (800ddb0 <__ieee754_rem_pio2+0x348>)
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	f7f2 fb7b 	bl	80002ac <__adddf3>
 800dbb6:	f7f2 ffdf 	bl	8000b78 <__aeabi_d2iz>
 800dbba:	4683      	mov	fp, r0
 800dbbc:	f7f2 fcc2 	bl	8000544 <__aeabi_i2d>
 800dbc0:	4602      	mov	r2, r0
 800dbc2:	460b      	mov	r3, r1
 800dbc4:	ec43 2b18 	vmov	d8, r2, r3
 800dbc8:	a367      	add	r3, pc, #412	; (adr r3, 800dd68 <__ieee754_rem_pio2+0x300>)
 800dbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbce:	f7f2 fd23 	bl	8000618 <__aeabi_dmul>
 800dbd2:	4602      	mov	r2, r0
 800dbd4:	460b      	mov	r3, r1
 800dbd6:	4620      	mov	r0, r4
 800dbd8:	4629      	mov	r1, r5
 800dbda:	f7f2 fb65 	bl	80002a8 <__aeabi_dsub>
 800dbde:	a364      	add	r3, pc, #400	; (adr r3, 800dd70 <__ieee754_rem_pio2+0x308>)
 800dbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe4:	4606      	mov	r6, r0
 800dbe6:	460f      	mov	r7, r1
 800dbe8:	ec51 0b18 	vmov	r0, r1, d8
 800dbec:	f7f2 fd14 	bl	8000618 <__aeabi_dmul>
 800dbf0:	f1bb 0f1f 	cmp.w	fp, #31
 800dbf4:	4604      	mov	r4, r0
 800dbf6:	460d      	mov	r5, r1
 800dbf8:	dc0d      	bgt.n	800dc16 <__ieee754_rem_pio2+0x1ae>
 800dbfa:	4b6e      	ldr	r3, [pc, #440]	; (800ddb4 <__ieee754_rem_pio2+0x34c>)
 800dbfc:	f10b 32ff 	add.w	r2, fp, #4294967295
 800dc00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc04:	4543      	cmp	r3, r8
 800dc06:	d006      	beq.n	800dc16 <__ieee754_rem_pio2+0x1ae>
 800dc08:	4622      	mov	r2, r4
 800dc0a:	462b      	mov	r3, r5
 800dc0c:	4630      	mov	r0, r6
 800dc0e:	4639      	mov	r1, r7
 800dc10:	f7f2 fb4a 	bl	80002a8 <__aeabi_dsub>
 800dc14:	e00f      	b.n	800dc36 <__ieee754_rem_pio2+0x1ce>
 800dc16:	462b      	mov	r3, r5
 800dc18:	4622      	mov	r2, r4
 800dc1a:	4630      	mov	r0, r6
 800dc1c:	4639      	mov	r1, r7
 800dc1e:	f7f2 fb43 	bl	80002a8 <__aeabi_dsub>
 800dc22:	ea4f 5328 	mov.w	r3, r8, asr #20
 800dc26:	9303      	str	r3, [sp, #12]
 800dc28:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dc2c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800dc30:	f1b8 0f10 	cmp.w	r8, #16
 800dc34:	dc02      	bgt.n	800dc3c <__ieee754_rem_pio2+0x1d4>
 800dc36:	e9ca 0100 	strd	r0, r1, [sl]
 800dc3a:	e039      	b.n	800dcb0 <__ieee754_rem_pio2+0x248>
 800dc3c:	a34e      	add	r3, pc, #312	; (adr r3, 800dd78 <__ieee754_rem_pio2+0x310>)
 800dc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc42:	ec51 0b18 	vmov	r0, r1, d8
 800dc46:	f7f2 fce7 	bl	8000618 <__aeabi_dmul>
 800dc4a:	4604      	mov	r4, r0
 800dc4c:	460d      	mov	r5, r1
 800dc4e:	4602      	mov	r2, r0
 800dc50:	460b      	mov	r3, r1
 800dc52:	4630      	mov	r0, r6
 800dc54:	4639      	mov	r1, r7
 800dc56:	f7f2 fb27 	bl	80002a8 <__aeabi_dsub>
 800dc5a:	4602      	mov	r2, r0
 800dc5c:	460b      	mov	r3, r1
 800dc5e:	4680      	mov	r8, r0
 800dc60:	4689      	mov	r9, r1
 800dc62:	4630      	mov	r0, r6
 800dc64:	4639      	mov	r1, r7
 800dc66:	f7f2 fb1f 	bl	80002a8 <__aeabi_dsub>
 800dc6a:	4622      	mov	r2, r4
 800dc6c:	462b      	mov	r3, r5
 800dc6e:	f7f2 fb1b 	bl	80002a8 <__aeabi_dsub>
 800dc72:	a343      	add	r3, pc, #268	; (adr r3, 800dd80 <__ieee754_rem_pio2+0x318>)
 800dc74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc78:	4604      	mov	r4, r0
 800dc7a:	460d      	mov	r5, r1
 800dc7c:	ec51 0b18 	vmov	r0, r1, d8
 800dc80:	f7f2 fcca 	bl	8000618 <__aeabi_dmul>
 800dc84:	4622      	mov	r2, r4
 800dc86:	462b      	mov	r3, r5
 800dc88:	f7f2 fb0e 	bl	80002a8 <__aeabi_dsub>
 800dc8c:	4602      	mov	r2, r0
 800dc8e:	460b      	mov	r3, r1
 800dc90:	4604      	mov	r4, r0
 800dc92:	460d      	mov	r5, r1
 800dc94:	4640      	mov	r0, r8
 800dc96:	4649      	mov	r1, r9
 800dc98:	f7f2 fb06 	bl	80002a8 <__aeabi_dsub>
 800dc9c:	9a03      	ldr	r2, [sp, #12]
 800dc9e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dca2:	1ad3      	subs	r3, r2, r3
 800dca4:	2b31      	cmp	r3, #49	; 0x31
 800dca6:	dc24      	bgt.n	800dcf2 <__ieee754_rem_pio2+0x28a>
 800dca8:	e9ca 0100 	strd	r0, r1, [sl]
 800dcac:	4646      	mov	r6, r8
 800dcae:	464f      	mov	r7, r9
 800dcb0:	e9da 8900 	ldrd	r8, r9, [sl]
 800dcb4:	4630      	mov	r0, r6
 800dcb6:	4642      	mov	r2, r8
 800dcb8:	464b      	mov	r3, r9
 800dcba:	4639      	mov	r1, r7
 800dcbc:	f7f2 faf4 	bl	80002a8 <__aeabi_dsub>
 800dcc0:	462b      	mov	r3, r5
 800dcc2:	4622      	mov	r2, r4
 800dcc4:	f7f2 faf0 	bl	80002a8 <__aeabi_dsub>
 800dcc8:	9b02      	ldr	r3, [sp, #8]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dcd0:	f6bf af0a 	bge.w	800dae8 <__ieee754_rem_pio2+0x80>
 800dcd4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dcd8:	f8ca 3004 	str.w	r3, [sl, #4]
 800dcdc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dce0:	f8ca 8000 	str.w	r8, [sl]
 800dce4:	f8ca 0008 	str.w	r0, [sl, #8]
 800dce8:	f8ca 300c 	str.w	r3, [sl, #12]
 800dcec:	f1cb 0b00 	rsb	fp, fp, #0
 800dcf0:	e6fa      	b.n	800dae8 <__ieee754_rem_pio2+0x80>
 800dcf2:	a327      	add	r3, pc, #156	; (adr r3, 800dd90 <__ieee754_rem_pio2+0x328>)
 800dcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf8:	ec51 0b18 	vmov	r0, r1, d8
 800dcfc:	f7f2 fc8c 	bl	8000618 <__aeabi_dmul>
 800dd00:	4604      	mov	r4, r0
 800dd02:	460d      	mov	r5, r1
 800dd04:	4602      	mov	r2, r0
 800dd06:	460b      	mov	r3, r1
 800dd08:	4640      	mov	r0, r8
 800dd0a:	4649      	mov	r1, r9
 800dd0c:	f7f2 facc 	bl	80002a8 <__aeabi_dsub>
 800dd10:	4602      	mov	r2, r0
 800dd12:	460b      	mov	r3, r1
 800dd14:	4606      	mov	r6, r0
 800dd16:	460f      	mov	r7, r1
 800dd18:	4640      	mov	r0, r8
 800dd1a:	4649      	mov	r1, r9
 800dd1c:	f7f2 fac4 	bl	80002a8 <__aeabi_dsub>
 800dd20:	4622      	mov	r2, r4
 800dd22:	462b      	mov	r3, r5
 800dd24:	f7f2 fac0 	bl	80002a8 <__aeabi_dsub>
 800dd28:	a31b      	add	r3, pc, #108	; (adr r3, 800dd98 <__ieee754_rem_pio2+0x330>)
 800dd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd2e:	4604      	mov	r4, r0
 800dd30:	460d      	mov	r5, r1
 800dd32:	ec51 0b18 	vmov	r0, r1, d8
 800dd36:	f7f2 fc6f 	bl	8000618 <__aeabi_dmul>
 800dd3a:	4622      	mov	r2, r4
 800dd3c:	462b      	mov	r3, r5
 800dd3e:	f7f2 fab3 	bl	80002a8 <__aeabi_dsub>
 800dd42:	4604      	mov	r4, r0
 800dd44:	460d      	mov	r5, r1
 800dd46:	e75f      	b.n	800dc08 <__ieee754_rem_pio2+0x1a0>
 800dd48:	4b1b      	ldr	r3, [pc, #108]	; (800ddb8 <__ieee754_rem_pio2+0x350>)
 800dd4a:	4598      	cmp	r8, r3
 800dd4c:	dd36      	ble.n	800ddbc <__ieee754_rem_pio2+0x354>
 800dd4e:	ee10 2a10 	vmov	r2, s0
 800dd52:	462b      	mov	r3, r5
 800dd54:	4620      	mov	r0, r4
 800dd56:	4629      	mov	r1, r5
 800dd58:	f7f2 faa6 	bl	80002a8 <__aeabi_dsub>
 800dd5c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800dd60:	e9ca 0100 	strd	r0, r1, [sl]
 800dd64:	e694      	b.n	800da90 <__ieee754_rem_pio2+0x28>
 800dd66:	bf00      	nop
 800dd68:	54400000 	.word	0x54400000
 800dd6c:	3ff921fb 	.word	0x3ff921fb
 800dd70:	1a626331 	.word	0x1a626331
 800dd74:	3dd0b461 	.word	0x3dd0b461
 800dd78:	1a600000 	.word	0x1a600000
 800dd7c:	3dd0b461 	.word	0x3dd0b461
 800dd80:	2e037073 	.word	0x2e037073
 800dd84:	3ba3198a 	.word	0x3ba3198a
 800dd88:	6dc9c883 	.word	0x6dc9c883
 800dd8c:	3fe45f30 	.word	0x3fe45f30
 800dd90:	2e000000 	.word	0x2e000000
 800dd94:	3ba3198a 	.word	0x3ba3198a
 800dd98:	252049c1 	.word	0x252049c1
 800dd9c:	397b839a 	.word	0x397b839a
 800dda0:	3fe921fb 	.word	0x3fe921fb
 800dda4:	4002d97b 	.word	0x4002d97b
 800dda8:	3ff921fb 	.word	0x3ff921fb
 800ddac:	413921fb 	.word	0x413921fb
 800ddb0:	3fe00000 	.word	0x3fe00000
 800ddb4:	0800f480 	.word	0x0800f480
 800ddb8:	7fefffff 	.word	0x7fefffff
 800ddbc:	ea4f 5428 	mov.w	r4, r8, asr #20
 800ddc0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800ddc4:	ee10 0a10 	vmov	r0, s0
 800ddc8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ddcc:	ee10 6a10 	vmov	r6, s0
 800ddd0:	460f      	mov	r7, r1
 800ddd2:	f7f2 fed1 	bl	8000b78 <__aeabi_d2iz>
 800ddd6:	f7f2 fbb5 	bl	8000544 <__aeabi_i2d>
 800ddda:	4602      	mov	r2, r0
 800dddc:	460b      	mov	r3, r1
 800ddde:	4630      	mov	r0, r6
 800dde0:	4639      	mov	r1, r7
 800dde2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dde6:	f7f2 fa5f 	bl	80002a8 <__aeabi_dsub>
 800ddea:	4b23      	ldr	r3, [pc, #140]	; (800de78 <__ieee754_rem_pio2+0x410>)
 800ddec:	2200      	movs	r2, #0
 800ddee:	f7f2 fc13 	bl	8000618 <__aeabi_dmul>
 800ddf2:	460f      	mov	r7, r1
 800ddf4:	4606      	mov	r6, r0
 800ddf6:	f7f2 febf 	bl	8000b78 <__aeabi_d2iz>
 800ddfa:	f7f2 fba3 	bl	8000544 <__aeabi_i2d>
 800ddfe:	4602      	mov	r2, r0
 800de00:	460b      	mov	r3, r1
 800de02:	4630      	mov	r0, r6
 800de04:	4639      	mov	r1, r7
 800de06:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800de0a:	f7f2 fa4d 	bl	80002a8 <__aeabi_dsub>
 800de0e:	4b1a      	ldr	r3, [pc, #104]	; (800de78 <__ieee754_rem_pio2+0x410>)
 800de10:	2200      	movs	r2, #0
 800de12:	f7f2 fc01 	bl	8000618 <__aeabi_dmul>
 800de16:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800de1a:	ad04      	add	r5, sp, #16
 800de1c:	f04f 0803 	mov.w	r8, #3
 800de20:	46a9      	mov	r9, r5
 800de22:	2600      	movs	r6, #0
 800de24:	2700      	movs	r7, #0
 800de26:	4632      	mov	r2, r6
 800de28:	463b      	mov	r3, r7
 800de2a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800de2e:	46c3      	mov	fp, r8
 800de30:	3d08      	subs	r5, #8
 800de32:	f108 38ff 	add.w	r8, r8, #4294967295
 800de36:	f7f2 fe57 	bl	8000ae8 <__aeabi_dcmpeq>
 800de3a:	2800      	cmp	r0, #0
 800de3c:	d1f3      	bne.n	800de26 <__ieee754_rem_pio2+0x3be>
 800de3e:	4b0f      	ldr	r3, [pc, #60]	; (800de7c <__ieee754_rem_pio2+0x414>)
 800de40:	9301      	str	r3, [sp, #4]
 800de42:	2302      	movs	r3, #2
 800de44:	9300      	str	r3, [sp, #0]
 800de46:	4622      	mov	r2, r4
 800de48:	465b      	mov	r3, fp
 800de4a:	4651      	mov	r1, sl
 800de4c:	4648      	mov	r0, r9
 800de4e:	f000 f993 	bl	800e178 <__kernel_rem_pio2>
 800de52:	9b02      	ldr	r3, [sp, #8]
 800de54:	2b00      	cmp	r3, #0
 800de56:	4683      	mov	fp, r0
 800de58:	f6bf ae46 	bge.w	800dae8 <__ieee754_rem_pio2+0x80>
 800de5c:	e9da 2100 	ldrd	r2, r1, [sl]
 800de60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800de64:	e9ca 2300 	strd	r2, r3, [sl]
 800de68:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800de6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800de70:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800de74:	e73a      	b.n	800dcec <__ieee754_rem_pio2+0x284>
 800de76:	bf00      	nop
 800de78:	41700000 	.word	0x41700000
 800de7c:	0800f500 	.word	0x0800f500

0800de80 <__ieee754_sqrt>:
 800de80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de84:	ec55 4b10 	vmov	r4, r5, d0
 800de88:	4e55      	ldr	r6, [pc, #340]	; (800dfe0 <__ieee754_sqrt+0x160>)
 800de8a:	43ae      	bics	r6, r5
 800de8c:	ee10 0a10 	vmov	r0, s0
 800de90:	ee10 3a10 	vmov	r3, s0
 800de94:	462a      	mov	r2, r5
 800de96:	4629      	mov	r1, r5
 800de98:	d110      	bne.n	800debc <__ieee754_sqrt+0x3c>
 800de9a:	ee10 2a10 	vmov	r2, s0
 800de9e:	462b      	mov	r3, r5
 800dea0:	f7f2 fbba 	bl	8000618 <__aeabi_dmul>
 800dea4:	4602      	mov	r2, r0
 800dea6:	460b      	mov	r3, r1
 800dea8:	4620      	mov	r0, r4
 800deaa:	4629      	mov	r1, r5
 800deac:	f7f2 f9fe 	bl	80002ac <__adddf3>
 800deb0:	4604      	mov	r4, r0
 800deb2:	460d      	mov	r5, r1
 800deb4:	ec45 4b10 	vmov	d0, r4, r5
 800deb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800debc:	2d00      	cmp	r5, #0
 800debe:	dc10      	bgt.n	800dee2 <__ieee754_sqrt+0x62>
 800dec0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800dec4:	4330      	orrs	r0, r6
 800dec6:	d0f5      	beq.n	800deb4 <__ieee754_sqrt+0x34>
 800dec8:	b15d      	cbz	r5, 800dee2 <__ieee754_sqrt+0x62>
 800deca:	ee10 2a10 	vmov	r2, s0
 800dece:	462b      	mov	r3, r5
 800ded0:	ee10 0a10 	vmov	r0, s0
 800ded4:	f7f2 f9e8 	bl	80002a8 <__aeabi_dsub>
 800ded8:	4602      	mov	r2, r0
 800deda:	460b      	mov	r3, r1
 800dedc:	f7f2 fcc6 	bl	800086c <__aeabi_ddiv>
 800dee0:	e7e6      	b.n	800deb0 <__ieee754_sqrt+0x30>
 800dee2:	1512      	asrs	r2, r2, #20
 800dee4:	d074      	beq.n	800dfd0 <__ieee754_sqrt+0x150>
 800dee6:	07d4      	lsls	r4, r2, #31
 800dee8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800deec:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800def0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800def4:	bf5e      	ittt	pl
 800def6:	0fda      	lsrpl	r2, r3, #31
 800def8:	005b      	lslpl	r3, r3, #1
 800defa:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800defe:	2400      	movs	r4, #0
 800df00:	0fda      	lsrs	r2, r3, #31
 800df02:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800df06:	107f      	asrs	r7, r7, #1
 800df08:	005b      	lsls	r3, r3, #1
 800df0a:	2516      	movs	r5, #22
 800df0c:	4620      	mov	r0, r4
 800df0e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800df12:	1886      	adds	r6, r0, r2
 800df14:	428e      	cmp	r6, r1
 800df16:	bfde      	ittt	le
 800df18:	1b89      	suble	r1, r1, r6
 800df1a:	18b0      	addle	r0, r6, r2
 800df1c:	18a4      	addle	r4, r4, r2
 800df1e:	0049      	lsls	r1, r1, #1
 800df20:	3d01      	subs	r5, #1
 800df22:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800df26:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800df2a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800df2e:	d1f0      	bne.n	800df12 <__ieee754_sqrt+0x92>
 800df30:	462a      	mov	r2, r5
 800df32:	f04f 0e20 	mov.w	lr, #32
 800df36:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800df3a:	4281      	cmp	r1, r0
 800df3c:	eb06 0c05 	add.w	ip, r6, r5
 800df40:	dc02      	bgt.n	800df48 <__ieee754_sqrt+0xc8>
 800df42:	d113      	bne.n	800df6c <__ieee754_sqrt+0xec>
 800df44:	459c      	cmp	ip, r3
 800df46:	d811      	bhi.n	800df6c <__ieee754_sqrt+0xec>
 800df48:	f1bc 0f00 	cmp.w	ip, #0
 800df4c:	eb0c 0506 	add.w	r5, ip, r6
 800df50:	da43      	bge.n	800dfda <__ieee754_sqrt+0x15a>
 800df52:	2d00      	cmp	r5, #0
 800df54:	db41      	blt.n	800dfda <__ieee754_sqrt+0x15a>
 800df56:	f100 0801 	add.w	r8, r0, #1
 800df5a:	1a09      	subs	r1, r1, r0
 800df5c:	459c      	cmp	ip, r3
 800df5e:	bf88      	it	hi
 800df60:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800df64:	eba3 030c 	sub.w	r3, r3, ip
 800df68:	4432      	add	r2, r6
 800df6a:	4640      	mov	r0, r8
 800df6c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800df70:	f1be 0e01 	subs.w	lr, lr, #1
 800df74:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800df78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800df7c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800df80:	d1db      	bne.n	800df3a <__ieee754_sqrt+0xba>
 800df82:	430b      	orrs	r3, r1
 800df84:	d006      	beq.n	800df94 <__ieee754_sqrt+0x114>
 800df86:	1c50      	adds	r0, r2, #1
 800df88:	bf13      	iteet	ne
 800df8a:	3201      	addne	r2, #1
 800df8c:	3401      	addeq	r4, #1
 800df8e:	4672      	moveq	r2, lr
 800df90:	f022 0201 	bicne.w	r2, r2, #1
 800df94:	1063      	asrs	r3, r4, #1
 800df96:	0852      	lsrs	r2, r2, #1
 800df98:	07e1      	lsls	r1, r4, #31
 800df9a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800df9e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800dfa2:	bf48      	it	mi
 800dfa4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800dfa8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800dfac:	4614      	mov	r4, r2
 800dfae:	e781      	b.n	800deb4 <__ieee754_sqrt+0x34>
 800dfb0:	0ad9      	lsrs	r1, r3, #11
 800dfb2:	3815      	subs	r0, #21
 800dfb4:	055b      	lsls	r3, r3, #21
 800dfb6:	2900      	cmp	r1, #0
 800dfb8:	d0fa      	beq.n	800dfb0 <__ieee754_sqrt+0x130>
 800dfba:	02cd      	lsls	r5, r1, #11
 800dfbc:	d50a      	bpl.n	800dfd4 <__ieee754_sqrt+0x154>
 800dfbe:	f1c2 0420 	rsb	r4, r2, #32
 800dfc2:	fa23 f404 	lsr.w	r4, r3, r4
 800dfc6:	1e55      	subs	r5, r2, #1
 800dfc8:	4093      	lsls	r3, r2
 800dfca:	4321      	orrs	r1, r4
 800dfcc:	1b42      	subs	r2, r0, r5
 800dfce:	e78a      	b.n	800dee6 <__ieee754_sqrt+0x66>
 800dfd0:	4610      	mov	r0, r2
 800dfd2:	e7f0      	b.n	800dfb6 <__ieee754_sqrt+0x136>
 800dfd4:	0049      	lsls	r1, r1, #1
 800dfd6:	3201      	adds	r2, #1
 800dfd8:	e7ef      	b.n	800dfba <__ieee754_sqrt+0x13a>
 800dfda:	4680      	mov	r8, r0
 800dfdc:	e7bd      	b.n	800df5a <__ieee754_sqrt+0xda>
 800dfde:	bf00      	nop
 800dfe0:	7ff00000 	.word	0x7ff00000
 800dfe4:	00000000 	.word	0x00000000

0800dfe8 <__kernel_cos>:
 800dfe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfec:	ec57 6b10 	vmov	r6, r7, d0
 800dff0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800dff4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800dff8:	ed8d 1b00 	vstr	d1, [sp]
 800dffc:	da07      	bge.n	800e00e <__kernel_cos+0x26>
 800dffe:	ee10 0a10 	vmov	r0, s0
 800e002:	4639      	mov	r1, r7
 800e004:	f7f2 fdb8 	bl	8000b78 <__aeabi_d2iz>
 800e008:	2800      	cmp	r0, #0
 800e00a:	f000 8088 	beq.w	800e11e <__kernel_cos+0x136>
 800e00e:	4632      	mov	r2, r6
 800e010:	463b      	mov	r3, r7
 800e012:	4630      	mov	r0, r6
 800e014:	4639      	mov	r1, r7
 800e016:	f7f2 faff 	bl	8000618 <__aeabi_dmul>
 800e01a:	4b51      	ldr	r3, [pc, #324]	; (800e160 <__kernel_cos+0x178>)
 800e01c:	2200      	movs	r2, #0
 800e01e:	4604      	mov	r4, r0
 800e020:	460d      	mov	r5, r1
 800e022:	f7f2 faf9 	bl	8000618 <__aeabi_dmul>
 800e026:	a340      	add	r3, pc, #256	; (adr r3, 800e128 <__kernel_cos+0x140>)
 800e028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e02c:	4682      	mov	sl, r0
 800e02e:	468b      	mov	fp, r1
 800e030:	4620      	mov	r0, r4
 800e032:	4629      	mov	r1, r5
 800e034:	f7f2 faf0 	bl	8000618 <__aeabi_dmul>
 800e038:	a33d      	add	r3, pc, #244	; (adr r3, 800e130 <__kernel_cos+0x148>)
 800e03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e03e:	f7f2 f935 	bl	80002ac <__adddf3>
 800e042:	4622      	mov	r2, r4
 800e044:	462b      	mov	r3, r5
 800e046:	f7f2 fae7 	bl	8000618 <__aeabi_dmul>
 800e04a:	a33b      	add	r3, pc, #236	; (adr r3, 800e138 <__kernel_cos+0x150>)
 800e04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e050:	f7f2 f92a 	bl	80002a8 <__aeabi_dsub>
 800e054:	4622      	mov	r2, r4
 800e056:	462b      	mov	r3, r5
 800e058:	f7f2 fade 	bl	8000618 <__aeabi_dmul>
 800e05c:	a338      	add	r3, pc, #224	; (adr r3, 800e140 <__kernel_cos+0x158>)
 800e05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e062:	f7f2 f923 	bl	80002ac <__adddf3>
 800e066:	4622      	mov	r2, r4
 800e068:	462b      	mov	r3, r5
 800e06a:	f7f2 fad5 	bl	8000618 <__aeabi_dmul>
 800e06e:	a336      	add	r3, pc, #216	; (adr r3, 800e148 <__kernel_cos+0x160>)
 800e070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e074:	f7f2 f918 	bl	80002a8 <__aeabi_dsub>
 800e078:	4622      	mov	r2, r4
 800e07a:	462b      	mov	r3, r5
 800e07c:	f7f2 facc 	bl	8000618 <__aeabi_dmul>
 800e080:	a333      	add	r3, pc, #204	; (adr r3, 800e150 <__kernel_cos+0x168>)
 800e082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e086:	f7f2 f911 	bl	80002ac <__adddf3>
 800e08a:	4622      	mov	r2, r4
 800e08c:	462b      	mov	r3, r5
 800e08e:	f7f2 fac3 	bl	8000618 <__aeabi_dmul>
 800e092:	4622      	mov	r2, r4
 800e094:	462b      	mov	r3, r5
 800e096:	f7f2 fabf 	bl	8000618 <__aeabi_dmul>
 800e09a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e09e:	4604      	mov	r4, r0
 800e0a0:	460d      	mov	r5, r1
 800e0a2:	4630      	mov	r0, r6
 800e0a4:	4639      	mov	r1, r7
 800e0a6:	f7f2 fab7 	bl	8000618 <__aeabi_dmul>
 800e0aa:	460b      	mov	r3, r1
 800e0ac:	4602      	mov	r2, r0
 800e0ae:	4629      	mov	r1, r5
 800e0b0:	4620      	mov	r0, r4
 800e0b2:	f7f2 f8f9 	bl	80002a8 <__aeabi_dsub>
 800e0b6:	4b2b      	ldr	r3, [pc, #172]	; (800e164 <__kernel_cos+0x17c>)
 800e0b8:	4598      	cmp	r8, r3
 800e0ba:	4606      	mov	r6, r0
 800e0bc:	460f      	mov	r7, r1
 800e0be:	dc10      	bgt.n	800e0e2 <__kernel_cos+0xfa>
 800e0c0:	4602      	mov	r2, r0
 800e0c2:	460b      	mov	r3, r1
 800e0c4:	4650      	mov	r0, sl
 800e0c6:	4659      	mov	r1, fp
 800e0c8:	f7f2 f8ee 	bl	80002a8 <__aeabi_dsub>
 800e0cc:	460b      	mov	r3, r1
 800e0ce:	4926      	ldr	r1, [pc, #152]	; (800e168 <__kernel_cos+0x180>)
 800e0d0:	4602      	mov	r2, r0
 800e0d2:	2000      	movs	r0, #0
 800e0d4:	f7f2 f8e8 	bl	80002a8 <__aeabi_dsub>
 800e0d8:	ec41 0b10 	vmov	d0, r0, r1
 800e0dc:	b003      	add	sp, #12
 800e0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0e2:	4b22      	ldr	r3, [pc, #136]	; (800e16c <__kernel_cos+0x184>)
 800e0e4:	4920      	ldr	r1, [pc, #128]	; (800e168 <__kernel_cos+0x180>)
 800e0e6:	4598      	cmp	r8, r3
 800e0e8:	bfcc      	ite	gt
 800e0ea:	4d21      	ldrgt	r5, [pc, #132]	; (800e170 <__kernel_cos+0x188>)
 800e0ec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800e0f0:	2400      	movs	r4, #0
 800e0f2:	4622      	mov	r2, r4
 800e0f4:	462b      	mov	r3, r5
 800e0f6:	2000      	movs	r0, #0
 800e0f8:	f7f2 f8d6 	bl	80002a8 <__aeabi_dsub>
 800e0fc:	4622      	mov	r2, r4
 800e0fe:	4680      	mov	r8, r0
 800e100:	4689      	mov	r9, r1
 800e102:	462b      	mov	r3, r5
 800e104:	4650      	mov	r0, sl
 800e106:	4659      	mov	r1, fp
 800e108:	f7f2 f8ce 	bl	80002a8 <__aeabi_dsub>
 800e10c:	4632      	mov	r2, r6
 800e10e:	463b      	mov	r3, r7
 800e110:	f7f2 f8ca 	bl	80002a8 <__aeabi_dsub>
 800e114:	4602      	mov	r2, r0
 800e116:	460b      	mov	r3, r1
 800e118:	4640      	mov	r0, r8
 800e11a:	4649      	mov	r1, r9
 800e11c:	e7da      	b.n	800e0d4 <__kernel_cos+0xec>
 800e11e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800e158 <__kernel_cos+0x170>
 800e122:	e7db      	b.n	800e0dc <__kernel_cos+0xf4>
 800e124:	f3af 8000 	nop.w
 800e128:	be8838d4 	.word	0xbe8838d4
 800e12c:	bda8fae9 	.word	0xbda8fae9
 800e130:	bdb4b1c4 	.word	0xbdb4b1c4
 800e134:	3e21ee9e 	.word	0x3e21ee9e
 800e138:	809c52ad 	.word	0x809c52ad
 800e13c:	3e927e4f 	.word	0x3e927e4f
 800e140:	19cb1590 	.word	0x19cb1590
 800e144:	3efa01a0 	.word	0x3efa01a0
 800e148:	16c15177 	.word	0x16c15177
 800e14c:	3f56c16c 	.word	0x3f56c16c
 800e150:	5555554c 	.word	0x5555554c
 800e154:	3fa55555 	.word	0x3fa55555
 800e158:	00000000 	.word	0x00000000
 800e15c:	3ff00000 	.word	0x3ff00000
 800e160:	3fe00000 	.word	0x3fe00000
 800e164:	3fd33332 	.word	0x3fd33332
 800e168:	3ff00000 	.word	0x3ff00000
 800e16c:	3fe90000 	.word	0x3fe90000
 800e170:	3fd20000 	.word	0x3fd20000
 800e174:	00000000 	.word	0x00000000

0800e178 <__kernel_rem_pio2>:
 800e178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e17c:	ed2d 8b02 	vpush	{d8}
 800e180:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800e184:	f112 0f14 	cmn.w	r2, #20
 800e188:	9308      	str	r3, [sp, #32]
 800e18a:	9101      	str	r1, [sp, #4]
 800e18c:	4bc4      	ldr	r3, [pc, #784]	; (800e4a0 <__kernel_rem_pio2+0x328>)
 800e18e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800e190:	900b      	str	r0, [sp, #44]	; 0x2c
 800e192:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e196:	9302      	str	r3, [sp, #8]
 800e198:	9b08      	ldr	r3, [sp, #32]
 800e19a:	f103 33ff 	add.w	r3, r3, #4294967295
 800e19e:	bfa8      	it	ge
 800e1a0:	1ed4      	subge	r4, r2, #3
 800e1a2:	9306      	str	r3, [sp, #24]
 800e1a4:	bfb2      	itee	lt
 800e1a6:	2400      	movlt	r4, #0
 800e1a8:	2318      	movge	r3, #24
 800e1aa:	fb94 f4f3 	sdivge	r4, r4, r3
 800e1ae:	f06f 0317 	mvn.w	r3, #23
 800e1b2:	fb04 3303 	mla	r3, r4, r3, r3
 800e1b6:	eb03 0a02 	add.w	sl, r3, r2
 800e1ba:	9b02      	ldr	r3, [sp, #8]
 800e1bc:	9a06      	ldr	r2, [sp, #24]
 800e1be:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800e490 <__kernel_rem_pio2+0x318>
 800e1c2:	eb03 0802 	add.w	r8, r3, r2
 800e1c6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e1c8:	1aa7      	subs	r7, r4, r2
 800e1ca:	ae22      	add	r6, sp, #136	; 0x88
 800e1cc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e1d0:	2500      	movs	r5, #0
 800e1d2:	4545      	cmp	r5, r8
 800e1d4:	dd13      	ble.n	800e1fe <__kernel_rem_pio2+0x86>
 800e1d6:	9b08      	ldr	r3, [sp, #32]
 800e1d8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800e490 <__kernel_rem_pio2+0x318>
 800e1dc:	aa22      	add	r2, sp, #136	; 0x88
 800e1de:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e1e2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800e1e6:	f04f 0800 	mov.w	r8, #0
 800e1ea:	9b02      	ldr	r3, [sp, #8]
 800e1ec:	4598      	cmp	r8, r3
 800e1ee:	dc2f      	bgt.n	800e250 <__kernel_rem_pio2+0xd8>
 800e1f0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e1f4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800e1f8:	462f      	mov	r7, r5
 800e1fa:	2600      	movs	r6, #0
 800e1fc:	e01b      	b.n	800e236 <__kernel_rem_pio2+0xbe>
 800e1fe:	42ef      	cmn	r7, r5
 800e200:	d407      	bmi.n	800e212 <__kernel_rem_pio2+0x9a>
 800e202:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e206:	f7f2 f99d 	bl	8000544 <__aeabi_i2d>
 800e20a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e20e:	3501      	adds	r5, #1
 800e210:	e7df      	b.n	800e1d2 <__kernel_rem_pio2+0x5a>
 800e212:	ec51 0b18 	vmov	r0, r1, d8
 800e216:	e7f8      	b.n	800e20a <__kernel_rem_pio2+0x92>
 800e218:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e21c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e220:	f7f2 f9fa 	bl	8000618 <__aeabi_dmul>
 800e224:	4602      	mov	r2, r0
 800e226:	460b      	mov	r3, r1
 800e228:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e22c:	f7f2 f83e 	bl	80002ac <__adddf3>
 800e230:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e234:	3601      	adds	r6, #1
 800e236:	9b06      	ldr	r3, [sp, #24]
 800e238:	429e      	cmp	r6, r3
 800e23a:	f1a7 0708 	sub.w	r7, r7, #8
 800e23e:	ddeb      	ble.n	800e218 <__kernel_rem_pio2+0xa0>
 800e240:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e244:	f108 0801 	add.w	r8, r8, #1
 800e248:	ecab 7b02 	vstmia	fp!, {d7}
 800e24c:	3508      	adds	r5, #8
 800e24e:	e7cc      	b.n	800e1ea <__kernel_rem_pio2+0x72>
 800e250:	9b02      	ldr	r3, [sp, #8]
 800e252:	aa0e      	add	r2, sp, #56	; 0x38
 800e254:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e258:	930d      	str	r3, [sp, #52]	; 0x34
 800e25a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e25c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e260:	9c02      	ldr	r4, [sp, #8]
 800e262:	930c      	str	r3, [sp, #48]	; 0x30
 800e264:	00e3      	lsls	r3, r4, #3
 800e266:	930a      	str	r3, [sp, #40]	; 0x28
 800e268:	ab9a      	add	r3, sp, #616	; 0x268
 800e26a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e26e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800e272:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800e276:	ab72      	add	r3, sp, #456	; 0x1c8
 800e278:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800e27c:	46c3      	mov	fp, r8
 800e27e:	46a1      	mov	r9, r4
 800e280:	f1b9 0f00 	cmp.w	r9, #0
 800e284:	f1a5 0508 	sub.w	r5, r5, #8
 800e288:	dc77      	bgt.n	800e37a <__kernel_rem_pio2+0x202>
 800e28a:	ec47 6b10 	vmov	d0, r6, r7
 800e28e:	4650      	mov	r0, sl
 800e290:	f000 fdae 	bl	800edf0 <scalbn>
 800e294:	ec57 6b10 	vmov	r6, r7, d0
 800e298:	2200      	movs	r2, #0
 800e29a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e29e:	ee10 0a10 	vmov	r0, s0
 800e2a2:	4639      	mov	r1, r7
 800e2a4:	f7f2 f9b8 	bl	8000618 <__aeabi_dmul>
 800e2a8:	ec41 0b10 	vmov	d0, r0, r1
 800e2ac:	f000 fd20 	bl	800ecf0 <floor>
 800e2b0:	4b7c      	ldr	r3, [pc, #496]	; (800e4a4 <__kernel_rem_pio2+0x32c>)
 800e2b2:	ec51 0b10 	vmov	r0, r1, d0
 800e2b6:	2200      	movs	r2, #0
 800e2b8:	f7f2 f9ae 	bl	8000618 <__aeabi_dmul>
 800e2bc:	4602      	mov	r2, r0
 800e2be:	460b      	mov	r3, r1
 800e2c0:	4630      	mov	r0, r6
 800e2c2:	4639      	mov	r1, r7
 800e2c4:	f7f1 fff0 	bl	80002a8 <__aeabi_dsub>
 800e2c8:	460f      	mov	r7, r1
 800e2ca:	4606      	mov	r6, r0
 800e2cc:	f7f2 fc54 	bl	8000b78 <__aeabi_d2iz>
 800e2d0:	9004      	str	r0, [sp, #16]
 800e2d2:	f7f2 f937 	bl	8000544 <__aeabi_i2d>
 800e2d6:	4602      	mov	r2, r0
 800e2d8:	460b      	mov	r3, r1
 800e2da:	4630      	mov	r0, r6
 800e2dc:	4639      	mov	r1, r7
 800e2de:	f7f1 ffe3 	bl	80002a8 <__aeabi_dsub>
 800e2e2:	f1ba 0f00 	cmp.w	sl, #0
 800e2e6:	4606      	mov	r6, r0
 800e2e8:	460f      	mov	r7, r1
 800e2ea:	dd6d      	ble.n	800e3c8 <__kernel_rem_pio2+0x250>
 800e2ec:	1e62      	subs	r2, r4, #1
 800e2ee:	ab0e      	add	r3, sp, #56	; 0x38
 800e2f0:	9d04      	ldr	r5, [sp, #16]
 800e2f2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e2f6:	f1ca 0118 	rsb	r1, sl, #24
 800e2fa:	fa40 f301 	asr.w	r3, r0, r1
 800e2fe:	441d      	add	r5, r3
 800e300:	408b      	lsls	r3, r1
 800e302:	1ac0      	subs	r0, r0, r3
 800e304:	ab0e      	add	r3, sp, #56	; 0x38
 800e306:	9504      	str	r5, [sp, #16]
 800e308:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e30c:	f1ca 0317 	rsb	r3, sl, #23
 800e310:	fa40 fb03 	asr.w	fp, r0, r3
 800e314:	f1bb 0f00 	cmp.w	fp, #0
 800e318:	dd65      	ble.n	800e3e6 <__kernel_rem_pio2+0x26e>
 800e31a:	9b04      	ldr	r3, [sp, #16]
 800e31c:	2200      	movs	r2, #0
 800e31e:	3301      	adds	r3, #1
 800e320:	9304      	str	r3, [sp, #16]
 800e322:	4615      	mov	r5, r2
 800e324:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e328:	4294      	cmp	r4, r2
 800e32a:	f300 809c 	bgt.w	800e466 <__kernel_rem_pio2+0x2ee>
 800e32e:	f1ba 0f00 	cmp.w	sl, #0
 800e332:	dd07      	ble.n	800e344 <__kernel_rem_pio2+0x1cc>
 800e334:	f1ba 0f01 	cmp.w	sl, #1
 800e338:	f000 80c0 	beq.w	800e4bc <__kernel_rem_pio2+0x344>
 800e33c:	f1ba 0f02 	cmp.w	sl, #2
 800e340:	f000 80c6 	beq.w	800e4d0 <__kernel_rem_pio2+0x358>
 800e344:	f1bb 0f02 	cmp.w	fp, #2
 800e348:	d14d      	bne.n	800e3e6 <__kernel_rem_pio2+0x26e>
 800e34a:	4632      	mov	r2, r6
 800e34c:	463b      	mov	r3, r7
 800e34e:	4956      	ldr	r1, [pc, #344]	; (800e4a8 <__kernel_rem_pio2+0x330>)
 800e350:	2000      	movs	r0, #0
 800e352:	f7f1 ffa9 	bl	80002a8 <__aeabi_dsub>
 800e356:	4606      	mov	r6, r0
 800e358:	460f      	mov	r7, r1
 800e35a:	2d00      	cmp	r5, #0
 800e35c:	d043      	beq.n	800e3e6 <__kernel_rem_pio2+0x26e>
 800e35e:	4650      	mov	r0, sl
 800e360:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800e498 <__kernel_rem_pio2+0x320>
 800e364:	f000 fd44 	bl	800edf0 <scalbn>
 800e368:	4630      	mov	r0, r6
 800e36a:	4639      	mov	r1, r7
 800e36c:	ec53 2b10 	vmov	r2, r3, d0
 800e370:	f7f1 ff9a 	bl	80002a8 <__aeabi_dsub>
 800e374:	4606      	mov	r6, r0
 800e376:	460f      	mov	r7, r1
 800e378:	e035      	b.n	800e3e6 <__kernel_rem_pio2+0x26e>
 800e37a:	4b4c      	ldr	r3, [pc, #304]	; (800e4ac <__kernel_rem_pio2+0x334>)
 800e37c:	2200      	movs	r2, #0
 800e37e:	4630      	mov	r0, r6
 800e380:	4639      	mov	r1, r7
 800e382:	f7f2 f949 	bl	8000618 <__aeabi_dmul>
 800e386:	f7f2 fbf7 	bl	8000b78 <__aeabi_d2iz>
 800e38a:	f7f2 f8db 	bl	8000544 <__aeabi_i2d>
 800e38e:	4602      	mov	r2, r0
 800e390:	460b      	mov	r3, r1
 800e392:	ec43 2b18 	vmov	d8, r2, r3
 800e396:	4b46      	ldr	r3, [pc, #280]	; (800e4b0 <__kernel_rem_pio2+0x338>)
 800e398:	2200      	movs	r2, #0
 800e39a:	f7f2 f93d 	bl	8000618 <__aeabi_dmul>
 800e39e:	4602      	mov	r2, r0
 800e3a0:	460b      	mov	r3, r1
 800e3a2:	4630      	mov	r0, r6
 800e3a4:	4639      	mov	r1, r7
 800e3a6:	f7f1 ff7f 	bl	80002a8 <__aeabi_dsub>
 800e3aa:	f7f2 fbe5 	bl	8000b78 <__aeabi_d2iz>
 800e3ae:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e3b2:	f84b 0b04 	str.w	r0, [fp], #4
 800e3b6:	ec51 0b18 	vmov	r0, r1, d8
 800e3ba:	f7f1 ff77 	bl	80002ac <__adddf3>
 800e3be:	f109 39ff 	add.w	r9, r9, #4294967295
 800e3c2:	4606      	mov	r6, r0
 800e3c4:	460f      	mov	r7, r1
 800e3c6:	e75b      	b.n	800e280 <__kernel_rem_pio2+0x108>
 800e3c8:	d106      	bne.n	800e3d8 <__kernel_rem_pio2+0x260>
 800e3ca:	1e63      	subs	r3, r4, #1
 800e3cc:	aa0e      	add	r2, sp, #56	; 0x38
 800e3ce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e3d2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800e3d6:	e79d      	b.n	800e314 <__kernel_rem_pio2+0x19c>
 800e3d8:	4b36      	ldr	r3, [pc, #216]	; (800e4b4 <__kernel_rem_pio2+0x33c>)
 800e3da:	2200      	movs	r2, #0
 800e3dc:	f7f2 fba2 	bl	8000b24 <__aeabi_dcmpge>
 800e3e0:	2800      	cmp	r0, #0
 800e3e2:	d13d      	bne.n	800e460 <__kernel_rem_pio2+0x2e8>
 800e3e4:	4683      	mov	fp, r0
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	4630      	mov	r0, r6
 800e3ec:	4639      	mov	r1, r7
 800e3ee:	f7f2 fb7b 	bl	8000ae8 <__aeabi_dcmpeq>
 800e3f2:	2800      	cmp	r0, #0
 800e3f4:	f000 80c0 	beq.w	800e578 <__kernel_rem_pio2+0x400>
 800e3f8:	1e65      	subs	r5, r4, #1
 800e3fa:	462b      	mov	r3, r5
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	9902      	ldr	r1, [sp, #8]
 800e400:	428b      	cmp	r3, r1
 800e402:	da6c      	bge.n	800e4de <__kernel_rem_pio2+0x366>
 800e404:	2a00      	cmp	r2, #0
 800e406:	f000 8089 	beq.w	800e51c <__kernel_rem_pio2+0x3a4>
 800e40a:	ab0e      	add	r3, sp, #56	; 0x38
 800e40c:	f1aa 0a18 	sub.w	sl, sl, #24
 800e410:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e414:	2b00      	cmp	r3, #0
 800e416:	f000 80ad 	beq.w	800e574 <__kernel_rem_pio2+0x3fc>
 800e41a:	4650      	mov	r0, sl
 800e41c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800e498 <__kernel_rem_pio2+0x320>
 800e420:	f000 fce6 	bl	800edf0 <scalbn>
 800e424:	ab9a      	add	r3, sp, #616	; 0x268
 800e426:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e42a:	ec57 6b10 	vmov	r6, r7, d0
 800e42e:	00ec      	lsls	r4, r5, #3
 800e430:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800e434:	46aa      	mov	sl, r5
 800e436:	f1ba 0f00 	cmp.w	sl, #0
 800e43a:	f280 80d6 	bge.w	800e5ea <__kernel_rem_pio2+0x472>
 800e43e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800e490 <__kernel_rem_pio2+0x318>
 800e442:	462e      	mov	r6, r5
 800e444:	2e00      	cmp	r6, #0
 800e446:	f2c0 8104 	blt.w	800e652 <__kernel_rem_pio2+0x4da>
 800e44a:	ab72      	add	r3, sp, #456	; 0x1c8
 800e44c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800e450:	f8df a064 	ldr.w	sl, [pc, #100]	; 800e4b8 <__kernel_rem_pio2+0x340>
 800e454:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800e458:	f04f 0800 	mov.w	r8, #0
 800e45c:	1baf      	subs	r7, r5, r6
 800e45e:	e0ea      	b.n	800e636 <__kernel_rem_pio2+0x4be>
 800e460:	f04f 0b02 	mov.w	fp, #2
 800e464:	e759      	b.n	800e31a <__kernel_rem_pio2+0x1a2>
 800e466:	f8d8 3000 	ldr.w	r3, [r8]
 800e46a:	b955      	cbnz	r5, 800e482 <__kernel_rem_pio2+0x30a>
 800e46c:	b123      	cbz	r3, 800e478 <__kernel_rem_pio2+0x300>
 800e46e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e472:	f8c8 3000 	str.w	r3, [r8]
 800e476:	2301      	movs	r3, #1
 800e478:	3201      	adds	r2, #1
 800e47a:	f108 0804 	add.w	r8, r8, #4
 800e47e:	461d      	mov	r5, r3
 800e480:	e752      	b.n	800e328 <__kernel_rem_pio2+0x1b0>
 800e482:	1acb      	subs	r3, r1, r3
 800e484:	f8c8 3000 	str.w	r3, [r8]
 800e488:	462b      	mov	r3, r5
 800e48a:	e7f5      	b.n	800e478 <__kernel_rem_pio2+0x300>
 800e48c:	f3af 8000 	nop.w
	...
 800e49c:	3ff00000 	.word	0x3ff00000
 800e4a0:	0800f648 	.word	0x0800f648
 800e4a4:	40200000 	.word	0x40200000
 800e4a8:	3ff00000 	.word	0x3ff00000
 800e4ac:	3e700000 	.word	0x3e700000
 800e4b0:	41700000 	.word	0x41700000
 800e4b4:	3fe00000 	.word	0x3fe00000
 800e4b8:	0800f608 	.word	0x0800f608
 800e4bc:	1e62      	subs	r2, r4, #1
 800e4be:	ab0e      	add	r3, sp, #56	; 0x38
 800e4c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4c4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e4c8:	a90e      	add	r1, sp, #56	; 0x38
 800e4ca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e4ce:	e739      	b.n	800e344 <__kernel_rem_pio2+0x1cc>
 800e4d0:	1e62      	subs	r2, r4, #1
 800e4d2:	ab0e      	add	r3, sp, #56	; 0x38
 800e4d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4d8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e4dc:	e7f4      	b.n	800e4c8 <__kernel_rem_pio2+0x350>
 800e4de:	a90e      	add	r1, sp, #56	; 0x38
 800e4e0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e4e4:	3b01      	subs	r3, #1
 800e4e6:	430a      	orrs	r2, r1
 800e4e8:	e789      	b.n	800e3fe <__kernel_rem_pio2+0x286>
 800e4ea:	3301      	adds	r3, #1
 800e4ec:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e4f0:	2900      	cmp	r1, #0
 800e4f2:	d0fa      	beq.n	800e4ea <__kernel_rem_pio2+0x372>
 800e4f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e4f6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800e4fa:	446a      	add	r2, sp
 800e4fc:	3a98      	subs	r2, #152	; 0x98
 800e4fe:	920a      	str	r2, [sp, #40]	; 0x28
 800e500:	9a08      	ldr	r2, [sp, #32]
 800e502:	18e3      	adds	r3, r4, r3
 800e504:	18a5      	adds	r5, r4, r2
 800e506:	aa22      	add	r2, sp, #136	; 0x88
 800e508:	f104 0801 	add.w	r8, r4, #1
 800e50c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800e510:	9304      	str	r3, [sp, #16]
 800e512:	9b04      	ldr	r3, [sp, #16]
 800e514:	4543      	cmp	r3, r8
 800e516:	da04      	bge.n	800e522 <__kernel_rem_pio2+0x3aa>
 800e518:	461c      	mov	r4, r3
 800e51a:	e6a3      	b.n	800e264 <__kernel_rem_pio2+0xec>
 800e51c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e51e:	2301      	movs	r3, #1
 800e520:	e7e4      	b.n	800e4ec <__kernel_rem_pio2+0x374>
 800e522:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e524:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e528:	f7f2 f80c 	bl	8000544 <__aeabi_i2d>
 800e52c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800e530:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e532:	46ab      	mov	fp, r5
 800e534:	461c      	mov	r4, r3
 800e536:	f04f 0900 	mov.w	r9, #0
 800e53a:	2600      	movs	r6, #0
 800e53c:	2700      	movs	r7, #0
 800e53e:	9b06      	ldr	r3, [sp, #24]
 800e540:	4599      	cmp	r9, r3
 800e542:	dd06      	ble.n	800e552 <__kernel_rem_pio2+0x3da>
 800e544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e546:	e8e3 6702 	strd	r6, r7, [r3], #8
 800e54a:	f108 0801 	add.w	r8, r8, #1
 800e54e:	930a      	str	r3, [sp, #40]	; 0x28
 800e550:	e7df      	b.n	800e512 <__kernel_rem_pio2+0x39a>
 800e552:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e556:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e55a:	f7f2 f85d 	bl	8000618 <__aeabi_dmul>
 800e55e:	4602      	mov	r2, r0
 800e560:	460b      	mov	r3, r1
 800e562:	4630      	mov	r0, r6
 800e564:	4639      	mov	r1, r7
 800e566:	f7f1 fea1 	bl	80002ac <__adddf3>
 800e56a:	f109 0901 	add.w	r9, r9, #1
 800e56e:	4606      	mov	r6, r0
 800e570:	460f      	mov	r7, r1
 800e572:	e7e4      	b.n	800e53e <__kernel_rem_pio2+0x3c6>
 800e574:	3d01      	subs	r5, #1
 800e576:	e748      	b.n	800e40a <__kernel_rem_pio2+0x292>
 800e578:	ec47 6b10 	vmov	d0, r6, r7
 800e57c:	f1ca 0000 	rsb	r0, sl, #0
 800e580:	f000 fc36 	bl	800edf0 <scalbn>
 800e584:	ec57 6b10 	vmov	r6, r7, d0
 800e588:	4ba0      	ldr	r3, [pc, #640]	; (800e80c <__kernel_rem_pio2+0x694>)
 800e58a:	ee10 0a10 	vmov	r0, s0
 800e58e:	2200      	movs	r2, #0
 800e590:	4639      	mov	r1, r7
 800e592:	f7f2 fac7 	bl	8000b24 <__aeabi_dcmpge>
 800e596:	b1f8      	cbz	r0, 800e5d8 <__kernel_rem_pio2+0x460>
 800e598:	4b9d      	ldr	r3, [pc, #628]	; (800e810 <__kernel_rem_pio2+0x698>)
 800e59a:	2200      	movs	r2, #0
 800e59c:	4630      	mov	r0, r6
 800e59e:	4639      	mov	r1, r7
 800e5a0:	f7f2 f83a 	bl	8000618 <__aeabi_dmul>
 800e5a4:	f7f2 fae8 	bl	8000b78 <__aeabi_d2iz>
 800e5a8:	4680      	mov	r8, r0
 800e5aa:	f7f1 ffcb 	bl	8000544 <__aeabi_i2d>
 800e5ae:	4b97      	ldr	r3, [pc, #604]	; (800e80c <__kernel_rem_pio2+0x694>)
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	f7f2 f831 	bl	8000618 <__aeabi_dmul>
 800e5b6:	460b      	mov	r3, r1
 800e5b8:	4602      	mov	r2, r0
 800e5ba:	4639      	mov	r1, r7
 800e5bc:	4630      	mov	r0, r6
 800e5be:	f7f1 fe73 	bl	80002a8 <__aeabi_dsub>
 800e5c2:	f7f2 fad9 	bl	8000b78 <__aeabi_d2iz>
 800e5c6:	1c65      	adds	r5, r4, #1
 800e5c8:	ab0e      	add	r3, sp, #56	; 0x38
 800e5ca:	f10a 0a18 	add.w	sl, sl, #24
 800e5ce:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e5d2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800e5d6:	e720      	b.n	800e41a <__kernel_rem_pio2+0x2a2>
 800e5d8:	4630      	mov	r0, r6
 800e5da:	4639      	mov	r1, r7
 800e5dc:	f7f2 facc 	bl	8000b78 <__aeabi_d2iz>
 800e5e0:	ab0e      	add	r3, sp, #56	; 0x38
 800e5e2:	4625      	mov	r5, r4
 800e5e4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e5e8:	e717      	b.n	800e41a <__kernel_rem_pio2+0x2a2>
 800e5ea:	ab0e      	add	r3, sp, #56	; 0x38
 800e5ec:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800e5f0:	f7f1 ffa8 	bl	8000544 <__aeabi_i2d>
 800e5f4:	4632      	mov	r2, r6
 800e5f6:	463b      	mov	r3, r7
 800e5f8:	f7f2 f80e 	bl	8000618 <__aeabi_dmul>
 800e5fc:	4b84      	ldr	r3, [pc, #528]	; (800e810 <__kernel_rem_pio2+0x698>)
 800e5fe:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800e602:	2200      	movs	r2, #0
 800e604:	4630      	mov	r0, r6
 800e606:	4639      	mov	r1, r7
 800e608:	f7f2 f806 	bl	8000618 <__aeabi_dmul>
 800e60c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e610:	4606      	mov	r6, r0
 800e612:	460f      	mov	r7, r1
 800e614:	e70f      	b.n	800e436 <__kernel_rem_pio2+0x2be>
 800e616:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800e61a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800e61e:	f7f1 fffb 	bl	8000618 <__aeabi_dmul>
 800e622:	4602      	mov	r2, r0
 800e624:	460b      	mov	r3, r1
 800e626:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e62a:	f7f1 fe3f 	bl	80002ac <__adddf3>
 800e62e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e632:	f108 0801 	add.w	r8, r8, #1
 800e636:	9b02      	ldr	r3, [sp, #8]
 800e638:	4598      	cmp	r8, r3
 800e63a:	dc01      	bgt.n	800e640 <__kernel_rem_pio2+0x4c8>
 800e63c:	45b8      	cmp	r8, r7
 800e63e:	ddea      	ble.n	800e616 <__kernel_rem_pio2+0x49e>
 800e640:	ed9d 7b06 	vldr	d7, [sp, #24]
 800e644:	ab4a      	add	r3, sp, #296	; 0x128
 800e646:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e64a:	ed87 7b00 	vstr	d7, [r7]
 800e64e:	3e01      	subs	r6, #1
 800e650:	e6f8      	b.n	800e444 <__kernel_rem_pio2+0x2cc>
 800e652:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800e654:	2b02      	cmp	r3, #2
 800e656:	dc0b      	bgt.n	800e670 <__kernel_rem_pio2+0x4f8>
 800e658:	2b00      	cmp	r3, #0
 800e65a:	dc35      	bgt.n	800e6c8 <__kernel_rem_pio2+0x550>
 800e65c:	d059      	beq.n	800e712 <__kernel_rem_pio2+0x59a>
 800e65e:	9b04      	ldr	r3, [sp, #16]
 800e660:	f003 0007 	and.w	r0, r3, #7
 800e664:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800e668:	ecbd 8b02 	vpop	{d8}
 800e66c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e670:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800e672:	2b03      	cmp	r3, #3
 800e674:	d1f3      	bne.n	800e65e <__kernel_rem_pio2+0x4e6>
 800e676:	ab4a      	add	r3, sp, #296	; 0x128
 800e678:	4423      	add	r3, r4
 800e67a:	9306      	str	r3, [sp, #24]
 800e67c:	461c      	mov	r4, r3
 800e67e:	469a      	mov	sl, r3
 800e680:	9502      	str	r5, [sp, #8]
 800e682:	9b02      	ldr	r3, [sp, #8]
 800e684:	2b00      	cmp	r3, #0
 800e686:	f1aa 0a08 	sub.w	sl, sl, #8
 800e68a:	dc6b      	bgt.n	800e764 <__kernel_rem_pio2+0x5ec>
 800e68c:	46aa      	mov	sl, r5
 800e68e:	f1ba 0f01 	cmp.w	sl, #1
 800e692:	f1a4 0408 	sub.w	r4, r4, #8
 800e696:	f300 8085 	bgt.w	800e7a4 <__kernel_rem_pio2+0x62c>
 800e69a:	9c06      	ldr	r4, [sp, #24]
 800e69c:	2000      	movs	r0, #0
 800e69e:	3408      	adds	r4, #8
 800e6a0:	2100      	movs	r1, #0
 800e6a2:	2d01      	cmp	r5, #1
 800e6a4:	f300 809d 	bgt.w	800e7e2 <__kernel_rem_pio2+0x66a>
 800e6a8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800e6ac:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800e6b0:	f1bb 0f00 	cmp.w	fp, #0
 800e6b4:	f040 809b 	bne.w	800e7ee <__kernel_rem_pio2+0x676>
 800e6b8:	9b01      	ldr	r3, [sp, #4]
 800e6ba:	e9c3 5600 	strd	r5, r6, [r3]
 800e6be:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800e6c2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e6c6:	e7ca      	b.n	800e65e <__kernel_rem_pio2+0x4e6>
 800e6c8:	3408      	adds	r4, #8
 800e6ca:	ab4a      	add	r3, sp, #296	; 0x128
 800e6cc:	441c      	add	r4, r3
 800e6ce:	462e      	mov	r6, r5
 800e6d0:	2000      	movs	r0, #0
 800e6d2:	2100      	movs	r1, #0
 800e6d4:	2e00      	cmp	r6, #0
 800e6d6:	da36      	bge.n	800e746 <__kernel_rem_pio2+0x5ce>
 800e6d8:	f1bb 0f00 	cmp.w	fp, #0
 800e6dc:	d039      	beq.n	800e752 <__kernel_rem_pio2+0x5da>
 800e6de:	4602      	mov	r2, r0
 800e6e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e6e4:	9c01      	ldr	r4, [sp, #4]
 800e6e6:	e9c4 2300 	strd	r2, r3, [r4]
 800e6ea:	4602      	mov	r2, r0
 800e6ec:	460b      	mov	r3, r1
 800e6ee:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800e6f2:	f7f1 fdd9 	bl	80002a8 <__aeabi_dsub>
 800e6f6:	ae4c      	add	r6, sp, #304	; 0x130
 800e6f8:	2401      	movs	r4, #1
 800e6fa:	42a5      	cmp	r5, r4
 800e6fc:	da2c      	bge.n	800e758 <__kernel_rem_pio2+0x5e0>
 800e6fe:	f1bb 0f00 	cmp.w	fp, #0
 800e702:	d002      	beq.n	800e70a <__kernel_rem_pio2+0x592>
 800e704:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e708:	4619      	mov	r1, r3
 800e70a:	9b01      	ldr	r3, [sp, #4]
 800e70c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e710:	e7a5      	b.n	800e65e <__kernel_rem_pio2+0x4e6>
 800e712:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800e716:	eb0d 0403 	add.w	r4, sp, r3
 800e71a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800e71e:	2000      	movs	r0, #0
 800e720:	2100      	movs	r1, #0
 800e722:	2d00      	cmp	r5, #0
 800e724:	da09      	bge.n	800e73a <__kernel_rem_pio2+0x5c2>
 800e726:	f1bb 0f00 	cmp.w	fp, #0
 800e72a:	d002      	beq.n	800e732 <__kernel_rem_pio2+0x5ba>
 800e72c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e730:	4619      	mov	r1, r3
 800e732:	9b01      	ldr	r3, [sp, #4]
 800e734:	e9c3 0100 	strd	r0, r1, [r3]
 800e738:	e791      	b.n	800e65e <__kernel_rem_pio2+0x4e6>
 800e73a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e73e:	f7f1 fdb5 	bl	80002ac <__adddf3>
 800e742:	3d01      	subs	r5, #1
 800e744:	e7ed      	b.n	800e722 <__kernel_rem_pio2+0x5aa>
 800e746:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e74a:	f7f1 fdaf 	bl	80002ac <__adddf3>
 800e74e:	3e01      	subs	r6, #1
 800e750:	e7c0      	b.n	800e6d4 <__kernel_rem_pio2+0x55c>
 800e752:	4602      	mov	r2, r0
 800e754:	460b      	mov	r3, r1
 800e756:	e7c5      	b.n	800e6e4 <__kernel_rem_pio2+0x56c>
 800e758:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800e75c:	f7f1 fda6 	bl	80002ac <__adddf3>
 800e760:	3401      	adds	r4, #1
 800e762:	e7ca      	b.n	800e6fa <__kernel_rem_pio2+0x582>
 800e764:	e9da 8900 	ldrd	r8, r9, [sl]
 800e768:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800e76c:	9b02      	ldr	r3, [sp, #8]
 800e76e:	3b01      	subs	r3, #1
 800e770:	9302      	str	r3, [sp, #8]
 800e772:	4632      	mov	r2, r6
 800e774:	463b      	mov	r3, r7
 800e776:	4640      	mov	r0, r8
 800e778:	4649      	mov	r1, r9
 800e77a:	f7f1 fd97 	bl	80002ac <__adddf3>
 800e77e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e782:	4602      	mov	r2, r0
 800e784:	460b      	mov	r3, r1
 800e786:	4640      	mov	r0, r8
 800e788:	4649      	mov	r1, r9
 800e78a:	f7f1 fd8d 	bl	80002a8 <__aeabi_dsub>
 800e78e:	4632      	mov	r2, r6
 800e790:	463b      	mov	r3, r7
 800e792:	f7f1 fd8b 	bl	80002ac <__adddf3>
 800e796:	ed9d 7b08 	vldr	d7, [sp, #32]
 800e79a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e79e:	ed8a 7b00 	vstr	d7, [sl]
 800e7a2:	e76e      	b.n	800e682 <__kernel_rem_pio2+0x50a>
 800e7a4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e7a8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800e7ac:	4640      	mov	r0, r8
 800e7ae:	4632      	mov	r2, r6
 800e7b0:	463b      	mov	r3, r7
 800e7b2:	4649      	mov	r1, r9
 800e7b4:	f7f1 fd7a 	bl	80002ac <__adddf3>
 800e7b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7bc:	4602      	mov	r2, r0
 800e7be:	460b      	mov	r3, r1
 800e7c0:	4640      	mov	r0, r8
 800e7c2:	4649      	mov	r1, r9
 800e7c4:	f7f1 fd70 	bl	80002a8 <__aeabi_dsub>
 800e7c8:	4632      	mov	r2, r6
 800e7ca:	463b      	mov	r3, r7
 800e7cc:	f7f1 fd6e 	bl	80002ac <__adddf3>
 800e7d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e7d4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e7d8:	ed84 7b00 	vstr	d7, [r4]
 800e7dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e7e0:	e755      	b.n	800e68e <__kernel_rem_pio2+0x516>
 800e7e2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e7e6:	f7f1 fd61 	bl	80002ac <__adddf3>
 800e7ea:	3d01      	subs	r5, #1
 800e7ec:	e759      	b.n	800e6a2 <__kernel_rem_pio2+0x52a>
 800e7ee:	9b01      	ldr	r3, [sp, #4]
 800e7f0:	9a01      	ldr	r2, [sp, #4]
 800e7f2:	601d      	str	r5, [r3, #0]
 800e7f4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800e7f8:	605c      	str	r4, [r3, #4]
 800e7fa:	609f      	str	r7, [r3, #8]
 800e7fc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800e800:	60d3      	str	r3, [r2, #12]
 800e802:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e806:	6110      	str	r0, [r2, #16]
 800e808:	6153      	str	r3, [r2, #20]
 800e80a:	e728      	b.n	800e65e <__kernel_rem_pio2+0x4e6>
 800e80c:	41700000 	.word	0x41700000
 800e810:	3e700000 	.word	0x3e700000
 800e814:	00000000 	.word	0x00000000

0800e818 <__kernel_sin>:
 800e818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e81c:	ed2d 8b04 	vpush	{d8-d9}
 800e820:	eeb0 8a41 	vmov.f32	s16, s2
 800e824:	eef0 8a61 	vmov.f32	s17, s3
 800e828:	ec55 4b10 	vmov	r4, r5, d0
 800e82c:	b083      	sub	sp, #12
 800e82e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e832:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e836:	9001      	str	r0, [sp, #4]
 800e838:	da06      	bge.n	800e848 <__kernel_sin+0x30>
 800e83a:	ee10 0a10 	vmov	r0, s0
 800e83e:	4629      	mov	r1, r5
 800e840:	f7f2 f99a 	bl	8000b78 <__aeabi_d2iz>
 800e844:	2800      	cmp	r0, #0
 800e846:	d051      	beq.n	800e8ec <__kernel_sin+0xd4>
 800e848:	4622      	mov	r2, r4
 800e84a:	462b      	mov	r3, r5
 800e84c:	4620      	mov	r0, r4
 800e84e:	4629      	mov	r1, r5
 800e850:	f7f1 fee2 	bl	8000618 <__aeabi_dmul>
 800e854:	4682      	mov	sl, r0
 800e856:	468b      	mov	fp, r1
 800e858:	4602      	mov	r2, r0
 800e85a:	460b      	mov	r3, r1
 800e85c:	4620      	mov	r0, r4
 800e85e:	4629      	mov	r1, r5
 800e860:	f7f1 feda 	bl	8000618 <__aeabi_dmul>
 800e864:	a341      	add	r3, pc, #260	; (adr r3, 800e96c <__kernel_sin+0x154>)
 800e866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e86a:	4680      	mov	r8, r0
 800e86c:	4689      	mov	r9, r1
 800e86e:	4650      	mov	r0, sl
 800e870:	4659      	mov	r1, fp
 800e872:	f7f1 fed1 	bl	8000618 <__aeabi_dmul>
 800e876:	a33f      	add	r3, pc, #252	; (adr r3, 800e974 <__kernel_sin+0x15c>)
 800e878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e87c:	f7f1 fd14 	bl	80002a8 <__aeabi_dsub>
 800e880:	4652      	mov	r2, sl
 800e882:	465b      	mov	r3, fp
 800e884:	f7f1 fec8 	bl	8000618 <__aeabi_dmul>
 800e888:	a33c      	add	r3, pc, #240	; (adr r3, 800e97c <__kernel_sin+0x164>)
 800e88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e88e:	f7f1 fd0d 	bl	80002ac <__adddf3>
 800e892:	4652      	mov	r2, sl
 800e894:	465b      	mov	r3, fp
 800e896:	f7f1 febf 	bl	8000618 <__aeabi_dmul>
 800e89a:	a33a      	add	r3, pc, #232	; (adr r3, 800e984 <__kernel_sin+0x16c>)
 800e89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8a0:	f7f1 fd02 	bl	80002a8 <__aeabi_dsub>
 800e8a4:	4652      	mov	r2, sl
 800e8a6:	465b      	mov	r3, fp
 800e8a8:	f7f1 feb6 	bl	8000618 <__aeabi_dmul>
 800e8ac:	a337      	add	r3, pc, #220	; (adr r3, 800e98c <__kernel_sin+0x174>)
 800e8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8b2:	f7f1 fcfb 	bl	80002ac <__adddf3>
 800e8b6:	9b01      	ldr	r3, [sp, #4]
 800e8b8:	4606      	mov	r6, r0
 800e8ba:	460f      	mov	r7, r1
 800e8bc:	b9eb      	cbnz	r3, 800e8fa <__kernel_sin+0xe2>
 800e8be:	4602      	mov	r2, r0
 800e8c0:	460b      	mov	r3, r1
 800e8c2:	4650      	mov	r0, sl
 800e8c4:	4659      	mov	r1, fp
 800e8c6:	f7f1 fea7 	bl	8000618 <__aeabi_dmul>
 800e8ca:	a325      	add	r3, pc, #148	; (adr r3, 800e960 <__kernel_sin+0x148>)
 800e8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8d0:	f7f1 fcea 	bl	80002a8 <__aeabi_dsub>
 800e8d4:	4642      	mov	r2, r8
 800e8d6:	464b      	mov	r3, r9
 800e8d8:	f7f1 fe9e 	bl	8000618 <__aeabi_dmul>
 800e8dc:	4602      	mov	r2, r0
 800e8de:	460b      	mov	r3, r1
 800e8e0:	4620      	mov	r0, r4
 800e8e2:	4629      	mov	r1, r5
 800e8e4:	f7f1 fce2 	bl	80002ac <__adddf3>
 800e8e8:	4604      	mov	r4, r0
 800e8ea:	460d      	mov	r5, r1
 800e8ec:	ec45 4b10 	vmov	d0, r4, r5
 800e8f0:	b003      	add	sp, #12
 800e8f2:	ecbd 8b04 	vpop	{d8-d9}
 800e8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8fa:	4b1b      	ldr	r3, [pc, #108]	; (800e968 <__kernel_sin+0x150>)
 800e8fc:	ec51 0b18 	vmov	r0, r1, d8
 800e900:	2200      	movs	r2, #0
 800e902:	f7f1 fe89 	bl	8000618 <__aeabi_dmul>
 800e906:	4632      	mov	r2, r6
 800e908:	ec41 0b19 	vmov	d9, r0, r1
 800e90c:	463b      	mov	r3, r7
 800e90e:	4640      	mov	r0, r8
 800e910:	4649      	mov	r1, r9
 800e912:	f7f1 fe81 	bl	8000618 <__aeabi_dmul>
 800e916:	4602      	mov	r2, r0
 800e918:	460b      	mov	r3, r1
 800e91a:	ec51 0b19 	vmov	r0, r1, d9
 800e91e:	f7f1 fcc3 	bl	80002a8 <__aeabi_dsub>
 800e922:	4652      	mov	r2, sl
 800e924:	465b      	mov	r3, fp
 800e926:	f7f1 fe77 	bl	8000618 <__aeabi_dmul>
 800e92a:	ec53 2b18 	vmov	r2, r3, d8
 800e92e:	f7f1 fcbb 	bl	80002a8 <__aeabi_dsub>
 800e932:	a30b      	add	r3, pc, #44	; (adr r3, 800e960 <__kernel_sin+0x148>)
 800e934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e938:	4606      	mov	r6, r0
 800e93a:	460f      	mov	r7, r1
 800e93c:	4640      	mov	r0, r8
 800e93e:	4649      	mov	r1, r9
 800e940:	f7f1 fe6a 	bl	8000618 <__aeabi_dmul>
 800e944:	4602      	mov	r2, r0
 800e946:	460b      	mov	r3, r1
 800e948:	4630      	mov	r0, r6
 800e94a:	4639      	mov	r1, r7
 800e94c:	f7f1 fcae 	bl	80002ac <__adddf3>
 800e950:	4602      	mov	r2, r0
 800e952:	460b      	mov	r3, r1
 800e954:	4620      	mov	r0, r4
 800e956:	4629      	mov	r1, r5
 800e958:	f7f1 fca6 	bl	80002a8 <__aeabi_dsub>
 800e95c:	e7c4      	b.n	800e8e8 <__kernel_sin+0xd0>
 800e95e:	bf00      	nop
 800e960:	55555549 	.word	0x55555549
 800e964:	3fc55555 	.word	0x3fc55555
 800e968:	3fe00000 	.word	0x3fe00000
 800e96c:	5acfd57c 	.word	0x5acfd57c
 800e970:	3de5d93a 	.word	0x3de5d93a
 800e974:	8a2b9ceb 	.word	0x8a2b9ceb
 800e978:	3e5ae5e6 	.word	0x3e5ae5e6
 800e97c:	57b1fe7d 	.word	0x57b1fe7d
 800e980:	3ec71de3 	.word	0x3ec71de3
 800e984:	19c161d5 	.word	0x19c161d5
 800e988:	3f2a01a0 	.word	0x3f2a01a0
 800e98c:	1110f8a6 	.word	0x1110f8a6
 800e990:	3f811111 	.word	0x3f811111
 800e994:	00000000 	.word	0x00000000

0800e998 <atan>:
 800e998:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e99c:	ec55 4b10 	vmov	r4, r5, d0
 800e9a0:	4bc3      	ldr	r3, [pc, #780]	; (800ecb0 <atan+0x318>)
 800e9a2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e9a6:	429e      	cmp	r6, r3
 800e9a8:	46ab      	mov	fp, r5
 800e9aa:	dd18      	ble.n	800e9de <atan+0x46>
 800e9ac:	4bc1      	ldr	r3, [pc, #772]	; (800ecb4 <atan+0x31c>)
 800e9ae:	429e      	cmp	r6, r3
 800e9b0:	dc01      	bgt.n	800e9b6 <atan+0x1e>
 800e9b2:	d109      	bne.n	800e9c8 <atan+0x30>
 800e9b4:	b144      	cbz	r4, 800e9c8 <atan+0x30>
 800e9b6:	4622      	mov	r2, r4
 800e9b8:	462b      	mov	r3, r5
 800e9ba:	4620      	mov	r0, r4
 800e9bc:	4629      	mov	r1, r5
 800e9be:	f7f1 fc75 	bl	80002ac <__adddf3>
 800e9c2:	4604      	mov	r4, r0
 800e9c4:	460d      	mov	r5, r1
 800e9c6:	e006      	b.n	800e9d6 <atan+0x3e>
 800e9c8:	f1bb 0f00 	cmp.w	fp, #0
 800e9cc:	f300 8131 	bgt.w	800ec32 <atan+0x29a>
 800e9d0:	a59b      	add	r5, pc, #620	; (adr r5, 800ec40 <atan+0x2a8>)
 800e9d2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e9d6:	ec45 4b10 	vmov	d0, r4, r5
 800e9da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9de:	4bb6      	ldr	r3, [pc, #728]	; (800ecb8 <atan+0x320>)
 800e9e0:	429e      	cmp	r6, r3
 800e9e2:	dc14      	bgt.n	800ea0e <atan+0x76>
 800e9e4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800e9e8:	429e      	cmp	r6, r3
 800e9ea:	dc0d      	bgt.n	800ea08 <atan+0x70>
 800e9ec:	a396      	add	r3, pc, #600	; (adr r3, 800ec48 <atan+0x2b0>)
 800e9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9f2:	ee10 0a10 	vmov	r0, s0
 800e9f6:	4629      	mov	r1, r5
 800e9f8:	f7f1 fc58 	bl	80002ac <__adddf3>
 800e9fc:	4baf      	ldr	r3, [pc, #700]	; (800ecbc <atan+0x324>)
 800e9fe:	2200      	movs	r2, #0
 800ea00:	f7f2 f89a 	bl	8000b38 <__aeabi_dcmpgt>
 800ea04:	2800      	cmp	r0, #0
 800ea06:	d1e6      	bne.n	800e9d6 <atan+0x3e>
 800ea08:	f04f 3aff 	mov.w	sl, #4294967295
 800ea0c:	e02b      	b.n	800ea66 <atan+0xce>
 800ea0e:	f000 f963 	bl	800ecd8 <fabs>
 800ea12:	4bab      	ldr	r3, [pc, #684]	; (800ecc0 <atan+0x328>)
 800ea14:	429e      	cmp	r6, r3
 800ea16:	ec55 4b10 	vmov	r4, r5, d0
 800ea1a:	f300 80bf 	bgt.w	800eb9c <atan+0x204>
 800ea1e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800ea22:	429e      	cmp	r6, r3
 800ea24:	f300 80a0 	bgt.w	800eb68 <atan+0x1d0>
 800ea28:	ee10 2a10 	vmov	r2, s0
 800ea2c:	ee10 0a10 	vmov	r0, s0
 800ea30:	462b      	mov	r3, r5
 800ea32:	4629      	mov	r1, r5
 800ea34:	f7f1 fc3a 	bl	80002ac <__adddf3>
 800ea38:	4ba0      	ldr	r3, [pc, #640]	; (800ecbc <atan+0x324>)
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	f7f1 fc34 	bl	80002a8 <__aeabi_dsub>
 800ea40:	2200      	movs	r2, #0
 800ea42:	4606      	mov	r6, r0
 800ea44:	460f      	mov	r7, r1
 800ea46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ea4a:	4620      	mov	r0, r4
 800ea4c:	4629      	mov	r1, r5
 800ea4e:	f7f1 fc2d 	bl	80002ac <__adddf3>
 800ea52:	4602      	mov	r2, r0
 800ea54:	460b      	mov	r3, r1
 800ea56:	4630      	mov	r0, r6
 800ea58:	4639      	mov	r1, r7
 800ea5a:	f7f1 ff07 	bl	800086c <__aeabi_ddiv>
 800ea5e:	f04f 0a00 	mov.w	sl, #0
 800ea62:	4604      	mov	r4, r0
 800ea64:	460d      	mov	r5, r1
 800ea66:	4622      	mov	r2, r4
 800ea68:	462b      	mov	r3, r5
 800ea6a:	4620      	mov	r0, r4
 800ea6c:	4629      	mov	r1, r5
 800ea6e:	f7f1 fdd3 	bl	8000618 <__aeabi_dmul>
 800ea72:	4602      	mov	r2, r0
 800ea74:	460b      	mov	r3, r1
 800ea76:	4680      	mov	r8, r0
 800ea78:	4689      	mov	r9, r1
 800ea7a:	f7f1 fdcd 	bl	8000618 <__aeabi_dmul>
 800ea7e:	a374      	add	r3, pc, #464	; (adr r3, 800ec50 <atan+0x2b8>)
 800ea80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea84:	4606      	mov	r6, r0
 800ea86:	460f      	mov	r7, r1
 800ea88:	f7f1 fdc6 	bl	8000618 <__aeabi_dmul>
 800ea8c:	a372      	add	r3, pc, #456	; (adr r3, 800ec58 <atan+0x2c0>)
 800ea8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea92:	f7f1 fc0b 	bl	80002ac <__adddf3>
 800ea96:	4632      	mov	r2, r6
 800ea98:	463b      	mov	r3, r7
 800ea9a:	f7f1 fdbd 	bl	8000618 <__aeabi_dmul>
 800ea9e:	a370      	add	r3, pc, #448	; (adr r3, 800ec60 <atan+0x2c8>)
 800eaa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa4:	f7f1 fc02 	bl	80002ac <__adddf3>
 800eaa8:	4632      	mov	r2, r6
 800eaaa:	463b      	mov	r3, r7
 800eaac:	f7f1 fdb4 	bl	8000618 <__aeabi_dmul>
 800eab0:	a36d      	add	r3, pc, #436	; (adr r3, 800ec68 <atan+0x2d0>)
 800eab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab6:	f7f1 fbf9 	bl	80002ac <__adddf3>
 800eaba:	4632      	mov	r2, r6
 800eabc:	463b      	mov	r3, r7
 800eabe:	f7f1 fdab 	bl	8000618 <__aeabi_dmul>
 800eac2:	a36b      	add	r3, pc, #428	; (adr r3, 800ec70 <atan+0x2d8>)
 800eac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac8:	f7f1 fbf0 	bl	80002ac <__adddf3>
 800eacc:	4632      	mov	r2, r6
 800eace:	463b      	mov	r3, r7
 800ead0:	f7f1 fda2 	bl	8000618 <__aeabi_dmul>
 800ead4:	a368      	add	r3, pc, #416	; (adr r3, 800ec78 <atan+0x2e0>)
 800ead6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eada:	f7f1 fbe7 	bl	80002ac <__adddf3>
 800eade:	4642      	mov	r2, r8
 800eae0:	464b      	mov	r3, r9
 800eae2:	f7f1 fd99 	bl	8000618 <__aeabi_dmul>
 800eae6:	a366      	add	r3, pc, #408	; (adr r3, 800ec80 <atan+0x2e8>)
 800eae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaec:	4680      	mov	r8, r0
 800eaee:	4689      	mov	r9, r1
 800eaf0:	4630      	mov	r0, r6
 800eaf2:	4639      	mov	r1, r7
 800eaf4:	f7f1 fd90 	bl	8000618 <__aeabi_dmul>
 800eaf8:	a363      	add	r3, pc, #396	; (adr r3, 800ec88 <atan+0x2f0>)
 800eafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eafe:	f7f1 fbd3 	bl	80002a8 <__aeabi_dsub>
 800eb02:	4632      	mov	r2, r6
 800eb04:	463b      	mov	r3, r7
 800eb06:	f7f1 fd87 	bl	8000618 <__aeabi_dmul>
 800eb0a:	a361      	add	r3, pc, #388	; (adr r3, 800ec90 <atan+0x2f8>)
 800eb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb10:	f7f1 fbca 	bl	80002a8 <__aeabi_dsub>
 800eb14:	4632      	mov	r2, r6
 800eb16:	463b      	mov	r3, r7
 800eb18:	f7f1 fd7e 	bl	8000618 <__aeabi_dmul>
 800eb1c:	a35e      	add	r3, pc, #376	; (adr r3, 800ec98 <atan+0x300>)
 800eb1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb22:	f7f1 fbc1 	bl	80002a8 <__aeabi_dsub>
 800eb26:	4632      	mov	r2, r6
 800eb28:	463b      	mov	r3, r7
 800eb2a:	f7f1 fd75 	bl	8000618 <__aeabi_dmul>
 800eb2e:	a35c      	add	r3, pc, #368	; (adr r3, 800eca0 <atan+0x308>)
 800eb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb34:	f7f1 fbb8 	bl	80002a8 <__aeabi_dsub>
 800eb38:	4632      	mov	r2, r6
 800eb3a:	463b      	mov	r3, r7
 800eb3c:	f7f1 fd6c 	bl	8000618 <__aeabi_dmul>
 800eb40:	4602      	mov	r2, r0
 800eb42:	460b      	mov	r3, r1
 800eb44:	4640      	mov	r0, r8
 800eb46:	4649      	mov	r1, r9
 800eb48:	f7f1 fbb0 	bl	80002ac <__adddf3>
 800eb4c:	4622      	mov	r2, r4
 800eb4e:	462b      	mov	r3, r5
 800eb50:	f7f1 fd62 	bl	8000618 <__aeabi_dmul>
 800eb54:	f1ba 3fff 	cmp.w	sl, #4294967295
 800eb58:	4602      	mov	r2, r0
 800eb5a:	460b      	mov	r3, r1
 800eb5c:	d14b      	bne.n	800ebf6 <atan+0x25e>
 800eb5e:	4620      	mov	r0, r4
 800eb60:	4629      	mov	r1, r5
 800eb62:	f7f1 fba1 	bl	80002a8 <__aeabi_dsub>
 800eb66:	e72c      	b.n	800e9c2 <atan+0x2a>
 800eb68:	ee10 0a10 	vmov	r0, s0
 800eb6c:	4b53      	ldr	r3, [pc, #332]	; (800ecbc <atan+0x324>)
 800eb6e:	2200      	movs	r2, #0
 800eb70:	4629      	mov	r1, r5
 800eb72:	f7f1 fb99 	bl	80002a8 <__aeabi_dsub>
 800eb76:	4b51      	ldr	r3, [pc, #324]	; (800ecbc <atan+0x324>)
 800eb78:	4606      	mov	r6, r0
 800eb7a:	460f      	mov	r7, r1
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	4620      	mov	r0, r4
 800eb80:	4629      	mov	r1, r5
 800eb82:	f7f1 fb93 	bl	80002ac <__adddf3>
 800eb86:	4602      	mov	r2, r0
 800eb88:	460b      	mov	r3, r1
 800eb8a:	4630      	mov	r0, r6
 800eb8c:	4639      	mov	r1, r7
 800eb8e:	f7f1 fe6d 	bl	800086c <__aeabi_ddiv>
 800eb92:	f04f 0a01 	mov.w	sl, #1
 800eb96:	4604      	mov	r4, r0
 800eb98:	460d      	mov	r5, r1
 800eb9a:	e764      	b.n	800ea66 <atan+0xce>
 800eb9c:	4b49      	ldr	r3, [pc, #292]	; (800ecc4 <atan+0x32c>)
 800eb9e:	429e      	cmp	r6, r3
 800eba0:	da1d      	bge.n	800ebde <atan+0x246>
 800eba2:	ee10 0a10 	vmov	r0, s0
 800eba6:	4b48      	ldr	r3, [pc, #288]	; (800ecc8 <atan+0x330>)
 800eba8:	2200      	movs	r2, #0
 800ebaa:	4629      	mov	r1, r5
 800ebac:	f7f1 fb7c 	bl	80002a8 <__aeabi_dsub>
 800ebb0:	4b45      	ldr	r3, [pc, #276]	; (800ecc8 <atan+0x330>)
 800ebb2:	4606      	mov	r6, r0
 800ebb4:	460f      	mov	r7, r1
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	4620      	mov	r0, r4
 800ebba:	4629      	mov	r1, r5
 800ebbc:	f7f1 fd2c 	bl	8000618 <__aeabi_dmul>
 800ebc0:	4b3e      	ldr	r3, [pc, #248]	; (800ecbc <atan+0x324>)
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	f7f1 fb72 	bl	80002ac <__adddf3>
 800ebc8:	4602      	mov	r2, r0
 800ebca:	460b      	mov	r3, r1
 800ebcc:	4630      	mov	r0, r6
 800ebce:	4639      	mov	r1, r7
 800ebd0:	f7f1 fe4c 	bl	800086c <__aeabi_ddiv>
 800ebd4:	f04f 0a02 	mov.w	sl, #2
 800ebd8:	4604      	mov	r4, r0
 800ebda:	460d      	mov	r5, r1
 800ebdc:	e743      	b.n	800ea66 <atan+0xce>
 800ebde:	462b      	mov	r3, r5
 800ebe0:	ee10 2a10 	vmov	r2, s0
 800ebe4:	4939      	ldr	r1, [pc, #228]	; (800eccc <atan+0x334>)
 800ebe6:	2000      	movs	r0, #0
 800ebe8:	f7f1 fe40 	bl	800086c <__aeabi_ddiv>
 800ebec:	f04f 0a03 	mov.w	sl, #3
 800ebf0:	4604      	mov	r4, r0
 800ebf2:	460d      	mov	r5, r1
 800ebf4:	e737      	b.n	800ea66 <atan+0xce>
 800ebf6:	4b36      	ldr	r3, [pc, #216]	; (800ecd0 <atan+0x338>)
 800ebf8:	4e36      	ldr	r6, [pc, #216]	; (800ecd4 <atan+0x33c>)
 800ebfa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800ebfe:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800ec02:	e9da 2300 	ldrd	r2, r3, [sl]
 800ec06:	f7f1 fb4f 	bl	80002a8 <__aeabi_dsub>
 800ec0a:	4622      	mov	r2, r4
 800ec0c:	462b      	mov	r3, r5
 800ec0e:	f7f1 fb4b 	bl	80002a8 <__aeabi_dsub>
 800ec12:	4602      	mov	r2, r0
 800ec14:	460b      	mov	r3, r1
 800ec16:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ec1a:	f7f1 fb45 	bl	80002a8 <__aeabi_dsub>
 800ec1e:	f1bb 0f00 	cmp.w	fp, #0
 800ec22:	4604      	mov	r4, r0
 800ec24:	460d      	mov	r5, r1
 800ec26:	f6bf aed6 	bge.w	800e9d6 <atan+0x3e>
 800ec2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ec2e:	461d      	mov	r5, r3
 800ec30:	e6d1      	b.n	800e9d6 <atan+0x3e>
 800ec32:	a51d      	add	r5, pc, #116	; (adr r5, 800eca8 <atan+0x310>)
 800ec34:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ec38:	e6cd      	b.n	800e9d6 <atan+0x3e>
 800ec3a:	bf00      	nop
 800ec3c:	f3af 8000 	nop.w
 800ec40:	54442d18 	.word	0x54442d18
 800ec44:	bff921fb 	.word	0xbff921fb
 800ec48:	8800759c 	.word	0x8800759c
 800ec4c:	7e37e43c 	.word	0x7e37e43c
 800ec50:	e322da11 	.word	0xe322da11
 800ec54:	3f90ad3a 	.word	0x3f90ad3a
 800ec58:	24760deb 	.word	0x24760deb
 800ec5c:	3fa97b4b 	.word	0x3fa97b4b
 800ec60:	a0d03d51 	.word	0xa0d03d51
 800ec64:	3fb10d66 	.word	0x3fb10d66
 800ec68:	c54c206e 	.word	0xc54c206e
 800ec6c:	3fb745cd 	.word	0x3fb745cd
 800ec70:	920083ff 	.word	0x920083ff
 800ec74:	3fc24924 	.word	0x3fc24924
 800ec78:	5555550d 	.word	0x5555550d
 800ec7c:	3fd55555 	.word	0x3fd55555
 800ec80:	2c6a6c2f 	.word	0x2c6a6c2f
 800ec84:	bfa2b444 	.word	0xbfa2b444
 800ec88:	52defd9a 	.word	0x52defd9a
 800ec8c:	3fadde2d 	.word	0x3fadde2d
 800ec90:	af749a6d 	.word	0xaf749a6d
 800ec94:	3fb3b0f2 	.word	0x3fb3b0f2
 800ec98:	fe231671 	.word	0xfe231671
 800ec9c:	3fbc71c6 	.word	0x3fbc71c6
 800eca0:	9998ebc4 	.word	0x9998ebc4
 800eca4:	3fc99999 	.word	0x3fc99999
 800eca8:	54442d18 	.word	0x54442d18
 800ecac:	3ff921fb 	.word	0x3ff921fb
 800ecb0:	440fffff 	.word	0x440fffff
 800ecb4:	7ff00000 	.word	0x7ff00000
 800ecb8:	3fdbffff 	.word	0x3fdbffff
 800ecbc:	3ff00000 	.word	0x3ff00000
 800ecc0:	3ff2ffff 	.word	0x3ff2ffff
 800ecc4:	40038000 	.word	0x40038000
 800ecc8:	3ff80000 	.word	0x3ff80000
 800eccc:	bff00000 	.word	0xbff00000
 800ecd0:	0800f678 	.word	0x0800f678
 800ecd4:	0800f658 	.word	0x0800f658

0800ecd8 <fabs>:
 800ecd8:	ec51 0b10 	vmov	r0, r1, d0
 800ecdc:	ee10 2a10 	vmov	r2, s0
 800ece0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ece4:	ec43 2b10 	vmov	d0, r2, r3
 800ece8:	4770      	bx	lr
 800ecea:	0000      	movs	r0, r0
 800ecec:	0000      	movs	r0, r0
	...

0800ecf0 <floor>:
 800ecf0:	ec51 0b10 	vmov	r0, r1, d0
 800ecf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecf8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ecfc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ed00:	2e13      	cmp	r6, #19
 800ed02:	ee10 5a10 	vmov	r5, s0
 800ed06:	ee10 8a10 	vmov	r8, s0
 800ed0a:	460c      	mov	r4, r1
 800ed0c:	dc32      	bgt.n	800ed74 <floor+0x84>
 800ed0e:	2e00      	cmp	r6, #0
 800ed10:	da14      	bge.n	800ed3c <floor+0x4c>
 800ed12:	a333      	add	r3, pc, #204	; (adr r3, 800ede0 <floor+0xf0>)
 800ed14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed18:	f7f1 fac8 	bl	80002ac <__adddf3>
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	2300      	movs	r3, #0
 800ed20:	f7f1 ff0a 	bl	8000b38 <__aeabi_dcmpgt>
 800ed24:	b138      	cbz	r0, 800ed36 <floor+0x46>
 800ed26:	2c00      	cmp	r4, #0
 800ed28:	da57      	bge.n	800edda <floor+0xea>
 800ed2a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ed2e:	431d      	orrs	r5, r3
 800ed30:	d001      	beq.n	800ed36 <floor+0x46>
 800ed32:	4c2d      	ldr	r4, [pc, #180]	; (800ede8 <floor+0xf8>)
 800ed34:	2500      	movs	r5, #0
 800ed36:	4621      	mov	r1, r4
 800ed38:	4628      	mov	r0, r5
 800ed3a:	e025      	b.n	800ed88 <floor+0x98>
 800ed3c:	4f2b      	ldr	r7, [pc, #172]	; (800edec <floor+0xfc>)
 800ed3e:	4137      	asrs	r7, r6
 800ed40:	ea01 0307 	and.w	r3, r1, r7
 800ed44:	4303      	orrs	r3, r0
 800ed46:	d01f      	beq.n	800ed88 <floor+0x98>
 800ed48:	a325      	add	r3, pc, #148	; (adr r3, 800ede0 <floor+0xf0>)
 800ed4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed4e:	f7f1 faad 	bl	80002ac <__adddf3>
 800ed52:	2200      	movs	r2, #0
 800ed54:	2300      	movs	r3, #0
 800ed56:	f7f1 feef 	bl	8000b38 <__aeabi_dcmpgt>
 800ed5a:	2800      	cmp	r0, #0
 800ed5c:	d0eb      	beq.n	800ed36 <floor+0x46>
 800ed5e:	2c00      	cmp	r4, #0
 800ed60:	bfbe      	ittt	lt
 800ed62:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ed66:	fa43 f606 	asrlt.w	r6, r3, r6
 800ed6a:	19a4      	addlt	r4, r4, r6
 800ed6c:	ea24 0407 	bic.w	r4, r4, r7
 800ed70:	2500      	movs	r5, #0
 800ed72:	e7e0      	b.n	800ed36 <floor+0x46>
 800ed74:	2e33      	cmp	r6, #51	; 0x33
 800ed76:	dd0b      	ble.n	800ed90 <floor+0xa0>
 800ed78:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ed7c:	d104      	bne.n	800ed88 <floor+0x98>
 800ed7e:	ee10 2a10 	vmov	r2, s0
 800ed82:	460b      	mov	r3, r1
 800ed84:	f7f1 fa92 	bl	80002ac <__adddf3>
 800ed88:	ec41 0b10 	vmov	d0, r0, r1
 800ed8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed90:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ed94:	f04f 33ff 	mov.w	r3, #4294967295
 800ed98:	fa23 f707 	lsr.w	r7, r3, r7
 800ed9c:	4207      	tst	r7, r0
 800ed9e:	d0f3      	beq.n	800ed88 <floor+0x98>
 800eda0:	a30f      	add	r3, pc, #60	; (adr r3, 800ede0 <floor+0xf0>)
 800eda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eda6:	f7f1 fa81 	bl	80002ac <__adddf3>
 800edaa:	2200      	movs	r2, #0
 800edac:	2300      	movs	r3, #0
 800edae:	f7f1 fec3 	bl	8000b38 <__aeabi_dcmpgt>
 800edb2:	2800      	cmp	r0, #0
 800edb4:	d0bf      	beq.n	800ed36 <floor+0x46>
 800edb6:	2c00      	cmp	r4, #0
 800edb8:	da02      	bge.n	800edc0 <floor+0xd0>
 800edba:	2e14      	cmp	r6, #20
 800edbc:	d103      	bne.n	800edc6 <floor+0xd6>
 800edbe:	3401      	adds	r4, #1
 800edc0:	ea25 0507 	bic.w	r5, r5, r7
 800edc4:	e7b7      	b.n	800ed36 <floor+0x46>
 800edc6:	2301      	movs	r3, #1
 800edc8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800edcc:	fa03 f606 	lsl.w	r6, r3, r6
 800edd0:	4435      	add	r5, r6
 800edd2:	4545      	cmp	r5, r8
 800edd4:	bf38      	it	cc
 800edd6:	18e4      	addcc	r4, r4, r3
 800edd8:	e7f2      	b.n	800edc0 <floor+0xd0>
 800edda:	2500      	movs	r5, #0
 800eddc:	462c      	mov	r4, r5
 800edde:	e7aa      	b.n	800ed36 <floor+0x46>
 800ede0:	8800759c 	.word	0x8800759c
 800ede4:	7e37e43c 	.word	0x7e37e43c
 800ede8:	bff00000 	.word	0xbff00000
 800edec:	000fffff 	.word	0x000fffff

0800edf0 <scalbn>:
 800edf0:	b570      	push	{r4, r5, r6, lr}
 800edf2:	ec55 4b10 	vmov	r4, r5, d0
 800edf6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800edfa:	4606      	mov	r6, r0
 800edfc:	462b      	mov	r3, r5
 800edfe:	b99a      	cbnz	r2, 800ee28 <scalbn+0x38>
 800ee00:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ee04:	4323      	orrs	r3, r4
 800ee06:	d036      	beq.n	800ee76 <scalbn+0x86>
 800ee08:	4b39      	ldr	r3, [pc, #228]	; (800eef0 <scalbn+0x100>)
 800ee0a:	4629      	mov	r1, r5
 800ee0c:	ee10 0a10 	vmov	r0, s0
 800ee10:	2200      	movs	r2, #0
 800ee12:	f7f1 fc01 	bl	8000618 <__aeabi_dmul>
 800ee16:	4b37      	ldr	r3, [pc, #220]	; (800eef4 <scalbn+0x104>)
 800ee18:	429e      	cmp	r6, r3
 800ee1a:	4604      	mov	r4, r0
 800ee1c:	460d      	mov	r5, r1
 800ee1e:	da10      	bge.n	800ee42 <scalbn+0x52>
 800ee20:	a32b      	add	r3, pc, #172	; (adr r3, 800eed0 <scalbn+0xe0>)
 800ee22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee26:	e03a      	b.n	800ee9e <scalbn+0xae>
 800ee28:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ee2c:	428a      	cmp	r2, r1
 800ee2e:	d10c      	bne.n	800ee4a <scalbn+0x5a>
 800ee30:	ee10 2a10 	vmov	r2, s0
 800ee34:	4620      	mov	r0, r4
 800ee36:	4629      	mov	r1, r5
 800ee38:	f7f1 fa38 	bl	80002ac <__adddf3>
 800ee3c:	4604      	mov	r4, r0
 800ee3e:	460d      	mov	r5, r1
 800ee40:	e019      	b.n	800ee76 <scalbn+0x86>
 800ee42:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ee46:	460b      	mov	r3, r1
 800ee48:	3a36      	subs	r2, #54	; 0x36
 800ee4a:	4432      	add	r2, r6
 800ee4c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ee50:	428a      	cmp	r2, r1
 800ee52:	dd08      	ble.n	800ee66 <scalbn+0x76>
 800ee54:	2d00      	cmp	r5, #0
 800ee56:	a120      	add	r1, pc, #128	; (adr r1, 800eed8 <scalbn+0xe8>)
 800ee58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee5c:	da1c      	bge.n	800ee98 <scalbn+0xa8>
 800ee5e:	a120      	add	r1, pc, #128	; (adr r1, 800eee0 <scalbn+0xf0>)
 800ee60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee64:	e018      	b.n	800ee98 <scalbn+0xa8>
 800ee66:	2a00      	cmp	r2, #0
 800ee68:	dd08      	ble.n	800ee7c <scalbn+0x8c>
 800ee6a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ee6e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ee72:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ee76:	ec45 4b10 	vmov	d0, r4, r5
 800ee7a:	bd70      	pop	{r4, r5, r6, pc}
 800ee7c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ee80:	da19      	bge.n	800eeb6 <scalbn+0xc6>
 800ee82:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ee86:	429e      	cmp	r6, r3
 800ee88:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ee8c:	dd0a      	ble.n	800eea4 <scalbn+0xb4>
 800ee8e:	a112      	add	r1, pc, #72	; (adr r1, 800eed8 <scalbn+0xe8>)
 800ee90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d1e2      	bne.n	800ee5e <scalbn+0x6e>
 800ee98:	a30f      	add	r3, pc, #60	; (adr r3, 800eed8 <scalbn+0xe8>)
 800ee9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee9e:	f7f1 fbbb 	bl	8000618 <__aeabi_dmul>
 800eea2:	e7cb      	b.n	800ee3c <scalbn+0x4c>
 800eea4:	a10a      	add	r1, pc, #40	; (adr r1, 800eed0 <scalbn+0xe0>)
 800eea6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d0b8      	beq.n	800ee20 <scalbn+0x30>
 800eeae:	a10e      	add	r1, pc, #56	; (adr r1, 800eee8 <scalbn+0xf8>)
 800eeb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eeb4:	e7b4      	b.n	800ee20 <scalbn+0x30>
 800eeb6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800eeba:	3236      	adds	r2, #54	; 0x36
 800eebc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800eec0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800eec4:	4620      	mov	r0, r4
 800eec6:	4b0c      	ldr	r3, [pc, #48]	; (800eef8 <scalbn+0x108>)
 800eec8:	2200      	movs	r2, #0
 800eeca:	e7e8      	b.n	800ee9e <scalbn+0xae>
 800eecc:	f3af 8000 	nop.w
 800eed0:	c2f8f359 	.word	0xc2f8f359
 800eed4:	01a56e1f 	.word	0x01a56e1f
 800eed8:	8800759c 	.word	0x8800759c
 800eedc:	7e37e43c 	.word	0x7e37e43c
 800eee0:	8800759c 	.word	0x8800759c
 800eee4:	fe37e43c 	.word	0xfe37e43c
 800eee8:	c2f8f359 	.word	0xc2f8f359
 800eeec:	81a56e1f 	.word	0x81a56e1f
 800eef0:	43500000 	.word	0x43500000
 800eef4:	ffff3cb0 	.word	0xffff3cb0
 800eef8:	3c900000 	.word	0x3c900000

0800eefc <_init>:
 800eefc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eefe:	bf00      	nop
 800ef00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef02:	bc08      	pop	{r3}
 800ef04:	469e      	mov	lr, r3
 800ef06:	4770      	bx	lr

0800ef08 <_fini>:
 800ef08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef0a:	bf00      	nop
 800ef0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef0e:	bc08      	pop	{r3}
 800ef10:	469e      	mov	lr, r3
 800ef12:	4770      	bx	lr
